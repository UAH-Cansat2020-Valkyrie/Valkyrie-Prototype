
ValkyriePrototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00802000  000039ba  00003a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  00802074  00802074  00003ac2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ac2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000578  00000000  00000000  00003b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001172f  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005fc2  00000000  00000000  00015807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000090ab  00000000  00000000  0001b7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bc0  00000000  00000000  00024874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036902  00000000  00000000  00026434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ac5  00000000  00000000  0005cd36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  00062800  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d6d3  00000000  00000000  00062cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2a c1       	rjmp	.+596    	; 0x256 <__ctors_end>
       2:	00 00       	nop
       4:	4e c1       	rjmp	.+668    	; 0x2a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c1       	rjmp	.+664    	; 0x2a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c1       	rjmp	.+660    	; 0x2a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c1       	rjmp	.+656    	; 0x2a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c1       	rjmp	.+652    	; 0x2a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c1       	rjmp	.+648    	; 0x2a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	42 c1       	rjmp	.+644    	; 0x2a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	40 c1       	rjmp	.+640    	; 0x2a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c1       	rjmp	.+636    	; 0x2a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_10>
      2c:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_11>
      30:	38 c1       	rjmp	.+624    	; 0x2a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	79 c2       	rjmp	.+1266   	; 0x528 <__vector_13>
      36:	00 00       	nop
      38:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_14>
      3c:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_15>
      40:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_16>
      44:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_17>
      48:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_18>
      4c:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__vector_19>
      50:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_20>
      54:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_21>
      58:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_22>
      5c:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_23>
      60:	20 c1       	rjmp	.+576    	; 0x2a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c1       	rjmp	.+572    	; 0x2a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	1c c1       	rjmp	.+568    	; 0x2a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1a c1       	rjmp	.+564    	; 0x2a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	18 c1       	rjmp	.+560    	; 0x2a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	16 c1       	rjmp	.+556    	; 0x2a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	14 c1       	rjmp	.+552    	; 0x2a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	12 c1       	rjmp	.+548    	; 0x2a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	10 c1       	rjmp	.+544    	; 0x2a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	0e c1       	rjmp	.+540    	; 0x2a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c c1       	rjmp	.+536    	; 0x2a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0a c1       	rjmp	.+532    	; 0x2a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	08 c1       	rjmp	.+528    	; 0x2a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	06 c1       	rjmp	.+524    	; 0x2a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	04 c1       	rjmp	.+520    	; 0x2a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c7       	rjmp	.+3850   	; 0xfa8 <__vector_39>
      9e:	00 00       	nop
      a0:	c0 c7       	rjmp	.+3968   	; 0x1022 <__vector_40>
      a2:	00 00       	nop
      a4:	fb c7       	rjmp	.+4086   	; 0x109c <__vector_41>
      a6:	00 00       	nop
      a8:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_42>
      ac:	fa c0       	rjmp	.+500    	; 0x2a2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f8 c0       	rjmp	.+496    	; 0x2a2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f6 c0       	rjmp	.+492    	; 0x2a2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	9b c2       	rjmp	.+1334   	; 0x5f0 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__vector_47>
      c0:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__vector_48>
      c4:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__vector_49>
      c8:	0c 94 27 10 	jmp	0x204e	; 0x204e <__vector_50>
      cc:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__vector_51>
      d0:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_52>
      d4:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_53>
      d8:	0c 94 07 11 	jmp	0x220e	; 0x220e <__vector_54>
      dc:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__vector_55>
      e0:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__vector_56>
      e4:	de c0       	rjmp	.+444    	; 0x2a2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	dc c0       	rjmp	.+440    	; 0x2a2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	da c0       	rjmp	.+436    	; 0x2a2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d8 c0       	rjmp	.+432    	; 0x2a2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d6 c0       	rjmp	.+428    	; 0x2a2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d4 c0       	rjmp	.+424    	; 0x2a2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d2 c0       	rjmp	.+420    	; 0x2a2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	d0 c0       	rjmp	.+416    	; 0x2a2 <__bad_interrupt>
     102:	00 00       	nop
     104:	ce c0       	rjmp	.+412    	; 0x2a2 <__bad_interrupt>
     106:	00 00       	nop
     108:	cc c0       	rjmp	.+408    	; 0x2a2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ca c0       	rjmp	.+404    	; 0x2a2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c8 c0       	rjmp	.+400    	; 0x2a2 <__bad_interrupt>
     112:	00 00       	nop
     114:	c6 c0       	rjmp	.+396    	; 0x2a2 <__bad_interrupt>
     116:	00 00       	nop
     118:	c4 c0       	rjmp	.+392    	; 0x2a2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	51 c6       	rjmp	.+3234   	; 0xdc0 <__vector_71>
     11e:	00 00       	nop
     120:	8c c6       	rjmp	.+3352   	; 0xe3a <__vector_72>
     122:	00 00       	nop
     124:	c7 c6       	rjmp	.+3470   	; 0xeb4 <__vector_73>
     126:	00 00       	nop
     128:	02 c7       	rjmp	.+3588   	; 0xf2e <__vector_74>
     12a:	00 00       	nop
     12c:	ba c0       	rjmp	.+372    	; 0x2a2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	2d c2       	rjmp	.+1114   	; 0x58c <__vector_76>
     132:	00 00       	nop
     134:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_77>
     138:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_78>
     13c:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_79>
     140:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__vector_80>
     144:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_81>
     148:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__vector_82>
     14c:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_83>
     150:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_84>
     154:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_85>
     158:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__vector_86>
     15c:	a2 c0       	rjmp	.+324    	; 0x2a2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	a0 c0       	rjmp	.+320    	; 0x2a2 <__bad_interrupt>
     162:	00 00       	nop
     164:	9e c0       	rjmp	.+316    	; 0x2a2 <__bad_interrupt>
     166:	00 00       	nop
     168:	9c c0       	rjmp	.+312    	; 0x2a2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	9a c0       	rjmp	.+308    	; 0x2a2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	98 c0       	rjmp	.+304    	; 0x2a2 <__bad_interrupt>
     172:	00 00       	nop
     174:	96 c0       	rjmp	.+300    	; 0x2a2 <__bad_interrupt>
     176:	00 00       	nop
     178:	94 c0       	rjmp	.+296    	; 0x2a2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	92 c0       	rjmp	.+292    	; 0x2a2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	90 c0       	rjmp	.+288    	; 0x2a2 <__bad_interrupt>
     182:	00 00       	nop
     184:	8e c0       	rjmp	.+284    	; 0x2a2 <__bad_interrupt>
     186:	00 00       	nop
     188:	8c c0       	rjmp	.+280    	; 0x2a2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	8a c0       	rjmp	.+276    	; 0x2a2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	88 c0       	rjmp	.+272    	; 0x2a2 <__bad_interrupt>
     192:	00 00       	nop
     194:	86 c0       	rjmp	.+268    	; 0x2a2 <__bad_interrupt>
     196:	00 00       	nop
     198:	84 c0       	rjmp	.+264    	; 0x2a2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	82 c0       	rjmp	.+260    	; 0x2a2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	80 c0       	rjmp	.+256    	; 0x2a2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7c c0       	rjmp	.+248    	; 0x2a2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c2       	rjmp	.+1190   	; 0x654 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 af 11 	jmp	0x235e	; 0x235e <__vector_108>
     1b4:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__vector_109>
     1b8:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__vector_110>
     1bc:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__vector_111>
     1c0:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__vector_112>
     1c4:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__vector_113>
     1c8:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__vector_114>
     1cc:	0c 94 37 13 	jmp	0x266e	; 0x266e <__vector_115>
     1d0:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__vector_116>
     1d4:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__vector_117>
     1d8:	64 c0       	rjmp	.+200    	; 0x2a2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	62 c0       	rjmp	.+196    	; 0x2a2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	60 c0       	rjmp	.+192    	; 0x2a2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5e c0       	rjmp	.+188    	; 0x2a2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5c c0       	rjmp	.+184    	; 0x2a2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	5a c0       	rjmp	.+180    	; 0x2a2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	58 c0       	rjmp	.+176    	; 0x2a2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	56 c0       	rjmp	.+172    	; 0x2a2 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	54 c0       	rjmp	.+168    	; 0x2a2 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <usart_init_rs232+0x156>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__ctors_end>:
     256:	11 24       	eor	r1, r1
     258:	1f be       	out	0x3f, r1	; 63
     25a:	cf ef       	ldi	r28, 0xFF	; 255
     25c:	cd bf       	out	0x3d, r28	; 61
     25e:	df e3       	ldi	r29, 0x3F	; 63
     260:	de bf       	out	0x3e, r29	; 62
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0c bf       	out	0x3c, r16	; 60
     266:	18 be       	out	0x38, r1	; 56
     268:	19 be       	out	0x39, r1	; 57
     26a:	1a be       	out	0x3a, r1	; 58
     26c:	1b be       	out	0x3b, r1	; 59

0000026e <__do_copy_data>:
     26e:	10 e2       	ldi	r17, 0x20	; 32
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b0 e2       	ldi	r27, 0x20	; 32
     274:	ea eb       	ldi	r30, 0xBA	; 186
     276:	f9 e3       	ldi	r31, 0x39	; 57
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	0b bf       	out	0x3b, r16	; 59
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x14>
     27e:	07 90       	elpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a4 37       	cpi	r26, 0x74	; 116
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0x10>
     288:	1b be       	out	0x3b, r1	; 59

0000028a <__do_clear_bss>:
     28a:	20 e2       	ldi	r18, 0x20	; 32
     28c:	a4 e7       	ldi	r26, 0x74	; 116
     28e:	b0 e2       	ldi	r27, 0x20	; 32
     290:	01 c0       	rjmp	.+2      	; 0x294 <.do_clear_bss_start>

00000292 <.do_clear_bss_loop>:
     292:	1d 92       	st	X+, r1

00000294 <.do_clear_bss_start>:
     294:	a3 3f       	cpi	r26, 0xF3	; 243
     296:	b2 07       	cpc	r27, r18
     298:	e1 f7       	brne	.-8      	; 0x292 <.do_clear_bss_loop>
     29a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <main>
     29e:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <_exit>

000002a2 <__bad_interrupt>:
     2a2:	ae ce       	rjmp	.-676    	; 0x0 <__vectors>

000002a4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	1f 92       	push	r1
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2ae:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <stdio_base>
     2b2:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <stdio_base+0x1>
     2b6:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <ptr_get>
     2ba:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <ptr_get+0x1>
     2be:	be 01       	movw	r22, r28
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	19 95       	eicall
	return c;
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c8:	08 2e       	mov	r0, r24
     2ca:	00 0c       	add	r0, r0
     2cc:	99 0b       	sbc	r25, r25
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2d6:	81 15       	cp	r24, r1
     2d8:	22 e0       	ldi	r18, 0x02	; 2
     2da:	92 07       	cpc	r25, r18
     2dc:	69 f4       	brne	.+26     	; 0x2f8 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     2de:	80 91 75 20 	lds	r24, 0x2075	; 0x802075 <adca_enable_count>
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	98 0f       	add	r25, r24
     2e6:	90 93 75 20 	sts	0x2075, r25	; 0x802075 <adca_enable_count>
     2ea:	81 11       	cpse	r24, r1
     2ec:	14 c0       	rjmp	.+40     	; 0x316 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <sysclk_enable_module>
     2f6:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2f8:	80 34       	cpi	r24, 0x40	; 64
     2fa:	92 40       	sbci	r25, 0x02	; 2
     2fc:	61 f4       	brne	.+24     	; 0x316 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     2fe:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <__data_end>
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	98 0f       	add	r25, r24
     306:	90 93 74 20 	sts	0x2074, r25	; 0x802074 <__data_end>
     30a:	81 11       	cpse	r24, r1
     30c:	04 c0       	rjmp	.+8      	; 0x316 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     30e:	62 e0       	ldi	r22, 0x02	; 2
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <sysclk_enable_module>
     316:	08 95       	ret

00000318 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     318:	81 15       	cp	r24, r1
     31a:	22 e0       	ldi	r18, 0x02	; 2
     31c:	92 07       	cpc	r25, r18
     31e:	61 f4       	brne	.+24     	; 0x338 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     320:	80 91 75 20 	lds	r24, 0x2075	; 0x802075 <adca_enable_count>
     324:	81 50       	subi	r24, 0x01	; 1
     326:	80 93 75 20 	sts	0x2075, r24	; 0x802075 <adca_enable_count>
     32a:	81 11       	cpse	r24, r1
     32c:	13 c0       	rjmp	.+38     	; 0x354 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     32e:	62 e0       	ldi	r22, 0x02	; 2
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <sysclk_disable_module>
     336:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     338:	80 34       	cpi	r24, 0x40	; 64
     33a:	92 40       	sbci	r25, 0x02	; 2
     33c:	59 f4       	brne	.+22     	; 0x354 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     33e:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <__data_end>
     342:	81 50       	subi	r24, 0x01	; 1
     344:	80 93 74 20 	sts	0x2074, r24	; 0x802074 <__data_end>
     348:	81 11       	cpse	r24, r1
     34a:	04 c0       	rjmp	.+8      	; 0x354 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     34c:	62 e0       	ldi	r22, 0x02	; 2
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <sysclk_disable_module>
     354:	08 95       	ret

00000356 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	1f 92       	push	r1
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     36a:	8f b7       	in	r24, 0x3f	; 63
     36c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     36e:	f8 94       	cli
	return flags;
     370:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     372:	c7 01       	movw	r24, r14
     374:	b0 df       	rcall	.-160    	; 0x2d6 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     376:	f7 01       	movw	r30, r14
     378:	80 81       	ld	r24, Z
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     37e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     380:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <sleepmgr_locks+0x1>
     384:	8f 3f       	cpi	r24, 0xFF	; 255
     386:	09 f4       	brne	.+2      	; 0x38a <adc_enable+0x34>
     388:	ff cf       	rjmp	.-2      	; 0x388 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     38a:	8f b7       	in	r24, 0x3f	; 63
     38c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     38e:	f8 94       	cli
	return flags;
     390:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     392:	eb ed       	ldi	r30, 0xDB	; 219
     394:	f0 e2       	ldi	r31, 0x20	; 32
     396:	81 81       	ldd	r24, Z+1	; 0x01
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     39c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	1f 92       	push	r1
     3b6:	1f 92       	push	r1
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3bc:	2f b7       	in	r18, 0x3f	; 63
     3be:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     3c0:	f8 94       	cli
	return flags;
     3c2:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 81       	ld	r18, Z
     3c8:	2e 7f       	andi	r18, 0xFE	; 254
     3ca:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     3cc:	a5 df       	rcall	.-182    	; 0x318 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ce:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     3d0:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <sleepmgr_locks+0x1>
     3d4:	81 11       	cpse	r24, r1
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <adc_disable+0x2c>
     3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <adc_disable+0x2a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3da:	8f b7       	in	r24, 0x3f	; 63
     3dc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3de:	f8 94       	cli
	return flags;
     3e0:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     3e2:	eb ed       	ldi	r30, 0xDB	; 219
     3e4:	f0 e2       	ldi	r31, 0x20	; 32
     3e6:	81 81       	ldd	r24, Z+1	; 0x01
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ec:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	08 95       	ret

000003fa <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     3fe:	e0 91 76 20 	lds	r30, 0x2076	; 0x802076 <transfer>
     402:	f0 91 77 20 	lds	r31, 0x2077	; 0x802077 <transfer+0x1>
     406:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     408:	83 ff       	sbrs	r24, 3
     40a:	08 c0       	rjmp	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     414:	86 ef       	ldi	r24, 0xF6	; 246
     416:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <transfer+0xa>
     41a:	83 c0       	rjmp	.+262    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     41c:	98 2f       	mov	r25, r24
     41e:	94 71       	andi	r25, 0x14	; 20
     420:	31 f0       	breq	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     422:	83 e0       	ldi	r24, 0x03	; 3
     424:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <transfer+0xa>
     42c:	7a c0       	rjmp	.+244    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     42e:	86 ff       	sbrs	r24, 6
     430:	43 c0       	rjmp	.+134    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     432:	c6 e7       	ldi	r28, 0x76	; 118
     434:	d0 e2       	ldi	r29, 0x20	; 32
     436:	aa 81       	ldd	r26, Y+2	; 0x02
     438:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     43a:	8c 81       	ldd	r24, Y+4	; 0x04
     43c:	9d 81       	ldd	r25, Y+5	; 0x05
     43e:	14 96       	adiw	r26, 0x04	; 4
     440:	2d 91       	ld	r18, X+
     442:	3c 91       	ld	r19, X
     444:	15 97       	sbiw	r26, 0x05	; 5
     446:	82 17       	cp	r24, r18
     448:	93 07       	cpc	r25, r19
     44a:	6c f4       	brge	.+26     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     44c:	9c 01       	movw	r18, r24
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	20 93 7a 20 	sts	0x207A, r18	; 0x80207a <transfer+0x4>
     456:	30 93 7b 20 	sts	0x207B, r19	; 0x80207b <transfer+0x5>
     45a:	a8 0f       	add	r26, r24
     45c:	b9 1f       	adc	r27, r25
     45e:	11 96       	adiw	r26, 0x01	; 1
     460:	8c 91       	ld	r24, X
     462:	87 83       	std	Z+7, r24	; 0x07
     464:	5e c0       	rjmp	.+188    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

	} else if (transfer.data_count < pkg->length) {
     466:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <transfer+0x6>
     46a:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <transfer+0x7>
     46e:	18 96       	adiw	r26, 0x08	; 8
     470:	2d 91       	ld	r18, X+
     472:	3c 91       	ld	r19, X
     474:	19 97       	sbiw	r26, 0x09	; 9
     476:	82 17       	cp	r24, r18
     478:	93 07       	cpc	r25, r19
     47a:	c8 f4       	brcc	.+50     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

		if (transfer.read) {
     47c:	20 91 7e 20 	lds	r18, 0x207E	; 0x80207e <transfer+0x8>
     480:	22 23       	and	r18, r18
     482:	21 f0       	breq	.+8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     484:	86 81       	ldd	r24, Z+6	; 0x06
     486:	81 60       	ori	r24, 0x01	; 1
     488:	86 83       	std	Z+6, r24	; 0x06
     48a:	4b c0       	rjmp	.+150    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

		} else {
			const uint8_t * const data = pkg->buffer;
     48c:	16 96       	adiw	r26, 0x06	; 6
     48e:	2d 91       	ld	r18, X+
     490:	3c 91       	ld	r19, X
     492:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     494:	ac 01       	movw	r20, r24
     496:	4f 5f       	subi	r20, 0xFF	; 255
     498:	5f 4f       	sbci	r21, 0xFF	; 255
     49a:	40 93 7c 20 	sts	0x207C, r20	; 0x80207c <transfer+0x6>
     49e:	50 93 7d 20 	sts	0x207D, r21	; 0x80207d <transfer+0x7>
     4a2:	d9 01       	movw	r26, r18
     4a4:	a8 0f       	add	r26, r24
     4a6:	b9 1f       	adc	r27, r25
     4a8:	8c 91       	ld	r24, X
     4aa:	87 83       	std	Z+7, r24	; 0x07
     4ac:	3a c0       	rjmp	.+116    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     4b2:	10 92 80 20 	sts	0x2080, r1	; 0x802080 <transfer+0xa>
     4b6:	35 c0       	rjmp	.+106    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     4b8:	88 23       	and	r24, r24
     4ba:	84 f5       	brge	.+96     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     4bc:	a6 e7       	ldi	r26, 0x76	; 118
     4be:	b0 e2       	ldi	r27, 0x20	; 32
     4c0:	12 96       	adiw	r26, 0x02	; 2
     4c2:	cd 91       	ld	r28, X+
     4c4:	dc 91       	ld	r29, X
     4c6:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     4c8:	16 96       	adiw	r26, 0x06	; 6
     4ca:	8d 91       	ld	r24, X+
     4cc:	9c 91       	ld	r25, X
     4ce:	17 97       	sbiw	r26, 0x07	; 7
     4d0:	28 85       	ldd	r18, Y+8	; 0x08
     4d2:	39 85       	ldd	r19, Y+9	; 0x09
     4d4:	82 17       	cp	r24, r18
     4d6:	93 07       	cpc	r25, r19
     4d8:	d8 f4       	brcc	.+54     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>

		uint8_t * const data = pkg->buffer;
     4da:	6e 81       	ldd	r22, Y+6	; 0x06
     4dc:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     4de:	9c 01       	movw	r18, r24
     4e0:	2f 5f       	subi	r18, 0xFF	; 255
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	20 93 7c 20 	sts	0x207C, r18	; 0x80207c <transfer+0x6>
     4e8:	30 93 7d 20 	sts	0x207D, r19	; 0x80207d <transfer+0x7>
     4ec:	47 81       	ldd	r20, Z+7	; 0x07
     4ee:	db 01       	movw	r26, r22
     4f0:	a8 0f       	add	r26, r24
     4f2:	b9 1f       	adc	r27, r25
     4f4:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     4f6:	88 85       	ldd	r24, Y+8	; 0x08
     4f8:	99 85       	ldd	r25, Y+9	; 0x09
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	18 f4       	brcc	.+6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	83 83       	std	Z+3, r24	; 0x03
     504:	0e c0       	rjmp	.+28     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     50a:	10 92 80 20 	sts	0x2080, r1	; 0x802080 <transfer+0xa>
     50e:	09 c0       	rjmp	.+18     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     514:	89 ef       	ldi	r24, 0xF9	; 249
     516:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <transfer+0xa>
     51a:	03 c0       	rjmp	.+6      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     51c:	8b ef       	ldi	r24, 0xFB	; 251
     51e:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <transfer+0xa>
	}
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     528:	1f 92       	push	r1
     52a:	0f 92       	push	r0
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	08 b6       	in	r0, 0x38	; 56
     534:	0f 92       	push	r0
     536:	18 be       	out	0x38, r1	; 56
     538:	09 b6       	in	r0, 0x39	; 57
     53a:	0f 92       	push	r0
     53c:	19 be       	out	0x39, r1	; 57
     53e:	0b b6       	in	r0, 0x3b	; 59
     540:	0f 92       	push	r0
     542:	1b be       	out	0x3b, r1	; 59
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	4f 93       	push	r20
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
     55c:	4e df       	rcall	.-356    	; 0x3fa <twim_interrupt_handler>
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0b be       	out	0x3b, r0	; 59
     57a:	0f 90       	pop	r0
     57c:	09 be       	out	0x39, r0	; 57
     57e:	0f 90       	pop	r0
     580:	08 be       	out	0x38, r0	; 56
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	08 b6       	in	r0, 0x38	; 56
     598:	0f 92       	push	r0
     59a:	18 be       	out	0x38, r1	; 56
     59c:	09 b6       	in	r0, 0x39	; 57
     59e:	0f 92       	push	r0
     5a0:	19 be       	out	0x39, r1	; 57
     5a2:	0b b6       	in	r0, 0x3b	; 59
     5a4:	0f 92       	push	r0
     5a6:	1b be       	out	0x3b, r1	; 59
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
     5c0:	1c df       	rcall	.-456    	; 0x3fa <twim_interrupt_handler>
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0b be       	out	0x3b, r0	; 59
     5de:	0f 90       	pop	r0
     5e0:	09 be       	out	0x39, r0	; 57
     5e2:	0f 90       	pop	r0
     5e4:	08 be       	out	0x38, r0	; 56
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	08 b6       	in	r0, 0x38	; 56
     5fc:	0f 92       	push	r0
     5fe:	18 be       	out	0x38, r1	; 56
     600:	09 b6       	in	r0, 0x39	; 57
     602:	0f 92       	push	r0
     604:	19 be       	out	0x39, r1	; 57
     606:	0b b6       	in	r0, 0x3b	; 59
     608:	0f 92       	push	r0
     60a:	1b be       	out	0x3b, r1	; 59
     60c:	2f 93       	push	r18
     60e:	3f 93       	push	r19
     610:	4f 93       	push	r20
     612:	5f 93       	push	r21
     614:	6f 93       	push	r22
     616:	7f 93       	push	r23
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	af 93       	push	r26
     61e:	bf 93       	push	r27
     620:	ef 93       	push	r30
     622:	ff 93       	push	r31
     624:	ea de       	rcall	.-556    	; 0x3fa <twim_interrupt_handler>
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0b be       	out	0x3b, r0	; 59
     642:	0f 90       	pop	r0
     644:	09 be       	out	0x39, r0	; 57
     646:	0f 90       	pop	r0
     648:	08 be       	out	0x38, r0	; 56
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	08 b6       	in	r0, 0x38	; 56
     660:	0f 92       	push	r0
     662:	18 be       	out	0x38, r1	; 56
     664:	09 b6       	in	r0, 0x39	; 57
     666:	0f 92       	push	r0
     668:	19 be       	out	0x39, r1	; 57
     66a:	0b b6       	in	r0, 0x3b	; 59
     66c:	0f 92       	push	r0
     66e:	1b be       	out	0x3b, r1	; 59
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
     688:	b8 de       	rcall	.-656    	; 0x3fa <twim_interrupt_handler>
     68a:	ff 91       	pop	r31
     68c:	ef 91       	pop	r30
     68e:	bf 91       	pop	r27
     690:	af 91       	pop	r26
     692:	9f 91       	pop	r25
     694:	8f 91       	pop	r24
     696:	7f 91       	pop	r23
     698:	6f 91       	pop	r22
     69a:	5f 91       	pop	r21
     69c:	4f 91       	pop	r20
     69e:	3f 91       	pop	r19
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	0b be       	out	0x3b, r0	; 59
     6a6:	0f 90       	pop	r0
     6a8:	09 be       	out	0x39, r0	; 57
     6aa:	0f 90       	pop	r0
     6ac:	08 be       	out	0x38, r0	; 56
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0
     6b4:	1f 90       	pop	r1
     6b6:	18 95       	reti

000006b8 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6b8:	fc 01       	movw	r30, r24
     6ba:	91 81       	ldd	r25, Z+1	; 0x01
     6bc:	95 ff       	sbrs	r25, 5
     6be:	fd cf       	rjmp	.-6      	; 0x6ba <usart_putchar+0x2>
     6c0:	60 83       	st	Z, r22
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	08 95       	ret

000006c8 <usart_getchar>:
     6c8:	fc 01       	movw	r30, r24
     6ca:	91 81       	ldd	r25, Z+1	; 0x01
     6cc:	99 23       	and	r25, r25
     6ce:	ec f7       	brge	.-6      	; 0x6ca <usart_getchar+0x2>
     6d0:	80 81       	ld	r24, Z
     6d2:	08 95       	ret

000006d4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     6d4:	4f 92       	push	r4
     6d6:	5f 92       	push	r5
     6d8:	6f 92       	push	r6
     6da:	7f 92       	push	r7
     6dc:	8f 92       	push	r8
     6de:	9f 92       	push	r9
     6e0:	af 92       	push	r10
     6e2:	bf 92       	push	r11
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	7c 01       	movw	r14, r24
     6f0:	4a 01       	movw	r8, r20
     6f2:	5b 01       	movw	r10, r22
     6f4:	28 01       	movw	r4, r16
     6f6:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     6f8:	fc 01       	movw	r30, r24
     6fa:	84 81       	ldd	r24, Z+4	; 0x04
     6fc:	82 ff       	sbrs	r24, 2
     6fe:	16 c0       	rjmp	.+44     	; 0x72c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     700:	d9 01       	movw	r26, r18
     702:	c8 01       	movw	r24, r16
     704:	68 94       	set
     706:	12 f8       	bld	r1, 2
     708:	b6 95       	lsr	r27
     70a:	a7 95       	ror	r26
     70c:	97 95       	ror	r25
     70e:	87 95       	ror	r24
     710:	16 94       	lsr	r1
     712:	d1 f7       	brne	.-12     	; 0x708 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     714:	b9 01       	movw	r22, r18
     716:	a8 01       	movw	r20, r16
     718:	03 2e       	mov	r0, r19
     71a:	36 e1       	ldi	r19, 0x16	; 22
     71c:	76 95       	lsr	r23
     71e:	67 95       	ror	r22
     720:	57 95       	ror	r21
     722:	47 95       	ror	r20
     724:	3a 95       	dec	r19
     726:	d1 f7       	brne	.-12     	; 0x71c <usart_set_baudrate+0x48>
     728:	30 2d       	mov	r19, r0
     72a:	15 c0       	rjmp	.+42     	; 0x756 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     72c:	d9 01       	movw	r26, r18
     72e:	c8 01       	movw	r24, r16
     730:	68 94       	set
     732:	13 f8       	bld	r1, 3
     734:	b6 95       	lsr	r27
     736:	a7 95       	ror	r26
     738:	97 95       	ror	r25
     73a:	87 95       	ror	r24
     73c:	16 94       	lsr	r1
     73e:	d1 f7       	brne	.-12     	; 0x734 <usart_set_baudrate+0x60>
		min_rate /= 2;
     740:	b9 01       	movw	r22, r18
     742:	a8 01       	movw	r20, r16
     744:	03 2e       	mov	r0, r19
     746:	37 e1       	ldi	r19, 0x17	; 23
     748:	76 95       	lsr	r23
     74a:	67 95       	ror	r22
     74c:	57 95       	ror	r21
     74e:	47 95       	ror	r20
     750:	3a 95       	dec	r19
     752:	d1 f7       	brne	.-12     	; 0x748 <usart_set_baudrate+0x74>
     754:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     756:	88 15       	cp	r24, r8
     758:	99 05       	cpc	r25, r9
     75a:	aa 05       	cpc	r26, r10
     75c:	bb 05       	cpc	r27, r11
     75e:	08 f4       	brcc	.+2      	; 0x762 <usart_set_baudrate+0x8e>
     760:	a6 c0       	rjmp	.+332    	; 0x8ae <usart_set_baudrate+0x1da>
     762:	84 16       	cp	r8, r20
     764:	95 06       	cpc	r9, r21
     766:	a6 06       	cpc	r10, r22
     768:	b7 06       	cpc	r11, r23
     76a:	08 f4       	brcc	.+2      	; 0x76e <usart_set_baudrate+0x9a>
     76c:	a2 c0       	rjmp	.+324    	; 0x8b2 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     76e:	f7 01       	movw	r30, r14
     770:	84 81       	ldd	r24, Z+4	; 0x04
     772:	82 fd       	sbrc	r24, 2
     774:	04 c0       	rjmp	.+8      	; 0x77e <usart_set_baudrate+0xaa>
		baud *= 2;
     776:	88 0c       	add	r8, r8
     778:	99 1c       	adc	r9, r9
     77a:	aa 1c       	adc	r10, r10
     77c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     77e:	c3 01       	movw	r24, r6
     780:	b2 01       	movw	r22, r4
     782:	a5 01       	movw	r20, r10
     784:	94 01       	movw	r18, r8
     786:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     78a:	2f 3f       	cpi	r18, 0xFF	; 255
     78c:	31 05       	cpc	r19, r1
     78e:	41 05       	cpc	r20, r1
     790:	51 05       	cpc	r21, r1
     792:	08 f4       	brcc	.+2      	; 0x796 <usart_set_baudrate+0xc2>
     794:	90 c0       	rjmp	.+288    	; 0x8b6 <usart_set_baudrate+0x1e2>
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	a0 e0       	ldi	r26, 0x00	; 0
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	c9 ef       	ldi	r28, 0xF9	; 249
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <usart_set_baudrate+0xd8>
     7a2:	28 17       	cp	r18, r24
     7a4:	39 07       	cpc	r19, r25
     7a6:	4a 07       	cpc	r20, r26
     7a8:	5b 07       	cpc	r21, r27
     7aa:	58 f0       	brcs	.+22     	; 0x7c2 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	aa 1f       	adc	r26, r26
     7b2:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7b4:	cd 3f       	cpi	r28, 0xFD	; 253
     7b6:	0c f4       	brge	.+2      	; 0x7ba <usart_set_baudrate+0xe6>
			limit |= 1;
     7b8:	81 60       	ori	r24, 0x01	; 1
     7ba:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7bc:	c7 30       	cpi	r28, 0x07	; 7
     7be:	89 f7       	brne	.-30     	; 0x7a2 <usart_set_baudrate+0xce>
     7c0:	4f c0       	rjmp	.+158    	; 0x860 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7c2:	cc 23       	and	r28, r28
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <usart_set_baudrate+0xf4>
     7c6:	4c c0       	rjmp	.+152    	; 0x860 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     7c8:	d5 01       	movw	r26, r10
     7ca:	c4 01       	movw	r24, r8
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	aa 1f       	adc	r26, r26
     7da:	bb 1f       	adc	r27, r27
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	aa 1f       	adc	r26, r26
     7e2:	bb 1f       	adc	r27, r27
     7e4:	48 1a       	sub	r4, r24
     7e6:	59 0a       	sbc	r5, r25
     7e8:	6a 0a       	sbc	r6, r26
     7ea:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     7ec:	ce 3f       	cpi	r28, 0xFE	; 254
     7ee:	f4 f4       	brge	.+60     	; 0x82c <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     7f0:	8d ef       	ldi	r24, 0xFD	; 253
     7f2:	9f ef       	ldi	r25, 0xFF	; 255
     7f4:	8c 1b       	sub	r24, r28
     7f6:	91 09       	sbc	r25, r1
     7f8:	c7 fd       	sbrc	r28, 7
     7fa:	93 95       	inc	r25
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <usart_set_baudrate+0x132>
     7fe:	44 0c       	add	r4, r4
     800:	55 1c       	adc	r5, r5
     802:	66 1c       	adc	r6, r6
     804:	77 1c       	adc	r7, r7
     806:	8a 95       	dec	r24
     808:	d2 f7       	brpl	.-12     	; 0x7fe <usart_set_baudrate+0x12a>
     80a:	d5 01       	movw	r26, r10
     80c:	c4 01       	movw	r24, r8
     80e:	b6 95       	lsr	r27
     810:	a7 95       	ror	r26
     812:	97 95       	ror	r25
     814:	87 95       	ror	r24
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	64 0d       	add	r22, r4
     81c:	75 1d       	adc	r23, r5
     81e:	86 1d       	adc	r24, r6
     820:	97 1d       	adc	r25, r7
     822:	a5 01       	movw	r20, r10
     824:	94 01       	movw	r18, r8
     826:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
     82a:	37 c0       	rjmp	.+110    	; 0x89a <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	8c 0f       	add	r24, r28
     830:	a5 01       	movw	r20, r10
     832:	94 01       	movw	r18, r8
     834:	04 c0       	rjmp	.+8      	; 0x83e <usart_set_baudrate+0x16a>
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	44 1f       	adc	r20, r20
     83c:	55 1f       	adc	r21, r21
     83e:	8a 95       	dec	r24
     840:	d2 f7       	brpl	.-12     	; 0x836 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     842:	da 01       	movw	r26, r20
     844:	c9 01       	movw	r24, r18
     846:	b6 95       	lsr	r27
     848:	a7 95       	ror	r26
     84a:	97 95       	ror	r25
     84c:	87 95       	ror	r24
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	64 0d       	add	r22, r4
     854:	75 1d       	adc	r23, r5
     856:	86 1d       	adc	r24, r6
     858:	97 1d       	adc	r25, r7
     85a:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
     85e:	1d c0       	rjmp	.+58     	; 0x89a <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	8c 0f       	add	r24, r28
     864:	a5 01       	movw	r20, r10
     866:	94 01       	movw	r18, r8
     868:	04 c0       	rjmp	.+8      	; 0x872 <usart_set_baudrate+0x19e>
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	44 1f       	adc	r20, r20
     870:	55 1f       	adc	r21, r21
     872:	8a 95       	dec	r24
     874:	d2 f7       	brpl	.-12     	; 0x86a <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     876:	da 01       	movw	r26, r20
     878:	c9 01       	movw	r24, r18
     87a:	b6 95       	lsr	r27
     87c:	a7 95       	ror	r26
     87e:	97 95       	ror	r25
     880:	87 95       	ror	r24
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	64 0d       	add	r22, r4
     888:	75 1d       	adc	r23, r5
     88a:	86 1d       	adc	r24, r6
     88c:	97 1d       	adc	r25, r7
     88e:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
     892:	21 50       	subi	r18, 0x01	; 1
     894:	31 09       	sbc	r19, r1
     896:	41 09       	sbc	r20, r1
     898:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     89a:	83 2f       	mov	r24, r19
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	c2 95       	swap	r28
     8a0:	c0 7f       	andi	r28, 0xF0	; 240
     8a2:	c8 2b       	or	r28, r24
     8a4:	f7 01       	movw	r30, r14
     8a6:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8a8:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	18 c0       	rjmp	.+48     	; 0x8de <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	16 c0       	rjmp	.+44     	; 0x8de <usart_set_baudrate+0x20a>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	14 c0       	rjmp	.+40     	; 0x8de <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8b6:	d5 01       	movw	r26, r10
     8b8:	c4 01       	movw	r24, r8
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	aa 1f       	adc	r26, r26
     8c0:	bb 1f       	adc	r27, r27
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	48 1a       	sub	r4, r24
     8d4:	59 0a       	sbc	r5, r25
     8d6:	6a 0a       	sbc	r6, r26
     8d8:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     8da:	c9 ef       	ldi	r28, 0xF9	; 249
     8dc:	89 cf       	rjmp	.-238    	; 0x7f0 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	08 95       	ret

000008fa <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	ec 01       	movw	r28, r24
     904:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	09 f4       	brne	.+2      	; 0x90c <usart_init_rs232+0x12>
     90a:	36 c1       	rjmp	.+620    	; 0xb78 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     90c:	80 3c       	cpi	r24, 0xC0	; 192
     90e:	91 05       	cpc	r25, r1
     910:	21 f4       	brne	.+8      	; 0x91a <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     912:	60 e1       	ldi	r22, 0x10	; 16
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	c1 d5       	rcall	.+2946   	; 0x149a <sysclk_enable_module>
     918:	2f c1       	rjmp	.+606    	; 0xb78 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     91a:	c0 34       	cpi	r28, 0x40	; 64
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	d8 07       	cpc	r29, r24
     920:	21 f4       	brne	.+8      	; 0x92a <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     922:	68 e0       	ldi	r22, 0x08	; 8
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	b9 d5       	rcall	.+2930   	; 0x149a <sysclk_enable_module>
     928:	27 c1       	rjmp	.+590    	; 0xb78 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     92a:	c1 15       	cp	r28, r1
     92c:	e4 e0       	ldi	r30, 0x04	; 4
     92e:	de 07       	cpc	r29, r30
     930:	21 f4       	brne	.+8      	; 0x93a <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     932:	64 e0       	ldi	r22, 0x04	; 4
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	b1 d5       	rcall	.+2914   	; 0x149a <sysclk_enable_module>
     938:	1f c1       	rjmp	.+574    	; 0xb78 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     93a:	c0 38       	cpi	r28, 0x80	; 128
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     940:	21 f4       	brne	.+8      	; 0x94a <usart_init_rs232+0x50>
     942:	62 e0       	ldi	r22, 0x02	; 2
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	a9 d5       	rcall	.+2898   	; 0x149a <sysclk_enable_module>
     948:	17 c1       	rjmp	.+558    	; 0xb78 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     94a:	c1 15       	cp	r28, r1
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     950:	21 f4       	brne	.+8      	; 0x95a <usart_init_rs232+0x60>
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	a1 d5       	rcall	.+2882   	; 0x149a <sysclk_enable_module>
     958:	0f c1       	rjmp	.+542    	; 0xb78 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     95a:	c0 38       	cpi	r28, 0x80	; 128
     95c:	e3 e0       	ldi	r30, 0x03	; 3
     95e:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     960:	21 f4       	brne	.+8      	; 0x96a <usart_init_rs232+0x70>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	99 d5       	rcall	.+2866   	; 0x149a <sysclk_enable_module>
     968:	07 c1       	rjmp	.+526    	; 0xb78 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     96a:	c0 39       	cpi	r28, 0x90	; 144
     96c:	f3 e0       	ldi	r31, 0x03	; 3
     96e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     970:	21 f4       	brne	.+8      	; 0x97a <usart_init_rs232+0x80>
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	91 d5       	rcall	.+2850   	; 0x149a <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     978:	ff c0       	rjmp	.+510    	; 0xb78 <usart_init_rs232+0x27e>
     97a:	c1 15       	cp	r28, r1
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     980:	21 f4       	brne	.+8      	; 0x98a <usart_init_rs232+0x90>
     982:	62 e0       	ldi	r22, 0x02	; 2
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	89 d5       	rcall	.+2834   	; 0x149a <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     988:	f7 c0       	rjmp	.+494    	; 0xb78 <usart_init_rs232+0x27e>
     98a:	c0 34       	cpi	r28, 0x40	; 64
     98c:	e2 e0       	ldi	r30, 0x02	; 2
     98e:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     990:	21 f4       	brne	.+8      	; 0x99a <usart_init_rs232+0xa0>
     992:	62 e0       	ldi	r22, 0x02	; 2
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	81 d5       	rcall	.+2818   	; 0x149a <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     998:	ef c0       	rjmp	.+478    	; 0xb78 <usart_init_rs232+0x27e>
     99a:	c1 15       	cp	r28, r1
     99c:	f3 e0       	ldi	r31, 0x03	; 3
     99e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9a0:	21 f4       	brne	.+8      	; 0x9aa <usart_init_rs232+0xb0>
     9a2:	64 e0       	ldi	r22, 0x04	; 4
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	79 d5       	rcall	.+2802   	; 0x149a <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9a8:	e7 c0       	rjmp	.+462    	; 0xb78 <usart_init_rs232+0x27e>
     9aa:	c0 32       	cpi	r28, 0x20	; 32
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9b0:	21 f4       	brne	.+8      	; 0x9ba <usart_init_rs232+0xc0>
     9b2:	64 e0       	ldi	r22, 0x04	; 4
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	71 d5       	rcall	.+2786   	; 0x149a <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9b8:	df c0       	rjmp	.+446    	; 0xb78 <usart_init_rs232+0x27e>
     9ba:	c1 15       	cp	r28, r1
     9bc:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9be:	de 07       	cpc	r29, r30
     9c0:	21 f4       	brne	.+8      	; 0x9ca <usart_init_rs232+0xd0>
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	69 d5       	rcall	.+2770   	; 0x149a <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     9c8:	d7 c0       	rjmp	.+430    	; 0xb78 <usart_init_rs232+0x27e>
     9ca:	c1 15       	cp	r28, r1
     9cc:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     9ce:	df 07       	cpc	r29, r31
     9d0:	21 f4       	brne	.+8      	; 0x9da <usart_init_rs232+0xe0>
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	84 e0       	ldi	r24, 0x04	; 4
     9d6:	61 d5       	rcall	.+2754   	; 0x149a <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     9d8:	cf c0       	rjmp	.+414    	; 0xb78 <usart_init_rs232+0x27e>
     9da:	c1 15       	cp	r28, r1
     9dc:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     9de:	d8 07       	cpc	r29, r24
     9e0:	21 f4       	brne	.+8      	; 0x9ea <usart_init_rs232+0xf0>
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	85 e0       	ldi	r24, 0x05	; 5
     9e6:	59 d5       	rcall	.+2738   	; 0x149a <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     9e8:	c7 c0       	rjmp	.+398    	; 0xb78 <usart_init_rs232+0x27e>
     9ea:	c1 15       	cp	r28, r1
     9ec:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     9ee:	de 07       	cpc	r29, r30
     9f0:	21 f4       	brne	.+8      	; 0x9fa <usart_init_rs232+0x100>
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     9f6:	51 d5       	rcall	.+2722   	; 0x149a <sysclk_enable_module>
     9f8:	bf c0       	rjmp	.+382    	; 0xb78 <usart_init_rs232+0x27e>
     9fa:	c0 34       	cpi	r28, 0x40	; 64
     9fc:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     9fe:	df 07       	cpc	r29, r31
     a00:	21 f4       	brne	.+8      	; 0xa0a <usart_init_rs232+0x110>
     a02:	62 e0       	ldi	r22, 0x02	; 2
     a04:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a06:	49 d5       	rcall	.+2706   	; 0x149a <sysclk_enable_module>
     a08:	b7 c0       	rjmp	.+366    	; 0xb78 <usart_init_rs232+0x27e>
     a0a:	c0 34       	cpi	r28, 0x40	; 64
     a0c:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a0e:	d8 07       	cpc	r29, r24
     a10:	21 f4       	brne	.+8      	; 0xa1a <usart_init_rs232+0x120>
     a12:	62 e0       	ldi	r22, 0x02	; 2
     a14:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a16:	41 d5       	rcall	.+2690   	; 0x149a <sysclk_enable_module>
     a18:	af c0       	rjmp	.+350    	; 0xb78 <usart_init_rs232+0x27e>
     a1a:	c0 34       	cpi	r28, 0x40	; 64
     a1c:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a1e:	de 07       	cpc	r29, r30
     a20:	21 f4       	brne	.+8      	; 0xa2a <usart_init_rs232+0x130>
     a22:	62 e0       	ldi	r22, 0x02	; 2
     a24:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a26:	39 d5       	rcall	.+2674   	; 0x149a <sysclk_enable_module>
     a28:	a7 c0       	rjmp	.+334    	; 0xb78 <usart_init_rs232+0x27e>
     a2a:	c0 34       	cpi	r28, 0x40	; 64
     a2c:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a2e:	df 07       	cpc	r29, r31
     a30:	21 f4       	brne	.+8      	; 0xa3a <usart_init_rs232+0x140>
     a32:	62 e0       	ldi	r22, 0x02	; 2
     a34:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a36:	31 d5       	rcall	.+2658   	; 0x149a <sysclk_enable_module>
     a38:	9f c0       	rjmp	.+318    	; 0xb78 <usart_init_rs232+0x27e>
     a3a:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a3c:	88 e0       	ldi	r24, 0x08	; 8
     a3e:	d8 07       	cpc	r29, r24
     a40:	21 f4       	brne	.+8      	; 0xa4a <usart_init_rs232+0x150>
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a46:	29 d5       	rcall	.+2642   	; 0x149a <sysclk_enable_module>
     a48:	97 c0       	rjmp	.+302    	; 0xb78 <usart_init_rs232+0x27e>
     a4a:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a4c:	e9 e0       	ldi	r30, 0x09	; 9
     a4e:	de 07       	cpc	r29, r30
     a50:	21 f4       	brne	.+8      	; 0xa5a <usart_init_rs232+0x160>
     a52:	64 e0       	ldi	r22, 0x04	; 4
     a54:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a56:	21 d5       	rcall	.+2626   	; 0x149a <sysclk_enable_module>
     a58:	8f c0       	rjmp	.+286    	; 0xb78 <usart_init_rs232+0x27e>
     a5a:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a5c:	fa e0       	ldi	r31, 0x0A	; 10
     a5e:	df 07       	cpc	r29, r31
     a60:	21 f4       	brne	.+8      	; 0xa6a <usart_init_rs232+0x170>
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     a66:	19 d5       	rcall	.+2610   	; 0x149a <sysclk_enable_module>
     a68:	87 c0       	rjmp	.+270    	; 0xb78 <usart_init_rs232+0x27e>
     a6a:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     a6c:	8b e0       	ldi	r24, 0x0B	; 11
     a6e:	d8 07       	cpc	r29, r24
     a70:	21 f4       	brne	.+8      	; 0xa7a <usart_init_rs232+0x180>
     a72:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	11 d5       	rcall	.+2594   	; 0x149a <sysclk_enable_module>
     a78:	7f c0       	rjmp	.+254    	; 0xb78 <usart_init_rs232+0x27e>
     a7a:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     a7c:	e8 e0       	ldi	r30, 0x08	; 8
     a7e:	de 07       	cpc	r29, r30
     a80:	21 f4       	brne	.+8      	; 0xa8a <usart_init_rs232+0x190>
     a82:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	09 d5       	rcall	.+2578   	; 0x149a <sysclk_enable_module>
     a88:	77 c0       	rjmp	.+238    	; 0xb78 <usart_init_rs232+0x27e>
     a8a:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     a8c:	f9 e0       	ldi	r31, 0x09	; 9
     a8e:	df 07       	cpc	r29, r31
     a90:	21 f4       	brne	.+8      	; 0xa9a <usart_init_rs232+0x1a0>
     a92:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     a94:	84 e0       	ldi	r24, 0x04	; 4
     a96:	01 d5       	rcall	.+2562   	; 0x149a <sysclk_enable_module>
     a98:	6f c0       	rjmp	.+222    	; 0xb78 <usart_init_rs232+0x27e>
     a9a:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     a9c:	8a e0       	ldi	r24, 0x0A	; 10
     a9e:	d8 07       	cpc	r29, r24
     aa0:	21 f4       	brne	.+8      	; 0xaaa <usart_init_rs232+0x1b0>
     aa2:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     aa4:	85 e0       	ldi	r24, 0x05	; 5
     aa6:	f9 d4       	rcall	.+2546   	; 0x149a <sysclk_enable_module>
     aa8:	67 c0       	rjmp	.+206    	; 0xb78 <usart_init_rs232+0x27e>
     aaa:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     aac:	eb e0       	ldi	r30, 0x0B	; 11
     aae:	de 07       	cpc	r29, r30
     ab0:	21 f4       	brne	.+8      	; 0xaba <usart_init_rs232+0x1c0>
     ab2:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     ab4:	86 e0       	ldi	r24, 0x06	; 6
     ab6:	f1 d4       	rcall	.+2530   	; 0x149a <sysclk_enable_module>
     ab8:	5f c0       	rjmp	.+190    	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     aba:	c0 3a       	cpi	r28, 0xA0	; 160
     abc:	f8 e0       	ldi	r31, 0x08	; 8
     abe:	df 07       	cpc	r29, r31
     ac0:	21 f4       	brne	.+8      	; 0xaca <usart_init_rs232+0x1d0>
     ac2:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	e9 d4       	rcall	.+2514   	; 0x149a <sysclk_enable_module>
     ac8:	57 c0       	rjmp	.+174    	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     aca:	c0 3a       	cpi	r28, 0xA0	; 160
     acc:	89 e0       	ldi	r24, 0x09	; 9
     ace:	d8 07       	cpc	r29, r24
     ad0:	21 f4       	brne	.+8      	; 0xada <usart_init_rs232+0x1e0>
     ad2:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	e1 d4       	rcall	.+2498   	; 0x149a <sysclk_enable_module>
     ad8:	4f c0       	rjmp	.+158    	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ada:	c0 3a       	cpi	r28, 0xA0	; 160
     adc:	ea e0       	ldi	r30, 0x0A	; 10
     ade:	de 07       	cpc	r29, r30
     ae0:	21 f4       	brne	.+8      	; 0xaea <usart_init_rs232+0x1f0>
     ae2:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     ae4:	85 e0       	ldi	r24, 0x05	; 5
     ae6:	d9 d4       	rcall	.+2482   	; 0x149a <sysclk_enable_module>
     ae8:	47 c0       	rjmp	.+142    	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     aea:	c0 3a       	cpi	r28, 0xA0	; 160
     aec:	fb e0       	ldi	r31, 0x0B	; 11
     aee:	df 07       	cpc	r29, r31
     af0:	21 f4       	brne	.+8      	; 0xafa <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     af2:	60 e1       	ldi	r22, 0x10	; 16
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	d1 d4       	rcall	.+2466   	; 0x149a <sysclk_enable_module>
     af8:	3f c0       	rjmp	.+126    	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     afa:	c0 3b       	cpi	r28, 0xB0	; 176
     afc:	88 e0       	ldi	r24, 0x08	; 8
     afe:	d8 07       	cpc	r29, r24
     b00:	21 f4       	brne	.+8      	; 0xb0a <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b02:	60 e2       	ldi	r22, 0x20	; 32
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	c9 d4       	rcall	.+2450   	; 0x149a <sysclk_enable_module>
     b08:	37 c0       	rjmp	.+110    	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b0a:	c0 3b       	cpi	r28, 0xB0	; 176
     b0c:	e9 e0       	ldi	r30, 0x09	; 9
     b0e:	de 07       	cpc	r29, r30
     b10:	21 f4       	brne	.+8      	; 0xb1a <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b12:	60 e2       	ldi	r22, 0x20	; 32
     b14:	84 e0       	ldi	r24, 0x04	; 4
     b16:	c1 d4       	rcall	.+2434   	; 0x149a <sysclk_enable_module>
     b18:	2f c0       	rjmp	.+94     	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b1a:	c0 3b       	cpi	r28, 0xB0	; 176
     b1c:	fa e0       	ldi	r31, 0x0A	; 10
     b1e:	df 07       	cpc	r29, r31
     b20:	21 f4       	brne	.+8      	; 0xb2a <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b22:	60 e2       	ldi	r22, 0x20	; 32
     b24:	85 e0       	ldi	r24, 0x05	; 5
     b26:	b9 d4       	rcall	.+2418   	; 0x149a <sysclk_enable_module>
     b28:	27 c0       	rjmp	.+78     	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b2a:	c0 3b       	cpi	r28, 0xB0	; 176
     b2c:	8b e0       	ldi	r24, 0x0B	; 11
     b2e:	d8 07       	cpc	r29, r24
     b30:	21 f4       	brne	.+8      	; 0xb3a <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b32:	60 e2       	ldi	r22, 0x20	; 32
     b34:	86 e0       	ldi	r24, 0x06	; 6
     b36:	b1 d4       	rcall	.+2402   	; 0x149a <sysclk_enable_module>
     b38:	1f c0       	rjmp	.+62     	; 0xb78 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b3a:	c0 38       	cpi	r28, 0x80	; 128
     b3c:	e4 e0       	ldi	r30, 0x04	; 4
     b3e:	de 07       	cpc	r29, r30
     b40:	21 f4       	brne	.+8      	; 0xb4a <usart_init_rs232+0x250>
     b42:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	a9 d4       	rcall	.+2386   	; 0x149a <sysclk_enable_module>
     b48:	17 c0       	rjmp	.+46     	; 0xb78 <usart_init_rs232+0x27e>
     b4a:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b4c:	f4 e0       	ldi	r31, 0x04	; 4
     b4e:	df 07       	cpc	r29, r31
     b50:	21 f4       	brne	.+8      	; 0xb5a <usart_init_rs232+0x260>
     b52:	60 e4       	ldi	r22, 0x40	; 64
     b54:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b56:	a1 d4       	rcall	.+2370   	; 0x149a <sysclk_enable_module>
     b58:	0f c0       	rjmp	.+30     	; 0xb78 <usart_init_rs232+0x27e>
     b5a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	d8 07       	cpc	r29, r24
     b60:	21 f4       	brne	.+8      	; 0xb6a <usart_init_rs232+0x270>
     b62:	60 e4       	ldi	r22, 0x40	; 64
     b64:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     b66:	99 d4       	rcall	.+2354   	; 0x149a <sysclk_enable_module>
     b68:	07 c0       	rjmp	.+14     	; 0xb78 <usart_init_rs232+0x27e>
     b6a:	c0 3b       	cpi	r28, 0xB0	; 176
     b6c:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     b6e:	de 07       	cpc	r29, r30
     b70:	19 f4       	brne	.+6      	; 0xb78 <usart_init_rs232+0x27e>
     b72:	60 e4       	ldi	r22, 0x40	; 64
     b74:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     b76:	91 d4       	rcall	.+2338   	; 0x149a <sysclk_enable_module>
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     b7c:	8d 83       	std	Y+5, r24	; 0x05
     b7e:	f8 01       	movw	r30, r16
     b80:	95 81       	ldd	r25, Z+5	; 0x05
     b82:	84 81       	ldd	r24, Z+4	; 0x04
     b84:	89 2b       	or	r24, r25
     b86:	96 81       	ldd	r25, Z+6	; 0x06
     b88:	91 11       	cpse	r25, r1
     b8a:	98 e0       	ldi	r25, 0x08	; 8
     b8c:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     b8e:	8d 83       	std	Y+5, r24	; 0x05
     b90:	f8 01       	movw	r30, r16
     b92:	40 81       	ld	r20, Z
     b94:	51 81       	ldd	r21, Z+1	; 0x01
     b96:	62 81       	ldd	r22, Z+2	; 0x02
     b98:	73 81       	ldd	r23, Z+3	; 0x03
     b9a:	00 e0       	ldi	r16, 0x00	; 0
     b9c:	18 e4       	ldi	r17, 0x48	; 72
     b9e:	28 ee       	ldi	r18, 0xE8	; 232
     ba0:	31 e0       	ldi	r19, 0x01	; 1
     ba2:	ce 01       	movw	r24, r28
     ba4:	97 dd       	rcall	.-1234   	; 0x6d4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	98 60       	ori	r25, 0x08	; 8
     baa:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	90 61       	ori	r25, 0x10	; 16
     bb0:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask, uint8_t pos)
{
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	2b 97       	sbiw	r28, 0x0b	; 11
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	7c 01       	movw	r14, r24
     bd4:	06 2f       	mov	r16, r22
     bd6:	14 2f       	mov	r17, r20
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
     bd8:	be 01       	movw	r22, r28
     bda:	6f 5f       	subi	r22, 0xFF	; 255
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	42 d3       	rcall	.+1668   	; 0x1264 <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
     be0:	ae 01       	movw	r20, r28
     be2:	48 5f       	subi	r20, 0xF8	; 248
     be4:	5f 4f       	sbci	r21, 0xFF	; 255
     be6:	60 2f       	mov	r22, r16
     be8:	c7 01       	movw	r24, r14
     bea:	c2 d3       	rcall	.+1924   	; 0x1370 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	8f 78       	andi	r24, 0x8F	; 143
     bf2:	80 61       	ori	r24, 0x10	; 16
     bf4:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     bf6:	89 2f       	mov	r24, r25
     bf8:	81 7e       	andi	r24, 0xE1	; 225
     bfa:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     bfc:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     bfe:	86 e0       	ldi	r24, 0x06	; 6
     c00:	8d 83       	std	Y+5, r24	; 0x05
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
	if (pos >= ADCCH_POS_TEMPSENSE) {
     c02:	10 31       	cpi	r17, 0x10	; 16
     c04:	38 f0       	brcs	.+14     	; 0xc14 <adc_init+0x58>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
     c06:	18 86       	std	Y+8, r1	; 0x08
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
     c08:	10 51       	subi	r17, 0x10	; 16
     c0a:	11 0f       	add	r17, r17
     c0c:	11 0f       	add	r17, r17
     c0e:	11 0f       	add	r17, r17
     c10:	19 87       	std	Y+9, r17	; 0x09
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <adc_init+0x64>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     c18:	11 0f       	add	r17, r17
     c1a:	11 0f       	add	r17, r17
     c1c:	11 0f       	add	r17, r17
     c1e:	19 87       	std	Y+9, r17	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, pos, ADCCH_NEG_NONE, 1);
	adc_write_configuration(adc, &adc_conf);
     c20:	be 01       	movw	r22, r28
     c22:	6f 5f       	subi	r22, 0xFF	; 255
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	c7 01       	movw	r24, r14
     c28:	b3 d2       	rcall	.+1382   	; 0x1190 <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
     c2a:	ae 01       	movw	r20, r28
     c2c:	48 5f       	subi	r20, 0xF8	; 248
     c2e:	5f 4f       	sbci	r21, 0xFF	; 255
     c30:	60 2f       	mov	r22, r16
     c32:	c7 01       	movw	r24, r14
     c34:	50 d3       	rcall	.+1696   	; 0x12d6 <adcch_write_configuration>
	
	
}
     c36:	2b 96       	adiw	r28, 0x0b	; 11
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	08 95       	ret

00000c4a <getADCRead>:

float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	1f 92       	push	r1
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	7c 01       	movw	r14, r24
     c5e:	16 2f       	mov	r17, r22
	adc_enable(adc);
     c60:	7a db       	rcall	.-2316   	; 0x356 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c62:	8f b7       	in	r24, 0x3f	; 63
     c64:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c66:	f8 94       	cli
	return flags;
     c68:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     c6a:	f7 01       	movw	r30, r14
     c6c:	80 81       	ld	r24, Z
     c6e:	21 2f       	mov	r18, r17
     c70:	22 0f       	add	r18, r18
     c72:	22 0f       	add	r18, r18
     c74:	82 2b       	or	r24, r18
     c76:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c78:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     c7a:	f7 01       	movw	r30, r14
     c7c:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     c7e:	81 23       	and	r24, r17
     c80:	18 13       	cpse	r17, r24
     c82:	fb cf       	rjmp	.-10     	; 0xc7a <getADCRead+0x30>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     c84:	16 83       	std	Z+6, r17	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c86:	81 2f       	mov	r24, r17
     c88:	83 70       	andi	r24, 0x03	; 3
     c8a:	21 f4       	brne	.+8      	; 0xc94 <getADCRead+0x4a>
		index += 2;
		ch_mask >>= 2;
     c8c:	16 95       	lsr	r17
     c8e:	16 95       	lsr	r17
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <getADCRead+0x4c>
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c94:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     c96:	10 ff       	sbrs	r17, 0
		index++;
     c98:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c9a:	f7 01       	movw	r30, r14
     c9c:	b0 96       	adiw	r30, 0x20	; 32
     c9e:	98 e0       	ldi	r25, 0x08	; 8
     ca0:	89 9f       	mul	r24, r25
     ca2:	e0 0d       	add	r30, r0
     ca4:	f1 1d       	adc	r31, r1
     ca6:	11 24       	eor	r1, r1
	
	
	adc_start_conversion(adc, ch_mask);
	adc_wait_for_interrupt_flag(adc, ch_mask);
	uint16_t adcReading = adc_get_result(adc, ch_mask);
     ca8:	04 81       	ldd	r16, Z+4	; 0x04
     caa:	15 81       	ldd	r17, Z+5	; 0x05
	//printf("ADC reading = %u\n", adcReading);
	//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	
	adc_disable(adc);
     cac:	c7 01       	movw	r24, r14
     cae:	7f db       	rcall	.-2306   	; 0x3ae <adc_disable>
	return adcReading;
     cb0:	b8 01       	movw	r22, r16
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__floatunsisf>
	
}
     cba:	0f 90       	pop	r0
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	08 95       	ret

00000cca <thermistor_init>:



void thermistor_init(void)
{
	adc_init(&THERM_ADC,THERM_ADC_CH,THERM_POS);
     cca:	46 e0       	ldi	r20, 0x06	; 6
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	74 df       	rcall	.-280    	; 0xbbc <adc_init>
	
	printf("Thermistor Initialized.\n");
     cd4:	85 e1       	ldi	r24, 0x15	; 21
     cd6:	90 e2       	ldi	r25, 0x20	; 32
     cd8:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <puts>
     cdc:	08 95       	ret

00000cde <getTemperature>:
}


float getTemperature(void)
{
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	aa df       	rcall	.-172    	; 0xc4a <getADCRead>
     cf6:	25 ee       	ldi	r18, 0xE5	; 229
     cf8:	30 ed       	ldi	r19, 0xD0	; 208
     cfa:	42 e2       	ldi	r20, 0x22	; 34
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__mulsf3>
     d02:	f6 2e       	mov	r15, r22
     d04:	e7 2e       	mov	r14, r23
     d06:	d8 2e       	mov	r13, r24
     d08:	c9 2e       	mov	r12, r25
	//float resistance = (8300.0)*((adc_val/3.3)-1);
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3977.0*log(4096.0/(float)adc_val-1.0));
     d0a:	76 2f       	mov	r23, r22
     d0c:	27 2f       	mov	r18, r23
     d0e:	3e 2d       	mov	r19, r14
     d10:	4d 2d       	mov	r20, r13
     d12:	5c 2d       	mov	r21, r12
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	80 e8       	ldi	r24, 0x80	; 128
     d1a:	95 e4       	ldi	r25, 0x45	; 69
     d1c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divsf3>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e8       	ldi	r20, 0x80	; 128
     d26:	5f e3       	ldi	r21, 0x3F	; 63
     d28:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__subsf3>
     d2c:	0e 94 6d 17 	call	0x2eda	; 0x2eda <log>
	printf("temp: %f\n", temperature-273.15);
     d30:	2c e7       	ldi	r18, 0x7C	; 124
     d32:	34 ed       	ldi	r19, 0xD4	; 212
     d34:	43 e8       	ldi	r20, 0x83	; 131
     d36:	59 e3       	ldi	r21, 0x39	; 57
     d38:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__mulsf3>
     d3c:	2f e0       	ldi	r18, 0x0F	; 15
     d3e:	3f ec       	ldi	r19, 0xCF	; 207
     d40:	4b e5       	ldi	r20, 0x5B	; 91
     d42:	5b e3       	ldi	r21, 0x3B	; 59
     d44:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__addsf3>
     d48:	9b 01       	movw	r18, r22
     d4a:	ac 01       	movw	r20, r24
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	80 e8       	ldi	r24, 0x80	; 128
     d52:	9f e3       	ldi	r25, 0x3F	; 63
     d54:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__divsf3>
     d58:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__fixunssfsi>
     d5c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__floatunsisf>
     d60:	23 e3       	ldi	r18, 0x33	; 51
     d62:	33 e9       	ldi	r19, 0x93	; 147
     d64:	48 e8       	ldi	r20, 0x88	; 136
     d66:	53 e4       	ldi	r21, 0x43	; 67
     d68:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__subsf3>
     d6c:	06 2f       	mov	r16, r22
     d6e:	17 2f       	mov	r17, r23
     d70:	d8 2f       	mov	r29, r24
     d72:	c9 2f       	mov	r28, r25
     d74:	9f 93       	push	r25
     d76:	8f 93       	push	r24
     d78:	7f 93       	push	r23
     d7a:	6f 93       	push	r22
     d7c:	8d e2       	ldi	r24, 0x2D	; 45
     d7e:	90 e2       	ldi	r25, 0x20	; 32
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	0e 94 af 18 	call	0x315e	; 0x315e <printf>

	printf("%f\n", adc_val);
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	83 e3       	ldi	r24, 0x33	; 51
     d92:	90 e2       	ldi	r25, 0x20	; 32
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	0e 94 af 18 	call	0x315e	; 0x315e <printf>
	return (temperature - 273.15);
     d9c:	8d b7       	in	r24, 0x3d	; 61
     d9e:	9e b7       	in	r25, 0x3e	; 62
     da0:	0c 96       	adiw	r24, 0x0c	; 12
     da2:	8d bf       	out	0x3d, r24	; 61
     da4:	9e bf       	out	0x3e, r25	; 62
	
     da6:	60 2f       	mov	r22, r16
     da8:	71 2f       	mov	r23, r17
     daa:	8d 2f       	mov	r24, r29
     dac:	9c 2f       	mov	r25, r28
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	08 95       	ret

00000dc0 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	08 b6       	in	r0, 0x38	; 56
     dcc:	0f 92       	push	r0
     dce:	18 be       	out	0x38, r1	; 56
     dd0:	09 b6       	in	r0, 0x39	; 57
     dd2:	0f 92       	push	r0
     dd4:	19 be       	out	0x39, r1	; 57
     dd6:	0b b6       	in	r0, 0x3b	; 59
     dd8:	0f 92       	push	r0
     dda:	1b be       	out	0x3b, r1	; 59
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     df4:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     df8:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     dfc:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <adca_callback>
     e00:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <adca_callback+0x1>
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	19 95       	eicall
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0b be       	out	0x3b, r0	; 59
     e28:	0f 90       	pop	r0
     e2a:	09 be       	out	0x39, r0	; 57
     e2c:	0f 90       	pop	r0
     e2e:	08 be       	out	0x38, r0	; 56
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	08 b6       	in	r0, 0x38	; 56
     e46:	0f 92       	push	r0
     e48:	18 be       	out	0x38, r1	; 56
     e4a:	09 b6       	in	r0, 0x39	; 57
     e4c:	0f 92       	push	r0
     e4e:	19 be       	out	0x39, r1	; 57
     e50:	0b b6       	in	r0, 0x3b	; 59
     e52:	0f 92       	push	r0
     e54:	1b be       	out	0x3b, r1	; 59
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     e6e:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     e72:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     e76:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <adca_callback>
     e7a:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <adca_callback+0x1>
     e7e:	62 e0       	ldi	r22, 0x02	; 2
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	19 95       	eicall
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0b be       	out	0x3b, r0	; 59
     ea2:	0f 90       	pop	r0
     ea4:	09 be       	out	0x39, r0	; 57
     ea6:	0f 90       	pop	r0
     ea8:	08 be       	out	0x38, r0	; 56
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	08 b6       	in	r0, 0x38	; 56
     ec0:	0f 92       	push	r0
     ec2:	18 be       	out	0x38, r1	; 56
     ec4:	09 b6       	in	r0, 0x39	; 57
     ec6:	0f 92       	push	r0
     ec8:	19 be       	out	0x39, r1	; 57
     eca:	0b b6       	in	r0, 0x3b	; 59
     ecc:	0f 92       	push	r0
     ece:	1b be       	out	0x3b, r1	; 59
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     ee8:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     eec:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     ef0:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <adca_callback>
     ef4:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <adca_callback+0x1>
     ef8:	64 e0       	ldi	r22, 0x04	; 4
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	19 95       	eicall
}
     f00:	ff 91       	pop	r31
     f02:	ef 91       	pop	r30
     f04:	bf 91       	pop	r27
     f06:	af 91       	pop	r26
     f08:	9f 91       	pop	r25
     f0a:	8f 91       	pop	r24
     f0c:	7f 91       	pop	r23
     f0e:	6f 91       	pop	r22
     f10:	5f 91       	pop	r21
     f12:	4f 91       	pop	r20
     f14:	3f 91       	pop	r19
     f16:	2f 91       	pop	r18
     f18:	0f 90       	pop	r0
     f1a:	0b be       	out	0x3b, r0	; 59
     f1c:	0f 90       	pop	r0
     f1e:	09 be       	out	0x39, r0	; 57
     f20:	0f 90       	pop	r0
     f22:	08 be       	out	0x38, r0	; 56
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	08 b6       	in	r0, 0x38	; 56
     f3a:	0f 92       	push	r0
     f3c:	18 be       	out	0x38, r1	; 56
     f3e:	09 b6       	in	r0, 0x39	; 57
     f40:	0f 92       	push	r0
     f42:	19 be       	out	0x39, r1	; 57
     f44:	0b b6       	in	r0, 0x3b	; 59
     f46:	0f 92       	push	r0
     f48:	1b be       	out	0x3b, r1	; 59
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     f62:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     f66:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     f6a:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <adca_callback>
     f6e:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <adca_callback+0x1>
     f72:	68 e0       	ldi	r22, 0x08	; 8
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	19 95       	eicall
}
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	0f 90       	pop	r0
     f94:	0b be       	out	0x3b, r0	; 59
     f96:	0f 90       	pop	r0
     f98:	09 be       	out	0x39, r0	; 57
     f9a:	0f 90       	pop	r0
     f9c:	08 be       	out	0x38, r0	; 56
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	08 b6       	in	r0, 0x38	; 56
     fb4:	0f 92       	push	r0
     fb6:	18 be       	out	0x38, r1	; 56
     fb8:	09 b6       	in	r0, 0x39	; 57
     fba:	0f 92       	push	r0
     fbc:	19 be       	out	0x39, r1	; 57
     fbe:	0b b6       	in	r0, 0x3b	; 59
     fc0:	0f 92       	push	r0
     fc2:	1b be       	out	0x3b, r1	; 59
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     fdc:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     fe0:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     fe4:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <adcb_callback>
     fe8:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <adcb_callback+0x1>
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	80 e4       	ldi	r24, 0x40	; 64
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	19 95       	eicall
}
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0b be       	out	0x3b, r0	; 59
    1010:	0f 90       	pop	r0
    1012:	09 be       	out	0x39, r0	; 57
    1014:	0f 90       	pop	r0
    1016:	08 be       	out	0x38, r0	; 56
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	08 b6       	in	r0, 0x38	; 56
    102e:	0f 92       	push	r0
    1030:	18 be       	out	0x38, r1	; 56
    1032:	09 b6       	in	r0, 0x39	; 57
    1034:	0f 92       	push	r0
    1036:	19 be       	out	0x39, r1	; 57
    1038:	0b b6       	in	r0, 0x3b	; 59
    103a:	0f 92       	push	r0
    103c:	1b be       	out	0x3b, r1	; 59
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1056:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    105a:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    105e:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <adcb_callback>
    1062:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <adcb_callback+0x1>
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	80 e4       	ldi	r24, 0x40	; 64
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	19 95       	eicall
}
    106e:	ff 91       	pop	r31
    1070:	ef 91       	pop	r30
    1072:	bf 91       	pop	r27
    1074:	af 91       	pop	r26
    1076:	9f 91       	pop	r25
    1078:	8f 91       	pop	r24
    107a:	7f 91       	pop	r23
    107c:	6f 91       	pop	r22
    107e:	5f 91       	pop	r21
    1080:	4f 91       	pop	r20
    1082:	3f 91       	pop	r19
    1084:	2f 91       	pop	r18
    1086:	0f 90       	pop	r0
    1088:	0b be       	out	0x3b, r0	; 59
    108a:	0f 90       	pop	r0
    108c:	09 be       	out	0x39, r0	; 57
    108e:	0f 90       	pop	r0
    1090:	08 be       	out	0x38, r0	; 56
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	08 b6       	in	r0, 0x38	; 56
    10a8:	0f 92       	push	r0
    10aa:	18 be       	out	0x38, r1	; 56
    10ac:	09 b6       	in	r0, 0x39	; 57
    10ae:	0f 92       	push	r0
    10b0:	19 be       	out	0x39, r1	; 57
    10b2:	0b b6       	in	r0, 0x3b	; 59
    10b4:	0f 92       	push	r0
    10b6:	1b be       	out	0x3b, r1	; 59
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    10d0:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    10d4:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    10d8:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <adcb_callback>
    10dc:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <adcb_callback+0x1>
    10e0:	64 e0       	ldi	r22, 0x04	; 4
    10e2:	80 e4       	ldi	r24, 0x40	; 64
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	19 95       	eicall
}
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0b be       	out	0x3b, r0	; 59
    1104:	0f 90       	pop	r0
    1106:	09 be       	out	0x39, r0	; 57
    1108:	0f 90       	pop	r0
    110a:	08 be       	out	0x38, r0	; 56
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	08 b6       	in	r0, 0x38	; 56
    1122:	0f 92       	push	r0
    1124:	18 be       	out	0x38, r1	; 56
    1126:	09 b6       	in	r0, 0x39	; 57
    1128:	0f 92       	push	r0
    112a:	19 be       	out	0x39, r1	; 57
    112c:	0b b6       	in	r0, 0x3b	; 59
    112e:	0f 92       	push	r0
    1130:	1b be       	out	0x3b, r1	; 59
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	4f 93       	push	r20
    1138:	5f 93       	push	r21
    113a:	6f 93       	push	r22
    113c:	7f 93       	push	r23
    113e:	8f 93       	push	r24
    1140:	9f 93       	push	r25
    1142:	af 93       	push	r26
    1144:	bf 93       	push	r27
    1146:	ef 93       	push	r30
    1148:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    114a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    114e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    1152:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <adcb_callback>
    1156:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <adcb_callback+0x1>
    115a:	68 e0       	ldi	r22, 0x08	; 8
    115c:	80 e4       	ldi	r24, 0x40	; 64
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	19 95       	eicall
}
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0b be       	out	0x3b, r0	; 59
    117e:	0f 90       	pop	r0
    1180:	09 be       	out	0x39, r0	; 57
    1182:	0f 90       	pop	r0
    1184:	08 be       	out	0x38, r0	; 56
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	1f 92       	push	r1
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8c 01       	movw	r16, r24
    11aa:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    11ac:	81 15       	cp	r24, r1
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	92 07       	cpc	r25, r18
    11b2:	81 f4       	brne	.+32     	; 0x11d4 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    11b4:	61 e2       	ldi	r22, 0x21	; 33
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	0e 94 b2 14 	call	0x2964	; 0x2964 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    11be:	c8 2e       	mov	r12, r24
    11c0:	d1 2c       	mov	r13, r1
    11c2:	60 e2       	ldi	r22, 0x20	; 32
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	0e 94 b2 14 	call	0x2964	; 0x2964 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    11cc:	dc 2c       	mov	r13, r12
    11ce:	cc 24       	eor	r12, r12
    11d0:	c8 2a       	or	r12, r24
    11d2:	12 c0       	rjmp	.+36     	; 0x11f8 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    11d4:	80 34       	cpi	r24, 0x40	; 64
    11d6:	92 40       	sbci	r25, 0x02	; 2
    11d8:	d1 f5       	brne	.+116    	; 0x124e <adc_write_configuration+0xbe>
    11da:	65 e2       	ldi	r22, 0x25	; 37
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	0e 94 b2 14 	call	0x2964	; 0x2964 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    11e4:	c8 2e       	mov	r12, r24
    11e6:	d1 2c       	mov	r13, r1
    11e8:	64 e2       	ldi	r22, 0x24	; 36
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	0e 94 b2 14 	call	0x2964	; 0x2964 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    11f2:	dc 2c       	mov	r13, r12
    11f4:	cc 24       	eor	r12, r12
    11f6:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11f8:	8f b7       	in	r24, 0x3f	; 63
    11fa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11fc:	f8 94       	cli
	return flags;
    11fe:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1200:	c8 01       	movw	r24, r16
    1202:	69 d8       	rcall	.-3886   	; 0x2d6 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1204:	f8 01       	movw	r30, r16
    1206:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	90 83       	st	Z, r25
	adc->CAL = cal;
    120c:	c4 86       	std	Z+12, r12	; 0x0c
    120e:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    1210:	f7 01       	movw	r30, r14
    1212:	25 81       	ldd	r18, Z+5	; 0x05
    1214:	36 81       	ldd	r19, Z+6	; 0x06
    1216:	f8 01       	movw	r30, r16
    1218:	20 8f       	std	Z+24, r18	; 0x18
    121a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    121c:	f7 01       	movw	r30, r14
    121e:	92 81       	ldd	r25, Z+2	; 0x02
    1220:	f8 01       	movw	r30, r16
    1222:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1224:	f7 01       	movw	r30, r14
    1226:	94 81       	ldd	r25, Z+4	; 0x04
    1228:	f8 01       	movw	r30, r16
    122a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    122c:	f7 01       	movw	r30, r14
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	f8 01       	movw	r30, r16
    1232:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1234:	f7 01       	movw	r30, r14
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	f8 01       	movw	r30, r16
    123a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    123c:	81 70       	andi	r24, 0x01	; 1
    123e:	f7 01       	movw	r30, r14
    1240:	90 81       	ld	r25, Z
    1242:	89 2b       	or	r24, r25
    1244:	f8 01       	movw	r30, r16
    1246:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    1248:	c8 01       	movw	r24, r16
    124a:	66 d8       	rcall	.-3892   	; 0x318 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    124c:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    124e:	0f 90       	pop	r0
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	08 95       	ret

00001264 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	1f 92       	push	r1
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	8c 01       	movw	r16, r24
    127a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    127c:	8f b7       	in	r24, 0x3f	; 63
    127e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1280:	f8 94       	cli
	return flags;
    1282:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1284:	c8 01       	movw	r24, r16
    1286:	27 d8       	rcall	.-4018   	; 0x2d6 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1288:	f8 01       	movw	r30, r16
    128a:	80 81       	ld	r24, Z
    128c:	80 7c       	andi	r24, 0xC0	; 192
    128e:	f7 01       	movw	r30, r14
    1290:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1292:	f8 01       	movw	r30, r16
    1294:	80 8d       	ldd	r24, Z+24	; 0x18
    1296:	91 8d       	ldd	r25, Z+25	; 0x19
    1298:	f7 01       	movw	r30, r14
    129a:	85 83       	std	Z+5, r24	; 0x05
    129c:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    129e:	f8 01       	movw	r30, r16
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	f7 01       	movw	r30, r14
    12a4:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    12a6:	f8 01       	movw	r30, r16
    12a8:	84 81       	ldd	r24, Z+4	; 0x04
    12aa:	f7 01       	movw	r30, r14
    12ac:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    12ae:	f8 01       	movw	r30, r16
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
    12b2:	f7 01       	movw	r30, r14
    12b4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    12b6:	f8 01       	movw	r30, r16
    12b8:	81 81       	ldd	r24, Z+1	; 0x01
    12ba:	f7 01       	movw	r30, r14
    12bc:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    12be:	c8 01       	movw	r24, r16
    12c0:	2b d8       	rcall	.-4010   	; 0x318 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12c2:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    12c4:	0f 90       	pop	r0
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	08 95       	ret

000012d6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    12d6:	af 92       	push	r10
    12d8:	bf 92       	push	r11
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	1f 92       	push	r1
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	6c 01       	movw	r12, r24
    12f2:	b6 2e       	mov	r11, r22
    12f4:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    12f6:	86 2f       	mov	r24, r22
    12f8:	83 70       	andi	r24, 0x03	; 3
    12fa:	29 f4       	brne	.+10     	; 0x1306 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    12fc:	96 2f       	mov	r25, r22
    12fe:	96 95       	lsr	r25
    1300:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	02 c0       	rjmp	.+4      	; 0x130a <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1306:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1308:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    130a:	90 ff       	sbrs	r25, 0
		index++;
    130c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    130e:	86 01       	movw	r16, r12
    1310:	00 5e       	subi	r16, 0xE0	; 224
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	98 e0       	ldi	r25, 0x08	; 8
    1316:	89 9f       	mul	r24, r25
    1318:	00 0d       	add	r16, r0
    131a:	11 1d       	adc	r17, r1
    131c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    131e:	8f b7       	in	r24, 0x3f	; 63
    1320:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1322:	f8 94       	cli
	return flags;
    1324:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1326:	c6 01       	movw	r24, r12
    1328:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    132c:	f7 01       	movw	r30, r14
    132e:	80 81       	ld	r24, Z
    1330:	f8 01       	movw	r30, r16
    1332:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1334:	f7 01       	movw	r30, r14
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	f8 01       	movw	r30, r16
    133a:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    133c:	f7 01       	movw	r30, r14
    133e:	81 81       	ldd	r24, Z+1	; 0x01
    1340:	f8 01       	movw	r30, r16
    1342:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1344:	b0 fe       	sbrs	r11, 0
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <adcch_write_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1348:	f7 01       	movw	r30, r14
    134a:	83 81       	ldd	r24, Z+3	; 0x03
    134c:	f8 01       	movw	r30, r16
    134e:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1350:	c6 01       	movw	r24, r12
    1352:	0e 94 8c 01 	call	0x318	; 0x318 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1356:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1358:	0f 90       	pop	r0
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	df 90       	pop	r13
    1368:	cf 90       	pop	r12
    136a:	bf 90       	pop	r11
    136c:	af 90       	pop	r10
    136e:	08 95       	ret

00001370 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1370:	af 92       	push	r10
    1372:	bf 92       	push	r11
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	6c 01       	movw	r12, r24
    138c:	b6 2e       	mov	r11, r22
    138e:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1390:	86 2f       	mov	r24, r22
    1392:	83 70       	andi	r24, 0x03	; 3
    1394:	29 f4       	brne	.+10     	; 0x13a0 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1396:	96 2f       	mov	r25, r22
    1398:	96 95       	lsr	r25
    139a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    13a0:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    13a2:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    13a4:	90 ff       	sbrs	r25, 0
		index++;
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    13a8:	86 01       	movw	r16, r12
    13aa:	00 5e       	subi	r16, 0xE0	; 224
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	98 e0       	ldi	r25, 0x08	; 8
    13b0:	89 9f       	mul	r24, r25
    13b2:	00 0d       	add	r16, r0
    13b4:	11 1d       	adc	r17, r1
    13b6:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    13b8:	8f b7       	in	r24, 0x3f	; 63
    13ba:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    13bc:	f8 94       	cli
	return flags;
    13be:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    13c0:	c6 01       	movw	r24, r12
    13c2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    13c6:	f8 01       	movw	r30, r16
    13c8:	80 81       	ld	r24, Z
    13ca:	f7 01       	movw	r30, r14
    13cc:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    13ce:	f8 01       	movw	r30, r16
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	f7 01       	movw	r30, r14
    13d4:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    13d6:	f8 01       	movw	r30, r16
    13d8:	81 81       	ldd	r24, Z+1	; 0x01
    13da:	f7 01       	movw	r30, r14
    13dc:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    13de:	b0 fe       	sbrs	r11, 0
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <adcch_read_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    13e2:	f8 01       	movw	r30, r16
    13e4:	86 81       	ldd	r24, Z+6	; 0x06
    13e6:	f7 01       	movw	r30, r14
    13e8:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    13ea:	c6 01       	movw	r24, r12
    13ec:	0e 94 8c 01 	call	0x318	; 0x318 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13f0:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    13f2:	0f 90       	pop	r0
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	08 95       	ret

0000140a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    140a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    140c:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <stdio_base>
    1410:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <stdio_base+0x1>
    1414:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <ptr_put>
    1418:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <ptr_put+0x1>
    141c:	19 95       	eicall
    141e:	99 23       	and	r25, r25
    1420:	1c f0       	brlt	.+6      	; 0x1428 <_write+0x1e>
		return -1;
	}
	return 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    1428:	8f ef       	ldi	r24, 0xFF	; 255
    142a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    142c:	08 95       	ret

0000142e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	1f 92       	push	r1
    1434:	1f 92       	push	r1
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1440:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1444:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1448:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    144c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1450:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1454:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1458:	8f b7       	in	r24, 0x3f	; 63
    145a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    145c:	f8 94       	cli
	return flags;
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1460:	e0 e5       	ldi	r30, 0x50	; 80
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	82 60       	ori	r24, 0x02	; 2
    1468:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    146a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    146c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    146e:	81 ff       	sbrs	r24, 1
    1470:	fd cf       	rjmp	.-6      	; 0x146c <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	80 e4       	ldi	r24, 0x40	; 64
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 bc 14 	call	0x2978	; 0x2978 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    147c:	8f b7       	in	r24, 0x3f	; 63
    147e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1480:	f8 94       	cli
	return flags;
    1482:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1484:	e0 e5       	ldi	r30, 0x50	; 80
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8e 7f       	andi	r24, 0xFE	; 254
    148c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    148e:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	1f 92       	push	r1
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14a4:	9f b7       	in	r25, 0x3f	; 63
    14a6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    14a8:	f8 94       	cli
	return flags;
    14aa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    14ac:	e8 2f       	mov	r30, r24
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	e0 59       	subi	r30, 0x90	; 144
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	60 95       	com	r22
    14b6:	80 81       	ld	r24, Z
    14b8:	68 23       	and	r22, r24
    14ba:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14bc:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    14be:	0f 90       	pop	r0
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	1f 92       	push	r1
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14d0:	9f b7       	in	r25, 0x3f	; 63
    14d2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    14d4:	f8 94       	cli
	return flags;
    14d6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    14d8:	e8 2f       	mov	r30, r24
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	e0 59       	subi	r30, 0x90	; 144
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	68 2b       	or	r22, r24
    14e4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14e6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	08 b6       	in	r0, 0x38	; 56
    14fc:	0f 92       	push	r0
    14fe:	18 be       	out	0x38, r1	; 56
    1500:	0b b6       	in	r0, 0x3b	; 59
    1502:	0f 92       	push	r0
    1504:	1b be       	out	0x3b, r1	; 59
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31
	rtc_data.counter_high++;
    150e:	e1 ee       	ldi	r30, 0xE1	; 225
    1510:	f0 e2       	ldi	r31, 0x20	; 32
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	80 83       	st	Z, r24
    151a:	91 83       	std	Z+1, r25	; 0x01
}
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	0f 90       	pop	r0
    1526:	0b be       	out	0x3b, r0	; 59
    1528:	0f 90       	pop	r0
    152a:	08 be       	out	0x38, r0	; 56
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
    1540:	08 b6       	in	r0, 0x38	; 56
    1542:	0f 92       	push	r0
    1544:	18 be       	out	0x38, r1	; 56
    1546:	09 b6       	in	r0, 0x39	; 57
    1548:	0f 92       	push	r0
    154a:	19 be       	out	0x39, r1	; 57
    154c:	0b b6       	in	r0, 0x3b	; 59
    154e:	0f 92       	push	r0
    1550:	1b be       	out	0x3b, r1	; 59
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    1576:	e1 ee       	ldi	r30, 0xE1	; 225
    1578:	f0 e2       	ldi	r31, 0x20	; 32
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	22 81       	ldd	r18, Z+2	; 0x02
    1580:	33 81       	ldd	r19, Z+3	; 0x03
    1582:	82 17       	cp	r24, r18
    1584:	93 07       	cpc	r25, r19
    1586:	f0 f1       	brcs	.+124    	; 0x1604 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    1588:	21 e0       	ldi	r18, 0x01	; 1
    158a:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
    158e:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <rtc_data+0x6>
    1592:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <rtc_data+0x7>
    1596:	30 97       	sbiw	r30, 0x00	; 0
    1598:	a9 f1       	breq	.+106    	; 0x1604 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    159a:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    159e:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	dc 01       	movw	r26, r24
    15a8:	99 27       	eor	r25, r25
    15aa:	88 27       	eor	r24, r24
    15ac:	ab 01       	movw	r20, r22
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	8c 01       	movw	r16, r24
    15b4:	9d 01       	movw	r18, r26
    15b6:	04 2b       	or	r16, r20
    15b8:	15 2b       	or	r17, r21
    15ba:	26 2b       	or	r18, r22
    15bc:	37 2b       	or	r19, r23
    15be:	c9 01       	movw	r24, r18
    15c0:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    15c2:	a1 ee       	ldi	r26, 0xE1	; 225
    15c4:	b0 e2       	ldi	r27, 0x20	; 32
    15c6:	12 96       	adiw	r26, 0x02	; 2
    15c8:	0d 91       	ld	r16, X+
    15ca:	1c 91       	ld	r17, X
    15cc:	13 97       	sbiw	r26, 0x03	; 3
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	98 01       	movw	r18, r16
    15d4:	11 27       	eor	r17, r17
    15d6:	00 27       	eor	r16, r16
    15d8:	14 96       	adiw	r26, 0x04	; 4
    15da:	cd 90       	ld	r12, X+
    15dc:	dc 90       	ld	r13, X
    15de:	15 97       	sbiw	r26, 0x05	; 5
    15e0:	e1 2c       	mov	r14, r1
    15e2:	f1 2c       	mov	r15, r1
    15e4:	0c 29       	or	r16, r12
    15e6:	1d 29       	or	r17, r13
    15e8:	2e 29       	or	r18, r14
    15ea:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    15ec:	06 17       	cp	r16, r22
    15ee:	17 07       	cpc	r17, r23
    15f0:	28 07       	cpc	r18, r24
    15f2:	39 07       	cpc	r19, r25
    15f4:	30 f0       	brcs	.+12     	; 0x1602 <__vector_11+0xcc>
				count = alarm + 1;
    15f6:	c9 01       	movw	r24, r18
    15f8:	b8 01       	movw	r22, r16
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    1602:	19 95       	eicall
		}
	}
}
    1604:	ff 91       	pop	r31
    1606:	ef 91       	pop	r30
    1608:	bf 91       	pop	r27
    160a:	af 91       	pop	r26
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	7f 91       	pop	r23
    1612:	6f 91       	pop	r22
    1614:	5f 91       	pop	r21
    1616:	4f 91       	pop	r20
    1618:	3f 91       	pop	r19
    161a:	2f 91       	pop	r18
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	0f 90       	pop	r0
    162a:	0b be       	out	0x3b, r0	; 59
    162c:	0f 90       	pop	r0
    162e:	09 be       	out	0x39, r0	; 57
    1630:	0f 90       	pop	r0
    1632:	08 be       	out	0x38, r0	; 56
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	08 b6       	in	r0, 0x38	; 56
    164a:	0f 92       	push	r0
    164c:	18 be       	out	0x38, r1	; 56
    164e:	09 b6       	in	r0, 0x39	; 57
    1650:	0f 92       	push	r0
    1652:	19 be       	out	0x39, r1	; 57
    1654:	0b b6       	in	r0, 0x3b	; 59
    1656:	0f 92       	push	r0
    1658:	1b be       	out	0x3b, r1	; 59
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	4f 93       	push	r20
    1660:	5f 93       	push	r21
    1662:	6f 93       	push	r22
    1664:	7f 93       	push	r23
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
    166a:	af 93       	push	r26
    166c:	bf 93       	push	r27
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
    1672:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tcc0_ovf_callback>
    1676:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tcc0_ovf_callback+0x1>
    167a:	30 97       	sbiw	r30, 0x00	; 0
    167c:	09 f0       	breq	.+2      	; 0x1680 <__vector_14+0x42>
    167e:	19 95       	eicall
    1680:	ff 91       	pop	r31
    1682:	ef 91       	pop	r30
    1684:	bf 91       	pop	r27
    1686:	af 91       	pop	r26
    1688:	9f 91       	pop	r25
    168a:	8f 91       	pop	r24
    168c:	7f 91       	pop	r23
    168e:	6f 91       	pop	r22
    1690:	5f 91       	pop	r21
    1692:	4f 91       	pop	r20
    1694:	3f 91       	pop	r19
    1696:	2f 91       	pop	r18
    1698:	0f 90       	pop	r0
    169a:	0b be       	out	0x3b, r0	; 59
    169c:	0f 90       	pop	r0
    169e:	09 be       	out	0x39, r0	; 57
    16a0:	0f 90       	pop	r0
    16a2:	08 be       	out	0x38, r0	; 56
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_15>:
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	08 b6       	in	r0, 0x38	; 56
    16ba:	0f 92       	push	r0
    16bc:	18 be       	out	0x38, r1	; 56
    16be:	09 b6       	in	r0, 0x39	; 57
    16c0:	0f 92       	push	r0
    16c2:	19 be       	out	0x39, r1	; 57
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	1b be       	out	0x3b, r1	; 59
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    16e2:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tcc0_err_callback>
    16e6:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tcc0_err_callback+0x1>
    16ea:	30 97       	sbiw	r30, 0x00	; 0
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <__vector_15+0x42>
    16ee:	19 95       	eicall
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0b be       	out	0x3b, r0	; 59
    170c:	0f 90       	pop	r0
    170e:	09 be       	out	0x39, r0	; 57
    1710:	0f 90       	pop	r0
    1712:	08 be       	out	0x38, r0	; 56
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_16>:
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	08 b6       	in	r0, 0x38	; 56
    172a:	0f 92       	push	r0
    172c:	18 be       	out	0x38, r1	; 56
    172e:	09 b6       	in	r0, 0x39	; 57
    1730:	0f 92       	push	r0
    1732:	19 be       	out	0x39, r1	; 57
    1734:	0b b6       	in	r0, 0x3b	; 59
    1736:	0f 92       	push	r0
    1738:	1b be       	out	0x3b, r1	; 59
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
    1752:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcc0_cca_callback>
    1756:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcc0_cca_callback+0x1>
    175a:	30 97       	sbiw	r30, 0x00	; 0
    175c:	09 f0       	breq	.+2      	; 0x1760 <__vector_16+0x42>
    175e:	19 95       	eicall
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0b be       	out	0x3b, r0	; 59
    177c:	0f 90       	pop	r0
    177e:	09 be       	out	0x39, r0	; 57
    1780:	0f 90       	pop	r0
    1782:	08 be       	out	0x38, r0	; 56
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <__vector_17>:
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	08 b6       	in	r0, 0x38	; 56
    179a:	0f 92       	push	r0
    179c:	18 be       	out	0x38, r1	; 56
    179e:	09 b6       	in	r0, 0x39	; 57
    17a0:	0f 92       	push	r0
    17a2:	19 be       	out	0x39, r1	; 57
    17a4:	0b b6       	in	r0, 0x3b	; 59
    17a6:	0f 92       	push	r0
    17a8:	1b be       	out	0x3b, r1	; 59
    17aa:	2f 93       	push	r18
    17ac:	3f 93       	push	r19
    17ae:	4f 93       	push	r20
    17b0:	5f 93       	push	r21
    17b2:	6f 93       	push	r22
    17b4:	7f 93       	push	r23
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	ef 93       	push	r30
    17c0:	ff 93       	push	r31
    17c2:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcc0_ccb_callback>
    17c6:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcc0_ccb_callback+0x1>
    17ca:	30 97       	sbiw	r30, 0x00	; 0
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <__vector_17+0x42>
    17ce:	19 95       	eicall
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	0f 90       	pop	r0
    17ea:	0b be       	out	0x3b, r0	; 59
    17ec:	0f 90       	pop	r0
    17ee:	09 be       	out	0x39, r0	; 57
    17f0:	0f 90       	pop	r0
    17f2:	08 be       	out	0x38, r0	; 56
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_18>:
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	08 b6       	in	r0, 0x38	; 56
    180a:	0f 92       	push	r0
    180c:	18 be       	out	0x38, r1	; 56
    180e:	09 b6       	in	r0, 0x39	; 57
    1810:	0f 92       	push	r0
    1812:	19 be       	out	0x39, r1	; 57
    1814:	0b b6       	in	r0, 0x3b	; 59
    1816:	0f 92       	push	r0
    1818:	1b be       	out	0x3b, r1	; 59
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	5f 93       	push	r21
    1822:	6f 93       	push	r22
    1824:	7f 93       	push	r23
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	ef 93       	push	r30
    1830:	ff 93       	push	r31
    1832:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcc0_ccc_callback>
    1836:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcc0_ccc_callback+0x1>
    183a:	30 97       	sbiw	r30, 0x00	; 0
    183c:	09 f0       	breq	.+2      	; 0x1840 <__vector_18+0x42>
    183e:	19 95       	eicall
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	0f 90       	pop	r0
    185a:	0b be       	out	0x3b, r0	; 59
    185c:	0f 90       	pop	r0
    185e:	09 be       	out	0x39, r0	; 57
    1860:	0f 90       	pop	r0
    1862:	08 be       	out	0x38, r0	; 56
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <__vector_19>:
    186e:	1f 92       	push	r1
    1870:	0f 92       	push	r0
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	0f 92       	push	r0
    1876:	11 24       	eor	r1, r1
    1878:	08 b6       	in	r0, 0x38	; 56
    187a:	0f 92       	push	r0
    187c:	18 be       	out	0x38, r1	; 56
    187e:	09 b6       	in	r0, 0x39	; 57
    1880:	0f 92       	push	r0
    1882:	19 be       	out	0x39, r1	; 57
    1884:	0b b6       	in	r0, 0x3b	; 59
    1886:	0f 92       	push	r0
    1888:	1b be       	out	0x3b, r1	; 59
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
    18a2:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcc0_ccd_callback>
    18a6:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcc0_ccd_callback+0x1>
    18aa:	30 97       	sbiw	r30, 0x00	; 0
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <__vector_19+0x42>
    18ae:	19 95       	eicall
    18b0:	ff 91       	pop	r31
    18b2:	ef 91       	pop	r30
    18b4:	bf 91       	pop	r27
    18b6:	af 91       	pop	r26
    18b8:	9f 91       	pop	r25
    18ba:	8f 91       	pop	r24
    18bc:	7f 91       	pop	r23
    18be:	6f 91       	pop	r22
    18c0:	5f 91       	pop	r21
    18c2:	4f 91       	pop	r20
    18c4:	3f 91       	pop	r19
    18c6:	2f 91       	pop	r18
    18c8:	0f 90       	pop	r0
    18ca:	0b be       	out	0x3b, r0	; 59
    18cc:	0f 90       	pop	r0
    18ce:	09 be       	out	0x39, r0	; 57
    18d0:	0f 90       	pop	r0
    18d2:	08 be       	out	0x38, r0	; 56
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <__vector_20>:
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	08 b6       	in	r0, 0x38	; 56
    18ea:	0f 92       	push	r0
    18ec:	18 be       	out	0x38, r1	; 56
    18ee:	09 b6       	in	r0, 0x39	; 57
    18f0:	0f 92       	push	r0
    18f2:	19 be       	out	0x39, r1	; 57
    18f4:	0b b6       	in	r0, 0x3b	; 59
    18f6:	0f 92       	push	r0
    18f8:	1b be       	out	0x3b, r1	; 59
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
    1912:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcc1_ovf_callback>
    1916:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcc1_ovf_callback+0x1>
    191a:	30 97       	sbiw	r30, 0x00	; 0
    191c:	09 f0       	breq	.+2      	; 0x1920 <__vector_20+0x42>
    191e:	19 95       	eicall
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0b be       	out	0x3b, r0	; 59
    193c:	0f 90       	pop	r0
    193e:	09 be       	out	0x39, r0	; 57
    1940:	0f 90       	pop	r0
    1942:	08 be       	out	0x38, r0	; 56
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_21>:
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	08 b6       	in	r0, 0x38	; 56
    195a:	0f 92       	push	r0
    195c:	18 be       	out	0x38, r1	; 56
    195e:	09 b6       	in	r0, 0x39	; 57
    1960:	0f 92       	push	r0
    1962:	19 be       	out	0x39, r1	; 57
    1964:	0b b6       	in	r0, 0x3b	; 59
    1966:	0f 92       	push	r0
    1968:	1b be       	out	0x3b, r1	; 59
    196a:	2f 93       	push	r18
    196c:	3f 93       	push	r19
    196e:	4f 93       	push	r20
    1970:	5f 93       	push	r21
    1972:	6f 93       	push	r22
    1974:	7f 93       	push	r23
    1976:	8f 93       	push	r24
    1978:	9f 93       	push	r25
    197a:	af 93       	push	r26
    197c:	bf 93       	push	r27
    197e:	ef 93       	push	r30
    1980:	ff 93       	push	r31
    1982:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcc1_err_callback>
    1986:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcc1_err_callback+0x1>
    198a:	30 97       	sbiw	r30, 0x00	; 0
    198c:	09 f0       	breq	.+2      	; 0x1990 <__vector_21+0x42>
    198e:	19 95       	eicall
    1990:	ff 91       	pop	r31
    1992:	ef 91       	pop	r30
    1994:	bf 91       	pop	r27
    1996:	af 91       	pop	r26
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	7f 91       	pop	r23
    199e:	6f 91       	pop	r22
    19a0:	5f 91       	pop	r21
    19a2:	4f 91       	pop	r20
    19a4:	3f 91       	pop	r19
    19a6:	2f 91       	pop	r18
    19a8:	0f 90       	pop	r0
    19aa:	0b be       	out	0x3b, r0	; 59
    19ac:	0f 90       	pop	r0
    19ae:	09 be       	out	0x39, r0	; 57
    19b0:	0f 90       	pop	r0
    19b2:	08 be       	out	0x38, r0	; 56
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <__vector_22>:
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	08 b6       	in	r0, 0x38	; 56
    19ca:	0f 92       	push	r0
    19cc:	18 be       	out	0x38, r1	; 56
    19ce:	09 b6       	in	r0, 0x39	; 57
    19d0:	0f 92       	push	r0
    19d2:	19 be       	out	0x39, r1	; 57
    19d4:	0b b6       	in	r0, 0x3b	; 59
    19d6:	0f 92       	push	r0
    19d8:	1b be       	out	0x3b, r1	; 59
    19da:	2f 93       	push	r18
    19dc:	3f 93       	push	r19
    19de:	4f 93       	push	r20
    19e0:	5f 93       	push	r21
    19e2:	6f 93       	push	r22
    19e4:	7f 93       	push	r23
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
    19ea:	af 93       	push	r26
    19ec:	bf 93       	push	r27
    19ee:	ef 93       	push	r30
    19f0:	ff 93       	push	r31
    19f2:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcc1_cca_callback>
    19f6:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcc1_cca_callback+0x1>
    19fa:	30 97       	sbiw	r30, 0x00	; 0
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <__vector_22+0x42>
    19fe:	19 95       	eicall
    1a00:	ff 91       	pop	r31
    1a02:	ef 91       	pop	r30
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	0f 90       	pop	r0
    1a1a:	0b be       	out	0x3b, r0	; 59
    1a1c:	0f 90       	pop	r0
    1a1e:	09 be       	out	0x39, r0	; 57
    1a20:	0f 90       	pop	r0
    1a22:	08 be       	out	0x38, r0	; 56
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <__vector_23>:
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	08 b6       	in	r0, 0x38	; 56
    1a3a:	0f 92       	push	r0
    1a3c:	18 be       	out	0x38, r1	; 56
    1a3e:	09 b6       	in	r0, 0x39	; 57
    1a40:	0f 92       	push	r0
    1a42:	19 be       	out	0x39, r1	; 57
    1a44:	0b b6       	in	r0, 0x3b	; 59
    1a46:	0f 92       	push	r0
    1a48:	1b be       	out	0x3b, r1	; 59
    1a4a:	2f 93       	push	r18
    1a4c:	3f 93       	push	r19
    1a4e:	4f 93       	push	r20
    1a50:	5f 93       	push	r21
    1a52:	6f 93       	push	r22
    1a54:	7f 93       	push	r23
    1a56:	8f 93       	push	r24
    1a58:	9f 93       	push	r25
    1a5a:	af 93       	push	r26
    1a5c:	bf 93       	push	r27
    1a5e:	ef 93       	push	r30
    1a60:	ff 93       	push	r31
    1a62:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcc1_ccb_callback>
    1a66:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcc1_ccb_callback+0x1>
    1a6a:	30 97       	sbiw	r30, 0x00	; 0
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <__vector_23+0x42>
    1a6e:	19 95       	eicall
    1a70:	ff 91       	pop	r31
    1a72:	ef 91       	pop	r30
    1a74:	bf 91       	pop	r27
    1a76:	af 91       	pop	r26
    1a78:	9f 91       	pop	r25
    1a7a:	8f 91       	pop	r24
    1a7c:	7f 91       	pop	r23
    1a7e:	6f 91       	pop	r22
    1a80:	5f 91       	pop	r21
    1a82:	4f 91       	pop	r20
    1a84:	3f 91       	pop	r19
    1a86:	2f 91       	pop	r18
    1a88:	0f 90       	pop	r0
    1a8a:	0b be       	out	0x3b, r0	; 59
    1a8c:	0f 90       	pop	r0
    1a8e:	09 be       	out	0x39, r0	; 57
    1a90:	0f 90       	pop	r0
    1a92:	08 be       	out	0x38, r0	; 56
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <__vector_77>:
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	0f 92       	push	r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	08 b6       	in	r0, 0x38	; 56
    1aaa:	0f 92       	push	r0
    1aac:	18 be       	out	0x38, r1	; 56
    1aae:	09 b6       	in	r0, 0x39	; 57
    1ab0:	0f 92       	push	r0
    1ab2:	19 be       	out	0x39, r1	; 57
    1ab4:	0b b6       	in	r0, 0x3b	; 59
    1ab6:	0f 92       	push	r0
    1ab8:	1b be       	out	0x3b, r1	; 59
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
    1ad2:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcd0_ovf_callback>
    1ad6:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcd0_ovf_callback+0x1>
    1ada:	30 97       	sbiw	r30, 0x00	; 0
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <__vector_77+0x42>
    1ade:	19 95       	eicall
    1ae0:	ff 91       	pop	r31
    1ae2:	ef 91       	pop	r30
    1ae4:	bf 91       	pop	r27
    1ae6:	af 91       	pop	r26
    1ae8:	9f 91       	pop	r25
    1aea:	8f 91       	pop	r24
    1aec:	7f 91       	pop	r23
    1aee:	6f 91       	pop	r22
    1af0:	5f 91       	pop	r21
    1af2:	4f 91       	pop	r20
    1af4:	3f 91       	pop	r19
    1af6:	2f 91       	pop	r18
    1af8:	0f 90       	pop	r0
    1afa:	0b be       	out	0x3b, r0	; 59
    1afc:	0f 90       	pop	r0
    1afe:	09 be       	out	0x39, r0	; 57
    1b00:	0f 90       	pop	r0
    1b02:	08 be       	out	0x38, r0	; 56
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <__vector_78>:
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	08 b6       	in	r0, 0x38	; 56
    1b1a:	0f 92       	push	r0
    1b1c:	18 be       	out	0x38, r1	; 56
    1b1e:	09 b6       	in	r0, 0x39	; 57
    1b20:	0f 92       	push	r0
    1b22:	19 be       	out	0x39, r1	; 57
    1b24:	0b b6       	in	r0, 0x3b	; 59
    1b26:	0f 92       	push	r0
    1b28:	1b be       	out	0x3b, r1	; 59
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcd0_err_callback>
    1b46:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcd0_err_callback+0x1>
    1b4a:	30 97       	sbiw	r30, 0x00	; 0
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <__vector_78+0x42>
    1b4e:	19 95       	eicall
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	0b be       	out	0x3b, r0	; 59
    1b6c:	0f 90       	pop	r0
    1b6e:	09 be       	out	0x39, r0	; 57
    1b70:	0f 90       	pop	r0
    1b72:	08 be       	out	0x38, r0	; 56
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <__vector_79>:
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	08 b6       	in	r0, 0x38	; 56
    1b8a:	0f 92       	push	r0
    1b8c:	18 be       	out	0x38, r1	; 56
    1b8e:	09 b6       	in	r0, 0x39	; 57
    1b90:	0f 92       	push	r0
    1b92:	19 be       	out	0x39, r1	; 57
    1b94:	0b b6       	in	r0, 0x3b	; 59
    1b96:	0f 92       	push	r0
    1b98:	1b be       	out	0x3b, r1	; 59
    1b9a:	2f 93       	push	r18
    1b9c:	3f 93       	push	r19
    1b9e:	4f 93       	push	r20
    1ba0:	5f 93       	push	r21
    1ba2:	6f 93       	push	r22
    1ba4:	7f 93       	push	r23
    1ba6:	8f 93       	push	r24
    1ba8:	9f 93       	push	r25
    1baa:	af 93       	push	r26
    1bac:	bf 93       	push	r27
    1bae:	ef 93       	push	r30
    1bb0:	ff 93       	push	r31
    1bb2:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcd0_cca_callback>
    1bb6:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcd0_cca_callback+0x1>
    1bba:	30 97       	sbiw	r30, 0x00	; 0
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <__vector_79+0x42>
    1bbe:	19 95       	eicall
    1bc0:	ff 91       	pop	r31
    1bc2:	ef 91       	pop	r30
    1bc4:	bf 91       	pop	r27
    1bc6:	af 91       	pop	r26
    1bc8:	9f 91       	pop	r25
    1bca:	8f 91       	pop	r24
    1bcc:	7f 91       	pop	r23
    1bce:	6f 91       	pop	r22
    1bd0:	5f 91       	pop	r21
    1bd2:	4f 91       	pop	r20
    1bd4:	3f 91       	pop	r19
    1bd6:	2f 91       	pop	r18
    1bd8:	0f 90       	pop	r0
    1bda:	0b be       	out	0x3b, r0	; 59
    1bdc:	0f 90       	pop	r0
    1bde:	09 be       	out	0x39, r0	; 57
    1be0:	0f 90       	pop	r0
    1be2:	08 be       	out	0x38, r0	; 56
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <__vector_80>:
    1bee:	1f 92       	push	r1
    1bf0:	0f 92       	push	r0
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	0f 92       	push	r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	08 b6       	in	r0, 0x38	; 56
    1bfa:	0f 92       	push	r0
    1bfc:	18 be       	out	0x38, r1	; 56
    1bfe:	09 b6       	in	r0, 0x39	; 57
    1c00:	0f 92       	push	r0
    1c02:	19 be       	out	0x39, r1	; 57
    1c04:	0b b6       	in	r0, 0x3b	; 59
    1c06:	0f 92       	push	r0
    1c08:	1b be       	out	0x3b, r1	; 59
    1c0a:	2f 93       	push	r18
    1c0c:	3f 93       	push	r19
    1c0e:	4f 93       	push	r20
    1c10:	5f 93       	push	r21
    1c12:	6f 93       	push	r22
    1c14:	7f 93       	push	r23
    1c16:	8f 93       	push	r24
    1c18:	9f 93       	push	r25
    1c1a:	af 93       	push	r26
    1c1c:	bf 93       	push	r27
    1c1e:	ef 93       	push	r30
    1c20:	ff 93       	push	r31
    1c22:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tcd0_ccb_callback>
    1c26:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tcd0_ccb_callback+0x1>
    1c2a:	30 97       	sbiw	r30, 0x00	; 0
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <__vector_80+0x42>
    1c2e:	19 95       	eicall
    1c30:	ff 91       	pop	r31
    1c32:	ef 91       	pop	r30
    1c34:	bf 91       	pop	r27
    1c36:	af 91       	pop	r26
    1c38:	9f 91       	pop	r25
    1c3a:	8f 91       	pop	r24
    1c3c:	7f 91       	pop	r23
    1c3e:	6f 91       	pop	r22
    1c40:	5f 91       	pop	r21
    1c42:	4f 91       	pop	r20
    1c44:	3f 91       	pop	r19
    1c46:	2f 91       	pop	r18
    1c48:	0f 90       	pop	r0
    1c4a:	0b be       	out	0x3b, r0	; 59
    1c4c:	0f 90       	pop	r0
    1c4e:	09 be       	out	0x39, r0	; 57
    1c50:	0f 90       	pop	r0
    1c52:	08 be       	out	0x38, r0	; 56
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_81>:
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	08 b6       	in	r0, 0x38	; 56
    1c6a:	0f 92       	push	r0
    1c6c:	18 be       	out	0x38, r1	; 56
    1c6e:	09 b6       	in	r0, 0x39	; 57
    1c70:	0f 92       	push	r0
    1c72:	19 be       	out	0x39, r1	; 57
    1c74:	0b b6       	in	r0, 0x3b	; 59
    1c76:	0f 92       	push	r0
    1c78:	1b be       	out	0x3b, r1	; 59
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
    1c92:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tcd0_ccc_callback>
    1c96:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tcd0_ccc_callback+0x1>
    1c9a:	30 97       	sbiw	r30, 0x00	; 0
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <__vector_81+0x42>
    1c9e:	19 95       	eicall
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0b be       	out	0x3b, r0	; 59
    1cbc:	0f 90       	pop	r0
    1cbe:	09 be       	out	0x39, r0	; 57
    1cc0:	0f 90       	pop	r0
    1cc2:	08 be       	out	0x38, r0	; 56
    1cc4:	0f 90       	pop	r0
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	0f 90       	pop	r0
    1cca:	1f 90       	pop	r1
    1ccc:	18 95       	reti

00001cce <__vector_82>:
    1cce:	1f 92       	push	r1
    1cd0:	0f 92       	push	r0
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	0f 92       	push	r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	08 b6       	in	r0, 0x38	; 56
    1cda:	0f 92       	push	r0
    1cdc:	18 be       	out	0x38, r1	; 56
    1cde:	09 b6       	in	r0, 0x39	; 57
    1ce0:	0f 92       	push	r0
    1ce2:	19 be       	out	0x39, r1	; 57
    1ce4:	0b b6       	in	r0, 0x3b	; 59
    1ce6:	0f 92       	push	r0
    1ce8:	1b be       	out	0x3b, r1	; 59
    1cea:	2f 93       	push	r18
    1cec:	3f 93       	push	r19
    1cee:	4f 93       	push	r20
    1cf0:	5f 93       	push	r21
    1cf2:	6f 93       	push	r22
    1cf4:	7f 93       	push	r23
    1cf6:	8f 93       	push	r24
    1cf8:	9f 93       	push	r25
    1cfa:	af 93       	push	r26
    1cfc:	bf 93       	push	r27
    1cfe:	ef 93       	push	r30
    1d00:	ff 93       	push	r31
    1d02:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tcd0_ccd_callback>
    1d06:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tcd0_ccd_callback+0x1>
    1d0a:	30 97       	sbiw	r30, 0x00	; 0
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <__vector_82+0x42>
    1d0e:	19 95       	eicall
    1d10:	ff 91       	pop	r31
    1d12:	ef 91       	pop	r30
    1d14:	bf 91       	pop	r27
    1d16:	af 91       	pop	r26
    1d18:	9f 91       	pop	r25
    1d1a:	8f 91       	pop	r24
    1d1c:	7f 91       	pop	r23
    1d1e:	6f 91       	pop	r22
    1d20:	5f 91       	pop	r21
    1d22:	4f 91       	pop	r20
    1d24:	3f 91       	pop	r19
    1d26:	2f 91       	pop	r18
    1d28:	0f 90       	pop	r0
    1d2a:	0b be       	out	0x3b, r0	; 59
    1d2c:	0f 90       	pop	r0
    1d2e:	09 be       	out	0x39, r0	; 57
    1d30:	0f 90       	pop	r0
    1d32:	08 be       	out	0x38, r0	; 56
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	0f 90       	pop	r0
    1d3a:	1f 90       	pop	r1
    1d3c:	18 95       	reti

00001d3e <__vector_83>:
    1d3e:	1f 92       	push	r1
    1d40:	0f 92       	push	r0
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	08 b6       	in	r0, 0x38	; 56
    1d4a:	0f 92       	push	r0
    1d4c:	18 be       	out	0x38, r1	; 56
    1d4e:	09 b6       	in	r0, 0x39	; 57
    1d50:	0f 92       	push	r0
    1d52:	19 be       	out	0x39, r1	; 57
    1d54:	0b b6       	in	r0, 0x3b	; 59
    1d56:	0f 92       	push	r0
    1d58:	1b be       	out	0x3b, r1	; 59
    1d5a:	2f 93       	push	r18
    1d5c:	3f 93       	push	r19
    1d5e:	4f 93       	push	r20
    1d60:	5f 93       	push	r21
    1d62:	6f 93       	push	r22
    1d64:	7f 93       	push	r23
    1d66:	8f 93       	push	r24
    1d68:	9f 93       	push	r25
    1d6a:	af 93       	push	r26
    1d6c:	bf 93       	push	r27
    1d6e:	ef 93       	push	r30
    1d70:	ff 93       	push	r31
    1d72:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tcd1_ovf_callback>
    1d76:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tcd1_ovf_callback+0x1>
    1d7a:	30 97       	sbiw	r30, 0x00	; 0
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <__vector_83+0x42>
    1d7e:	19 95       	eicall
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0b be       	out	0x3b, r0	; 59
    1d9c:	0f 90       	pop	r0
    1d9e:	09 be       	out	0x39, r0	; 57
    1da0:	0f 90       	pop	r0
    1da2:	08 be       	out	0x38, r0	; 56
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	0f 90       	pop	r0
    1daa:	1f 90       	pop	r1
    1dac:	18 95       	reti

00001dae <__vector_84>:
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	08 b6       	in	r0, 0x38	; 56
    1dba:	0f 92       	push	r0
    1dbc:	18 be       	out	0x38, r1	; 56
    1dbe:	09 b6       	in	r0, 0x39	; 57
    1dc0:	0f 92       	push	r0
    1dc2:	19 be       	out	0x39, r1	; 57
    1dc4:	0b b6       	in	r0, 0x3b	; 59
    1dc6:	0f 92       	push	r0
    1dc8:	1b be       	out	0x3b, r1	; 59
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
    1de2:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tcd1_err_callback>
    1de6:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tcd1_err_callback+0x1>
    1dea:	30 97       	sbiw	r30, 0x00	; 0
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <__vector_84+0x42>
    1dee:	19 95       	eicall
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0b be       	out	0x3b, r0	; 59
    1e0c:	0f 90       	pop	r0
    1e0e:	09 be       	out	0x39, r0	; 57
    1e10:	0f 90       	pop	r0
    1e12:	08 be       	out	0x38, r0	; 56
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	0f 90       	pop	r0
    1e1a:	1f 90       	pop	r1
    1e1c:	18 95       	reti

00001e1e <__vector_85>:
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	08 b6       	in	r0, 0x38	; 56
    1e2a:	0f 92       	push	r0
    1e2c:	18 be       	out	0x38, r1	; 56
    1e2e:	09 b6       	in	r0, 0x39	; 57
    1e30:	0f 92       	push	r0
    1e32:	19 be       	out	0x39, r1	; 57
    1e34:	0b b6       	in	r0, 0x3b	; 59
    1e36:	0f 92       	push	r0
    1e38:	1b be       	out	0x3b, r1	; 59
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
    1e52:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tcd1_cca_callback>
    1e56:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tcd1_cca_callback+0x1>
    1e5a:	30 97       	sbiw	r30, 0x00	; 0
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <__vector_85+0x42>
    1e5e:	19 95       	eicall
    1e60:	ff 91       	pop	r31
    1e62:	ef 91       	pop	r30
    1e64:	bf 91       	pop	r27
    1e66:	af 91       	pop	r26
    1e68:	9f 91       	pop	r25
    1e6a:	8f 91       	pop	r24
    1e6c:	7f 91       	pop	r23
    1e6e:	6f 91       	pop	r22
    1e70:	5f 91       	pop	r21
    1e72:	4f 91       	pop	r20
    1e74:	3f 91       	pop	r19
    1e76:	2f 91       	pop	r18
    1e78:	0f 90       	pop	r0
    1e7a:	0b be       	out	0x3b, r0	; 59
    1e7c:	0f 90       	pop	r0
    1e7e:	09 be       	out	0x39, r0	; 57
    1e80:	0f 90       	pop	r0
    1e82:	08 be       	out	0x38, r0	; 56
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <__vector_86>:
    1e8e:	1f 92       	push	r1
    1e90:	0f 92       	push	r0
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	0f 92       	push	r0
    1e96:	11 24       	eor	r1, r1
    1e98:	08 b6       	in	r0, 0x38	; 56
    1e9a:	0f 92       	push	r0
    1e9c:	18 be       	out	0x38, r1	; 56
    1e9e:	09 b6       	in	r0, 0x39	; 57
    1ea0:	0f 92       	push	r0
    1ea2:	19 be       	out	0x39, r1	; 57
    1ea4:	0b b6       	in	r0, 0x3b	; 59
    1ea6:	0f 92       	push	r0
    1ea8:	1b be       	out	0x3b, r1	; 59
    1eaa:	2f 93       	push	r18
    1eac:	3f 93       	push	r19
    1eae:	4f 93       	push	r20
    1eb0:	5f 93       	push	r21
    1eb2:	6f 93       	push	r22
    1eb4:	7f 93       	push	r23
    1eb6:	8f 93       	push	r24
    1eb8:	9f 93       	push	r25
    1eba:	af 93       	push	r26
    1ebc:	bf 93       	push	r27
    1ebe:	ef 93       	push	r30
    1ec0:	ff 93       	push	r31
    1ec2:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tcd1_ccb_callback>
    1ec6:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tcd1_ccb_callback+0x1>
    1eca:	30 97       	sbiw	r30, 0x00	; 0
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <__vector_86+0x42>
    1ece:	19 95       	eicall
    1ed0:	ff 91       	pop	r31
    1ed2:	ef 91       	pop	r30
    1ed4:	bf 91       	pop	r27
    1ed6:	af 91       	pop	r26
    1ed8:	9f 91       	pop	r25
    1eda:	8f 91       	pop	r24
    1edc:	7f 91       	pop	r23
    1ede:	6f 91       	pop	r22
    1ee0:	5f 91       	pop	r21
    1ee2:	4f 91       	pop	r20
    1ee4:	3f 91       	pop	r19
    1ee6:	2f 91       	pop	r18
    1ee8:	0f 90       	pop	r0
    1eea:	0b be       	out	0x3b, r0	; 59
    1eec:	0f 90       	pop	r0
    1eee:	09 be       	out	0x39, r0	; 57
    1ef0:	0f 90       	pop	r0
    1ef2:	08 be       	out	0x38, r0	; 56
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

00001efe <__vector_47>:
    1efe:	1f 92       	push	r1
    1f00:	0f 92       	push	r0
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	0f 92       	push	r0
    1f06:	11 24       	eor	r1, r1
    1f08:	08 b6       	in	r0, 0x38	; 56
    1f0a:	0f 92       	push	r0
    1f0c:	18 be       	out	0x38, r1	; 56
    1f0e:	09 b6       	in	r0, 0x39	; 57
    1f10:	0f 92       	push	r0
    1f12:	19 be       	out	0x39, r1	; 57
    1f14:	0b b6       	in	r0, 0x3b	; 59
    1f16:	0f 92       	push	r0
    1f18:	1b be       	out	0x3b, r1	; 59
    1f1a:	2f 93       	push	r18
    1f1c:	3f 93       	push	r19
    1f1e:	4f 93       	push	r20
    1f20:	5f 93       	push	r21
    1f22:	6f 93       	push	r22
    1f24:	7f 93       	push	r23
    1f26:	8f 93       	push	r24
    1f28:	9f 93       	push	r25
    1f2a:	af 93       	push	r26
    1f2c:	bf 93       	push	r27
    1f2e:	ef 93       	push	r30
    1f30:	ff 93       	push	r31
    1f32:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tce0_ovf_callback>
    1f36:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tce0_ovf_callback+0x1>
    1f3a:	30 97       	sbiw	r30, 0x00	; 0
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <__vector_47+0x42>
    1f3e:	19 95       	eicall
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0b be       	out	0x3b, r0	; 59
    1f5c:	0f 90       	pop	r0
    1f5e:	09 be       	out	0x39, r0	; 57
    1f60:	0f 90       	pop	r0
    1f62:	08 be       	out	0x38, r0	; 56
    1f64:	0f 90       	pop	r0
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	0f 90       	pop	r0
    1f6a:	1f 90       	pop	r1
    1f6c:	18 95       	reti

00001f6e <__vector_48>:
    1f6e:	1f 92       	push	r1
    1f70:	0f 92       	push	r0
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
    1f78:	08 b6       	in	r0, 0x38	; 56
    1f7a:	0f 92       	push	r0
    1f7c:	18 be       	out	0x38, r1	; 56
    1f7e:	09 b6       	in	r0, 0x39	; 57
    1f80:	0f 92       	push	r0
    1f82:	19 be       	out	0x39, r1	; 57
    1f84:	0b b6       	in	r0, 0x3b	; 59
    1f86:	0f 92       	push	r0
    1f88:	1b be       	out	0x3b, r1	; 59
    1f8a:	2f 93       	push	r18
    1f8c:	3f 93       	push	r19
    1f8e:	4f 93       	push	r20
    1f90:	5f 93       	push	r21
    1f92:	6f 93       	push	r22
    1f94:	7f 93       	push	r23
    1f96:	8f 93       	push	r24
    1f98:	9f 93       	push	r25
    1f9a:	af 93       	push	r26
    1f9c:	bf 93       	push	r27
    1f9e:	ef 93       	push	r30
    1fa0:	ff 93       	push	r31
    1fa2:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tce0_err_callback>
    1fa6:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tce0_err_callback+0x1>
    1faa:	30 97       	sbiw	r30, 0x00	; 0
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <__vector_48+0x42>
    1fae:	19 95       	eicall
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0b be       	out	0x3b, r0	; 59
    1fcc:	0f 90       	pop	r0
    1fce:	09 be       	out	0x39, r0	; 57
    1fd0:	0f 90       	pop	r0
    1fd2:	08 be       	out	0x38, r0	; 56
    1fd4:	0f 90       	pop	r0
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	0f 90       	pop	r0
    1fda:	1f 90       	pop	r1
    1fdc:	18 95       	reti

00001fde <__vector_49>:
    1fde:	1f 92       	push	r1
    1fe0:	0f 92       	push	r0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	08 b6       	in	r0, 0x38	; 56
    1fea:	0f 92       	push	r0
    1fec:	18 be       	out	0x38, r1	; 56
    1fee:	09 b6       	in	r0, 0x39	; 57
    1ff0:	0f 92       	push	r0
    1ff2:	19 be       	out	0x39, r1	; 57
    1ff4:	0b b6       	in	r0, 0x3b	; 59
    1ff6:	0f 92       	push	r0
    1ff8:	1b be       	out	0x3b, r1	; 59
    1ffa:	2f 93       	push	r18
    1ffc:	3f 93       	push	r19
    1ffe:	4f 93       	push	r20
    2000:	5f 93       	push	r21
    2002:	6f 93       	push	r22
    2004:	7f 93       	push	r23
    2006:	8f 93       	push	r24
    2008:	9f 93       	push	r25
    200a:	af 93       	push	r26
    200c:	bf 93       	push	r27
    200e:	ef 93       	push	r30
    2010:	ff 93       	push	r31
    2012:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tce0_cca_callback>
    2016:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tce0_cca_callback+0x1>
    201a:	30 97       	sbiw	r30, 0x00	; 0
    201c:	09 f0       	breq	.+2      	; 0x2020 <__vector_49+0x42>
    201e:	19 95       	eicall
    2020:	ff 91       	pop	r31
    2022:	ef 91       	pop	r30
    2024:	bf 91       	pop	r27
    2026:	af 91       	pop	r26
    2028:	9f 91       	pop	r25
    202a:	8f 91       	pop	r24
    202c:	7f 91       	pop	r23
    202e:	6f 91       	pop	r22
    2030:	5f 91       	pop	r21
    2032:	4f 91       	pop	r20
    2034:	3f 91       	pop	r19
    2036:	2f 91       	pop	r18
    2038:	0f 90       	pop	r0
    203a:	0b be       	out	0x3b, r0	; 59
    203c:	0f 90       	pop	r0
    203e:	09 be       	out	0x39, r0	; 57
    2040:	0f 90       	pop	r0
    2042:	08 be       	out	0x38, r0	; 56
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	0f 90       	pop	r0
    204a:	1f 90       	pop	r1
    204c:	18 95       	reti

0000204e <__vector_50>:
    204e:	1f 92       	push	r1
    2050:	0f 92       	push	r0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	0f 92       	push	r0
    2056:	11 24       	eor	r1, r1
    2058:	08 b6       	in	r0, 0x38	; 56
    205a:	0f 92       	push	r0
    205c:	18 be       	out	0x38, r1	; 56
    205e:	09 b6       	in	r0, 0x39	; 57
    2060:	0f 92       	push	r0
    2062:	19 be       	out	0x39, r1	; 57
    2064:	0b b6       	in	r0, 0x3b	; 59
    2066:	0f 92       	push	r0
    2068:	1b be       	out	0x3b, r1	; 59
    206a:	2f 93       	push	r18
    206c:	3f 93       	push	r19
    206e:	4f 93       	push	r20
    2070:	5f 93       	push	r21
    2072:	6f 93       	push	r22
    2074:	7f 93       	push	r23
    2076:	8f 93       	push	r24
    2078:	9f 93       	push	r25
    207a:	af 93       	push	r26
    207c:	bf 93       	push	r27
    207e:	ef 93       	push	r30
    2080:	ff 93       	push	r31
    2082:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tce0_ccb_callback>
    2086:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tce0_ccb_callback+0x1>
    208a:	30 97       	sbiw	r30, 0x00	; 0
    208c:	09 f0       	breq	.+2      	; 0x2090 <__vector_50+0x42>
    208e:	19 95       	eicall
    2090:	ff 91       	pop	r31
    2092:	ef 91       	pop	r30
    2094:	bf 91       	pop	r27
    2096:	af 91       	pop	r26
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	7f 91       	pop	r23
    209e:	6f 91       	pop	r22
    20a0:	5f 91       	pop	r21
    20a2:	4f 91       	pop	r20
    20a4:	3f 91       	pop	r19
    20a6:	2f 91       	pop	r18
    20a8:	0f 90       	pop	r0
    20aa:	0b be       	out	0x3b, r0	; 59
    20ac:	0f 90       	pop	r0
    20ae:	09 be       	out	0x39, r0	; 57
    20b0:	0f 90       	pop	r0
    20b2:	08 be       	out	0x38, r0	; 56
    20b4:	0f 90       	pop	r0
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	0f 90       	pop	r0
    20ba:	1f 90       	pop	r1
    20bc:	18 95       	reti

000020be <__vector_51>:
    20be:	1f 92       	push	r1
    20c0:	0f 92       	push	r0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	0f 92       	push	r0
    20c6:	11 24       	eor	r1, r1
    20c8:	08 b6       	in	r0, 0x38	; 56
    20ca:	0f 92       	push	r0
    20cc:	18 be       	out	0x38, r1	; 56
    20ce:	09 b6       	in	r0, 0x39	; 57
    20d0:	0f 92       	push	r0
    20d2:	19 be       	out	0x39, r1	; 57
    20d4:	0b b6       	in	r0, 0x3b	; 59
    20d6:	0f 92       	push	r0
    20d8:	1b be       	out	0x3b, r1	; 59
    20da:	2f 93       	push	r18
    20dc:	3f 93       	push	r19
    20de:	4f 93       	push	r20
    20e0:	5f 93       	push	r21
    20e2:	6f 93       	push	r22
    20e4:	7f 93       	push	r23
    20e6:	8f 93       	push	r24
    20e8:	9f 93       	push	r25
    20ea:	af 93       	push	r26
    20ec:	bf 93       	push	r27
    20ee:	ef 93       	push	r30
    20f0:	ff 93       	push	r31
    20f2:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tce0_ccc_callback>
    20f6:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tce0_ccc_callback+0x1>
    20fa:	30 97       	sbiw	r30, 0x00	; 0
    20fc:	09 f0       	breq	.+2      	; 0x2100 <__vector_51+0x42>
    20fe:	19 95       	eicall
    2100:	ff 91       	pop	r31
    2102:	ef 91       	pop	r30
    2104:	bf 91       	pop	r27
    2106:	af 91       	pop	r26
    2108:	9f 91       	pop	r25
    210a:	8f 91       	pop	r24
    210c:	7f 91       	pop	r23
    210e:	6f 91       	pop	r22
    2110:	5f 91       	pop	r21
    2112:	4f 91       	pop	r20
    2114:	3f 91       	pop	r19
    2116:	2f 91       	pop	r18
    2118:	0f 90       	pop	r0
    211a:	0b be       	out	0x3b, r0	; 59
    211c:	0f 90       	pop	r0
    211e:	09 be       	out	0x39, r0	; 57
    2120:	0f 90       	pop	r0
    2122:	08 be       	out	0x38, r0	; 56
    2124:	0f 90       	pop	r0
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	0f 90       	pop	r0
    212a:	1f 90       	pop	r1
    212c:	18 95       	reti

0000212e <__vector_52>:
    212e:	1f 92       	push	r1
    2130:	0f 92       	push	r0
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	0f 92       	push	r0
    2136:	11 24       	eor	r1, r1
    2138:	08 b6       	in	r0, 0x38	; 56
    213a:	0f 92       	push	r0
    213c:	18 be       	out	0x38, r1	; 56
    213e:	09 b6       	in	r0, 0x39	; 57
    2140:	0f 92       	push	r0
    2142:	19 be       	out	0x39, r1	; 57
    2144:	0b b6       	in	r0, 0x3b	; 59
    2146:	0f 92       	push	r0
    2148:	1b be       	out	0x3b, r1	; 59
    214a:	2f 93       	push	r18
    214c:	3f 93       	push	r19
    214e:	4f 93       	push	r20
    2150:	5f 93       	push	r21
    2152:	6f 93       	push	r22
    2154:	7f 93       	push	r23
    2156:	8f 93       	push	r24
    2158:	9f 93       	push	r25
    215a:	af 93       	push	r26
    215c:	bf 93       	push	r27
    215e:	ef 93       	push	r30
    2160:	ff 93       	push	r31
    2162:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tce0_ccd_callback>
    2166:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tce0_ccd_callback+0x1>
    216a:	30 97       	sbiw	r30, 0x00	; 0
    216c:	09 f0       	breq	.+2      	; 0x2170 <__vector_52+0x42>
    216e:	19 95       	eicall
    2170:	ff 91       	pop	r31
    2172:	ef 91       	pop	r30
    2174:	bf 91       	pop	r27
    2176:	af 91       	pop	r26
    2178:	9f 91       	pop	r25
    217a:	8f 91       	pop	r24
    217c:	7f 91       	pop	r23
    217e:	6f 91       	pop	r22
    2180:	5f 91       	pop	r21
    2182:	4f 91       	pop	r20
    2184:	3f 91       	pop	r19
    2186:	2f 91       	pop	r18
    2188:	0f 90       	pop	r0
    218a:	0b be       	out	0x3b, r0	; 59
    218c:	0f 90       	pop	r0
    218e:	09 be       	out	0x39, r0	; 57
    2190:	0f 90       	pop	r0
    2192:	08 be       	out	0x38, r0	; 56
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	0f 90       	pop	r0
    219a:	1f 90       	pop	r1
    219c:	18 95       	reti

0000219e <__vector_53>:
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	08 b6       	in	r0, 0x38	; 56
    21aa:	0f 92       	push	r0
    21ac:	18 be       	out	0x38, r1	; 56
    21ae:	09 b6       	in	r0, 0x39	; 57
    21b0:	0f 92       	push	r0
    21b2:	19 be       	out	0x39, r1	; 57
    21b4:	0b b6       	in	r0, 0x3b	; 59
    21b6:	0f 92       	push	r0
    21b8:	1b be       	out	0x3b, r1	; 59
    21ba:	2f 93       	push	r18
    21bc:	3f 93       	push	r19
    21be:	4f 93       	push	r20
    21c0:	5f 93       	push	r21
    21c2:	6f 93       	push	r22
    21c4:	7f 93       	push	r23
    21c6:	8f 93       	push	r24
    21c8:	9f 93       	push	r25
    21ca:	af 93       	push	r26
    21cc:	bf 93       	push	r27
    21ce:	ef 93       	push	r30
    21d0:	ff 93       	push	r31
    21d2:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tce1_ovf_callback>
    21d6:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tce1_ovf_callback+0x1>
    21da:	30 97       	sbiw	r30, 0x00	; 0
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__vector_53+0x42>
    21de:	19 95       	eicall
    21e0:	ff 91       	pop	r31
    21e2:	ef 91       	pop	r30
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	7f 91       	pop	r23
    21ee:	6f 91       	pop	r22
    21f0:	5f 91       	pop	r21
    21f2:	4f 91       	pop	r20
    21f4:	3f 91       	pop	r19
    21f6:	2f 91       	pop	r18
    21f8:	0f 90       	pop	r0
    21fa:	0b be       	out	0x3b, r0	; 59
    21fc:	0f 90       	pop	r0
    21fe:	09 be       	out	0x39, r0	; 57
    2200:	0f 90       	pop	r0
    2202:	08 be       	out	0x38, r0	; 56
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	0f 90       	pop	r0
    220a:	1f 90       	pop	r1
    220c:	18 95       	reti

0000220e <__vector_54>:
    220e:	1f 92       	push	r1
    2210:	0f 92       	push	r0
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	0f 92       	push	r0
    2216:	11 24       	eor	r1, r1
    2218:	08 b6       	in	r0, 0x38	; 56
    221a:	0f 92       	push	r0
    221c:	18 be       	out	0x38, r1	; 56
    221e:	09 b6       	in	r0, 0x39	; 57
    2220:	0f 92       	push	r0
    2222:	19 be       	out	0x39, r1	; 57
    2224:	0b b6       	in	r0, 0x3b	; 59
    2226:	0f 92       	push	r0
    2228:	1b be       	out	0x3b, r1	; 59
    222a:	2f 93       	push	r18
    222c:	3f 93       	push	r19
    222e:	4f 93       	push	r20
    2230:	5f 93       	push	r21
    2232:	6f 93       	push	r22
    2234:	7f 93       	push	r23
    2236:	8f 93       	push	r24
    2238:	9f 93       	push	r25
    223a:	af 93       	push	r26
    223c:	bf 93       	push	r27
    223e:	ef 93       	push	r30
    2240:	ff 93       	push	r31
    2242:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tce1_err_callback>
    2246:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tce1_err_callback+0x1>
    224a:	30 97       	sbiw	r30, 0x00	; 0
    224c:	09 f0       	breq	.+2      	; 0x2250 <__vector_54+0x42>
    224e:	19 95       	eicall
    2250:	ff 91       	pop	r31
    2252:	ef 91       	pop	r30
    2254:	bf 91       	pop	r27
    2256:	af 91       	pop	r26
    2258:	9f 91       	pop	r25
    225a:	8f 91       	pop	r24
    225c:	7f 91       	pop	r23
    225e:	6f 91       	pop	r22
    2260:	5f 91       	pop	r21
    2262:	4f 91       	pop	r20
    2264:	3f 91       	pop	r19
    2266:	2f 91       	pop	r18
    2268:	0f 90       	pop	r0
    226a:	0b be       	out	0x3b, r0	; 59
    226c:	0f 90       	pop	r0
    226e:	09 be       	out	0x39, r0	; 57
    2270:	0f 90       	pop	r0
    2272:	08 be       	out	0x38, r0	; 56
    2274:	0f 90       	pop	r0
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	0f 90       	pop	r0
    227a:	1f 90       	pop	r1
    227c:	18 95       	reti

0000227e <__vector_55>:
    227e:	1f 92       	push	r1
    2280:	0f 92       	push	r0
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	0f 92       	push	r0
    2286:	11 24       	eor	r1, r1
    2288:	08 b6       	in	r0, 0x38	; 56
    228a:	0f 92       	push	r0
    228c:	18 be       	out	0x38, r1	; 56
    228e:	09 b6       	in	r0, 0x39	; 57
    2290:	0f 92       	push	r0
    2292:	19 be       	out	0x39, r1	; 57
    2294:	0b b6       	in	r0, 0x3b	; 59
    2296:	0f 92       	push	r0
    2298:	1b be       	out	0x3b, r1	; 59
    229a:	2f 93       	push	r18
    229c:	3f 93       	push	r19
    229e:	4f 93       	push	r20
    22a0:	5f 93       	push	r21
    22a2:	6f 93       	push	r22
    22a4:	7f 93       	push	r23
    22a6:	8f 93       	push	r24
    22a8:	9f 93       	push	r25
    22aa:	af 93       	push	r26
    22ac:	bf 93       	push	r27
    22ae:	ef 93       	push	r30
    22b0:	ff 93       	push	r31
    22b2:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tce1_cca_callback>
    22b6:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tce1_cca_callback+0x1>
    22ba:	30 97       	sbiw	r30, 0x00	; 0
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <__vector_55+0x42>
    22be:	19 95       	eicall
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	7f 91       	pop	r23
    22ce:	6f 91       	pop	r22
    22d0:	5f 91       	pop	r21
    22d2:	4f 91       	pop	r20
    22d4:	3f 91       	pop	r19
    22d6:	2f 91       	pop	r18
    22d8:	0f 90       	pop	r0
    22da:	0b be       	out	0x3b, r0	; 59
    22dc:	0f 90       	pop	r0
    22de:	09 be       	out	0x39, r0	; 57
    22e0:	0f 90       	pop	r0
    22e2:	08 be       	out	0x38, r0	; 56
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	0f 90       	pop	r0
    22ea:	1f 90       	pop	r1
    22ec:	18 95       	reti

000022ee <__vector_56>:
    22ee:	1f 92       	push	r1
    22f0:	0f 92       	push	r0
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	0f 92       	push	r0
    22f6:	11 24       	eor	r1, r1
    22f8:	08 b6       	in	r0, 0x38	; 56
    22fa:	0f 92       	push	r0
    22fc:	18 be       	out	0x38, r1	; 56
    22fe:	09 b6       	in	r0, 0x39	; 57
    2300:	0f 92       	push	r0
    2302:	19 be       	out	0x39, r1	; 57
    2304:	0b b6       	in	r0, 0x3b	; 59
    2306:	0f 92       	push	r0
    2308:	1b be       	out	0x3b, r1	; 59
    230a:	2f 93       	push	r18
    230c:	3f 93       	push	r19
    230e:	4f 93       	push	r20
    2310:	5f 93       	push	r21
    2312:	6f 93       	push	r22
    2314:	7f 93       	push	r23
    2316:	8f 93       	push	r24
    2318:	9f 93       	push	r25
    231a:	af 93       	push	r26
    231c:	bf 93       	push	r27
    231e:	ef 93       	push	r30
    2320:	ff 93       	push	r31
    2322:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tce1_ccb_callback>
    2326:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tce1_ccb_callback+0x1>
    232a:	30 97       	sbiw	r30, 0x00	; 0
    232c:	09 f0       	breq	.+2      	; 0x2330 <__vector_56+0x42>
    232e:	19 95       	eicall
    2330:	ff 91       	pop	r31
    2332:	ef 91       	pop	r30
    2334:	bf 91       	pop	r27
    2336:	af 91       	pop	r26
    2338:	9f 91       	pop	r25
    233a:	8f 91       	pop	r24
    233c:	7f 91       	pop	r23
    233e:	6f 91       	pop	r22
    2340:	5f 91       	pop	r21
    2342:	4f 91       	pop	r20
    2344:	3f 91       	pop	r19
    2346:	2f 91       	pop	r18
    2348:	0f 90       	pop	r0
    234a:	0b be       	out	0x3b, r0	; 59
    234c:	0f 90       	pop	r0
    234e:	09 be       	out	0x39, r0	; 57
    2350:	0f 90       	pop	r0
    2352:	08 be       	out	0x38, r0	; 56
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	0f 90       	pop	r0
    235a:	1f 90       	pop	r1
    235c:	18 95       	reti

0000235e <__vector_108>:
    235e:	1f 92       	push	r1
    2360:	0f 92       	push	r0
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	0f 92       	push	r0
    2366:	11 24       	eor	r1, r1
    2368:	08 b6       	in	r0, 0x38	; 56
    236a:	0f 92       	push	r0
    236c:	18 be       	out	0x38, r1	; 56
    236e:	09 b6       	in	r0, 0x39	; 57
    2370:	0f 92       	push	r0
    2372:	19 be       	out	0x39, r1	; 57
    2374:	0b b6       	in	r0, 0x3b	; 59
    2376:	0f 92       	push	r0
    2378:	1b be       	out	0x3b, r1	; 59
    237a:	2f 93       	push	r18
    237c:	3f 93       	push	r19
    237e:	4f 93       	push	r20
    2380:	5f 93       	push	r21
    2382:	6f 93       	push	r22
    2384:	7f 93       	push	r23
    2386:	8f 93       	push	r24
    2388:	9f 93       	push	r25
    238a:	af 93       	push	r26
    238c:	bf 93       	push	r27
    238e:	ef 93       	push	r30
    2390:	ff 93       	push	r31
    2392:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tcf0_ovf_callback>
    2396:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tcf0_ovf_callback+0x1>
    239a:	30 97       	sbiw	r30, 0x00	; 0
    239c:	09 f0       	breq	.+2      	; 0x23a0 <__vector_108+0x42>
    239e:	19 95       	eicall
    23a0:	ff 91       	pop	r31
    23a2:	ef 91       	pop	r30
    23a4:	bf 91       	pop	r27
    23a6:	af 91       	pop	r26
    23a8:	9f 91       	pop	r25
    23aa:	8f 91       	pop	r24
    23ac:	7f 91       	pop	r23
    23ae:	6f 91       	pop	r22
    23b0:	5f 91       	pop	r21
    23b2:	4f 91       	pop	r20
    23b4:	3f 91       	pop	r19
    23b6:	2f 91       	pop	r18
    23b8:	0f 90       	pop	r0
    23ba:	0b be       	out	0x3b, r0	; 59
    23bc:	0f 90       	pop	r0
    23be:	09 be       	out	0x39, r0	; 57
    23c0:	0f 90       	pop	r0
    23c2:	08 be       	out	0x38, r0	; 56
    23c4:	0f 90       	pop	r0
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	0f 90       	pop	r0
    23ca:	1f 90       	pop	r1
    23cc:	18 95       	reti

000023ce <__vector_109>:
    23ce:	1f 92       	push	r1
    23d0:	0f 92       	push	r0
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	0f 92       	push	r0
    23d6:	11 24       	eor	r1, r1
    23d8:	08 b6       	in	r0, 0x38	; 56
    23da:	0f 92       	push	r0
    23dc:	18 be       	out	0x38, r1	; 56
    23de:	09 b6       	in	r0, 0x39	; 57
    23e0:	0f 92       	push	r0
    23e2:	19 be       	out	0x39, r1	; 57
    23e4:	0b b6       	in	r0, 0x3b	; 59
    23e6:	0f 92       	push	r0
    23e8:	1b be       	out	0x3b, r1	; 59
    23ea:	2f 93       	push	r18
    23ec:	3f 93       	push	r19
    23ee:	4f 93       	push	r20
    23f0:	5f 93       	push	r21
    23f2:	6f 93       	push	r22
    23f4:	7f 93       	push	r23
    23f6:	8f 93       	push	r24
    23f8:	9f 93       	push	r25
    23fa:	af 93       	push	r26
    23fc:	bf 93       	push	r27
    23fe:	ef 93       	push	r30
    2400:	ff 93       	push	r31
    2402:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tcf0_err_callback>
    2406:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tcf0_err_callback+0x1>
    240a:	30 97       	sbiw	r30, 0x00	; 0
    240c:	09 f0       	breq	.+2      	; 0x2410 <__vector_109+0x42>
    240e:	19 95       	eicall
    2410:	ff 91       	pop	r31
    2412:	ef 91       	pop	r30
    2414:	bf 91       	pop	r27
    2416:	af 91       	pop	r26
    2418:	9f 91       	pop	r25
    241a:	8f 91       	pop	r24
    241c:	7f 91       	pop	r23
    241e:	6f 91       	pop	r22
    2420:	5f 91       	pop	r21
    2422:	4f 91       	pop	r20
    2424:	3f 91       	pop	r19
    2426:	2f 91       	pop	r18
    2428:	0f 90       	pop	r0
    242a:	0b be       	out	0x3b, r0	; 59
    242c:	0f 90       	pop	r0
    242e:	09 be       	out	0x39, r0	; 57
    2430:	0f 90       	pop	r0
    2432:	08 be       	out	0x38, r0	; 56
    2434:	0f 90       	pop	r0
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	0f 90       	pop	r0
    243a:	1f 90       	pop	r1
    243c:	18 95       	reti

0000243e <__vector_110>:
    243e:	1f 92       	push	r1
    2440:	0f 92       	push	r0
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	0f 92       	push	r0
    2446:	11 24       	eor	r1, r1
    2448:	08 b6       	in	r0, 0x38	; 56
    244a:	0f 92       	push	r0
    244c:	18 be       	out	0x38, r1	; 56
    244e:	09 b6       	in	r0, 0x39	; 57
    2450:	0f 92       	push	r0
    2452:	19 be       	out	0x39, r1	; 57
    2454:	0b b6       	in	r0, 0x3b	; 59
    2456:	0f 92       	push	r0
    2458:	1b be       	out	0x3b, r1	; 59
    245a:	2f 93       	push	r18
    245c:	3f 93       	push	r19
    245e:	4f 93       	push	r20
    2460:	5f 93       	push	r21
    2462:	6f 93       	push	r22
    2464:	7f 93       	push	r23
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
    246e:	ef 93       	push	r30
    2470:	ff 93       	push	r31
    2472:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tcf0_cca_callback>
    2476:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tcf0_cca_callback+0x1>
    247a:	30 97       	sbiw	r30, 0x00	; 0
    247c:	09 f0       	breq	.+2      	; 0x2480 <__vector_110+0x42>
    247e:	19 95       	eicall
    2480:	ff 91       	pop	r31
    2482:	ef 91       	pop	r30
    2484:	bf 91       	pop	r27
    2486:	af 91       	pop	r26
    2488:	9f 91       	pop	r25
    248a:	8f 91       	pop	r24
    248c:	7f 91       	pop	r23
    248e:	6f 91       	pop	r22
    2490:	5f 91       	pop	r21
    2492:	4f 91       	pop	r20
    2494:	3f 91       	pop	r19
    2496:	2f 91       	pop	r18
    2498:	0f 90       	pop	r0
    249a:	0b be       	out	0x3b, r0	; 59
    249c:	0f 90       	pop	r0
    249e:	09 be       	out	0x39, r0	; 57
    24a0:	0f 90       	pop	r0
    24a2:	08 be       	out	0x38, r0	; 56
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	0f 90       	pop	r0
    24aa:	1f 90       	pop	r1
    24ac:	18 95       	reti

000024ae <__vector_111>:
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	08 b6       	in	r0, 0x38	; 56
    24ba:	0f 92       	push	r0
    24bc:	18 be       	out	0x38, r1	; 56
    24be:	09 b6       	in	r0, 0x39	; 57
    24c0:	0f 92       	push	r0
    24c2:	19 be       	out	0x39, r1	; 57
    24c4:	0b b6       	in	r0, 0x3b	; 59
    24c6:	0f 92       	push	r0
    24c8:	1b be       	out	0x3b, r1	; 59
    24ca:	2f 93       	push	r18
    24cc:	3f 93       	push	r19
    24ce:	4f 93       	push	r20
    24d0:	5f 93       	push	r21
    24d2:	6f 93       	push	r22
    24d4:	7f 93       	push	r23
    24d6:	8f 93       	push	r24
    24d8:	9f 93       	push	r25
    24da:	af 93       	push	r26
    24dc:	bf 93       	push	r27
    24de:	ef 93       	push	r30
    24e0:	ff 93       	push	r31
    24e2:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <tc_tcf0_ccb_callback>
    24e6:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <tc_tcf0_ccb_callback+0x1>
    24ea:	30 97       	sbiw	r30, 0x00	; 0
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <__vector_111+0x42>
    24ee:	19 95       	eicall
    24f0:	ff 91       	pop	r31
    24f2:	ef 91       	pop	r30
    24f4:	bf 91       	pop	r27
    24f6:	af 91       	pop	r26
    24f8:	9f 91       	pop	r25
    24fa:	8f 91       	pop	r24
    24fc:	7f 91       	pop	r23
    24fe:	6f 91       	pop	r22
    2500:	5f 91       	pop	r21
    2502:	4f 91       	pop	r20
    2504:	3f 91       	pop	r19
    2506:	2f 91       	pop	r18
    2508:	0f 90       	pop	r0
    250a:	0b be       	out	0x3b, r0	; 59
    250c:	0f 90       	pop	r0
    250e:	09 be       	out	0x39, r0	; 57
    2510:	0f 90       	pop	r0
    2512:	08 be       	out	0x38, r0	; 56
    2514:	0f 90       	pop	r0
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	0f 90       	pop	r0
    251a:	1f 90       	pop	r1
    251c:	18 95       	reti

0000251e <__vector_112>:
    251e:	1f 92       	push	r1
    2520:	0f 92       	push	r0
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	0f 92       	push	r0
    2526:	11 24       	eor	r1, r1
    2528:	08 b6       	in	r0, 0x38	; 56
    252a:	0f 92       	push	r0
    252c:	18 be       	out	0x38, r1	; 56
    252e:	09 b6       	in	r0, 0x39	; 57
    2530:	0f 92       	push	r0
    2532:	19 be       	out	0x39, r1	; 57
    2534:	0b b6       	in	r0, 0x3b	; 59
    2536:	0f 92       	push	r0
    2538:	1b be       	out	0x3b, r1	; 59
    253a:	2f 93       	push	r18
    253c:	3f 93       	push	r19
    253e:	4f 93       	push	r20
    2540:	5f 93       	push	r21
    2542:	6f 93       	push	r22
    2544:	7f 93       	push	r23
    2546:	8f 93       	push	r24
    2548:	9f 93       	push	r25
    254a:	af 93       	push	r26
    254c:	bf 93       	push	r27
    254e:	ef 93       	push	r30
    2550:	ff 93       	push	r31
    2552:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <tc_tcf0_ccc_callback>
    2556:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <tc_tcf0_ccc_callback+0x1>
    255a:	30 97       	sbiw	r30, 0x00	; 0
    255c:	09 f0       	breq	.+2      	; 0x2560 <__vector_112+0x42>
    255e:	19 95       	eicall
    2560:	ff 91       	pop	r31
    2562:	ef 91       	pop	r30
    2564:	bf 91       	pop	r27
    2566:	af 91       	pop	r26
    2568:	9f 91       	pop	r25
    256a:	8f 91       	pop	r24
    256c:	7f 91       	pop	r23
    256e:	6f 91       	pop	r22
    2570:	5f 91       	pop	r21
    2572:	4f 91       	pop	r20
    2574:	3f 91       	pop	r19
    2576:	2f 91       	pop	r18
    2578:	0f 90       	pop	r0
    257a:	0b be       	out	0x3b, r0	; 59
    257c:	0f 90       	pop	r0
    257e:	09 be       	out	0x39, r0	; 57
    2580:	0f 90       	pop	r0
    2582:	08 be       	out	0x38, r0	; 56
    2584:	0f 90       	pop	r0
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	0f 90       	pop	r0
    258a:	1f 90       	pop	r1
    258c:	18 95       	reti

0000258e <__vector_113>:
    258e:	1f 92       	push	r1
    2590:	0f 92       	push	r0
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	0f 92       	push	r0
    2596:	11 24       	eor	r1, r1
    2598:	08 b6       	in	r0, 0x38	; 56
    259a:	0f 92       	push	r0
    259c:	18 be       	out	0x38, r1	; 56
    259e:	09 b6       	in	r0, 0x39	; 57
    25a0:	0f 92       	push	r0
    25a2:	19 be       	out	0x39, r1	; 57
    25a4:	0b b6       	in	r0, 0x3b	; 59
    25a6:	0f 92       	push	r0
    25a8:	1b be       	out	0x3b, r1	; 59
    25aa:	2f 93       	push	r18
    25ac:	3f 93       	push	r19
    25ae:	4f 93       	push	r20
    25b0:	5f 93       	push	r21
    25b2:	6f 93       	push	r22
    25b4:	7f 93       	push	r23
    25b6:	8f 93       	push	r24
    25b8:	9f 93       	push	r25
    25ba:	af 93       	push	r26
    25bc:	bf 93       	push	r27
    25be:	ef 93       	push	r30
    25c0:	ff 93       	push	r31
    25c2:	e0 91 89 20 	lds	r30, 0x2089	; 0x802089 <tc_tcf0_ccd_callback>
    25c6:	f0 91 8a 20 	lds	r31, 0x208A	; 0x80208a <tc_tcf0_ccd_callback+0x1>
    25ca:	30 97       	sbiw	r30, 0x00	; 0
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <__vector_113+0x42>
    25ce:	19 95       	eicall
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0b be       	out	0x3b, r0	; 59
    25ec:	0f 90       	pop	r0
    25ee:	09 be       	out	0x39, r0	; 57
    25f0:	0f 90       	pop	r0
    25f2:	08 be       	out	0x38, r0	; 56
    25f4:	0f 90       	pop	r0
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	0f 90       	pop	r0
    25fa:	1f 90       	pop	r1
    25fc:	18 95       	reti

000025fe <__vector_114>:
    25fe:	1f 92       	push	r1
    2600:	0f 92       	push	r0
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	0f 92       	push	r0
    2606:	11 24       	eor	r1, r1
    2608:	08 b6       	in	r0, 0x38	; 56
    260a:	0f 92       	push	r0
    260c:	18 be       	out	0x38, r1	; 56
    260e:	09 b6       	in	r0, 0x39	; 57
    2610:	0f 92       	push	r0
    2612:	19 be       	out	0x39, r1	; 57
    2614:	0b b6       	in	r0, 0x3b	; 59
    2616:	0f 92       	push	r0
    2618:	1b be       	out	0x3b, r1	; 59
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	ef 93       	push	r30
    2630:	ff 93       	push	r31
    2632:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <tc_tcf1_ovf_callback>
    2636:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <tc_tcf1_ovf_callback+0x1>
    263a:	30 97       	sbiw	r30, 0x00	; 0
    263c:	09 f0       	breq	.+2      	; 0x2640 <__vector_114+0x42>
    263e:	19 95       	eicall
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	bf 91       	pop	r27
    2646:	af 91       	pop	r26
    2648:	9f 91       	pop	r25
    264a:	8f 91       	pop	r24
    264c:	7f 91       	pop	r23
    264e:	6f 91       	pop	r22
    2650:	5f 91       	pop	r21
    2652:	4f 91       	pop	r20
    2654:	3f 91       	pop	r19
    2656:	2f 91       	pop	r18
    2658:	0f 90       	pop	r0
    265a:	0b be       	out	0x3b, r0	; 59
    265c:	0f 90       	pop	r0
    265e:	09 be       	out	0x39, r0	; 57
    2660:	0f 90       	pop	r0
    2662:	08 be       	out	0x38, r0	; 56
    2664:	0f 90       	pop	r0
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	0f 90       	pop	r0
    266a:	1f 90       	pop	r1
    266c:	18 95       	reti

0000266e <__vector_115>:
    266e:	1f 92       	push	r1
    2670:	0f 92       	push	r0
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	0f 92       	push	r0
    2676:	11 24       	eor	r1, r1
    2678:	08 b6       	in	r0, 0x38	; 56
    267a:	0f 92       	push	r0
    267c:	18 be       	out	0x38, r1	; 56
    267e:	09 b6       	in	r0, 0x39	; 57
    2680:	0f 92       	push	r0
    2682:	19 be       	out	0x39, r1	; 57
    2684:	0b b6       	in	r0, 0x3b	; 59
    2686:	0f 92       	push	r0
    2688:	1b be       	out	0x3b, r1	; 59
    268a:	2f 93       	push	r18
    268c:	3f 93       	push	r19
    268e:	4f 93       	push	r20
    2690:	5f 93       	push	r21
    2692:	6f 93       	push	r22
    2694:	7f 93       	push	r23
    2696:	8f 93       	push	r24
    2698:	9f 93       	push	r25
    269a:	af 93       	push	r26
    269c:	bf 93       	push	r27
    269e:	ef 93       	push	r30
    26a0:	ff 93       	push	r31
    26a2:	e0 91 85 20 	lds	r30, 0x2085	; 0x802085 <tc_tcf1_err_callback>
    26a6:	f0 91 86 20 	lds	r31, 0x2086	; 0x802086 <tc_tcf1_err_callback+0x1>
    26aa:	30 97       	sbiw	r30, 0x00	; 0
    26ac:	09 f0       	breq	.+2      	; 0x26b0 <__vector_115+0x42>
    26ae:	19 95       	eicall
    26b0:	ff 91       	pop	r31
    26b2:	ef 91       	pop	r30
    26b4:	bf 91       	pop	r27
    26b6:	af 91       	pop	r26
    26b8:	9f 91       	pop	r25
    26ba:	8f 91       	pop	r24
    26bc:	7f 91       	pop	r23
    26be:	6f 91       	pop	r22
    26c0:	5f 91       	pop	r21
    26c2:	4f 91       	pop	r20
    26c4:	3f 91       	pop	r19
    26c6:	2f 91       	pop	r18
    26c8:	0f 90       	pop	r0
    26ca:	0b be       	out	0x3b, r0	; 59
    26cc:	0f 90       	pop	r0
    26ce:	09 be       	out	0x39, r0	; 57
    26d0:	0f 90       	pop	r0
    26d2:	08 be       	out	0x38, r0	; 56
    26d4:	0f 90       	pop	r0
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	0f 90       	pop	r0
    26da:	1f 90       	pop	r1
    26dc:	18 95       	reti

000026de <__vector_116>:
    26de:	1f 92       	push	r1
    26e0:	0f 92       	push	r0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	0f 92       	push	r0
    26e6:	11 24       	eor	r1, r1
    26e8:	08 b6       	in	r0, 0x38	; 56
    26ea:	0f 92       	push	r0
    26ec:	18 be       	out	0x38, r1	; 56
    26ee:	09 b6       	in	r0, 0x39	; 57
    26f0:	0f 92       	push	r0
    26f2:	19 be       	out	0x39, r1	; 57
    26f4:	0b b6       	in	r0, 0x3b	; 59
    26f6:	0f 92       	push	r0
    26f8:	1b be       	out	0x3b, r1	; 59
    26fa:	2f 93       	push	r18
    26fc:	3f 93       	push	r19
    26fe:	4f 93       	push	r20
    2700:	5f 93       	push	r21
    2702:	6f 93       	push	r22
    2704:	7f 93       	push	r23
    2706:	8f 93       	push	r24
    2708:	9f 93       	push	r25
    270a:	af 93       	push	r26
    270c:	bf 93       	push	r27
    270e:	ef 93       	push	r30
    2710:	ff 93       	push	r31
    2712:	e0 91 83 20 	lds	r30, 0x2083	; 0x802083 <tc_tcf1_cca_callback>
    2716:	f0 91 84 20 	lds	r31, 0x2084	; 0x802084 <tc_tcf1_cca_callback+0x1>
    271a:	30 97       	sbiw	r30, 0x00	; 0
    271c:	09 f0       	breq	.+2      	; 0x2720 <__vector_116+0x42>
    271e:	19 95       	eicall
    2720:	ff 91       	pop	r31
    2722:	ef 91       	pop	r30
    2724:	bf 91       	pop	r27
    2726:	af 91       	pop	r26
    2728:	9f 91       	pop	r25
    272a:	8f 91       	pop	r24
    272c:	7f 91       	pop	r23
    272e:	6f 91       	pop	r22
    2730:	5f 91       	pop	r21
    2732:	4f 91       	pop	r20
    2734:	3f 91       	pop	r19
    2736:	2f 91       	pop	r18
    2738:	0f 90       	pop	r0
    273a:	0b be       	out	0x3b, r0	; 59
    273c:	0f 90       	pop	r0
    273e:	09 be       	out	0x39, r0	; 57
    2740:	0f 90       	pop	r0
    2742:	08 be       	out	0x38, r0	; 56
    2744:	0f 90       	pop	r0
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	0f 90       	pop	r0
    274a:	1f 90       	pop	r1
    274c:	18 95       	reti

0000274e <__vector_117>:
    274e:	1f 92       	push	r1
    2750:	0f 92       	push	r0
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	0f 92       	push	r0
    2756:	11 24       	eor	r1, r1
    2758:	08 b6       	in	r0, 0x38	; 56
    275a:	0f 92       	push	r0
    275c:	18 be       	out	0x38, r1	; 56
    275e:	09 b6       	in	r0, 0x39	; 57
    2760:	0f 92       	push	r0
    2762:	19 be       	out	0x39, r1	; 57
    2764:	0b b6       	in	r0, 0x3b	; 59
    2766:	0f 92       	push	r0
    2768:	1b be       	out	0x3b, r1	; 59
    276a:	2f 93       	push	r18
    276c:	3f 93       	push	r19
    276e:	4f 93       	push	r20
    2770:	5f 93       	push	r21
    2772:	6f 93       	push	r22
    2774:	7f 93       	push	r23
    2776:	8f 93       	push	r24
    2778:	9f 93       	push	r25
    277a:	af 93       	push	r26
    277c:	bf 93       	push	r27
    277e:	ef 93       	push	r30
    2780:	ff 93       	push	r31
    2782:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <tc_tcf1_ccb_callback>
    2786:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <tc_tcf1_ccb_callback+0x1>
    278a:	30 97       	sbiw	r30, 0x00	; 0
    278c:	09 f0       	breq	.+2      	; 0x2790 <__vector_117+0x42>
    278e:	19 95       	eicall
    2790:	ff 91       	pop	r31
    2792:	ef 91       	pop	r30
    2794:	bf 91       	pop	r27
    2796:	af 91       	pop	r26
    2798:	9f 91       	pop	r25
    279a:	8f 91       	pop	r24
    279c:	7f 91       	pop	r23
    279e:	6f 91       	pop	r22
    27a0:	5f 91       	pop	r21
    27a2:	4f 91       	pop	r20
    27a4:	3f 91       	pop	r19
    27a6:	2f 91       	pop	r18
    27a8:	0f 90       	pop	r0
    27aa:	0b be       	out	0x3b, r0	; 59
    27ac:	0f 90       	pop	r0
    27ae:	09 be       	out	0x39, r0	; 57
    27b0:	0f 90       	pop	r0
    27b2:	08 be       	out	0x38, r0	; 56
    27b4:	0f 90       	pop	r0
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	0f 90       	pop	r0
    27ba:	1f 90       	pop	r1
    27bc:	18 95       	reti

000027be <tc_enable>:
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	1f 92       	push	r1
    27c6:	1f 92       	push	r1
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	2f b7       	in	r18, 0x3f	; 63
    27ce:	2a 83       	std	Y+2, r18	; 0x02
    27d0:	f8 94       	cli
    27d2:	1a 81       	ldd	r17, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	39 2f       	mov	r19, r25
    27d8:	21 15       	cp	r18, r1
    27da:	88 e0       	ldi	r24, 0x08	; 8
    27dc:	38 07       	cpc	r19, r24
    27de:	49 f4       	brne	.+18     	; 0x27f2 <tc_enable+0x34>
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	83 e0       	ldi	r24, 0x03	; 3
    27e4:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    27e8:	64 e0       	ldi	r22, 0x04	; 4
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    27f0:	5c c0       	rjmp	.+184    	; 0x28aa <tc_enable+0xec>
    27f2:	20 34       	cpi	r18, 0x40	; 64
    27f4:	88 e0       	ldi	r24, 0x08	; 8
    27f6:	38 07       	cpc	r19, r24
    27f8:	49 f4       	brne	.+18     	; 0x280c <tc_enable+0x4e>
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    2802:	64 e0       	ldi	r22, 0x04	; 4
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    280a:	4f c0       	rjmp	.+158    	; 0x28aa <tc_enable+0xec>
    280c:	21 15       	cp	r18, r1
    280e:	89 e0       	ldi	r24, 0x09	; 9
    2810:	38 07       	cpc	r19, r24
    2812:	49 f4       	brne	.+18     	; 0x2826 <tc_enable+0x68>
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	84 e0       	ldi	r24, 0x04	; 4
    2818:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    281c:	64 e0       	ldi	r22, 0x04	; 4
    281e:	84 e0       	ldi	r24, 0x04	; 4
    2820:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    2824:	42 c0       	rjmp	.+132    	; 0x28aa <tc_enable+0xec>
    2826:	20 34       	cpi	r18, 0x40	; 64
    2828:	89 e0       	ldi	r24, 0x09	; 9
    282a:	38 07       	cpc	r19, r24
    282c:	49 f4       	brne	.+18     	; 0x2840 <tc_enable+0x82>
    282e:	62 e0       	ldi	r22, 0x02	; 2
    2830:	84 e0       	ldi	r24, 0x04	; 4
    2832:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	84 e0       	ldi	r24, 0x04	; 4
    283a:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    283e:	35 c0       	rjmp	.+106    	; 0x28aa <tc_enable+0xec>
    2840:	21 15       	cp	r18, r1
    2842:	8a e0       	ldi	r24, 0x0A	; 10
    2844:	38 07       	cpc	r19, r24
    2846:	49 f4       	brne	.+18     	; 0x285a <tc_enable+0x9c>
    2848:	61 e0       	ldi	r22, 0x01	; 1
    284a:	85 e0       	ldi	r24, 0x05	; 5
    284c:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    2850:	64 e0       	ldi	r22, 0x04	; 4
    2852:	85 e0       	ldi	r24, 0x05	; 5
    2854:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    2858:	28 c0       	rjmp	.+80     	; 0x28aa <tc_enable+0xec>
    285a:	20 34       	cpi	r18, 0x40	; 64
    285c:	8a e0       	ldi	r24, 0x0A	; 10
    285e:	38 07       	cpc	r19, r24
    2860:	49 f4       	brne	.+18     	; 0x2874 <tc_enable+0xb6>
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	85 e0       	ldi	r24, 0x05	; 5
    2866:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    286a:	64 e0       	ldi	r22, 0x04	; 4
    286c:	85 e0       	ldi	r24, 0x05	; 5
    286e:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    2872:	1b c0       	rjmp	.+54     	; 0x28aa <tc_enable+0xec>
    2874:	21 15       	cp	r18, r1
    2876:	8b e0       	ldi	r24, 0x0B	; 11
    2878:	38 07       	cpc	r19, r24
    287a:	49 f4       	brne	.+18     	; 0x288e <tc_enable+0xd0>
    287c:	61 e0       	ldi	r22, 0x01	; 1
    287e:	86 e0       	ldi	r24, 0x06	; 6
    2880:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    2884:	64 e0       	ldi	r22, 0x04	; 4
    2886:	86 e0       	ldi	r24, 0x06	; 6
    2888:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    288c:	0e c0       	rjmp	.+28     	; 0x28aa <tc_enable+0xec>
    288e:	20 34       	cpi	r18, 0x40	; 64
    2890:	3b 40       	sbci	r19, 0x0B	; 11
    2892:	49 f4       	brne	.+18     	; 0x28a6 <tc_enable+0xe8>
    2894:	62 e0       	ldi	r22, 0x02	; 2
    2896:	86 e0       	ldi	r24, 0x06	; 6
    2898:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	86 e0       	ldi	r24, 0x06	; 6
    28a0:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <tc_enable+0xec>
    28a6:	1f bf       	out	0x3f, r17	; 63
    28a8:	10 c0       	rjmp	.+32     	; 0x28ca <tc_enable+0x10c>
    28aa:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <sleepmgr_locks+0x1>
    28ae:	8f 3f       	cpi	r24, 0xFF	; 255
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <tc_enable+0xf6>
    28b2:	ff cf       	rjmp	.-2      	; 0x28b2 <tc_enable+0xf4>
    28b4:	8f b7       	in	r24, 0x3f	; 63
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	f8 94       	cli
    28ba:	99 81       	ldd	r25, Y+1	; 0x01
    28bc:	eb ed       	ldi	r30, 0xDB	; 219
    28be:	f0 e2       	ldi	r31, 0x20	; 32
    28c0:	81 81       	ldd	r24, Z+1	; 0x01
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	81 83       	std	Z+1, r24	; 0x01
    28c6:	9f bf       	out	0x3f, r25	; 63
    28c8:	1f bf       	out	0x3f, r17	; 63
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	1f 91       	pop	r17
    28d4:	08 95       	ret

000028d6 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    28d6:	81 15       	cp	r24, r1
    28d8:	28 e0       	ldi	r18, 0x08	; 8
    28da:	92 07       	cpc	r25, r18
    28dc:	29 f4       	brne	.+10     	; 0x28e8 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    28de:	60 93 cf 20 	sts	0x20CF, r22	; 0x8020cf <tc_tcc0_ovf_callback>
    28e2:	70 93 d0 20 	sts	0x20D0, r23	; 0x8020d0 <tc_tcc0_ovf_callback+0x1>
    28e6:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    28e8:	80 34       	cpi	r24, 0x40	; 64
    28ea:	28 e0       	ldi	r18, 0x08	; 8
    28ec:	92 07       	cpc	r25, r18
    28ee:	29 f4       	brne	.+10     	; 0x28fa <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    28f0:	60 93 c3 20 	sts	0x20C3, r22	; 0x8020c3 <tc_tcc1_ovf_callback>
    28f4:	70 93 c4 20 	sts	0x20C4, r23	; 0x8020c4 <tc_tcc1_ovf_callback+0x1>
    28f8:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    28fa:	81 15       	cp	r24, r1
    28fc:	29 e0       	ldi	r18, 0x09	; 9
    28fe:	92 07       	cpc	r25, r18
    2900:	29 f4       	brne	.+10     	; 0x290c <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    2902:	60 93 bb 20 	sts	0x20BB, r22	; 0x8020bb <tc_tcd0_ovf_callback>
    2906:	70 93 bc 20 	sts	0x20BC, r23	; 0x8020bc <tc_tcd0_ovf_callback+0x1>
    290a:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    290c:	80 34       	cpi	r24, 0x40	; 64
    290e:	29 e0       	ldi	r18, 0x09	; 9
    2910:	92 07       	cpc	r25, r18
    2912:	29 f4       	brne	.+10     	; 0x291e <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    2914:	60 93 af 20 	sts	0x20AF, r22	; 0x8020af <tc_tcd1_ovf_callback>
    2918:	70 93 b0 20 	sts	0x20B0, r23	; 0x8020b0 <tc_tcd1_ovf_callback+0x1>
    291c:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    291e:	81 15       	cp	r24, r1
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	92 07       	cpc	r25, r18
    2924:	29 f4       	brne	.+10     	; 0x2930 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    2926:	60 93 a7 20 	sts	0x20A7, r22	; 0x8020a7 <tc_tce0_ovf_callback>
    292a:	70 93 a8 20 	sts	0x20A8, r23	; 0x8020a8 <tc_tce0_ovf_callback+0x1>
    292e:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2930:	80 34       	cpi	r24, 0x40	; 64
    2932:	2a e0       	ldi	r18, 0x0A	; 10
    2934:	92 07       	cpc	r25, r18
    2936:	29 f4       	brne	.+10     	; 0x2942 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    2938:	60 93 9b 20 	sts	0x209B, r22	; 0x80209b <tc_tce1_ovf_callback>
    293c:	70 93 9c 20 	sts	0x209C, r23	; 0x80209c <tc_tce1_ovf_callback+0x1>
    2940:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2942:	81 15       	cp	r24, r1
    2944:	2b e0       	ldi	r18, 0x0B	; 11
    2946:	92 07       	cpc	r25, r18
    2948:	29 f4       	brne	.+10     	; 0x2954 <tc_set_overflow_interrupt_callback+0x7e>
		tc_tcf0_ovf_callback = callback;
    294a:	60 93 93 20 	sts	0x2093, r22	; 0x802093 <tc_tcf0_ovf_callback>
    294e:	70 93 94 20 	sts	0x2094, r23	; 0x802094 <tc_tcf0_ovf_callback+0x1>
    2952:	08 95       	ret
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    2954:	80 34       	cpi	r24, 0x40	; 64
    2956:	9b 40       	sbci	r25, 0x0B	; 11
    2958:	21 f4       	brne	.+8      	; 0x2962 <tc_set_overflow_interrupt_callback+0x8c>
		tc_tcf1_ovf_callback = callback;
    295a:	60 93 87 20 	sts	0x2087, r22	; 0x802087 <tc_tcf1_ovf_callback>
    295e:	70 93 88 20 	sts	0x2088, r23	; 0x802088 <tc_tcf1_ovf_callback+0x1>
    2962:	08 95       	ret

00002964 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2964:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2968:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    296a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    296c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2970:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2972:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2976:	08 95       	ret

00002978 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2978:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    297a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    297c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    297e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2980:	60 83       	st	Z, r22
	ret                             // Return to caller
    2982:	08 95       	ret

00002984 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    298e:	c6 2f       	mov	r28, r22
    2990:	d0 e0       	ldi	r29, 0x00	; 0
    2992:	de 01       	movw	r26, r28
    2994:	02 2e       	mov	r0, r18
    2996:	02 c0       	rjmp	.+4      	; 0x299c <ioport_configure_port_pin+0x18>
    2998:	b5 95       	asr	r27
    299a:	a7 95       	ror	r26
    299c:	0a 94       	dec	r0
    299e:	e2 f7       	brpl	.-8      	; 0x2998 <ioport_configure_port_pin+0x14>
    29a0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    29a2:	50 8b       	std	Z+16, r21	; 0x10
    29a4:	2f 5f       	subi	r18, 0xFF	; 255
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    29aa:	28 30       	cpi	r18, 0x08	; 8
    29ac:	31 05       	cpc	r19, r1
    29ae:	89 f7       	brne	.-30     	; 0x2992 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    29b0:	40 ff       	sbrs	r20, 0
    29b2:	0a c0       	rjmp	.+20     	; 0x29c8 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    29b4:	41 ff       	sbrs	r20, 1
    29b6:	03 c0       	rjmp	.+6      	; 0x29be <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    29b8:	fc 01       	movw	r30, r24
    29ba:	65 83       	std	Z+5, r22	; 0x05
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    29be:	fc 01       	movw	r30, r24
    29c0:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    29c2:	fc 01       	movw	r30, r24
    29c4:	61 83       	std	Z+1, r22	; 0x01
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    29c8:	fc 01       	movw	r30, r24
    29ca:	62 83       	std	Z+2, r22	; 0x02
	}
}
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	08 95       	ret

000029d2 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    29d2:	43 e0       	ldi	r20, 0x03	; 3
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	68 e0       	ldi	r22, 0x08	; 8
    29d8:	80 ec       	ldi	r24, 0xC0	; 192
    29da:	97 e0       	ldi	r25, 0x07	; 7
    29dc:	d3 df       	rcall	.-90     	; 0x2984 <ioport_configure_port_pin>
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	58 e1       	ldi	r21, 0x18	; 24
    29e2:	64 e0       	ldi	r22, 0x04	; 4
    29e4:	80 ec       	ldi	r24, 0xC0	; 192
    29e6:	97 e0       	ldi	r25, 0x07	; 7
    29e8:	cd cf       	rjmp	.-102    	; 0x2984 <ioport_configure_port_pin>
    29ea:	08 95       	ret

000029ec <__portable_avr_delay_cycles>:
	tc_write_clock_source(settings.TC, TC_CLKSEL_DIV1024_gc);//sets the prescaler which divides the main clock of 32MG by 1024 which means our clock will count at 31250Hz
}
void TC_period_shift(TCdef settings)
{
	tc_write_period(settings.TC, settings.period);//sets the number that the timer counter counts to before the interupt is triggered
}
    29ec:	04 c0       	rjmp	.+8      	; 0x29f6 <__portable_avr_delay_cycles+0xa>
    29ee:	61 50       	subi	r22, 0x01	; 1
    29f0:	71 09       	sbc	r23, r1
    29f2:	81 09       	sbc	r24, r1
    29f4:	91 09       	sbc	r25, r1
    29f6:	61 15       	cp	r22, r1
    29f8:	71 05       	cpc	r23, r1
    29fa:	81 05       	cpc	r24, r1
    29fc:	91 05       	cpc	r25, r1
    29fe:	b9 f7       	brne	.-18     	; 0x29ee <__portable_avr_delay_cycles+0x2>
    2a00:	08 95       	ret

00002a02 <example_handle>:
    2a02:	e0 ec       	ldi	r30, 0xC0	; 192
    2a04:	f7 e0       	ldi	r31, 0x07	; 7
    2a06:	94 81       	ldd	r25, Z+4	; 0x04
    2a08:	88 e0       	ldi	r24, 0x08	; 8
    2a0a:	89 27       	eor	r24, r25
    2a0c:	84 83       	std	Z+4, r24	; 0x04
    2a0e:	08 95       	ret

00002a10 <TCInit>:
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	28 97       	sbiw	r28, 0x08	; 8
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	29 83       	std	Y+1, r18	; 0x01
    2a24:	3a 83       	std	Y+2, r19	; 0x02
    2a26:	4b 83       	std	Y+3, r20	; 0x03
    2a28:	5c 83       	std	Y+4, r21	; 0x04
    2a2a:	6d 83       	std	Y+5, r22	; 0x05
    2a2c:	7e 83       	std	Y+6, r23	; 0x06
    2a2e:	8f 83       	std	Y+7, r24	; 0x07
    2a30:	98 87       	std	Y+8, r25	; 0x08
    2a32:	0b 81       	ldd	r16, Y+3	; 0x03
    2a34:	1c 81       	ldd	r17, Y+4	; 0x04
    2a36:	87 e0       	ldi	r24, 0x07	; 7
    2a38:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2a3c:	c8 01       	movw	r24, r16
    2a3e:	bf de       	rcall	.-642    	; 0x27be <tc_enable>
    2a40:	6f 81       	ldd	r22, Y+7	; 0x07
    2a42:	78 85       	ldd	r23, Y+8	; 0x08
    2a44:	c8 01       	movw	r24, r16
    2a46:	47 df       	rcall	.-370    	; 0x28d6 <tc_set_overflow_interrupt_callback>
    2a48:	f8 01       	movw	r30, r16
    2a4a:	81 81       	ldd	r24, Z+1	; 0x01
    2a4c:	88 7f       	andi	r24, 0xF8	; 248
    2a4e:	81 83       	std	Z+1, r24	; 0x01
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	9e 81       	ldd	r25, Y+6	; 0x06
    2a54:	86 a3       	std	Z+38, r24	; 0x26
    2a56:	97 a3       	std	Z+39, r25	; 0x27
    2a58:	86 81       	ldd	r24, Z+6	; 0x06
    2a5a:	8c 7f       	andi	r24, 0xFC	; 252
    2a5c:	86 83       	std	Z+6, r24	; 0x06
    2a5e:	86 81       	ldd	r24, Z+6	; 0x06
    2a60:	81 60       	ori	r24, 0x01	; 1
    2a62:	86 83       	std	Z+6, r24	; 0x06
    2a64:	78 94       	sei
    2a66:	80 81       	ld	r24, Z
    2a68:	80 7f       	andi	r24, 0xF0	; 240
    2a6a:	87 60       	ori	r24, 0x07	; 7
    2a6c:	80 83       	st	Z, r24
    2a6e:	28 96       	adiw	r28, 0x08	; 8
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	08 95       	ret

00002a7e <exampleTC>:
void exampleTC(void)//testing the timer counter code by blinking led on microchip at 1Hz
{
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	28 97       	sbiw	r28, 0x08	; 8
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	de bf       	out	0x3e, r29	; 62
	PORTQ.DIR|=0x08;
    2a8c:	e0 ec       	ldi	r30, 0xC0	; 192
    2a8e:	f7 e0       	ldi	r31, 0x07	; 7
    2a90:	80 81       	ld	r24, Z
    2a92:	88 60       	ori	r24, 0x08	; 8
    2a94:	80 83       	st	Z, r24
	TCdef examplestruct={
    2a96:	88 e0       	ldi	r24, 0x08	; 8
    2a98:	ed e0       	ldi	r30, 0x0D	; 13
    2a9a:	f0 e2       	ldi	r31, 0x20	; 32
    2a9c:	de 01       	movw	r26, r28
    2a9e:	11 96       	adiw	r26, 0x01	; 1
    2aa0:	01 90       	ld	r0, Z+
    2aa2:	0d 92       	st	X+, r0
    2aa4:	8a 95       	dec	r24
    2aa6:	e1 f7       	brne	.-8      	; 0x2aa0 <exampleTC+0x22>
		.port=&PORTE,
		.TC=&TCE0,
		.period=31250,
		.FunHandle=example_handle
	};
	TCInit(examplestruct);
    2aa8:	29 81       	ldd	r18, Y+1	; 0x01
    2aaa:	3a 81       	ldd	r19, Y+2	; 0x02
    2aac:	4b 81       	ldd	r20, Y+3	; 0x03
    2aae:	5c 81       	ldd	r21, Y+4	; 0x04
    2ab0:	6d 81       	ldd	r22, Y+5	; 0x05
    2ab2:	7e 81       	ldd	r23, Y+6	; 0x06
    2ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab6:	98 85       	ldd	r25, Y+8	; 0x08
    2ab8:	ab df       	rcall	.-170    	; 0x2a10 <TCInit>
	delay_s(5);
    2aba:	6c ea       	ldi	r22, 0xAC	; 172
    2abc:	76 ee       	ldi	r23, 0xE6	; 230
    2abe:	86 e9       	ldi	r24, 0x96	; 150
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	94 df       	rcall	.-216    	; 0x29ec <__portable_avr_delay_cycles>
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2ac4:	89 e0       	ldi	r24, 0x09	; 9
    2ac6:	9d e3       	ldi	r25, 0x3D	; 61
    2ac8:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
    2acc:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
	examplestruct.period=31250/2;
	TC_period_shift(examplestruct);
}
    2ad0:	28 96       	adiw	r28, 0x08	; 8
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	08 95       	ret

00002adc <usart_serial_getchar>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	eb 01       	movw	r28, r22
    2ae2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <usart_getchar>
    2ae6:	88 83       	st	Y, r24
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <usart_serial_putchar>:
    2aee:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <usart_putchar>
    2af2:	08 95       	ret

00002af4 <uart_terminal_init>:

void uart_terminal_init()
{
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	27 97       	sbiw	r28, 0x07	; 7
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2b02:	60 e1       	ldi	r22, 0x10	; 16
    2b04:	85 e0       	ldi	r24, 0x05	; 5
    2b06:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    2b0a:	e0 e8       	ldi	r30, 0x80	; 128
    2b0c:	f6 e0       	ldi	r31, 0x06	; 6
    2b0e:	80 81       	ld	r24, Z
    2b10:	88 60       	ori	r24, 0x08	; 8
    2b12:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2b14:	80 ea       	ldi	r24, 0xA0	; 160
    2b16:	9a e0       	ldi	r25, 0x0A	; 10
    2b18:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <stdio_base>
    2b1c:	90 93 da 20 	sts	0x20DA, r25	; 0x8020da <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2b20:	87 e7       	ldi	r24, 0x77	; 119
    2b22:	95 e1       	ldi	r25, 0x15	; 21
    2b24:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <ptr_put>
    2b28:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2b2c:	8e e6       	ldi	r24, 0x6E	; 110
    2b2e:	95 e1       	ldi	r25, 0x15	; 21
    2b30:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <ptr_get>
    2b34:	90 93 d2 20 	sts	0x20D2, r25	; 0x8020d2 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    2b38:	e6 e0       	ldi	r30, 0x06	; 6
    2b3a:	f0 e2       	ldi	r31, 0x20	; 32
    2b3c:	84 81       	ldd	r24, Z+4	; 0x04
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2b40:	85 81       	ldd	r24, Z+5	; 0x05
    2b42:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2b44:	86 81       	ldd	r24, Z+6	; 0x06
    2b46:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	a2 81       	ldd	r26, Z+2	; 0x02
    2b4e:	b3 81       	ldd	r27, Z+3	; 0x03
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	ab 83       	std	Y+3, r26	; 0x03
    2b56:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    2b58:	60 e1       	ldi	r22, 0x10	; 16
    2b5a:	85 e0       	ldi	r24, 0x05	; 5
    2b5c:	0e 94 4d 0a 	call	0x149a	; 0x149a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2b60:	be 01       	movw	r22, r28
    2b62:	6f 5f       	subi	r22, 0xFF	; 255
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255
    2b66:	80 ea       	ldi	r24, 0xA0	; 160
    2b68:	9a e0       	ldi	r25, 0x0A	; 10
    2b6a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    2b6e:	62 e5       	ldi	r22, 0x52	; 82
    2b70:	71 e0       	ldi	r23, 0x01	; 1
    2b72:	85 e0       	ldi	r24, 0x05	; 5
    2b74:	9a e0       	ldi	r25, 0x0A	; 10
    2b76:	a9 d2       	rcall	.+1362   	; 0x30ca <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat Valkyrie Initializing...\n");
    2b78:	87 e3       	ldi	r24, 0x37	; 55
    2b7a:	90 e2       	ldi	r25, 0x20	; 32
    2b7c:	03 d3       	rcall	.+1542   	; 0x3184 <puts>
		printf("UART Initialized\n");
    2b7e:	8c e5       	ldi	r24, 0x5C	; 92
    2b80:	90 e2       	ldi	r25, 0x20	; 32
    2b82:	00 d3       	rcall	.+1536   	; 0x3184 <puts>
	}
    2b84:	27 96       	adiw	r28, 0x07	; 7
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	08 95       	ret

00002b90 <main>:


#include "def.h"
int main (void)
{
	board_init();
    2b90:	20 df       	rcall	.-448    	; 0x29d2 <board_init>
	sysclk_init();
    2b92:	0e 94 17 0a 	call	0x142e	; 0x142e <sysclk_init>
	uart_terminal_init();
    2b96:	ae df       	rcall	.-164    	; 0x2af4 <uart_terminal_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2b98:	e0 ea       	ldi	r30, 0xA0	; 160
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	87 e0       	ldi	r24, 0x07	; 7
    2b9e:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	80 68       	ori	r24, 0x80	; 128
    2ba4:	82 83       	std	Z+2, r24	; 0x02
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	cpu_irq_enable();
    2ba6:	78 94       	sei
	
	printf("u Gay");
    2ba8:	8d e6       	ldi	r24, 0x6D	; 109
    2baa:	90 e2       	ldi	r25, 0x20	; 32
    2bac:	9f 93       	push	r25
    2bae:	8f 93       	push	r24
    2bb0:	d6 d2       	rcall	.+1452   	; 0x315e <printf>
	
	//spi_init_pins();
	thermistor_init();
    2bb2:	0e 94 65 06 	call	0xcca	; 0xcca <thermistor_init>
	exampleTC();
    2bb6:	63 df       	rcall	.-314    	; 0x2a7e <exampleTC>
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0e 94 6f 06 	call	0xcde	; 0xcde <getTemperature>
			///* No, so turn LED off. */
			//ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		//}
		
		
		int tempura = getTemperature();
    2bc0:	fd cf       	rjmp	.-6      	; 0x2bbc <main+0x2c>

00002bc2 <__subsf3>:
    2bc2:	50 58       	subi	r21, 0x80	; 128

00002bc4 <__addsf3>:
    2bc4:	bb 27       	eor	r27, r27
    2bc6:	aa 27       	eor	r26, r26
    2bc8:	0e d0       	rcall	.+28     	; 0x2be6 <__addsf3x>
    2bca:	48 c1       	rjmp	.+656    	; 0x2e5c <__fp_round>
    2bcc:	39 d1       	rcall	.+626    	; 0x2e40 <__fp_pscA>
    2bce:	30 f0       	brcs	.+12     	; 0x2bdc <__addsf3+0x18>
    2bd0:	3e d1       	rcall	.+636    	; 0x2e4e <__fp_pscB>
    2bd2:	20 f0       	brcs	.+8      	; 0x2bdc <__addsf3+0x18>
    2bd4:	31 f4       	brne	.+12     	; 0x2be2 <__addsf3+0x1e>
    2bd6:	9f 3f       	cpi	r25, 0xFF	; 255
    2bd8:	11 f4       	brne	.+4      	; 0x2bde <__addsf3+0x1a>
    2bda:	1e f4       	brtc	.+6      	; 0x2be2 <__addsf3+0x1e>
    2bdc:	2e c1       	rjmp	.+604    	; 0x2e3a <__fp_nan>
    2bde:	0e f4       	brtc	.+2      	; 0x2be2 <__addsf3+0x1e>
    2be0:	e0 95       	com	r30
    2be2:	e7 fb       	bst	r30, 7
    2be4:	24 c1       	rjmp	.+584    	; 0x2e2e <__fp_inf>

00002be6 <__addsf3x>:
    2be6:	e9 2f       	mov	r30, r25
    2be8:	4a d1       	rcall	.+660    	; 0x2e7e <__fp_split3>
    2bea:	80 f3       	brcs	.-32     	; 0x2bcc <__addsf3+0x8>
    2bec:	ba 17       	cp	r27, r26
    2bee:	62 07       	cpc	r22, r18
    2bf0:	73 07       	cpc	r23, r19
    2bf2:	84 07       	cpc	r24, r20
    2bf4:	95 07       	cpc	r25, r21
    2bf6:	18 f0       	brcs	.+6      	; 0x2bfe <__addsf3x+0x18>
    2bf8:	71 f4       	brne	.+28     	; 0x2c16 <__addsf3x+0x30>
    2bfa:	9e f5       	brtc	.+102    	; 0x2c62 <__addsf3x+0x7c>
    2bfc:	62 c1       	rjmp	.+708    	; 0x2ec2 <__fp_zero>
    2bfe:	0e f4       	brtc	.+2      	; 0x2c02 <__addsf3x+0x1c>
    2c00:	e0 95       	com	r30
    2c02:	0b 2e       	mov	r0, r27
    2c04:	ba 2f       	mov	r27, r26
    2c06:	a0 2d       	mov	r26, r0
    2c08:	0b 01       	movw	r0, r22
    2c0a:	b9 01       	movw	r22, r18
    2c0c:	90 01       	movw	r18, r0
    2c0e:	0c 01       	movw	r0, r24
    2c10:	ca 01       	movw	r24, r20
    2c12:	a0 01       	movw	r20, r0
    2c14:	11 24       	eor	r1, r1
    2c16:	ff 27       	eor	r31, r31
    2c18:	59 1b       	sub	r21, r25
    2c1a:	99 f0       	breq	.+38     	; 0x2c42 <__addsf3x+0x5c>
    2c1c:	59 3f       	cpi	r21, 0xF9	; 249
    2c1e:	50 f4       	brcc	.+20     	; 0x2c34 <__addsf3x+0x4e>
    2c20:	50 3e       	cpi	r21, 0xE0	; 224
    2c22:	68 f1       	brcs	.+90     	; 0x2c7e <__addsf3x+0x98>
    2c24:	1a 16       	cp	r1, r26
    2c26:	f0 40       	sbci	r31, 0x00	; 0
    2c28:	a2 2f       	mov	r26, r18
    2c2a:	23 2f       	mov	r18, r19
    2c2c:	34 2f       	mov	r19, r20
    2c2e:	44 27       	eor	r20, r20
    2c30:	58 5f       	subi	r21, 0xF8	; 248
    2c32:	f3 cf       	rjmp	.-26     	; 0x2c1a <__addsf3x+0x34>
    2c34:	46 95       	lsr	r20
    2c36:	37 95       	ror	r19
    2c38:	27 95       	ror	r18
    2c3a:	a7 95       	ror	r26
    2c3c:	f0 40       	sbci	r31, 0x00	; 0
    2c3e:	53 95       	inc	r21
    2c40:	c9 f7       	brne	.-14     	; 0x2c34 <__addsf3x+0x4e>
    2c42:	7e f4       	brtc	.+30     	; 0x2c62 <__addsf3x+0x7c>
    2c44:	1f 16       	cp	r1, r31
    2c46:	ba 0b       	sbc	r27, r26
    2c48:	62 0b       	sbc	r22, r18
    2c4a:	73 0b       	sbc	r23, r19
    2c4c:	84 0b       	sbc	r24, r20
    2c4e:	ba f0       	brmi	.+46     	; 0x2c7e <__addsf3x+0x98>
    2c50:	91 50       	subi	r25, 0x01	; 1
    2c52:	a1 f0       	breq	.+40     	; 0x2c7c <__addsf3x+0x96>
    2c54:	ff 0f       	add	r31, r31
    2c56:	bb 1f       	adc	r27, r27
    2c58:	66 1f       	adc	r22, r22
    2c5a:	77 1f       	adc	r23, r23
    2c5c:	88 1f       	adc	r24, r24
    2c5e:	c2 f7       	brpl	.-16     	; 0x2c50 <__addsf3x+0x6a>
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <__addsf3x+0x98>
    2c62:	ba 0f       	add	r27, r26
    2c64:	62 1f       	adc	r22, r18
    2c66:	73 1f       	adc	r23, r19
    2c68:	84 1f       	adc	r24, r20
    2c6a:	48 f4       	brcc	.+18     	; 0x2c7e <__addsf3x+0x98>
    2c6c:	87 95       	ror	r24
    2c6e:	77 95       	ror	r23
    2c70:	67 95       	ror	r22
    2c72:	b7 95       	ror	r27
    2c74:	f7 95       	ror	r31
    2c76:	9e 3f       	cpi	r25, 0xFE	; 254
    2c78:	08 f0       	brcs	.+2      	; 0x2c7c <__addsf3x+0x96>
    2c7a:	b3 cf       	rjmp	.-154    	; 0x2be2 <__addsf3+0x1e>
    2c7c:	93 95       	inc	r25
    2c7e:	88 0f       	add	r24, r24
    2c80:	08 f0       	brcs	.+2      	; 0x2c84 <__addsf3x+0x9e>
    2c82:	99 27       	eor	r25, r25
    2c84:	ee 0f       	add	r30, r30
    2c86:	97 95       	ror	r25
    2c88:	87 95       	ror	r24
    2c8a:	08 95       	ret

00002c8c <__divsf3>:
    2c8c:	0c d0       	rcall	.+24     	; 0x2ca6 <__divsf3x>
    2c8e:	e6 c0       	rjmp	.+460    	; 0x2e5c <__fp_round>
    2c90:	de d0       	rcall	.+444    	; 0x2e4e <__fp_pscB>
    2c92:	40 f0       	brcs	.+16     	; 0x2ca4 <__divsf3+0x18>
    2c94:	d5 d0       	rcall	.+426    	; 0x2e40 <__fp_pscA>
    2c96:	30 f0       	brcs	.+12     	; 0x2ca4 <__divsf3+0x18>
    2c98:	21 f4       	brne	.+8      	; 0x2ca2 <__divsf3+0x16>
    2c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c9c:	19 f0       	breq	.+6      	; 0x2ca4 <__divsf3+0x18>
    2c9e:	c7 c0       	rjmp	.+398    	; 0x2e2e <__fp_inf>
    2ca0:	51 11       	cpse	r21, r1
    2ca2:	10 c1       	rjmp	.+544    	; 0x2ec4 <__fp_szero>
    2ca4:	ca c0       	rjmp	.+404    	; 0x2e3a <__fp_nan>

00002ca6 <__divsf3x>:
    2ca6:	eb d0       	rcall	.+470    	; 0x2e7e <__fp_split3>
    2ca8:	98 f3       	brcs	.-26     	; 0x2c90 <__divsf3+0x4>

00002caa <__divsf3_pse>:
    2caa:	99 23       	and	r25, r25
    2cac:	c9 f3       	breq	.-14     	; 0x2ca0 <__divsf3+0x14>
    2cae:	55 23       	and	r21, r21
    2cb0:	b1 f3       	breq	.-20     	; 0x2c9e <__divsf3+0x12>
    2cb2:	95 1b       	sub	r25, r21
    2cb4:	55 0b       	sbc	r21, r21
    2cb6:	bb 27       	eor	r27, r27
    2cb8:	aa 27       	eor	r26, r26
    2cba:	62 17       	cp	r22, r18
    2cbc:	73 07       	cpc	r23, r19
    2cbe:	84 07       	cpc	r24, r20
    2cc0:	38 f0       	brcs	.+14     	; 0x2cd0 <__divsf3_pse+0x26>
    2cc2:	9f 5f       	subi	r25, 0xFF	; 255
    2cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc6:	22 0f       	add	r18, r18
    2cc8:	33 1f       	adc	r19, r19
    2cca:	44 1f       	adc	r20, r20
    2ccc:	aa 1f       	adc	r26, r26
    2cce:	a9 f3       	breq	.-22     	; 0x2cba <__divsf3_pse+0x10>
    2cd0:	33 d0       	rcall	.+102    	; 0x2d38 <__divsf3_pse+0x8e>
    2cd2:	0e 2e       	mov	r0, r30
    2cd4:	3a f0       	brmi	.+14     	; 0x2ce4 <__divsf3_pse+0x3a>
    2cd6:	e0 e8       	ldi	r30, 0x80	; 128
    2cd8:	30 d0       	rcall	.+96     	; 0x2d3a <__divsf3_pse+0x90>
    2cda:	91 50       	subi	r25, 0x01	; 1
    2cdc:	50 40       	sbci	r21, 0x00	; 0
    2cde:	e6 95       	lsr	r30
    2ce0:	00 1c       	adc	r0, r0
    2ce2:	ca f7       	brpl	.-14     	; 0x2cd6 <__divsf3_pse+0x2c>
    2ce4:	29 d0       	rcall	.+82     	; 0x2d38 <__divsf3_pse+0x8e>
    2ce6:	fe 2f       	mov	r31, r30
    2ce8:	27 d0       	rcall	.+78     	; 0x2d38 <__divsf3_pse+0x8e>
    2cea:	66 0f       	add	r22, r22
    2cec:	77 1f       	adc	r23, r23
    2cee:	88 1f       	adc	r24, r24
    2cf0:	bb 1f       	adc	r27, r27
    2cf2:	26 17       	cp	r18, r22
    2cf4:	37 07       	cpc	r19, r23
    2cf6:	48 07       	cpc	r20, r24
    2cf8:	ab 07       	cpc	r26, r27
    2cfa:	b0 e8       	ldi	r27, 0x80	; 128
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <__divsf3_pse+0x56>
    2cfe:	bb 0b       	sbc	r27, r27
    2d00:	80 2d       	mov	r24, r0
    2d02:	bf 01       	movw	r22, r30
    2d04:	ff 27       	eor	r31, r31
    2d06:	93 58       	subi	r25, 0x83	; 131
    2d08:	5f 4f       	sbci	r21, 0xFF	; 255
    2d0a:	2a f0       	brmi	.+10     	; 0x2d16 <__divsf3_pse+0x6c>
    2d0c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d0e:	51 05       	cpc	r21, r1
    2d10:	68 f0       	brcs	.+26     	; 0x2d2c <__divsf3_pse+0x82>
    2d12:	8d c0       	rjmp	.+282    	; 0x2e2e <__fp_inf>
    2d14:	d7 c0       	rjmp	.+430    	; 0x2ec4 <__fp_szero>
    2d16:	5f 3f       	cpi	r21, 0xFF	; 255
    2d18:	ec f3       	brlt	.-6      	; 0x2d14 <__divsf3_pse+0x6a>
    2d1a:	98 3e       	cpi	r25, 0xE8	; 232
    2d1c:	dc f3       	brlt	.-10     	; 0x2d14 <__divsf3_pse+0x6a>
    2d1e:	86 95       	lsr	r24
    2d20:	77 95       	ror	r23
    2d22:	67 95       	ror	r22
    2d24:	b7 95       	ror	r27
    2d26:	f7 95       	ror	r31
    2d28:	9f 5f       	subi	r25, 0xFF	; 255
    2d2a:	c9 f7       	brne	.-14     	; 0x2d1e <__divsf3_pse+0x74>
    2d2c:	88 0f       	add	r24, r24
    2d2e:	91 1d       	adc	r25, r1
    2d30:	96 95       	lsr	r25
    2d32:	87 95       	ror	r24
    2d34:	97 f9       	bld	r25, 7
    2d36:	08 95       	ret
    2d38:	e1 e0       	ldi	r30, 0x01	; 1
    2d3a:	66 0f       	add	r22, r22
    2d3c:	77 1f       	adc	r23, r23
    2d3e:	88 1f       	adc	r24, r24
    2d40:	bb 1f       	adc	r27, r27
    2d42:	62 17       	cp	r22, r18
    2d44:	73 07       	cpc	r23, r19
    2d46:	84 07       	cpc	r24, r20
    2d48:	ba 07       	cpc	r27, r26
    2d4a:	20 f0       	brcs	.+8      	; 0x2d54 <__divsf3_pse+0xaa>
    2d4c:	62 1b       	sub	r22, r18
    2d4e:	73 0b       	sbc	r23, r19
    2d50:	84 0b       	sbc	r24, r20
    2d52:	ba 0b       	sbc	r27, r26
    2d54:	ee 1f       	adc	r30, r30
    2d56:	88 f7       	brcc	.-30     	; 0x2d3a <__divsf3_pse+0x90>
    2d58:	e0 95       	com	r30
    2d5a:	08 95       	ret

00002d5c <__fixunssfsi>:
    2d5c:	98 d0       	rcall	.+304    	; 0x2e8e <__fp_splitA>
    2d5e:	88 f0       	brcs	.+34     	; 0x2d82 <__fixunssfsi+0x26>
    2d60:	9f 57       	subi	r25, 0x7F	; 127
    2d62:	90 f0       	brcs	.+36     	; 0x2d88 <__fixunssfsi+0x2c>
    2d64:	b9 2f       	mov	r27, r25
    2d66:	99 27       	eor	r25, r25
    2d68:	b7 51       	subi	r27, 0x17	; 23
    2d6a:	a0 f0       	brcs	.+40     	; 0x2d94 <__fixunssfsi+0x38>
    2d6c:	d1 f0       	breq	.+52     	; 0x2da2 <__fixunssfsi+0x46>
    2d6e:	66 0f       	add	r22, r22
    2d70:	77 1f       	adc	r23, r23
    2d72:	88 1f       	adc	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	1a f0       	brmi	.+6      	; 0x2d7e <__fixunssfsi+0x22>
    2d78:	ba 95       	dec	r27
    2d7a:	c9 f7       	brne	.-14     	; 0x2d6e <__fixunssfsi+0x12>
    2d7c:	12 c0       	rjmp	.+36     	; 0x2da2 <__fixunssfsi+0x46>
    2d7e:	b1 30       	cpi	r27, 0x01	; 1
    2d80:	81 f0       	breq	.+32     	; 0x2da2 <__fixunssfsi+0x46>
    2d82:	9f d0       	rcall	.+318    	; 0x2ec2 <__fp_zero>
    2d84:	b1 e0       	ldi	r27, 0x01	; 1
    2d86:	08 95       	ret
    2d88:	9c c0       	rjmp	.+312    	; 0x2ec2 <__fp_zero>
    2d8a:	67 2f       	mov	r22, r23
    2d8c:	78 2f       	mov	r23, r24
    2d8e:	88 27       	eor	r24, r24
    2d90:	b8 5f       	subi	r27, 0xF8	; 248
    2d92:	39 f0       	breq	.+14     	; 0x2da2 <__fixunssfsi+0x46>
    2d94:	b9 3f       	cpi	r27, 0xF9	; 249
    2d96:	cc f3       	brlt	.-14     	; 0x2d8a <__fixunssfsi+0x2e>
    2d98:	86 95       	lsr	r24
    2d9a:	77 95       	ror	r23
    2d9c:	67 95       	ror	r22
    2d9e:	b3 95       	inc	r27
    2da0:	d9 f7       	brne	.-10     	; 0x2d98 <__fixunssfsi+0x3c>
    2da2:	3e f4       	brtc	.+14     	; 0x2db2 <__fixunssfsi+0x56>
    2da4:	90 95       	com	r25
    2da6:	80 95       	com	r24
    2da8:	70 95       	com	r23
    2daa:	61 95       	neg	r22
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	8f 4f       	sbci	r24, 0xFF	; 255
    2db0:	9f 4f       	sbci	r25, 0xFF	; 255
    2db2:	08 95       	ret

00002db4 <__floatunsisf>:
    2db4:	e8 94       	clt
    2db6:	09 c0       	rjmp	.+18     	; 0x2dca <__floatsisf+0x12>

00002db8 <__floatsisf>:
    2db8:	97 fb       	bst	r25, 7
    2dba:	3e f4       	brtc	.+14     	; 0x2dca <__floatsisf+0x12>
    2dbc:	90 95       	com	r25
    2dbe:	80 95       	com	r24
    2dc0:	70 95       	com	r23
    2dc2:	61 95       	neg	r22
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	99 23       	and	r25, r25
    2dcc:	a9 f0       	breq	.+42     	; 0x2df8 <__floatsisf+0x40>
    2dce:	f9 2f       	mov	r31, r25
    2dd0:	96 e9       	ldi	r25, 0x96	; 150
    2dd2:	bb 27       	eor	r27, r27
    2dd4:	93 95       	inc	r25
    2dd6:	f6 95       	lsr	r31
    2dd8:	87 95       	ror	r24
    2dda:	77 95       	ror	r23
    2ddc:	67 95       	ror	r22
    2dde:	b7 95       	ror	r27
    2de0:	f1 11       	cpse	r31, r1
    2de2:	f8 cf       	rjmp	.-16     	; 0x2dd4 <__floatsisf+0x1c>
    2de4:	fa f4       	brpl	.+62     	; 0x2e24 <__floatsisf+0x6c>
    2de6:	bb 0f       	add	r27, r27
    2de8:	11 f4       	brne	.+4      	; 0x2dee <__floatsisf+0x36>
    2dea:	60 ff       	sbrs	r22, 0
    2dec:	1b c0       	rjmp	.+54     	; 0x2e24 <__floatsisf+0x6c>
    2dee:	6f 5f       	subi	r22, 0xFF	; 255
    2df0:	7f 4f       	sbci	r23, 0xFF	; 255
    2df2:	8f 4f       	sbci	r24, 0xFF	; 255
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	16 c0       	rjmp	.+44     	; 0x2e24 <__floatsisf+0x6c>
    2df8:	88 23       	and	r24, r24
    2dfa:	11 f0       	breq	.+4      	; 0x2e00 <__floatsisf+0x48>
    2dfc:	96 e9       	ldi	r25, 0x96	; 150
    2dfe:	11 c0       	rjmp	.+34     	; 0x2e22 <__floatsisf+0x6a>
    2e00:	77 23       	and	r23, r23
    2e02:	21 f0       	breq	.+8      	; 0x2e0c <__floatsisf+0x54>
    2e04:	9e e8       	ldi	r25, 0x8E	; 142
    2e06:	87 2f       	mov	r24, r23
    2e08:	76 2f       	mov	r23, r22
    2e0a:	05 c0       	rjmp	.+10     	; 0x2e16 <__floatsisf+0x5e>
    2e0c:	66 23       	and	r22, r22
    2e0e:	71 f0       	breq	.+28     	; 0x2e2c <__floatsisf+0x74>
    2e10:	96 e8       	ldi	r25, 0x86	; 134
    2e12:	86 2f       	mov	r24, r22
    2e14:	70 e0       	ldi	r23, 0x00	; 0
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	2a f0       	brmi	.+10     	; 0x2e24 <__floatsisf+0x6c>
    2e1a:	9a 95       	dec	r25
    2e1c:	66 0f       	add	r22, r22
    2e1e:	77 1f       	adc	r23, r23
    2e20:	88 1f       	adc	r24, r24
    2e22:	da f7       	brpl	.-10     	; 0x2e1a <__floatsisf+0x62>
    2e24:	88 0f       	add	r24, r24
    2e26:	96 95       	lsr	r25
    2e28:	87 95       	ror	r24
    2e2a:	97 f9       	bld	r25, 7
    2e2c:	08 95       	ret

00002e2e <__fp_inf>:
    2e2e:	97 f9       	bld	r25, 7
    2e30:	9f 67       	ori	r25, 0x7F	; 127
    2e32:	80 e8       	ldi	r24, 0x80	; 128
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	08 95       	ret

00002e3a <__fp_nan>:
    2e3a:	9f ef       	ldi	r25, 0xFF	; 255
    2e3c:	80 ec       	ldi	r24, 0xC0	; 192
    2e3e:	08 95       	ret

00002e40 <__fp_pscA>:
    2e40:	00 24       	eor	r0, r0
    2e42:	0a 94       	dec	r0
    2e44:	16 16       	cp	r1, r22
    2e46:	17 06       	cpc	r1, r23
    2e48:	18 06       	cpc	r1, r24
    2e4a:	09 06       	cpc	r0, r25
    2e4c:	08 95       	ret

00002e4e <__fp_pscB>:
    2e4e:	00 24       	eor	r0, r0
    2e50:	0a 94       	dec	r0
    2e52:	12 16       	cp	r1, r18
    2e54:	13 06       	cpc	r1, r19
    2e56:	14 06       	cpc	r1, r20
    2e58:	05 06       	cpc	r0, r21
    2e5a:	08 95       	ret

00002e5c <__fp_round>:
    2e5c:	09 2e       	mov	r0, r25
    2e5e:	03 94       	inc	r0
    2e60:	00 0c       	add	r0, r0
    2e62:	11 f4       	brne	.+4      	; 0x2e68 <__fp_round+0xc>
    2e64:	88 23       	and	r24, r24
    2e66:	52 f0       	brmi	.+20     	; 0x2e7c <__fp_round+0x20>
    2e68:	bb 0f       	add	r27, r27
    2e6a:	40 f4       	brcc	.+16     	; 0x2e7c <__fp_round+0x20>
    2e6c:	bf 2b       	or	r27, r31
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <__fp_round+0x18>
    2e70:	60 ff       	sbrs	r22, 0
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <__fp_round+0x20>
    2e74:	6f 5f       	subi	r22, 0xFF	; 255
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	08 95       	ret

00002e7e <__fp_split3>:
    2e7e:	57 fd       	sbrc	r21, 7
    2e80:	90 58       	subi	r25, 0x80	; 128
    2e82:	44 0f       	add	r20, r20
    2e84:	55 1f       	adc	r21, r21
    2e86:	59 f0       	breq	.+22     	; 0x2e9e <__fp_splitA+0x10>
    2e88:	5f 3f       	cpi	r21, 0xFF	; 255
    2e8a:	71 f0       	breq	.+28     	; 0x2ea8 <__fp_splitA+0x1a>
    2e8c:	47 95       	ror	r20

00002e8e <__fp_splitA>:
    2e8e:	88 0f       	add	r24, r24
    2e90:	97 fb       	bst	r25, 7
    2e92:	99 1f       	adc	r25, r25
    2e94:	61 f0       	breq	.+24     	; 0x2eae <__fp_splitA+0x20>
    2e96:	9f 3f       	cpi	r25, 0xFF	; 255
    2e98:	79 f0       	breq	.+30     	; 0x2eb8 <__fp_splitA+0x2a>
    2e9a:	87 95       	ror	r24
    2e9c:	08 95       	ret
    2e9e:	12 16       	cp	r1, r18
    2ea0:	13 06       	cpc	r1, r19
    2ea2:	14 06       	cpc	r1, r20
    2ea4:	55 1f       	adc	r21, r21
    2ea6:	f2 cf       	rjmp	.-28     	; 0x2e8c <__fp_split3+0xe>
    2ea8:	46 95       	lsr	r20
    2eaa:	f1 df       	rcall	.-30     	; 0x2e8e <__fp_splitA>
    2eac:	08 c0       	rjmp	.+16     	; 0x2ebe <__fp_splitA+0x30>
    2eae:	16 16       	cp	r1, r22
    2eb0:	17 06       	cpc	r1, r23
    2eb2:	18 06       	cpc	r1, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	f1 cf       	rjmp	.-30     	; 0x2e9a <__fp_splitA+0xc>
    2eb8:	86 95       	lsr	r24
    2eba:	71 05       	cpc	r23, r1
    2ebc:	61 05       	cpc	r22, r1
    2ebe:	08 94       	sec
    2ec0:	08 95       	ret

00002ec2 <__fp_zero>:
    2ec2:	e8 94       	clt

00002ec4 <__fp_szero>:
    2ec4:	bb 27       	eor	r27, r27
    2ec6:	66 27       	eor	r22, r22
    2ec8:	77 27       	eor	r23, r23
    2eca:	cb 01       	movw	r24, r22
    2ecc:	97 f9       	bld	r25, 7
    2ece:	08 95       	ret
    2ed0:	0e f0       	brts	.+2      	; 0x2ed4 <__fp_szero+0x10>
    2ed2:	a6 c0       	rjmp	.+332    	; 0x3020 <__fp_mpack>
    2ed4:	b2 cf       	rjmp	.-156    	; 0x2e3a <__fp_nan>
    2ed6:	68 94       	set
    2ed8:	aa cf       	rjmp	.-172    	; 0x2e2e <__fp_inf>

00002eda <log>:
    2eda:	d9 df       	rcall	.-78     	; 0x2e8e <__fp_splitA>
    2edc:	c8 f3       	brcs	.-14     	; 0x2ed0 <__fp_szero+0xc>
    2ede:	99 23       	and	r25, r25
    2ee0:	d1 f3       	breq	.-12     	; 0x2ed6 <__fp_szero+0x12>
    2ee2:	c6 f3       	brts	.-16     	; 0x2ed4 <__fp_szero+0x10>
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	1f 93       	push	r17
    2eea:	0f 93       	push	r16
    2eec:	ff 92       	push	r15
    2eee:	c9 2f       	mov	r28, r25
    2ef0:	dd 27       	eor	r29, r29
    2ef2:	88 23       	and	r24, r24
    2ef4:	2a f0       	brmi	.+10     	; 0x2f00 <log+0x26>
    2ef6:	21 97       	sbiw	r28, 0x01	; 1
    2ef8:	66 0f       	add	r22, r22
    2efa:	77 1f       	adc	r23, r23
    2efc:	88 1f       	adc	r24, r24
    2efe:	da f7       	brpl	.-10     	; 0x2ef6 <log+0x1c>
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e8       	ldi	r20, 0x80	; 128
    2f06:	5f eb       	ldi	r21, 0xBF	; 191
    2f08:	9f e3       	ldi	r25, 0x3F	; 63
    2f0a:	88 39       	cpi	r24, 0x98	; 152
    2f0c:	20 f0       	brcs	.+8      	; 0x2f16 <log+0x3c>
    2f0e:	80 3e       	cpi	r24, 0xE0	; 224
    2f10:	30 f0       	brcs	.+12     	; 0x2f1e <log+0x44>
    2f12:	21 96       	adiw	r28, 0x01	; 1
    2f14:	8f 77       	andi	r24, 0x7F	; 127
    2f16:	56 de       	rcall	.-852    	; 0x2bc4 <__addsf3>
    2f18:	ec ef       	ldi	r30, 0xFC	; 252
    2f1a:	f1 e0       	ldi	r31, 0x01	; 1
    2f1c:	03 c0       	rjmp	.+6      	; 0x2f24 <log+0x4a>
    2f1e:	52 de       	rcall	.-860    	; 0x2bc4 <__addsf3>
    2f20:	e9 e2       	ldi	r30, 0x29	; 41
    2f22:	f2 e0       	ldi	r31, 0x02	; 2
    2f24:	8b d0       	rcall	.+278    	; 0x303c <__fp_powser>
    2f26:	8b 01       	movw	r16, r22
    2f28:	be 01       	movw	r22, r28
    2f2a:	ec 01       	movw	r28, r24
    2f2c:	fb 2e       	mov	r15, r27
    2f2e:	6f 57       	subi	r22, 0x7F	; 127
    2f30:	71 09       	sbc	r23, r1
    2f32:	75 95       	asr	r23
    2f34:	77 1f       	adc	r23, r23
    2f36:	88 0b       	sbc	r24, r24
    2f38:	99 0b       	sbc	r25, r25
    2f3a:	3e df       	rcall	.-388    	; 0x2db8 <__floatsisf>
    2f3c:	28 e1       	ldi	r18, 0x18	; 24
    2f3e:	32 e7       	ldi	r19, 0x72	; 114
    2f40:	41 e3       	ldi	r20, 0x31	; 49
    2f42:	5f e3       	ldi	r21, 0x3F	; 63
    2f44:	16 d0       	rcall	.+44     	; 0x2f72 <__mulsf3x>
    2f46:	af 2d       	mov	r26, r15
    2f48:	98 01       	movw	r18, r16
    2f4a:	ae 01       	movw	r20, r28
    2f4c:	ff 90       	pop	r15
    2f4e:	0f 91       	pop	r16
    2f50:	1f 91       	pop	r17
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	47 de       	rcall	.-882    	; 0x2be6 <__addsf3x>
    2f58:	81 cf       	rjmp	.-254    	; 0x2e5c <__fp_round>

00002f5a <__mulsf3>:
    2f5a:	0b d0       	rcall	.+22     	; 0x2f72 <__mulsf3x>
    2f5c:	7f cf       	rjmp	.-258    	; 0x2e5c <__fp_round>
    2f5e:	70 df       	rcall	.-288    	; 0x2e40 <__fp_pscA>
    2f60:	28 f0       	brcs	.+10     	; 0x2f6c <__mulsf3+0x12>
    2f62:	75 df       	rcall	.-278    	; 0x2e4e <__fp_pscB>
    2f64:	18 f0       	brcs	.+6      	; 0x2f6c <__mulsf3+0x12>
    2f66:	95 23       	and	r25, r21
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <__mulsf3+0x12>
    2f6a:	61 cf       	rjmp	.-318    	; 0x2e2e <__fp_inf>
    2f6c:	66 cf       	rjmp	.-308    	; 0x2e3a <__fp_nan>
    2f6e:	11 24       	eor	r1, r1
    2f70:	a9 cf       	rjmp	.-174    	; 0x2ec4 <__fp_szero>

00002f72 <__mulsf3x>:
    2f72:	85 df       	rcall	.-246    	; 0x2e7e <__fp_split3>
    2f74:	a0 f3       	brcs	.-24     	; 0x2f5e <__mulsf3+0x4>

00002f76 <__mulsf3_pse>:
    2f76:	95 9f       	mul	r25, r21
    2f78:	d1 f3       	breq	.-12     	; 0x2f6e <__mulsf3+0x14>
    2f7a:	95 0f       	add	r25, r21
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	55 1f       	adc	r21, r21
    2f80:	62 9f       	mul	r22, r18
    2f82:	f0 01       	movw	r30, r0
    2f84:	72 9f       	mul	r23, r18
    2f86:	bb 27       	eor	r27, r27
    2f88:	f0 0d       	add	r31, r0
    2f8a:	b1 1d       	adc	r27, r1
    2f8c:	63 9f       	mul	r22, r19
    2f8e:	aa 27       	eor	r26, r26
    2f90:	f0 0d       	add	r31, r0
    2f92:	b1 1d       	adc	r27, r1
    2f94:	aa 1f       	adc	r26, r26
    2f96:	64 9f       	mul	r22, r20
    2f98:	66 27       	eor	r22, r22
    2f9a:	b0 0d       	add	r27, r0
    2f9c:	a1 1d       	adc	r26, r1
    2f9e:	66 1f       	adc	r22, r22
    2fa0:	82 9f       	mul	r24, r18
    2fa2:	22 27       	eor	r18, r18
    2fa4:	b0 0d       	add	r27, r0
    2fa6:	a1 1d       	adc	r26, r1
    2fa8:	62 1f       	adc	r22, r18
    2faa:	73 9f       	mul	r23, r19
    2fac:	b0 0d       	add	r27, r0
    2fae:	a1 1d       	adc	r26, r1
    2fb0:	62 1f       	adc	r22, r18
    2fb2:	83 9f       	mul	r24, r19
    2fb4:	a0 0d       	add	r26, r0
    2fb6:	61 1d       	adc	r22, r1
    2fb8:	22 1f       	adc	r18, r18
    2fba:	74 9f       	mul	r23, r20
    2fbc:	33 27       	eor	r19, r19
    2fbe:	a0 0d       	add	r26, r0
    2fc0:	61 1d       	adc	r22, r1
    2fc2:	23 1f       	adc	r18, r19
    2fc4:	84 9f       	mul	r24, r20
    2fc6:	60 0d       	add	r22, r0
    2fc8:	21 1d       	adc	r18, r1
    2fca:	82 2f       	mov	r24, r18
    2fcc:	76 2f       	mov	r23, r22
    2fce:	6a 2f       	mov	r22, r26
    2fd0:	11 24       	eor	r1, r1
    2fd2:	9f 57       	subi	r25, 0x7F	; 127
    2fd4:	50 40       	sbci	r21, 0x00	; 0
    2fd6:	8a f0       	brmi	.+34     	; 0x2ffa <__mulsf3_pse+0x84>
    2fd8:	e1 f0       	breq	.+56     	; 0x3012 <__mulsf3_pse+0x9c>
    2fda:	88 23       	and	r24, r24
    2fdc:	4a f0       	brmi	.+18     	; 0x2ff0 <__mulsf3_pse+0x7a>
    2fde:	ee 0f       	add	r30, r30
    2fe0:	ff 1f       	adc	r31, r31
    2fe2:	bb 1f       	adc	r27, r27
    2fe4:	66 1f       	adc	r22, r22
    2fe6:	77 1f       	adc	r23, r23
    2fe8:	88 1f       	adc	r24, r24
    2fea:	91 50       	subi	r25, 0x01	; 1
    2fec:	50 40       	sbci	r21, 0x00	; 0
    2fee:	a9 f7       	brne	.-22     	; 0x2fda <__mulsf3_pse+0x64>
    2ff0:	9e 3f       	cpi	r25, 0xFE	; 254
    2ff2:	51 05       	cpc	r21, r1
    2ff4:	70 f0       	brcs	.+28     	; 0x3012 <__mulsf3_pse+0x9c>
    2ff6:	1b cf       	rjmp	.-458    	; 0x2e2e <__fp_inf>
    2ff8:	65 cf       	rjmp	.-310    	; 0x2ec4 <__fp_szero>
    2ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    2ffc:	ec f3       	brlt	.-6      	; 0x2ff8 <__mulsf3_pse+0x82>
    2ffe:	98 3e       	cpi	r25, 0xE8	; 232
    3000:	dc f3       	brlt	.-10     	; 0x2ff8 <__mulsf3_pse+0x82>
    3002:	86 95       	lsr	r24
    3004:	77 95       	ror	r23
    3006:	67 95       	ror	r22
    3008:	b7 95       	ror	r27
    300a:	f7 95       	ror	r31
    300c:	e7 95       	ror	r30
    300e:	9f 5f       	subi	r25, 0xFF	; 255
    3010:	c1 f7       	brne	.-16     	; 0x3002 <__mulsf3_pse+0x8c>
    3012:	fe 2b       	or	r31, r30
    3014:	88 0f       	add	r24, r24
    3016:	91 1d       	adc	r25, r1
    3018:	96 95       	lsr	r25
    301a:	87 95       	ror	r24
    301c:	97 f9       	bld	r25, 7
    301e:	08 95       	ret

00003020 <__fp_mpack>:
    3020:	9f 3f       	cpi	r25, 0xFF	; 255
    3022:	31 f0       	breq	.+12     	; 0x3030 <__fp_mpack_finite+0xc>

00003024 <__fp_mpack_finite>:
    3024:	91 50       	subi	r25, 0x01	; 1
    3026:	20 f4       	brcc	.+8      	; 0x3030 <__fp_mpack_finite+0xc>
    3028:	87 95       	ror	r24
    302a:	77 95       	ror	r23
    302c:	67 95       	ror	r22
    302e:	b7 95       	ror	r27
    3030:	88 0f       	add	r24, r24
    3032:	91 1d       	adc	r25, r1
    3034:	96 95       	lsr	r25
    3036:	87 95       	ror	r24
    3038:	97 f9       	bld	r25, 7
    303a:	08 95       	ret

0000303c <__fp_powser>:
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	1f 93       	push	r17
    3042:	0f 93       	push	r16
    3044:	ff 92       	push	r15
    3046:	ef 92       	push	r14
    3048:	df 92       	push	r13
    304a:	7b 01       	movw	r14, r22
    304c:	8c 01       	movw	r16, r24
    304e:	68 94       	set
    3050:	05 c0       	rjmp	.+10     	; 0x305c <__fp_powser+0x20>
    3052:	da 2e       	mov	r13, r26
    3054:	ef 01       	movw	r28, r30
    3056:	8d df       	rcall	.-230    	; 0x2f72 <__mulsf3x>
    3058:	fe 01       	movw	r30, r28
    305a:	e8 94       	clt
    305c:	a5 91       	lpm	r26, Z+
    305e:	25 91       	lpm	r18, Z+
    3060:	35 91       	lpm	r19, Z+
    3062:	45 91       	lpm	r20, Z+
    3064:	55 91       	lpm	r21, Z+
    3066:	ae f3       	brts	.-22     	; 0x3052 <__fp_powser+0x16>
    3068:	ef 01       	movw	r28, r30
    306a:	bd dd       	rcall	.-1158   	; 0x2be6 <__addsf3x>
    306c:	fe 01       	movw	r30, r28
    306e:	97 01       	movw	r18, r14
    3070:	a8 01       	movw	r20, r16
    3072:	da 94       	dec	r13
    3074:	79 f7       	brne	.-34     	; 0x3054 <__fp_powser+0x18>
    3076:	df 90       	pop	r13
    3078:	ef 90       	pop	r14
    307a:	ff 90       	pop	r15
    307c:	0f 91       	pop	r16
    307e:	1f 91       	pop	r17
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <__udivmodsi4>:
    3086:	a1 e2       	ldi	r26, 0x21	; 33
    3088:	1a 2e       	mov	r1, r26
    308a:	aa 1b       	sub	r26, r26
    308c:	bb 1b       	sub	r27, r27
    308e:	fd 01       	movw	r30, r26
    3090:	0d c0       	rjmp	.+26     	; 0x30ac <__udivmodsi4_ep>

00003092 <__udivmodsi4_loop>:
    3092:	aa 1f       	adc	r26, r26
    3094:	bb 1f       	adc	r27, r27
    3096:	ee 1f       	adc	r30, r30
    3098:	ff 1f       	adc	r31, r31
    309a:	a2 17       	cp	r26, r18
    309c:	b3 07       	cpc	r27, r19
    309e:	e4 07       	cpc	r30, r20
    30a0:	f5 07       	cpc	r31, r21
    30a2:	20 f0       	brcs	.+8      	; 0x30ac <__udivmodsi4_ep>
    30a4:	a2 1b       	sub	r26, r18
    30a6:	b3 0b       	sbc	r27, r19
    30a8:	e4 0b       	sbc	r30, r20
    30aa:	f5 0b       	sbc	r31, r21

000030ac <__udivmodsi4_ep>:
    30ac:	66 1f       	adc	r22, r22
    30ae:	77 1f       	adc	r23, r23
    30b0:	88 1f       	adc	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	1a 94       	dec	r1
    30b6:	69 f7       	brne	.-38     	; 0x3092 <__udivmodsi4_loop>
    30b8:	60 95       	com	r22
    30ba:	70 95       	com	r23
    30bc:	80 95       	com	r24
    30be:	90 95       	com	r25
    30c0:	9b 01       	movw	r18, r22
    30c2:	ac 01       	movw	r20, r24
    30c4:	bd 01       	movw	r22, r26
    30c6:	cf 01       	movw	r24, r30
    30c8:	08 95       	ret

000030ca <fdevopen>:
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	00 97       	sbiw	r24, 0x00	; 0
    30d4:	31 f4       	brne	.+12     	; 0x30e2 <fdevopen+0x18>
    30d6:	61 15       	cp	r22, r1
    30d8:	71 05       	cpc	r23, r1
    30da:	19 f4       	brne	.+6      	; 0x30e2 <fdevopen+0x18>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	39 c0       	rjmp	.+114    	; 0x3154 <fdevopen+0x8a>
    30e2:	8b 01       	movw	r16, r22
    30e4:	ec 01       	movw	r28, r24
    30e6:	6e e0       	ldi	r22, 0x0E	; 14
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	71 d2       	rcall	.+1250   	; 0x35d2 <calloc>
    30f0:	fc 01       	movw	r30, r24
    30f2:	89 2b       	or	r24, r25
    30f4:	99 f3       	breq	.-26     	; 0x30dc <fdevopen+0x12>
    30f6:	80 e8       	ldi	r24, 0x80	; 128
    30f8:	83 83       	std	Z+3, r24	; 0x03
    30fa:	01 15       	cp	r16, r1
    30fc:	11 05       	cpc	r17, r1
    30fe:	71 f0       	breq	.+28     	; 0x311c <fdevopen+0x52>
    3100:	02 87       	std	Z+10, r16	; 0x0a
    3102:	13 87       	std	Z+11, r17	; 0x0b
    3104:	81 e8       	ldi	r24, 0x81	; 129
    3106:	83 83       	std	Z+3, r24	; 0x03
    3108:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <__iob>
    310c:	90 91 ea 20 	lds	r25, 0x20EA	; 0x8020ea <__iob+0x1>
    3110:	89 2b       	or	r24, r25
    3112:	21 f4       	brne	.+8      	; 0x311c <fdevopen+0x52>
    3114:	e0 93 e9 20 	sts	0x20E9, r30	; 0x8020e9 <__iob>
    3118:	f0 93 ea 20 	sts	0x20EA, r31	; 0x8020ea <__iob+0x1>
    311c:	20 97       	sbiw	r28, 0x00	; 0
    311e:	c9 f0       	breq	.+50     	; 0x3152 <fdevopen+0x88>
    3120:	c0 87       	std	Z+8, r28	; 0x08
    3122:	d1 87       	std	Z+9, r29	; 0x09
    3124:	83 81       	ldd	r24, Z+3	; 0x03
    3126:	82 60       	ori	r24, 0x02	; 2
    3128:	83 83       	std	Z+3, r24	; 0x03
    312a:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <__iob+0x2>
    312e:	90 91 ec 20 	lds	r25, 0x20EC	; 0x8020ec <__iob+0x3>
    3132:	89 2b       	or	r24, r25
    3134:	71 f4       	brne	.+28     	; 0x3152 <fdevopen+0x88>
    3136:	e0 93 eb 20 	sts	0x20EB, r30	; 0x8020eb <__iob+0x2>
    313a:	f0 93 ec 20 	sts	0x20EC, r31	; 0x8020ec <__iob+0x3>
    313e:	80 91 ed 20 	lds	r24, 0x20ED	; 0x8020ed <__iob+0x4>
    3142:	90 91 ee 20 	lds	r25, 0x20EE	; 0x8020ee <__iob+0x5>
    3146:	89 2b       	or	r24, r25
    3148:	21 f4       	brne	.+8      	; 0x3152 <fdevopen+0x88>
    314a:	e0 93 ed 20 	sts	0x20ED, r30	; 0x8020ed <__iob+0x4>
    314e:	f0 93 ee 20 	sts	0x20EE, r31	; 0x8020ee <__iob+0x5>
    3152:	cf 01       	movw	r24, r30
    3154:	df 91       	pop	r29
    3156:	cf 91       	pop	r28
    3158:	1f 91       	pop	r17
    315a:	0f 91       	pop	r16
    315c:	08 95       	ret

0000315e <printf>:
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	ae 01       	movw	r20, r28
    3168:	4a 5f       	subi	r20, 0xFA	; 250
    316a:	5f 4f       	sbci	r21, 0xFF	; 255
    316c:	fa 01       	movw	r30, r20
    316e:	61 91       	ld	r22, Z+
    3170:	71 91       	ld	r23, Z+
    3172:	af 01       	movw	r20, r30
    3174:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <__iob+0x2>
    3178:	90 91 ec 20 	lds	r25, 0x20EC	; 0x8020ec <__iob+0x3>
    317c:	33 d0       	rcall	.+102    	; 0x31e4 <vfprintf>
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	08 95       	ret

00003184 <puts>:
    3184:	0f 93       	push	r16
    3186:	1f 93       	push	r17
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	e0 91 eb 20 	lds	r30, 0x20EB	; 0x8020eb <__iob+0x2>
    3190:	f0 91 ec 20 	lds	r31, 0x20EC	; 0x8020ec <__iob+0x3>
    3194:	23 81       	ldd	r18, Z+3	; 0x03
    3196:	21 ff       	sbrs	r18, 1
    3198:	1b c0       	rjmp	.+54     	; 0x31d0 <puts+0x4c>
    319a:	8c 01       	movw	r16, r24
    319c:	d0 e0       	ldi	r29, 0x00	; 0
    319e:	c0 e0       	ldi	r28, 0x00	; 0
    31a0:	f8 01       	movw	r30, r16
    31a2:	81 91       	ld	r24, Z+
    31a4:	8f 01       	movw	r16, r30
    31a6:	60 91 eb 20 	lds	r22, 0x20EB	; 0x8020eb <__iob+0x2>
    31aa:	70 91 ec 20 	lds	r23, 0x20EC	; 0x8020ec <__iob+0x3>
    31ae:	db 01       	movw	r26, r22
    31b0:	18 96       	adiw	r26, 0x08	; 8
    31b2:	ed 91       	ld	r30, X+
    31b4:	fc 91       	ld	r31, X
    31b6:	19 97       	sbiw	r26, 0x09	; 9
    31b8:	88 23       	and	r24, r24
    31ba:	31 f0       	breq	.+12     	; 0x31c8 <puts+0x44>
    31bc:	19 95       	eicall
    31be:	89 2b       	or	r24, r25
    31c0:	79 f3       	breq	.-34     	; 0x31a0 <puts+0x1c>
    31c2:	df ef       	ldi	r29, 0xFF	; 255
    31c4:	cf ef       	ldi	r28, 0xFF	; 255
    31c6:	ec cf       	rjmp	.-40     	; 0x31a0 <puts+0x1c>
    31c8:	8a e0       	ldi	r24, 0x0A	; 10
    31ca:	19 95       	eicall
    31cc:	89 2b       	or	r24, r25
    31ce:	19 f0       	breq	.+6      	; 0x31d6 <puts+0x52>
    31d0:	8f ef       	ldi	r24, 0xFF	; 255
    31d2:	9f ef       	ldi	r25, 0xFF	; 255
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <puts+0x56>
    31d6:	8d 2f       	mov	r24, r29
    31d8:	9c 2f       	mov	r25, r28
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	08 95       	ret

000031e4 <vfprintf>:
    31e4:	2f 92       	push	r2
    31e6:	3f 92       	push	r3
    31e8:	4f 92       	push	r4
    31ea:	5f 92       	push	r5
    31ec:	6f 92       	push	r6
    31ee:	7f 92       	push	r7
    31f0:	8f 92       	push	r8
    31f2:	9f 92       	push	r9
    31f4:	af 92       	push	r10
    31f6:	bf 92       	push	r11
    31f8:	cf 92       	push	r12
    31fa:	df 92       	push	r13
    31fc:	ef 92       	push	r14
    31fe:	ff 92       	push	r15
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	2b 97       	sbiw	r28, 0x0b	; 11
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	6c 01       	movw	r12, r24
    3214:	7b 01       	movw	r14, r22
    3216:	8a 01       	movw	r16, r20
    3218:	fc 01       	movw	r30, r24
    321a:	16 82       	std	Z+6, r1	; 0x06
    321c:	17 82       	std	Z+7, r1	; 0x07
    321e:	83 81       	ldd	r24, Z+3	; 0x03
    3220:	81 ff       	sbrs	r24, 1
    3222:	bf c1       	rjmp	.+894    	; 0x35a2 <vfprintf+0x3be>
    3224:	ce 01       	movw	r24, r28
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	3c 01       	movw	r6, r24
    322a:	f6 01       	movw	r30, r12
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	f7 01       	movw	r30, r14
    3230:	93 fd       	sbrc	r25, 3
    3232:	85 91       	lpm	r24, Z+
    3234:	93 ff       	sbrs	r25, 3
    3236:	81 91       	ld	r24, Z+
    3238:	7f 01       	movw	r14, r30
    323a:	88 23       	and	r24, r24
    323c:	09 f4       	brne	.+2      	; 0x3240 <vfprintf+0x5c>
    323e:	ad c1       	rjmp	.+858    	; 0x359a <vfprintf+0x3b6>
    3240:	85 32       	cpi	r24, 0x25	; 37
    3242:	39 f4       	brne	.+14     	; 0x3252 <vfprintf+0x6e>
    3244:	93 fd       	sbrc	r25, 3
    3246:	85 91       	lpm	r24, Z+
    3248:	93 ff       	sbrs	r25, 3
    324a:	81 91       	ld	r24, Z+
    324c:	7f 01       	movw	r14, r30
    324e:	85 32       	cpi	r24, 0x25	; 37
    3250:	21 f4       	brne	.+8      	; 0x325a <vfprintf+0x76>
    3252:	b6 01       	movw	r22, r12
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	15 d3       	rcall	.+1578   	; 0x3882 <fputc>
    3258:	e8 cf       	rjmp	.-48     	; 0x322a <vfprintf+0x46>
    325a:	91 2c       	mov	r9, r1
    325c:	21 2c       	mov	r2, r1
    325e:	31 2c       	mov	r3, r1
    3260:	ff e1       	ldi	r31, 0x1F	; 31
    3262:	f3 15       	cp	r31, r3
    3264:	d8 f0       	brcs	.+54     	; 0x329c <vfprintf+0xb8>
    3266:	8b 32       	cpi	r24, 0x2B	; 43
    3268:	79 f0       	breq	.+30     	; 0x3288 <vfprintf+0xa4>
    326a:	38 f4       	brcc	.+14     	; 0x327a <vfprintf+0x96>
    326c:	80 32       	cpi	r24, 0x20	; 32
    326e:	79 f0       	breq	.+30     	; 0x328e <vfprintf+0xaa>
    3270:	83 32       	cpi	r24, 0x23	; 35
    3272:	a1 f4       	brne	.+40     	; 0x329c <vfprintf+0xb8>
    3274:	23 2d       	mov	r18, r3
    3276:	20 61       	ori	r18, 0x10	; 16
    3278:	1d c0       	rjmp	.+58     	; 0x32b4 <vfprintf+0xd0>
    327a:	8d 32       	cpi	r24, 0x2D	; 45
    327c:	61 f0       	breq	.+24     	; 0x3296 <vfprintf+0xb2>
    327e:	80 33       	cpi	r24, 0x30	; 48
    3280:	69 f4       	brne	.+26     	; 0x329c <vfprintf+0xb8>
    3282:	23 2d       	mov	r18, r3
    3284:	21 60       	ori	r18, 0x01	; 1
    3286:	16 c0       	rjmp	.+44     	; 0x32b4 <vfprintf+0xd0>
    3288:	83 2d       	mov	r24, r3
    328a:	82 60       	ori	r24, 0x02	; 2
    328c:	38 2e       	mov	r3, r24
    328e:	e3 2d       	mov	r30, r3
    3290:	e4 60       	ori	r30, 0x04	; 4
    3292:	3e 2e       	mov	r3, r30
    3294:	2a c0       	rjmp	.+84     	; 0x32ea <vfprintf+0x106>
    3296:	f3 2d       	mov	r31, r3
    3298:	f8 60       	ori	r31, 0x08	; 8
    329a:	1d c0       	rjmp	.+58     	; 0x32d6 <vfprintf+0xf2>
    329c:	37 fc       	sbrc	r3, 7
    329e:	2d c0       	rjmp	.+90     	; 0x32fa <vfprintf+0x116>
    32a0:	20 ed       	ldi	r18, 0xD0	; 208
    32a2:	28 0f       	add	r18, r24
    32a4:	2a 30       	cpi	r18, 0x0A	; 10
    32a6:	40 f0       	brcs	.+16     	; 0x32b8 <vfprintf+0xd4>
    32a8:	8e 32       	cpi	r24, 0x2E	; 46
    32aa:	b9 f4       	brne	.+46     	; 0x32da <vfprintf+0xf6>
    32ac:	36 fc       	sbrc	r3, 6
    32ae:	75 c1       	rjmp	.+746    	; 0x359a <vfprintf+0x3b6>
    32b0:	23 2d       	mov	r18, r3
    32b2:	20 64       	ori	r18, 0x40	; 64
    32b4:	32 2e       	mov	r3, r18
    32b6:	19 c0       	rjmp	.+50     	; 0x32ea <vfprintf+0x106>
    32b8:	36 fe       	sbrs	r3, 6
    32ba:	06 c0       	rjmp	.+12     	; 0x32c8 <vfprintf+0xe4>
    32bc:	8a e0       	ldi	r24, 0x0A	; 10
    32be:	98 9e       	mul	r9, r24
    32c0:	20 0d       	add	r18, r0
    32c2:	11 24       	eor	r1, r1
    32c4:	92 2e       	mov	r9, r18
    32c6:	11 c0       	rjmp	.+34     	; 0x32ea <vfprintf+0x106>
    32c8:	ea e0       	ldi	r30, 0x0A	; 10
    32ca:	2e 9e       	mul	r2, r30
    32cc:	20 0d       	add	r18, r0
    32ce:	11 24       	eor	r1, r1
    32d0:	22 2e       	mov	r2, r18
    32d2:	f3 2d       	mov	r31, r3
    32d4:	f0 62       	ori	r31, 0x20	; 32
    32d6:	3f 2e       	mov	r3, r31
    32d8:	08 c0       	rjmp	.+16     	; 0x32ea <vfprintf+0x106>
    32da:	8c 36       	cpi	r24, 0x6C	; 108
    32dc:	21 f4       	brne	.+8      	; 0x32e6 <vfprintf+0x102>
    32de:	83 2d       	mov	r24, r3
    32e0:	80 68       	ori	r24, 0x80	; 128
    32e2:	38 2e       	mov	r3, r24
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <vfprintf+0x106>
    32e6:	88 36       	cpi	r24, 0x68	; 104
    32e8:	41 f4       	brne	.+16     	; 0x32fa <vfprintf+0x116>
    32ea:	f7 01       	movw	r30, r14
    32ec:	93 fd       	sbrc	r25, 3
    32ee:	85 91       	lpm	r24, Z+
    32f0:	93 ff       	sbrs	r25, 3
    32f2:	81 91       	ld	r24, Z+
    32f4:	7f 01       	movw	r14, r30
    32f6:	81 11       	cpse	r24, r1
    32f8:	b3 cf       	rjmp	.-154    	; 0x3260 <vfprintf+0x7c>
    32fa:	98 2f       	mov	r25, r24
    32fc:	9f 7d       	andi	r25, 0xDF	; 223
    32fe:	95 54       	subi	r25, 0x45	; 69
    3300:	93 30       	cpi	r25, 0x03	; 3
    3302:	28 f4       	brcc	.+10     	; 0x330e <vfprintf+0x12a>
    3304:	0c 5f       	subi	r16, 0xFC	; 252
    3306:	1f 4f       	sbci	r17, 0xFF	; 255
    3308:	9f e3       	ldi	r25, 0x3F	; 63
    330a:	99 83       	std	Y+1, r25	; 0x01
    330c:	0d c0       	rjmp	.+26     	; 0x3328 <vfprintf+0x144>
    330e:	83 36       	cpi	r24, 0x63	; 99
    3310:	31 f0       	breq	.+12     	; 0x331e <vfprintf+0x13a>
    3312:	83 37       	cpi	r24, 0x73	; 115
    3314:	71 f0       	breq	.+28     	; 0x3332 <vfprintf+0x14e>
    3316:	83 35       	cpi	r24, 0x53	; 83
    3318:	09 f0       	breq	.+2      	; 0x331c <vfprintf+0x138>
    331a:	55 c0       	rjmp	.+170    	; 0x33c6 <vfprintf+0x1e2>
    331c:	20 c0       	rjmp	.+64     	; 0x335e <vfprintf+0x17a>
    331e:	f8 01       	movw	r30, r16
    3320:	80 81       	ld	r24, Z
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	0e 5f       	subi	r16, 0xFE	; 254
    3326:	1f 4f       	sbci	r17, 0xFF	; 255
    3328:	88 24       	eor	r8, r8
    332a:	83 94       	inc	r8
    332c:	91 2c       	mov	r9, r1
    332e:	53 01       	movw	r10, r6
    3330:	12 c0       	rjmp	.+36     	; 0x3356 <vfprintf+0x172>
    3332:	28 01       	movw	r4, r16
    3334:	f2 e0       	ldi	r31, 0x02	; 2
    3336:	4f 0e       	add	r4, r31
    3338:	51 1c       	adc	r5, r1
    333a:	f8 01       	movw	r30, r16
    333c:	a0 80       	ld	r10, Z
    333e:	b1 80       	ldd	r11, Z+1	; 0x01
    3340:	36 fe       	sbrs	r3, 6
    3342:	03 c0       	rjmp	.+6      	; 0x334a <vfprintf+0x166>
    3344:	69 2d       	mov	r22, r9
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	02 c0       	rjmp	.+4      	; 0x334e <vfprintf+0x16a>
    334a:	6f ef       	ldi	r22, 0xFF	; 255
    334c:	7f ef       	ldi	r23, 0xFF	; 255
    334e:	c5 01       	movw	r24, r10
    3350:	8d d2       	rcall	.+1306   	; 0x386c <strnlen>
    3352:	4c 01       	movw	r8, r24
    3354:	82 01       	movw	r16, r4
    3356:	f3 2d       	mov	r31, r3
    3358:	ff 77       	andi	r31, 0x7F	; 127
    335a:	3f 2e       	mov	r3, r31
    335c:	15 c0       	rjmp	.+42     	; 0x3388 <vfprintf+0x1a4>
    335e:	28 01       	movw	r4, r16
    3360:	22 e0       	ldi	r18, 0x02	; 2
    3362:	42 0e       	add	r4, r18
    3364:	51 1c       	adc	r5, r1
    3366:	f8 01       	movw	r30, r16
    3368:	a0 80       	ld	r10, Z
    336a:	b1 80       	ldd	r11, Z+1	; 0x01
    336c:	36 fe       	sbrs	r3, 6
    336e:	03 c0       	rjmp	.+6      	; 0x3376 <vfprintf+0x192>
    3370:	69 2d       	mov	r22, r9
    3372:	70 e0       	ldi	r23, 0x00	; 0
    3374:	02 c0       	rjmp	.+4      	; 0x337a <vfprintf+0x196>
    3376:	6f ef       	ldi	r22, 0xFF	; 255
    3378:	7f ef       	ldi	r23, 0xFF	; 255
    337a:	c5 01       	movw	r24, r10
    337c:	65 d2       	rcall	.+1226   	; 0x3848 <strnlen_P>
    337e:	4c 01       	movw	r8, r24
    3380:	f3 2d       	mov	r31, r3
    3382:	f0 68       	ori	r31, 0x80	; 128
    3384:	3f 2e       	mov	r3, r31
    3386:	82 01       	movw	r16, r4
    3388:	33 fc       	sbrc	r3, 3
    338a:	19 c0       	rjmp	.+50     	; 0x33be <vfprintf+0x1da>
    338c:	82 2d       	mov	r24, r2
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	88 16       	cp	r8, r24
    3392:	99 06       	cpc	r9, r25
    3394:	a0 f4       	brcc	.+40     	; 0x33be <vfprintf+0x1da>
    3396:	b6 01       	movw	r22, r12
    3398:	80 e2       	ldi	r24, 0x20	; 32
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	72 d2       	rcall	.+1252   	; 0x3882 <fputc>
    339e:	2a 94       	dec	r2
    33a0:	f5 cf       	rjmp	.-22     	; 0x338c <vfprintf+0x1a8>
    33a2:	f5 01       	movw	r30, r10
    33a4:	37 fc       	sbrc	r3, 7
    33a6:	85 91       	lpm	r24, Z+
    33a8:	37 fe       	sbrs	r3, 7
    33aa:	81 91       	ld	r24, Z+
    33ac:	5f 01       	movw	r10, r30
    33ae:	b6 01       	movw	r22, r12
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	67 d2       	rcall	.+1230   	; 0x3882 <fputc>
    33b4:	21 10       	cpse	r2, r1
    33b6:	2a 94       	dec	r2
    33b8:	21 e0       	ldi	r18, 0x01	; 1
    33ba:	82 1a       	sub	r8, r18
    33bc:	91 08       	sbc	r9, r1
    33be:	81 14       	cp	r8, r1
    33c0:	91 04       	cpc	r9, r1
    33c2:	79 f7       	brne	.-34     	; 0x33a2 <vfprintf+0x1be>
    33c4:	e1 c0       	rjmp	.+450    	; 0x3588 <vfprintf+0x3a4>
    33c6:	84 36       	cpi	r24, 0x64	; 100
    33c8:	11 f0       	breq	.+4      	; 0x33ce <vfprintf+0x1ea>
    33ca:	89 36       	cpi	r24, 0x69	; 105
    33cc:	39 f5       	brne	.+78     	; 0x341c <vfprintf+0x238>
    33ce:	f8 01       	movw	r30, r16
    33d0:	37 fe       	sbrs	r3, 7
    33d2:	07 c0       	rjmp	.+14     	; 0x33e2 <vfprintf+0x1fe>
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	0c 5f       	subi	r16, 0xFC	; 252
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	08 c0       	rjmp	.+16     	; 0x33f2 <vfprintf+0x20e>
    33e2:	60 81       	ld	r22, Z
    33e4:	71 81       	ldd	r23, Z+1	; 0x01
    33e6:	07 2e       	mov	r0, r23
    33e8:	00 0c       	add	r0, r0
    33ea:	88 0b       	sbc	r24, r24
    33ec:	99 0b       	sbc	r25, r25
    33ee:	0e 5f       	subi	r16, 0xFE	; 254
    33f0:	1f 4f       	sbci	r17, 0xFF	; 255
    33f2:	f3 2d       	mov	r31, r3
    33f4:	ff 76       	andi	r31, 0x6F	; 111
    33f6:	3f 2e       	mov	r3, r31
    33f8:	97 ff       	sbrs	r25, 7
    33fa:	09 c0       	rjmp	.+18     	; 0x340e <vfprintf+0x22a>
    33fc:	90 95       	com	r25
    33fe:	80 95       	com	r24
    3400:	70 95       	com	r23
    3402:	61 95       	neg	r22
    3404:	7f 4f       	sbci	r23, 0xFF	; 255
    3406:	8f 4f       	sbci	r24, 0xFF	; 255
    3408:	9f 4f       	sbci	r25, 0xFF	; 255
    340a:	f0 68       	ori	r31, 0x80	; 128
    340c:	3f 2e       	mov	r3, r31
    340e:	2a e0       	ldi	r18, 0x0A	; 10
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	a3 01       	movw	r20, r6
    3414:	72 d2       	rcall	.+1252   	; 0x38fa <__ultoa_invert>
    3416:	88 2e       	mov	r8, r24
    3418:	86 18       	sub	r8, r6
    341a:	44 c0       	rjmp	.+136    	; 0x34a4 <vfprintf+0x2c0>
    341c:	85 37       	cpi	r24, 0x75	; 117
    341e:	31 f4       	brne	.+12     	; 0x342c <vfprintf+0x248>
    3420:	23 2d       	mov	r18, r3
    3422:	2f 7e       	andi	r18, 0xEF	; 239
    3424:	b2 2e       	mov	r11, r18
    3426:	2a e0       	ldi	r18, 0x0A	; 10
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	25 c0       	rjmp	.+74     	; 0x3476 <vfprintf+0x292>
    342c:	93 2d       	mov	r25, r3
    342e:	99 7f       	andi	r25, 0xF9	; 249
    3430:	b9 2e       	mov	r11, r25
    3432:	8f 36       	cpi	r24, 0x6F	; 111
    3434:	c1 f0       	breq	.+48     	; 0x3466 <vfprintf+0x282>
    3436:	18 f4       	brcc	.+6      	; 0x343e <vfprintf+0x25a>
    3438:	88 35       	cpi	r24, 0x58	; 88
    343a:	79 f0       	breq	.+30     	; 0x345a <vfprintf+0x276>
    343c:	ae c0       	rjmp	.+348    	; 0x359a <vfprintf+0x3b6>
    343e:	80 37       	cpi	r24, 0x70	; 112
    3440:	19 f0       	breq	.+6      	; 0x3448 <vfprintf+0x264>
    3442:	88 37       	cpi	r24, 0x78	; 120
    3444:	21 f0       	breq	.+8      	; 0x344e <vfprintf+0x26a>
    3446:	a9 c0       	rjmp	.+338    	; 0x359a <vfprintf+0x3b6>
    3448:	e9 2f       	mov	r30, r25
    344a:	e0 61       	ori	r30, 0x10	; 16
    344c:	be 2e       	mov	r11, r30
    344e:	b4 fe       	sbrs	r11, 4
    3450:	0d c0       	rjmp	.+26     	; 0x346c <vfprintf+0x288>
    3452:	fb 2d       	mov	r31, r11
    3454:	f4 60       	ori	r31, 0x04	; 4
    3456:	bf 2e       	mov	r11, r31
    3458:	09 c0       	rjmp	.+18     	; 0x346c <vfprintf+0x288>
    345a:	34 fe       	sbrs	r3, 4
    345c:	0a c0       	rjmp	.+20     	; 0x3472 <vfprintf+0x28e>
    345e:	29 2f       	mov	r18, r25
    3460:	26 60       	ori	r18, 0x06	; 6
    3462:	b2 2e       	mov	r11, r18
    3464:	06 c0       	rjmp	.+12     	; 0x3472 <vfprintf+0x28e>
    3466:	28 e0       	ldi	r18, 0x08	; 8
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	05 c0       	rjmp	.+10     	; 0x3476 <vfprintf+0x292>
    346c:	20 e1       	ldi	r18, 0x10	; 16
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <vfprintf+0x292>
    3472:	20 e1       	ldi	r18, 0x10	; 16
    3474:	32 e0       	ldi	r19, 0x02	; 2
    3476:	f8 01       	movw	r30, r16
    3478:	b7 fe       	sbrs	r11, 7
    347a:	07 c0       	rjmp	.+14     	; 0x348a <vfprintf+0x2a6>
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	0c 5f       	subi	r16, 0xFC	; 252
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
    3488:	06 c0       	rjmp	.+12     	; 0x3496 <vfprintf+0x2b2>
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	0e 5f       	subi	r16, 0xFE	; 254
    3494:	1f 4f       	sbci	r17, 0xFF	; 255
    3496:	a3 01       	movw	r20, r6
    3498:	30 d2       	rcall	.+1120   	; 0x38fa <__ultoa_invert>
    349a:	88 2e       	mov	r8, r24
    349c:	86 18       	sub	r8, r6
    349e:	fb 2d       	mov	r31, r11
    34a0:	ff 77       	andi	r31, 0x7F	; 127
    34a2:	3f 2e       	mov	r3, r31
    34a4:	36 fe       	sbrs	r3, 6
    34a6:	0d c0       	rjmp	.+26     	; 0x34c2 <vfprintf+0x2de>
    34a8:	23 2d       	mov	r18, r3
    34aa:	2e 7f       	andi	r18, 0xFE	; 254
    34ac:	a2 2e       	mov	r10, r18
    34ae:	89 14       	cp	r8, r9
    34b0:	58 f4       	brcc	.+22     	; 0x34c8 <vfprintf+0x2e4>
    34b2:	34 fe       	sbrs	r3, 4
    34b4:	0b c0       	rjmp	.+22     	; 0x34cc <vfprintf+0x2e8>
    34b6:	32 fc       	sbrc	r3, 2
    34b8:	09 c0       	rjmp	.+18     	; 0x34cc <vfprintf+0x2e8>
    34ba:	83 2d       	mov	r24, r3
    34bc:	8e 7e       	andi	r24, 0xEE	; 238
    34be:	a8 2e       	mov	r10, r24
    34c0:	05 c0       	rjmp	.+10     	; 0x34cc <vfprintf+0x2e8>
    34c2:	b8 2c       	mov	r11, r8
    34c4:	a3 2c       	mov	r10, r3
    34c6:	03 c0       	rjmp	.+6      	; 0x34ce <vfprintf+0x2ea>
    34c8:	b8 2c       	mov	r11, r8
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <vfprintf+0x2ea>
    34cc:	b9 2c       	mov	r11, r9
    34ce:	a4 fe       	sbrs	r10, 4
    34d0:	0f c0       	rjmp	.+30     	; 0x34f0 <vfprintf+0x30c>
    34d2:	fe 01       	movw	r30, r28
    34d4:	e8 0d       	add	r30, r8
    34d6:	f1 1d       	adc	r31, r1
    34d8:	80 81       	ld	r24, Z
    34da:	80 33       	cpi	r24, 0x30	; 48
    34dc:	21 f4       	brne	.+8      	; 0x34e6 <vfprintf+0x302>
    34de:	9a 2d       	mov	r25, r10
    34e0:	99 7e       	andi	r25, 0xE9	; 233
    34e2:	a9 2e       	mov	r10, r25
    34e4:	09 c0       	rjmp	.+18     	; 0x34f8 <vfprintf+0x314>
    34e6:	a2 fe       	sbrs	r10, 2
    34e8:	06 c0       	rjmp	.+12     	; 0x34f6 <vfprintf+0x312>
    34ea:	b3 94       	inc	r11
    34ec:	b3 94       	inc	r11
    34ee:	04 c0       	rjmp	.+8      	; 0x34f8 <vfprintf+0x314>
    34f0:	8a 2d       	mov	r24, r10
    34f2:	86 78       	andi	r24, 0x86	; 134
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <vfprintf+0x314>
    34f6:	b3 94       	inc	r11
    34f8:	a3 fc       	sbrc	r10, 3
    34fa:	10 c0       	rjmp	.+32     	; 0x351c <vfprintf+0x338>
    34fc:	a0 fe       	sbrs	r10, 0
    34fe:	06 c0       	rjmp	.+12     	; 0x350c <vfprintf+0x328>
    3500:	b2 14       	cp	r11, r2
    3502:	80 f4       	brcc	.+32     	; 0x3524 <vfprintf+0x340>
    3504:	28 0c       	add	r2, r8
    3506:	92 2c       	mov	r9, r2
    3508:	9b 18       	sub	r9, r11
    350a:	0d c0       	rjmp	.+26     	; 0x3526 <vfprintf+0x342>
    350c:	b2 14       	cp	r11, r2
    350e:	58 f4       	brcc	.+22     	; 0x3526 <vfprintf+0x342>
    3510:	b6 01       	movw	r22, r12
    3512:	80 e2       	ldi	r24, 0x20	; 32
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	b5 d1       	rcall	.+874    	; 0x3882 <fputc>
    3518:	b3 94       	inc	r11
    351a:	f8 cf       	rjmp	.-16     	; 0x350c <vfprintf+0x328>
    351c:	b2 14       	cp	r11, r2
    351e:	18 f4       	brcc	.+6      	; 0x3526 <vfprintf+0x342>
    3520:	2b 18       	sub	r2, r11
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <vfprintf+0x344>
    3524:	98 2c       	mov	r9, r8
    3526:	21 2c       	mov	r2, r1
    3528:	a4 fe       	sbrs	r10, 4
    352a:	0f c0       	rjmp	.+30     	; 0x354a <vfprintf+0x366>
    352c:	b6 01       	movw	r22, r12
    352e:	80 e3       	ldi	r24, 0x30	; 48
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	a7 d1       	rcall	.+846    	; 0x3882 <fputc>
    3534:	a2 fe       	sbrs	r10, 2
    3536:	16 c0       	rjmp	.+44     	; 0x3564 <vfprintf+0x380>
    3538:	a1 fc       	sbrc	r10, 1
    353a:	03 c0       	rjmp	.+6      	; 0x3542 <vfprintf+0x35e>
    353c:	88 e7       	ldi	r24, 0x78	; 120
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <vfprintf+0x362>
    3542:	88 e5       	ldi	r24, 0x58	; 88
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	b6 01       	movw	r22, r12
    3548:	0c c0       	rjmp	.+24     	; 0x3562 <vfprintf+0x37e>
    354a:	8a 2d       	mov	r24, r10
    354c:	86 78       	andi	r24, 0x86	; 134
    354e:	51 f0       	breq	.+20     	; 0x3564 <vfprintf+0x380>
    3550:	a1 fe       	sbrs	r10, 1
    3552:	02 c0       	rjmp	.+4      	; 0x3558 <vfprintf+0x374>
    3554:	8b e2       	ldi	r24, 0x2B	; 43
    3556:	01 c0       	rjmp	.+2      	; 0x355a <vfprintf+0x376>
    3558:	80 e2       	ldi	r24, 0x20	; 32
    355a:	a7 fc       	sbrc	r10, 7
    355c:	8d e2       	ldi	r24, 0x2D	; 45
    355e:	b6 01       	movw	r22, r12
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	8f d1       	rcall	.+798    	; 0x3882 <fputc>
    3564:	89 14       	cp	r8, r9
    3566:	30 f4       	brcc	.+12     	; 0x3574 <vfprintf+0x390>
    3568:	b6 01       	movw	r22, r12
    356a:	80 e3       	ldi	r24, 0x30	; 48
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	89 d1       	rcall	.+786    	; 0x3882 <fputc>
    3570:	9a 94       	dec	r9
    3572:	f8 cf       	rjmp	.-16     	; 0x3564 <vfprintf+0x380>
    3574:	8a 94       	dec	r8
    3576:	f3 01       	movw	r30, r6
    3578:	e8 0d       	add	r30, r8
    357a:	f1 1d       	adc	r31, r1
    357c:	80 81       	ld	r24, Z
    357e:	b6 01       	movw	r22, r12
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	7f d1       	rcall	.+766    	; 0x3882 <fputc>
    3584:	81 10       	cpse	r8, r1
    3586:	f6 cf       	rjmp	.-20     	; 0x3574 <vfprintf+0x390>
    3588:	22 20       	and	r2, r2
    358a:	09 f4       	brne	.+2      	; 0x358e <vfprintf+0x3aa>
    358c:	4e ce       	rjmp	.-868    	; 0x322a <vfprintf+0x46>
    358e:	b6 01       	movw	r22, r12
    3590:	80 e2       	ldi	r24, 0x20	; 32
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	76 d1       	rcall	.+748    	; 0x3882 <fputc>
    3596:	2a 94       	dec	r2
    3598:	f7 cf       	rjmp	.-18     	; 0x3588 <vfprintf+0x3a4>
    359a:	f6 01       	movw	r30, r12
    359c:	86 81       	ldd	r24, Z+6	; 0x06
    359e:	97 81       	ldd	r25, Z+7	; 0x07
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <vfprintf+0x3c2>
    35a2:	8f ef       	ldi	r24, 0xFF	; 255
    35a4:	9f ef       	ldi	r25, 0xFF	; 255
    35a6:	2b 96       	adiw	r28, 0x0b	; 11
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	1f 91       	pop	r17
    35b2:	0f 91       	pop	r16
    35b4:	ff 90       	pop	r15
    35b6:	ef 90       	pop	r14
    35b8:	df 90       	pop	r13
    35ba:	cf 90       	pop	r12
    35bc:	bf 90       	pop	r11
    35be:	af 90       	pop	r10
    35c0:	9f 90       	pop	r9
    35c2:	8f 90       	pop	r8
    35c4:	7f 90       	pop	r7
    35c6:	6f 90       	pop	r6
    35c8:	5f 90       	pop	r5
    35ca:	4f 90       	pop	r4
    35cc:	3f 90       	pop	r3
    35ce:	2f 90       	pop	r2
    35d0:	08 95       	ret

000035d2 <calloc>:
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	86 9f       	mul	r24, r22
    35dc:	80 01       	movw	r16, r0
    35de:	87 9f       	mul	r24, r23
    35e0:	10 0d       	add	r17, r0
    35e2:	96 9f       	mul	r25, r22
    35e4:	10 0d       	add	r17, r0
    35e6:	11 24       	eor	r1, r1
    35e8:	c8 01       	movw	r24, r16
    35ea:	0d d0       	rcall	.+26     	; 0x3606 <malloc>
    35ec:	ec 01       	movw	r28, r24
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	21 f0       	breq	.+8      	; 0x35fa <calloc+0x28>
    35f2:	a8 01       	movw	r20, r16
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	32 d1       	rcall	.+612    	; 0x385e <memset>
    35fa:	ce 01       	movw	r24, r28
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	08 95       	ret

00003606 <malloc>:
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	82 30       	cpi	r24, 0x02	; 2
    3610:	91 05       	cpc	r25, r1
    3612:	10 f4       	brcc	.+4      	; 0x3618 <malloc+0x12>
    3614:	82 e0       	ldi	r24, 0x02	; 2
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <__flp>
    361c:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <__flp+0x1>
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	a0 e0       	ldi	r26, 0x00	; 0
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	30 97       	sbiw	r30, 0x00	; 0
    362a:	19 f1       	breq	.+70     	; 0x3672 <malloc+0x6c>
    362c:	40 81       	ld	r20, Z
    362e:	51 81       	ldd	r21, Z+1	; 0x01
    3630:	02 81       	ldd	r16, Z+2	; 0x02
    3632:	13 81       	ldd	r17, Z+3	; 0x03
    3634:	48 17       	cp	r20, r24
    3636:	59 07       	cpc	r21, r25
    3638:	c8 f0       	brcs	.+50     	; 0x366c <malloc+0x66>
    363a:	84 17       	cp	r24, r20
    363c:	95 07       	cpc	r25, r21
    363e:	69 f4       	brne	.+26     	; 0x365a <malloc+0x54>
    3640:	10 97       	sbiw	r26, 0x00	; 0
    3642:	31 f0       	breq	.+12     	; 0x3650 <malloc+0x4a>
    3644:	12 96       	adiw	r26, 0x02	; 2
    3646:	0c 93       	st	X, r16
    3648:	12 97       	sbiw	r26, 0x02	; 2
    364a:	13 96       	adiw	r26, 0x03	; 3
    364c:	1c 93       	st	X, r17
    364e:	27 c0       	rjmp	.+78     	; 0x369e <malloc+0x98>
    3650:	00 93 f1 20 	sts	0x20F1, r16	; 0x8020f1 <__flp>
    3654:	10 93 f2 20 	sts	0x20F2, r17	; 0x8020f2 <__flp+0x1>
    3658:	22 c0       	rjmp	.+68     	; 0x369e <malloc+0x98>
    365a:	21 15       	cp	r18, r1
    365c:	31 05       	cpc	r19, r1
    365e:	19 f0       	breq	.+6      	; 0x3666 <malloc+0x60>
    3660:	42 17       	cp	r20, r18
    3662:	53 07       	cpc	r21, r19
    3664:	18 f4       	brcc	.+6      	; 0x366c <malloc+0x66>
    3666:	9a 01       	movw	r18, r20
    3668:	bd 01       	movw	r22, r26
    366a:	ef 01       	movw	r28, r30
    366c:	df 01       	movw	r26, r30
    366e:	f8 01       	movw	r30, r16
    3670:	db cf       	rjmp	.-74     	; 0x3628 <malloc+0x22>
    3672:	21 15       	cp	r18, r1
    3674:	31 05       	cpc	r19, r1
    3676:	f9 f0       	breq	.+62     	; 0x36b6 <malloc+0xb0>
    3678:	28 1b       	sub	r18, r24
    367a:	39 0b       	sbc	r19, r25
    367c:	24 30       	cpi	r18, 0x04	; 4
    367e:	31 05       	cpc	r19, r1
    3680:	80 f4       	brcc	.+32     	; 0x36a2 <malloc+0x9c>
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	9b 81       	ldd	r25, Y+3	; 0x03
    3686:	61 15       	cp	r22, r1
    3688:	71 05       	cpc	r23, r1
    368a:	21 f0       	breq	.+8      	; 0x3694 <malloc+0x8e>
    368c:	fb 01       	movw	r30, r22
    368e:	82 83       	std	Z+2, r24	; 0x02
    3690:	93 83       	std	Z+3, r25	; 0x03
    3692:	04 c0       	rjmp	.+8      	; 0x369c <malloc+0x96>
    3694:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <__flp>
    3698:	90 93 f2 20 	sts	0x20F2, r25	; 0x8020f2 <__flp+0x1>
    369c:	fe 01       	movw	r30, r28
    369e:	32 96       	adiw	r30, 0x02	; 2
    36a0:	44 c0       	rjmp	.+136    	; 0x372a <malloc+0x124>
    36a2:	fe 01       	movw	r30, r28
    36a4:	e2 0f       	add	r30, r18
    36a6:	f3 1f       	adc	r31, r19
    36a8:	81 93       	st	Z+, r24
    36aa:	91 93       	st	Z+, r25
    36ac:	22 50       	subi	r18, 0x02	; 2
    36ae:	31 09       	sbc	r19, r1
    36b0:	28 83       	st	Y, r18
    36b2:	39 83       	std	Y+1, r19	; 0x01
    36b4:	3a c0       	rjmp	.+116    	; 0x372a <malloc+0x124>
    36b6:	20 91 ef 20 	lds	r18, 0x20EF	; 0x8020ef <__brkval>
    36ba:	30 91 f0 20 	lds	r19, 0x20F0	; 0x8020f0 <__brkval+0x1>
    36be:	23 2b       	or	r18, r19
    36c0:	41 f4       	brne	.+16     	; 0x36d2 <malloc+0xcc>
    36c2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    36c6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    36ca:	20 93 ef 20 	sts	0x20EF, r18	; 0x8020ef <__brkval>
    36ce:	30 93 f0 20 	sts	0x20F0, r19	; 0x8020f0 <__brkval+0x1>
    36d2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    36d6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    36da:	21 15       	cp	r18, r1
    36dc:	31 05       	cpc	r19, r1
    36de:	41 f4       	brne	.+16     	; 0x36f0 <malloc+0xea>
    36e0:	2d b7       	in	r18, 0x3d	; 61
    36e2:	3e b7       	in	r19, 0x3e	; 62
    36e4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    36e8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    36ec:	24 1b       	sub	r18, r20
    36ee:	35 0b       	sbc	r19, r21
    36f0:	e0 91 ef 20 	lds	r30, 0x20EF	; 0x8020ef <__brkval>
    36f4:	f0 91 f0 20 	lds	r31, 0x20F0	; 0x8020f0 <__brkval+0x1>
    36f8:	e2 17       	cp	r30, r18
    36fa:	f3 07       	cpc	r31, r19
    36fc:	a0 f4       	brcc	.+40     	; 0x3726 <malloc+0x120>
    36fe:	2e 1b       	sub	r18, r30
    3700:	3f 0b       	sbc	r19, r31
    3702:	28 17       	cp	r18, r24
    3704:	39 07       	cpc	r19, r25
    3706:	78 f0       	brcs	.+30     	; 0x3726 <malloc+0x120>
    3708:	ac 01       	movw	r20, r24
    370a:	4e 5f       	subi	r20, 0xFE	; 254
    370c:	5f 4f       	sbci	r21, 0xFF	; 255
    370e:	24 17       	cp	r18, r20
    3710:	35 07       	cpc	r19, r21
    3712:	48 f0       	brcs	.+18     	; 0x3726 <malloc+0x120>
    3714:	4e 0f       	add	r20, r30
    3716:	5f 1f       	adc	r21, r31
    3718:	40 93 ef 20 	sts	0x20EF, r20	; 0x8020ef <__brkval>
    371c:	50 93 f0 20 	sts	0x20F0, r21	; 0x8020f0 <__brkval+0x1>
    3720:	81 93       	st	Z+, r24
    3722:	91 93       	st	Z+, r25
    3724:	02 c0       	rjmp	.+4      	; 0x372a <malloc+0x124>
    3726:	e0 e0       	ldi	r30, 0x00	; 0
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	cf 01       	movw	r24, r30
    372c:	df 91       	pop	r29
    372e:	cf 91       	pop	r28
    3730:	1f 91       	pop	r17
    3732:	0f 91       	pop	r16
    3734:	08 95       	ret

00003736 <free>:
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	09 f4       	brne	.+2      	; 0x3740 <free+0xa>
    373e:	81 c0       	rjmp	.+258    	; 0x3842 <free+0x10c>
    3740:	fc 01       	movw	r30, r24
    3742:	32 97       	sbiw	r30, 0x02	; 2
    3744:	12 82       	std	Z+2, r1	; 0x02
    3746:	13 82       	std	Z+3, r1	; 0x03
    3748:	a0 91 f1 20 	lds	r26, 0x20F1	; 0x8020f1 <__flp>
    374c:	b0 91 f2 20 	lds	r27, 0x20F2	; 0x8020f2 <__flp+0x1>
    3750:	10 97       	sbiw	r26, 0x00	; 0
    3752:	81 f4       	brne	.+32     	; 0x3774 <free+0x3e>
    3754:	20 81       	ld	r18, Z
    3756:	31 81       	ldd	r19, Z+1	; 0x01
    3758:	82 0f       	add	r24, r18
    375a:	93 1f       	adc	r25, r19
    375c:	20 91 ef 20 	lds	r18, 0x20EF	; 0x8020ef <__brkval>
    3760:	30 91 f0 20 	lds	r19, 0x20F0	; 0x8020f0 <__brkval+0x1>
    3764:	28 17       	cp	r18, r24
    3766:	39 07       	cpc	r19, r25
    3768:	51 f5       	brne	.+84     	; 0x37be <free+0x88>
    376a:	e0 93 ef 20 	sts	0x20EF, r30	; 0x8020ef <__brkval>
    376e:	f0 93 f0 20 	sts	0x20F0, r31	; 0x8020f0 <__brkval+0x1>
    3772:	67 c0       	rjmp	.+206    	; 0x3842 <free+0x10c>
    3774:	ed 01       	movw	r28, r26
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	ce 17       	cp	r28, r30
    377c:	df 07       	cpc	r29, r31
    377e:	40 f4       	brcc	.+16     	; 0x3790 <free+0x5a>
    3780:	4a 81       	ldd	r20, Y+2	; 0x02
    3782:	5b 81       	ldd	r21, Y+3	; 0x03
    3784:	9e 01       	movw	r18, r28
    3786:	41 15       	cp	r20, r1
    3788:	51 05       	cpc	r21, r1
    378a:	f1 f0       	breq	.+60     	; 0x37c8 <free+0x92>
    378c:	ea 01       	movw	r28, r20
    378e:	f5 cf       	rjmp	.-22     	; 0x377a <free+0x44>
    3790:	c2 83       	std	Z+2, r28	; 0x02
    3792:	d3 83       	std	Z+3, r29	; 0x03
    3794:	40 81       	ld	r20, Z
    3796:	51 81       	ldd	r21, Z+1	; 0x01
    3798:	84 0f       	add	r24, r20
    379a:	95 1f       	adc	r25, r21
    379c:	c8 17       	cp	r28, r24
    379e:	d9 07       	cpc	r29, r25
    37a0:	59 f4       	brne	.+22     	; 0x37b8 <free+0x82>
    37a2:	88 81       	ld	r24, Y
    37a4:	99 81       	ldd	r25, Y+1	; 0x01
    37a6:	84 0f       	add	r24, r20
    37a8:	95 1f       	adc	r25, r21
    37aa:	02 96       	adiw	r24, 0x02	; 2
    37ac:	80 83       	st	Z, r24
    37ae:	91 83       	std	Z+1, r25	; 0x01
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	9b 81       	ldd	r25, Y+3	; 0x03
    37b4:	82 83       	std	Z+2, r24	; 0x02
    37b6:	93 83       	std	Z+3, r25	; 0x03
    37b8:	21 15       	cp	r18, r1
    37ba:	31 05       	cpc	r19, r1
    37bc:	29 f4       	brne	.+10     	; 0x37c8 <free+0x92>
    37be:	e0 93 f1 20 	sts	0x20F1, r30	; 0x8020f1 <__flp>
    37c2:	f0 93 f2 20 	sts	0x20F2, r31	; 0x8020f2 <__flp+0x1>
    37c6:	3d c0       	rjmp	.+122    	; 0x3842 <free+0x10c>
    37c8:	e9 01       	movw	r28, r18
    37ca:	ea 83       	std	Y+2, r30	; 0x02
    37cc:	fb 83       	std	Y+3, r31	; 0x03
    37ce:	49 91       	ld	r20, Y+
    37d0:	59 91       	ld	r21, Y+
    37d2:	c4 0f       	add	r28, r20
    37d4:	d5 1f       	adc	r29, r21
    37d6:	ec 17       	cp	r30, r28
    37d8:	fd 07       	cpc	r31, r29
    37da:	61 f4       	brne	.+24     	; 0x37f4 <free+0xbe>
    37dc:	80 81       	ld	r24, Z
    37de:	91 81       	ldd	r25, Z+1	; 0x01
    37e0:	84 0f       	add	r24, r20
    37e2:	95 1f       	adc	r25, r21
    37e4:	02 96       	adiw	r24, 0x02	; 2
    37e6:	e9 01       	movw	r28, r18
    37e8:	88 83       	st	Y, r24
    37ea:	99 83       	std	Y+1, r25	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	8a 83       	std	Y+2, r24	; 0x02
    37f2:	9b 83       	std	Y+3, r25	; 0x03
    37f4:	e0 e0       	ldi	r30, 0x00	; 0
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	12 96       	adiw	r26, 0x02	; 2
    37fa:	8d 91       	ld	r24, X+
    37fc:	9c 91       	ld	r25, X
    37fe:	13 97       	sbiw	r26, 0x03	; 3
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	19 f0       	breq	.+6      	; 0x380a <free+0xd4>
    3804:	fd 01       	movw	r30, r26
    3806:	dc 01       	movw	r26, r24
    3808:	f7 cf       	rjmp	.-18     	; 0x37f8 <free+0xc2>
    380a:	8d 91       	ld	r24, X+
    380c:	9c 91       	ld	r25, X
    380e:	11 97       	sbiw	r26, 0x01	; 1
    3810:	9d 01       	movw	r18, r26
    3812:	2e 5f       	subi	r18, 0xFE	; 254
    3814:	3f 4f       	sbci	r19, 0xFF	; 255
    3816:	82 0f       	add	r24, r18
    3818:	93 1f       	adc	r25, r19
    381a:	20 91 ef 20 	lds	r18, 0x20EF	; 0x8020ef <__brkval>
    381e:	30 91 f0 20 	lds	r19, 0x20F0	; 0x8020f0 <__brkval+0x1>
    3822:	28 17       	cp	r18, r24
    3824:	39 07       	cpc	r19, r25
    3826:	69 f4       	brne	.+26     	; 0x3842 <free+0x10c>
    3828:	30 97       	sbiw	r30, 0x00	; 0
    382a:	29 f4       	brne	.+10     	; 0x3836 <free+0x100>
    382c:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <__flp>
    3830:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <__flp+0x1>
    3834:	02 c0       	rjmp	.+4      	; 0x383a <free+0x104>
    3836:	12 82       	std	Z+2, r1	; 0x02
    3838:	13 82       	std	Z+3, r1	; 0x03
    383a:	a0 93 ef 20 	sts	0x20EF, r26	; 0x8020ef <__brkval>
    383e:	b0 93 f0 20 	sts	0x20F0, r27	; 0x8020f0 <__brkval+0x1>
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	08 95       	ret

00003848 <strnlen_P>:
    3848:	fc 01       	movw	r30, r24
    384a:	05 90       	lpm	r0, Z+
    384c:	61 50       	subi	r22, 0x01	; 1
    384e:	70 40       	sbci	r23, 0x00	; 0
    3850:	01 10       	cpse	r0, r1
    3852:	d8 f7       	brcc	.-10     	; 0x384a <strnlen_P+0x2>
    3854:	80 95       	com	r24
    3856:	90 95       	com	r25
    3858:	8e 0f       	add	r24, r30
    385a:	9f 1f       	adc	r25, r31
    385c:	08 95       	ret

0000385e <memset>:
    385e:	dc 01       	movw	r26, r24
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <memset+0x6>
    3862:	6d 93       	st	X+, r22
    3864:	41 50       	subi	r20, 0x01	; 1
    3866:	50 40       	sbci	r21, 0x00	; 0
    3868:	e0 f7       	brcc	.-8      	; 0x3862 <memset+0x4>
    386a:	08 95       	ret

0000386c <strnlen>:
    386c:	fc 01       	movw	r30, r24
    386e:	61 50       	subi	r22, 0x01	; 1
    3870:	70 40       	sbci	r23, 0x00	; 0
    3872:	01 90       	ld	r0, Z+
    3874:	01 10       	cpse	r0, r1
    3876:	d8 f7       	brcc	.-10     	; 0x386e <strnlen+0x2>
    3878:	80 95       	com	r24
    387a:	90 95       	com	r25
    387c:	8e 0f       	add	r24, r30
    387e:	9f 1f       	adc	r25, r31
    3880:	08 95       	ret

00003882 <fputc>:
    3882:	0f 93       	push	r16
    3884:	1f 93       	push	r17
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	fb 01       	movw	r30, r22
    388c:	23 81       	ldd	r18, Z+3	; 0x03
    388e:	21 fd       	sbrc	r18, 1
    3890:	03 c0       	rjmp	.+6      	; 0x3898 <fputc+0x16>
    3892:	8f ef       	ldi	r24, 0xFF	; 255
    3894:	9f ef       	ldi	r25, 0xFF	; 255
    3896:	2c c0       	rjmp	.+88     	; 0x38f0 <fputc+0x6e>
    3898:	22 ff       	sbrs	r18, 2
    389a:	16 c0       	rjmp	.+44     	; 0x38c8 <fputc+0x46>
    389c:	46 81       	ldd	r20, Z+6	; 0x06
    389e:	57 81       	ldd	r21, Z+7	; 0x07
    38a0:	24 81       	ldd	r18, Z+4	; 0x04
    38a2:	35 81       	ldd	r19, Z+5	; 0x05
    38a4:	42 17       	cp	r20, r18
    38a6:	53 07       	cpc	r21, r19
    38a8:	44 f4       	brge	.+16     	; 0x38ba <fputc+0x38>
    38aa:	a0 81       	ld	r26, Z
    38ac:	b1 81       	ldd	r27, Z+1	; 0x01
    38ae:	9d 01       	movw	r18, r26
    38b0:	2f 5f       	subi	r18, 0xFF	; 255
    38b2:	3f 4f       	sbci	r19, 0xFF	; 255
    38b4:	20 83       	st	Z, r18
    38b6:	31 83       	std	Z+1, r19	; 0x01
    38b8:	8c 93       	st	X, r24
    38ba:	26 81       	ldd	r18, Z+6	; 0x06
    38bc:	37 81       	ldd	r19, Z+7	; 0x07
    38be:	2f 5f       	subi	r18, 0xFF	; 255
    38c0:	3f 4f       	sbci	r19, 0xFF	; 255
    38c2:	26 83       	std	Z+6, r18	; 0x06
    38c4:	37 83       	std	Z+7, r19	; 0x07
    38c6:	14 c0       	rjmp	.+40     	; 0x38f0 <fputc+0x6e>
    38c8:	8b 01       	movw	r16, r22
    38ca:	ec 01       	movw	r28, r24
    38cc:	fb 01       	movw	r30, r22
    38ce:	00 84       	ldd	r0, Z+8	; 0x08
    38d0:	f1 85       	ldd	r31, Z+9	; 0x09
    38d2:	e0 2d       	mov	r30, r0
    38d4:	19 95       	eicall
    38d6:	89 2b       	or	r24, r25
    38d8:	e1 f6       	brne	.-72     	; 0x3892 <fputc+0x10>
    38da:	d8 01       	movw	r26, r16
    38dc:	16 96       	adiw	r26, 0x06	; 6
    38de:	8d 91       	ld	r24, X+
    38e0:	9c 91       	ld	r25, X
    38e2:	17 97       	sbiw	r26, 0x07	; 7
    38e4:	01 96       	adiw	r24, 0x01	; 1
    38e6:	16 96       	adiw	r26, 0x06	; 6
    38e8:	8d 93       	st	X+, r24
    38ea:	9c 93       	st	X, r25
    38ec:	17 97       	sbiw	r26, 0x07	; 7
    38ee:	ce 01       	movw	r24, r28
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
    38f8:	08 95       	ret

000038fa <__ultoa_invert>:
    38fa:	fa 01       	movw	r30, r20
    38fc:	aa 27       	eor	r26, r26
    38fe:	28 30       	cpi	r18, 0x08	; 8
    3900:	51 f1       	breq	.+84     	; 0x3956 <__ultoa_invert+0x5c>
    3902:	20 31       	cpi	r18, 0x10	; 16
    3904:	81 f1       	breq	.+96     	; 0x3966 <__ultoa_invert+0x6c>
    3906:	e8 94       	clt
    3908:	6f 93       	push	r22
    390a:	6e 7f       	andi	r22, 0xFE	; 254
    390c:	6e 5f       	subi	r22, 0xFE	; 254
    390e:	7f 4f       	sbci	r23, 0xFF	; 255
    3910:	8f 4f       	sbci	r24, 0xFF	; 255
    3912:	9f 4f       	sbci	r25, 0xFF	; 255
    3914:	af 4f       	sbci	r26, 0xFF	; 255
    3916:	b1 e0       	ldi	r27, 0x01	; 1
    3918:	3e d0       	rcall	.+124    	; 0x3996 <__ultoa_invert+0x9c>
    391a:	b4 e0       	ldi	r27, 0x04	; 4
    391c:	3c d0       	rcall	.+120    	; 0x3996 <__ultoa_invert+0x9c>
    391e:	67 0f       	add	r22, r23
    3920:	78 1f       	adc	r23, r24
    3922:	89 1f       	adc	r24, r25
    3924:	9a 1f       	adc	r25, r26
    3926:	a1 1d       	adc	r26, r1
    3928:	68 0f       	add	r22, r24
    392a:	79 1f       	adc	r23, r25
    392c:	8a 1f       	adc	r24, r26
    392e:	91 1d       	adc	r25, r1
    3930:	a1 1d       	adc	r26, r1
    3932:	6a 0f       	add	r22, r26
    3934:	71 1d       	adc	r23, r1
    3936:	81 1d       	adc	r24, r1
    3938:	91 1d       	adc	r25, r1
    393a:	a1 1d       	adc	r26, r1
    393c:	20 d0       	rcall	.+64     	; 0x397e <__ultoa_invert+0x84>
    393e:	09 f4       	brne	.+2      	; 0x3942 <__ultoa_invert+0x48>
    3940:	68 94       	set
    3942:	3f 91       	pop	r19
    3944:	2a e0       	ldi	r18, 0x0A	; 10
    3946:	26 9f       	mul	r18, r22
    3948:	11 24       	eor	r1, r1
    394a:	30 19       	sub	r19, r0
    394c:	30 5d       	subi	r19, 0xD0	; 208
    394e:	31 93       	st	Z+, r19
    3950:	de f6       	brtc	.-74     	; 0x3908 <__ultoa_invert+0xe>
    3952:	cf 01       	movw	r24, r30
    3954:	08 95       	ret
    3956:	46 2f       	mov	r20, r22
    3958:	47 70       	andi	r20, 0x07	; 7
    395a:	40 5d       	subi	r20, 0xD0	; 208
    395c:	41 93       	st	Z+, r20
    395e:	b3 e0       	ldi	r27, 0x03	; 3
    3960:	0f d0       	rcall	.+30     	; 0x3980 <__ultoa_invert+0x86>
    3962:	c9 f7       	brne	.-14     	; 0x3956 <__ultoa_invert+0x5c>
    3964:	f6 cf       	rjmp	.-20     	; 0x3952 <__ultoa_invert+0x58>
    3966:	46 2f       	mov	r20, r22
    3968:	4f 70       	andi	r20, 0x0F	; 15
    396a:	40 5d       	subi	r20, 0xD0	; 208
    396c:	4a 33       	cpi	r20, 0x3A	; 58
    396e:	18 f0       	brcs	.+6      	; 0x3976 <__ultoa_invert+0x7c>
    3970:	49 5d       	subi	r20, 0xD9	; 217
    3972:	31 fd       	sbrc	r19, 1
    3974:	40 52       	subi	r20, 0x20	; 32
    3976:	41 93       	st	Z+, r20
    3978:	02 d0       	rcall	.+4      	; 0x397e <__ultoa_invert+0x84>
    397a:	a9 f7       	brne	.-22     	; 0x3966 <__ultoa_invert+0x6c>
    397c:	ea cf       	rjmp	.-44     	; 0x3952 <__ultoa_invert+0x58>
    397e:	b4 e0       	ldi	r27, 0x04	; 4
    3980:	a6 95       	lsr	r26
    3982:	97 95       	ror	r25
    3984:	87 95       	ror	r24
    3986:	77 95       	ror	r23
    3988:	67 95       	ror	r22
    398a:	ba 95       	dec	r27
    398c:	c9 f7       	brne	.-14     	; 0x3980 <__ultoa_invert+0x86>
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	61 05       	cpc	r22, r1
    3992:	71 05       	cpc	r23, r1
    3994:	08 95       	ret
    3996:	9b 01       	movw	r18, r22
    3998:	ac 01       	movw	r20, r24
    399a:	0a 2e       	mov	r0, r26
    399c:	06 94       	lsr	r0
    399e:	57 95       	ror	r21
    39a0:	47 95       	ror	r20
    39a2:	37 95       	ror	r19
    39a4:	27 95       	ror	r18
    39a6:	ba 95       	dec	r27
    39a8:	c9 f7       	brne	.-14     	; 0x399c <__ultoa_invert+0xa2>
    39aa:	62 0f       	add	r22, r18
    39ac:	73 1f       	adc	r23, r19
    39ae:	84 1f       	adc	r24, r20
    39b0:	95 1f       	adc	r25, r21
    39b2:	a0 1d       	adc	r26, r0
    39b4:	08 95       	ret

000039b6 <_exit>:
    39b6:	f8 94       	cli

000039b8 <__stop_program>:
    39b8:	ff cf       	rjmp	.-2      	; 0x39b8 <__stop_program>
