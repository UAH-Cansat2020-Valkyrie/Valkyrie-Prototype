
ValkyriePrototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00802000  00003f84  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  0080207a  0080207a  00004092  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000578  00000000  00000000  00004130  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001172f  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005fc2  00000000  00000000  00015dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000090ab  00000000  00000000  0001bd99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bc0  00000000  00000000  00024e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036902  00000000  00000000  00026a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ac5  00000000  00000000  0005d306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  00062dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d6d3  00000000  00000000  000632c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_10>
      2c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_11>
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c2       	rjmp	.+1524   	; 0x62a <__vector_13>
      36:	00 00       	nop
      38:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_14>
      3c:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_15>
      40:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_16>
      44:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_17>
      48:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__vector_18>
      4c:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__vector_19>
      50:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_20>
      54:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__vector_21>
      58:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_22>
      5c:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_23>
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_39>
      a0:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_40>
      a4:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_41>
      a8:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_42>
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1c c3       	rjmp	.+1592   	; 0x6f2 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_47>
      c0:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__vector_48>
      c4:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__vector_49>
      c8:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__vector_50>
      cc:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_51>
      d0:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__vector_52>
      d4:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__vector_53>
      d8:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__vector_54>
      dc:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_55>
      e0:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__vector_56>
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d2 c6       	rjmp	.+3492   	; 0xec2 <__vector_71>
     11e:	00 00       	nop
     120:	0d c7       	rjmp	.+3610   	; 0xf3c <__vector_72>
     122:	00 00       	nop
     124:	48 c7       	rjmp	.+3728   	; 0xfb6 <__vector_73>
     126:	00 00       	nop
     128:	83 c7       	rjmp	.+3846   	; 0x1030 <__vector_74>
     12a:	00 00       	nop
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	ae c2       	rjmp	.+1372   	; 0x68e <__vector_76>
     132:	00 00       	nop
     134:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__vector_77>
     138:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__vector_78>
     13c:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__vector_79>
     140:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__vector_80>
     144:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_81>
     148:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_82>
     14c:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_83>
     150:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_84>
     154:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_85>
     158:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__vector_86>
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c1       	rjmp	.+566    	; 0x3a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d4 c2       	rjmp	.+1448   	; 0x756 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__vector_108>
     1b4:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__vector_109>
     1b8:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__vector_110>
     1bc:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__vector_111>
     1c0:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__vector_112>
     1c4:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__vector_113>
     1c8:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__vector_114>
     1cc:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__vector_115>
     1d0:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__vector_116>
     1d4:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__vector_117>
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c0       	rjmp	.+454    	; 0x3a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c0       	rjmp	.+442    	; 0x3a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c0       	rjmp	.+434    	; 0x3a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <usart_init_rs232+0x54>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	10 e2       	ldi	r17, 0x20	; 32
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	e4 e8       	ldi	r30, 0x84	; 132
     378:	ff e3       	ldi	r31, 0x3F	; 63
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 37       	cpi	r26, 0x7A	; 122
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	20 e2       	ldi	r18, 0x20	; 32
     38e:	aa e7       	ldi	r26, 0x7A	; 122
     390:	b0 e2       	ldi	r27, 0x20	; 32
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a9 3f       	cpi	r26, 0xF9	; 249
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 49 16 	call	0x2c92	; 0x2c92 <main>
     3a0:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     3b0:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <stdio_base>
     3b4:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <stdio_base+0x1>
     3b8:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <ptr_get>
     3bc:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <ptr_get+0x1>
     3c0:	be 01       	movw	r22, r28
     3c2:	6f 5f       	subi	r22, 0xFF	; 255
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
     3c6:	19 95       	eicall
	return c;
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ca:	08 2e       	mov	r0, r24
     3cc:	00 0c       	add	r0, r0
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0f 90       	pop	r0
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3d8:	81 15       	cp	r24, r1
     3da:	22 e0       	ldi	r18, 0x02	; 2
     3dc:	92 07       	cpc	r25, r18
     3de:	69 f4       	brne	.+26     	; 0x3fa <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     3e0:	80 91 7b 20 	lds	r24, 0x207B	; 0x80207b <adca_enable_count>
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	98 0f       	add	r25, r24
     3e8:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <adca_enable_count>
     3ec:	81 11       	cpse	r24, r1
     3ee:	14 c0       	rjmp	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <sysclk_enable_module>
     3f8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     3fa:	80 34       	cpi	r24, 0x40	; 64
     3fc:	92 40       	sbci	r25, 0x02	; 2
     3fe:	61 f4       	brne	.+24     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     400:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <__data_end>
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	98 0f       	add	r25, r24
     408:	90 93 7a 20 	sts	0x207A, r25	; 0x80207a <__data_end>
     40c:	81 11       	cpse	r24, r1
     40e:	04 c0       	rjmp	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     410:	62 e0       	ldi	r22, 0x02	; 2
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <sysclk_enable_module>
     418:	08 95       	ret

0000041a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     41a:	81 15       	cp	r24, r1
     41c:	22 e0       	ldi	r18, 0x02	; 2
     41e:	92 07       	cpc	r25, r18
     420:	61 f4       	brne	.+24     	; 0x43a <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     422:	80 91 7b 20 	lds	r24, 0x207B	; 0x80207b <adca_enable_count>
     426:	81 50       	subi	r24, 0x01	; 1
     428:	80 93 7b 20 	sts	0x207B, r24	; 0x80207b <adca_enable_count>
     42c:	81 11       	cpse	r24, r1
     42e:	13 c0       	rjmp	.+38     	; 0x456 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     430:	62 e0       	ldi	r22, 0x02	; 2
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <sysclk_disable_module>
     438:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     43a:	80 34       	cpi	r24, 0x40	; 64
     43c:	92 40       	sbci	r25, 0x02	; 2
     43e:	59 f4       	brne	.+22     	; 0x456 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     440:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <__data_end>
     444:	81 50       	subi	r24, 0x01	; 1
     446:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <__data_end>
     44a:	81 11       	cpse	r24, r1
     44c:	04 c0       	rjmp	.+8      	; 0x456 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <sysclk_disable_module>
     456:	08 95       	ret

00000458 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	1f 92       	push	r1
     464:	1f 92       	push	r1
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     46c:	8f b7       	in	r24, 0x3f	; 63
     46e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     470:	f8 94       	cli
	return flags;
     472:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     474:	c7 01       	movw	r24, r14
     476:	b0 df       	rcall	.-160    	; 0x3d8 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     478:	f7 01       	movw	r30, r14
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     480:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     482:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <sleepmgr_locks+0x1>
     486:	8f 3f       	cpi	r24, 0xFF	; 255
     488:	09 f4       	brne	.+2      	; 0x48c <adc_enable+0x34>
     48a:	ff cf       	rjmp	.-2      	; 0x48a <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     48c:	8f b7       	in	r24, 0x3f	; 63
     48e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     490:	f8 94       	cli
	return flags;
     492:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     494:	e1 ee       	ldi	r30, 0xE1	; 225
     496:	f0 e2       	ldi	r31, 0x20	; 32
     498:	81 81       	ldd	r24, Z+1	; 0x01
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     49e:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	08 95       	ret

000004b0 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	1f 92       	push	r1
     4b8:	1f 92       	push	r1
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4be:	2f b7       	in	r18, 0x3f	; 63
     4c0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     4c2:	f8 94       	cli
	return flags;
     4c4:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 81       	ld	r18, Z
     4ca:	2e 7f       	andi	r18, 0xFE	; 254
     4cc:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     4ce:	a5 df       	rcall	.-182    	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4d0:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     4d2:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <sleepmgr_locks+0x1>
     4d6:	81 11       	cpse	r24, r1
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <adc_disable+0x2c>
     4da:	ff cf       	rjmp	.-2      	; 0x4da <adc_disable+0x2a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4dc:	8f b7       	in	r24, 0x3f	; 63
     4de:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     4e0:	f8 94       	cli
	return flags;
     4e2:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     4e4:	e1 ee       	ldi	r30, 0xE1	; 225
     4e6:	f0 e2       	ldi	r31, 0x20	; 32
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	81 50       	subi	r24, 0x01	; 1
     4ec:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4ee:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	08 95       	ret

000004fc <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     500:	e0 91 7c 20 	lds	r30, 0x207C	; 0x80207c <transfer>
     504:	f0 91 7d 20 	lds	r31, 0x207D	; 0x80207d <transfer+0x1>
     508:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     50a:	83 ff       	sbrs	r24, 3
     50c:	08 c0       	rjmp	.+16     	; 0x51e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     516:	86 ef       	ldi	r24, 0xF6	; 246
     518:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <transfer+0xa>
     51c:	83 c0       	rjmp	.+262    	; 0x624 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     51e:	98 2f       	mov	r25, r24
     520:	94 71       	andi	r25, 0x14	; 20
     522:	31 f0       	breq	.+12     	; 0x530 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     528:	8f ef       	ldi	r24, 0xFF	; 255
     52a:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <transfer+0xa>
     52e:	7a c0       	rjmp	.+244    	; 0x624 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     530:	86 ff       	sbrs	r24, 6
     532:	43 c0       	rjmp	.+134    	; 0x5ba <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     534:	cc e7       	ldi	r28, 0x7C	; 124
     536:	d0 e2       	ldi	r29, 0x20	; 32
     538:	aa 81       	ldd	r26, Y+2	; 0x02
     53a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     53c:	8c 81       	ldd	r24, Y+4	; 0x04
     53e:	9d 81       	ldd	r25, Y+5	; 0x05
     540:	14 96       	adiw	r26, 0x04	; 4
     542:	2d 91       	ld	r18, X+
     544:	3c 91       	ld	r19, X
     546:	15 97       	sbiw	r26, 0x05	; 5
     548:	82 17       	cp	r24, r18
     54a:	93 07       	cpc	r25, r19
     54c:	6c f4       	brge	.+26     	; 0x568 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     54e:	9c 01       	movw	r18, r24
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	20 93 80 20 	sts	0x2080, r18	; 0x802080 <transfer+0x4>
     558:	30 93 81 20 	sts	0x2081, r19	; 0x802081 <transfer+0x5>
     55c:	a8 0f       	add	r26, r24
     55e:	b9 1f       	adc	r27, r25
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	8c 91       	ld	r24, X
     564:	87 83       	std	Z+7, r24	; 0x07
     566:	5e c0       	rjmp	.+188    	; 0x624 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     568:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <transfer+0x6>
     56c:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <transfer+0x7>
     570:	18 96       	adiw	r26, 0x08	; 8
     572:	2d 91       	ld	r18, X+
     574:	3c 91       	ld	r19, X
     576:	19 97       	sbiw	r26, 0x09	; 9
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	c8 f4       	brcc	.+50     	; 0x5b0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     57e:	20 91 84 20 	lds	r18, 0x2084	; 0x802084 <transfer+0x8>
     582:	22 23       	and	r18, r18
     584:	21 f0       	breq	.+8      	; 0x58e <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     586:	86 81       	ldd	r24, Z+6	; 0x06
     588:	81 60       	ori	r24, 0x01	; 1
     58a:	86 83       	std	Z+6, r24	; 0x06
     58c:	4b c0       	rjmp	.+150    	; 0x624 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     58e:	16 96       	adiw	r26, 0x06	; 6
     590:	2d 91       	ld	r18, X+
     592:	3c 91       	ld	r19, X
     594:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     596:	ac 01       	movw	r20, r24
     598:	4f 5f       	subi	r20, 0xFF	; 255
     59a:	5f 4f       	sbci	r21, 0xFF	; 255
     59c:	40 93 82 20 	sts	0x2082, r20	; 0x802082 <transfer+0x6>
     5a0:	50 93 83 20 	sts	0x2083, r21	; 0x802083 <transfer+0x7>
     5a4:	d9 01       	movw	r26, r18
     5a6:	a8 0f       	add	r26, r24
     5a8:	b9 1f       	adc	r27, r25
     5aa:	8c 91       	ld	r24, X
     5ac:	87 83       	std	Z+7, r24	; 0x07
     5ae:	3a c0       	rjmp	.+116    	; 0x624 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     5b4:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <transfer+0xa>
     5b8:	35 c0       	rjmp	.+106    	; 0x624 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     5ba:	88 23       	and	r24, r24
     5bc:	84 f5       	brge	.+96     	; 0x61e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     5be:	ac e7       	ldi	r26, 0x7C	; 124
     5c0:	b0 e2       	ldi	r27, 0x20	; 32
     5c2:	12 96       	adiw	r26, 0x02	; 2
     5c4:	cd 91       	ld	r28, X+
     5c6:	dc 91       	ld	r29, X
     5c8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     5ca:	16 96       	adiw	r26, 0x06	; 6
     5cc:	8d 91       	ld	r24, X+
     5ce:	9c 91       	ld	r25, X
     5d0:	17 97       	sbiw	r26, 0x07	; 7
     5d2:	28 85       	ldd	r18, Y+8	; 0x08
     5d4:	39 85       	ldd	r19, Y+9	; 0x09
     5d6:	82 17       	cp	r24, r18
     5d8:	93 07       	cpc	r25, r19
     5da:	d8 f4       	brcc	.+54     	; 0x612 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     5dc:	6e 81       	ldd	r22, Y+6	; 0x06
     5de:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     5e0:	9c 01       	movw	r18, r24
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	20 93 82 20 	sts	0x2082, r18	; 0x802082 <transfer+0x6>
     5ea:	30 93 83 20 	sts	0x2083, r19	; 0x802083 <transfer+0x7>
     5ee:	47 81       	ldd	r20, Z+7	; 0x07
     5f0:	db 01       	movw	r26, r22
     5f2:	a8 0f       	add	r26, r24
     5f4:	b9 1f       	adc	r27, r25
     5f6:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     5f8:	88 85       	ldd	r24, Y+8	; 0x08
     5fa:	99 85       	ldd	r25, Y+9	; 0x09
     5fc:	28 17       	cp	r18, r24
     5fe:	39 07       	cpc	r19, r25
     600:	18 f4       	brcc	.+6      	; 0x608 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	83 83       	std	Z+3, r24	; 0x03
     606:	0e c0       	rjmp	.+28     	; 0x624 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     608:	87 e0       	ldi	r24, 0x07	; 7
     60a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     60c:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <transfer+0xa>
     610:	09 c0       	rjmp	.+18     	; 0x624 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     616:	89 ef       	ldi	r24, 0xF9	; 249
     618:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <transfer+0xa>
     61c:	03 c0       	rjmp	.+6      	; 0x624 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     61e:	8b ef       	ldi	r24, 0xFB	; 251
     620:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <transfer+0xa>
	}
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     62a:	1f 92       	push	r1
     62c:	0f 92       	push	r0
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	0f 92       	push	r0
     632:	11 24       	eor	r1, r1
     634:	08 b6       	in	r0, 0x38	; 56
     636:	0f 92       	push	r0
     638:	18 be       	out	0x38, r1	; 56
     63a:	09 b6       	in	r0, 0x39	; 57
     63c:	0f 92       	push	r0
     63e:	19 be       	out	0x39, r1	; 57
     640:	0b b6       	in	r0, 0x3b	; 59
     642:	0f 92       	push	r0
     644:	1b be       	out	0x3b, r1	; 59
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
     65e:	4e df       	rcall	.-356    	; 0x4fc <twim_interrupt_handler>
     660:	ff 91       	pop	r31
     662:	ef 91       	pop	r30
     664:	bf 91       	pop	r27
     666:	af 91       	pop	r26
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	7f 91       	pop	r23
     66e:	6f 91       	pop	r22
     670:	5f 91       	pop	r21
     672:	4f 91       	pop	r20
     674:	3f 91       	pop	r19
     676:	2f 91       	pop	r18
     678:	0f 90       	pop	r0
     67a:	0b be       	out	0x3b, r0	; 59
     67c:	0f 90       	pop	r0
     67e:	09 be       	out	0x39, r0	; 57
     680:	0f 90       	pop	r0
     682:	08 be       	out	0x38, r0	; 56
     684:	0f 90       	pop	r0
     686:	0f be       	out	0x3f, r0	; 63
     688:	0f 90       	pop	r0
     68a:	1f 90       	pop	r1
     68c:	18 95       	reti

0000068e <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     68e:	1f 92       	push	r1
     690:	0f 92       	push	r0
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	0f 92       	push	r0
     696:	11 24       	eor	r1, r1
     698:	08 b6       	in	r0, 0x38	; 56
     69a:	0f 92       	push	r0
     69c:	18 be       	out	0x38, r1	; 56
     69e:	09 b6       	in	r0, 0x39	; 57
     6a0:	0f 92       	push	r0
     6a2:	19 be       	out	0x39, r1	; 57
     6a4:	0b b6       	in	r0, 0x3b	; 59
     6a6:	0f 92       	push	r0
     6a8:	1b be       	out	0x3b, r1	; 59
     6aa:	2f 93       	push	r18
     6ac:	3f 93       	push	r19
     6ae:	4f 93       	push	r20
     6b0:	5f 93       	push	r21
     6b2:	6f 93       	push	r22
     6b4:	7f 93       	push	r23
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	ef 93       	push	r30
     6c0:	ff 93       	push	r31
     6c2:	1c df       	rcall	.-456    	; 0x4fc <twim_interrupt_handler>
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	08 b6       	in	r0, 0x38	; 56
     6fe:	0f 92       	push	r0
     700:	18 be       	out	0x38, r1	; 56
     702:	09 b6       	in	r0, 0x39	; 57
     704:	0f 92       	push	r0
     706:	19 be       	out	0x39, r1	; 57
     708:	0b b6       	in	r0, 0x3b	; 59
     70a:	0f 92       	push	r0
     70c:	1b be       	out	0x3b, r1	; 59
     70e:	2f 93       	push	r18
     710:	3f 93       	push	r19
     712:	4f 93       	push	r20
     714:	5f 93       	push	r21
     716:	6f 93       	push	r22
     718:	7f 93       	push	r23
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	af 93       	push	r26
     720:	bf 93       	push	r27
     722:	ef 93       	push	r30
     724:	ff 93       	push	r31
     726:	ea de       	rcall	.-556    	; 0x4fc <twim_interrupt_handler>
     728:	ff 91       	pop	r31
     72a:	ef 91       	pop	r30
     72c:	bf 91       	pop	r27
     72e:	af 91       	pop	r26
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	7f 91       	pop	r23
     736:	6f 91       	pop	r22
     738:	5f 91       	pop	r21
     73a:	4f 91       	pop	r20
     73c:	3f 91       	pop	r19
     73e:	2f 91       	pop	r18
     740:	0f 90       	pop	r0
     742:	0b be       	out	0x3b, r0	; 59
     744:	0f 90       	pop	r0
     746:	09 be       	out	0x39, r0	; 57
     748:	0f 90       	pop	r0
     74a:	08 be       	out	0x38, r0	; 56
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	08 b6       	in	r0, 0x38	; 56
     762:	0f 92       	push	r0
     764:	18 be       	out	0x38, r1	; 56
     766:	09 b6       	in	r0, 0x39	; 57
     768:	0f 92       	push	r0
     76a:	19 be       	out	0x39, r1	; 57
     76c:	0b b6       	in	r0, 0x3b	; 59
     76e:	0f 92       	push	r0
     770:	1b be       	out	0x3b, r1	; 59
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	b8 de       	rcall	.-656    	; 0x4fc <twim_interrupt_handler>
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0b be       	out	0x3b, r0	; 59
     7a8:	0f 90       	pop	r0
     7aa:	09 be       	out	0x39, r0	; 57
     7ac:	0f 90       	pop	r0
     7ae:	08 be       	out	0x38, r0	; 56
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     7ba:	fc 01       	movw	r30, r24
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	95 ff       	sbrs	r25, 5
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <usart_putchar+0x2>
     7c2:	60 83       	st	Z, r22
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	08 95       	ret

000007ca <usart_getchar>:
     7ca:	fc 01       	movw	r30, r24
     7cc:	91 81       	ldd	r25, Z+1	; 0x01
     7ce:	99 23       	and	r25, r25
     7d0:	ec f7       	brge	.-6      	; 0x7cc <usart_getchar+0x2>
     7d2:	80 81       	ld	r24, Z
     7d4:	08 95       	ret

000007d6 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     7d6:	4f 92       	push	r4
     7d8:	5f 92       	push	r5
     7da:	6f 92       	push	r6
     7dc:	7f 92       	push	r7
     7de:	8f 92       	push	r8
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	7c 01       	movw	r14, r24
     7f2:	4a 01       	movw	r8, r20
     7f4:	5b 01       	movw	r10, r22
     7f6:	28 01       	movw	r4, r16
     7f8:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7fa:	fc 01       	movw	r30, r24
     7fc:	84 81       	ldd	r24, Z+4	; 0x04
     7fe:	82 ff       	sbrs	r24, 2
     800:	16 c0       	rjmp	.+44     	; 0x82e <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     802:	d9 01       	movw	r26, r18
     804:	c8 01       	movw	r24, r16
     806:	68 94       	set
     808:	12 f8       	bld	r1, 2
     80a:	b6 95       	lsr	r27
     80c:	a7 95       	ror	r26
     80e:	97 95       	ror	r25
     810:	87 95       	ror	r24
     812:	16 94       	lsr	r1
     814:	d1 f7       	brne	.-12     	; 0x80a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     816:	b9 01       	movw	r22, r18
     818:	a8 01       	movw	r20, r16
     81a:	03 2e       	mov	r0, r19
     81c:	36 e1       	ldi	r19, 0x16	; 22
     81e:	76 95       	lsr	r23
     820:	67 95       	ror	r22
     822:	57 95       	ror	r21
     824:	47 95       	ror	r20
     826:	3a 95       	dec	r19
     828:	d1 f7       	brne	.-12     	; 0x81e <usart_set_baudrate+0x48>
     82a:	30 2d       	mov	r19, r0
     82c:	15 c0       	rjmp	.+42     	; 0x858 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     82e:	d9 01       	movw	r26, r18
     830:	c8 01       	movw	r24, r16
     832:	68 94       	set
     834:	13 f8       	bld	r1, 3
     836:	b6 95       	lsr	r27
     838:	a7 95       	ror	r26
     83a:	97 95       	ror	r25
     83c:	87 95       	ror	r24
     83e:	16 94       	lsr	r1
     840:	d1 f7       	brne	.-12     	; 0x836 <usart_set_baudrate+0x60>
		min_rate /= 2;
     842:	b9 01       	movw	r22, r18
     844:	a8 01       	movw	r20, r16
     846:	03 2e       	mov	r0, r19
     848:	37 e1       	ldi	r19, 0x17	; 23
     84a:	76 95       	lsr	r23
     84c:	67 95       	ror	r22
     84e:	57 95       	ror	r21
     850:	47 95       	ror	r20
     852:	3a 95       	dec	r19
     854:	d1 f7       	brne	.-12     	; 0x84a <usart_set_baudrate+0x74>
     856:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     858:	88 15       	cp	r24, r8
     85a:	99 05       	cpc	r25, r9
     85c:	aa 05       	cpc	r26, r10
     85e:	bb 05       	cpc	r27, r11
     860:	08 f4       	brcc	.+2      	; 0x864 <usart_set_baudrate+0x8e>
     862:	a6 c0       	rjmp	.+332    	; 0x9b0 <usart_set_baudrate+0x1da>
     864:	84 16       	cp	r8, r20
     866:	95 06       	cpc	r9, r21
     868:	a6 06       	cpc	r10, r22
     86a:	b7 06       	cpc	r11, r23
     86c:	08 f4       	brcc	.+2      	; 0x870 <usart_set_baudrate+0x9a>
     86e:	a2 c0       	rjmp	.+324    	; 0x9b4 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     870:	f7 01       	movw	r30, r14
     872:	84 81       	ldd	r24, Z+4	; 0x04
     874:	82 fd       	sbrc	r24, 2
     876:	04 c0       	rjmp	.+8      	; 0x880 <usart_set_baudrate+0xaa>
		baud *= 2;
     878:	88 0c       	add	r8, r8
     87a:	99 1c       	adc	r9, r9
     87c:	aa 1c       	adc	r10, r10
     87e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	a5 01       	movw	r20, r10
     886:	94 01       	movw	r18, r8
     888:	0e 94 47 1c 	call	0x388e	; 0x388e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     88c:	2f 3f       	cpi	r18, 0xFF	; 255
     88e:	31 05       	cpc	r19, r1
     890:	41 05       	cpc	r20, r1
     892:	51 05       	cpc	r21, r1
     894:	08 f4       	brcc	.+2      	; 0x898 <usart_set_baudrate+0xc2>
     896:	90 c0       	rjmp	.+288    	; 0x9b8 <usart_set_baudrate+0x1e2>
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	c9 ef       	ldi	r28, 0xF9	; 249
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <usart_set_baudrate+0xd8>
     8a4:	28 17       	cp	r18, r24
     8a6:	39 07       	cpc	r19, r25
     8a8:	4a 07       	cpc	r20, r26
     8aa:	5b 07       	cpc	r21, r27
     8ac:	58 f0       	brcs	.+22     	; 0x8c4 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	aa 1f       	adc	r26, r26
     8b4:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     8b6:	cd 3f       	cpi	r28, 0xFD	; 253
     8b8:	0c f4       	brge	.+2      	; 0x8bc <usart_set_baudrate+0xe6>
			limit |= 1;
     8ba:	81 60       	ori	r24, 0x01	; 1
     8bc:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     8be:	c7 30       	cpi	r28, 0x07	; 7
     8c0:	89 f7       	brne	.-30     	; 0x8a4 <usart_set_baudrate+0xce>
     8c2:	4f c0       	rjmp	.+158    	; 0x962 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     8c4:	cc 23       	and	r28, r28
     8c6:	0c f0       	brlt	.+2      	; 0x8ca <usart_set_baudrate+0xf4>
     8c8:	4c c0       	rjmp	.+152    	; 0x962 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8ca:	d5 01       	movw	r26, r10
     8cc:	c4 01       	movw	r24, r8
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	aa 1f       	adc	r26, r26
     8dc:	bb 1f       	adc	r27, r27
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	48 1a       	sub	r4, r24
     8e8:	59 0a       	sbc	r5, r25
     8ea:	6a 0a       	sbc	r6, r26
     8ec:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     8ee:	ce 3f       	cpi	r28, 0xFE	; 254
     8f0:	f4 f4       	brge	.+60     	; 0x92e <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     8f2:	8d ef       	ldi	r24, 0xFD	; 253
     8f4:	9f ef       	ldi	r25, 0xFF	; 255
     8f6:	8c 1b       	sub	r24, r28
     8f8:	91 09       	sbc	r25, r1
     8fa:	c7 fd       	sbrc	r28, 7
     8fc:	93 95       	inc	r25
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <usart_set_baudrate+0x132>
     900:	44 0c       	add	r4, r4
     902:	55 1c       	adc	r5, r5
     904:	66 1c       	adc	r6, r6
     906:	77 1c       	adc	r7, r7
     908:	8a 95       	dec	r24
     90a:	d2 f7       	brpl	.-12     	; 0x900 <usart_set_baudrate+0x12a>
     90c:	d5 01       	movw	r26, r10
     90e:	c4 01       	movw	r24, r8
     910:	b6 95       	lsr	r27
     912:	a7 95       	ror	r26
     914:	97 95       	ror	r25
     916:	87 95       	ror	r24
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	64 0d       	add	r22, r4
     91e:	75 1d       	adc	r23, r5
     920:	86 1d       	adc	r24, r6
     922:	97 1d       	adc	r25, r7
     924:	a5 01       	movw	r20, r10
     926:	94 01       	movw	r18, r8
     928:	0e 94 47 1c 	call	0x388e	; 0x388e <__udivmodsi4>
     92c:	37 c0       	rjmp	.+110    	; 0x99c <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	8c 0f       	add	r24, r28
     932:	a5 01       	movw	r20, r10
     934:	94 01       	movw	r18, r8
     936:	04 c0       	rjmp	.+8      	; 0x940 <usart_set_baudrate+0x16a>
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	44 1f       	adc	r20, r20
     93e:	55 1f       	adc	r21, r21
     940:	8a 95       	dec	r24
     942:	d2 f7       	brpl	.-12     	; 0x938 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     944:	da 01       	movw	r26, r20
     946:	c9 01       	movw	r24, r18
     948:	b6 95       	lsr	r27
     94a:	a7 95       	ror	r26
     94c:	97 95       	ror	r25
     94e:	87 95       	ror	r24
     950:	bc 01       	movw	r22, r24
     952:	cd 01       	movw	r24, r26
     954:	64 0d       	add	r22, r4
     956:	75 1d       	adc	r23, r5
     958:	86 1d       	adc	r24, r6
     95a:	97 1d       	adc	r25, r7
     95c:	0e 94 47 1c 	call	0x388e	; 0x388e <__udivmodsi4>
     960:	1d c0       	rjmp	.+58     	; 0x99c <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	8c 0f       	add	r24, r28
     966:	a5 01       	movw	r20, r10
     968:	94 01       	movw	r18, r8
     96a:	04 c0       	rjmp	.+8      	; 0x974 <usart_set_baudrate+0x19e>
     96c:	22 0f       	add	r18, r18
     96e:	33 1f       	adc	r19, r19
     970:	44 1f       	adc	r20, r20
     972:	55 1f       	adc	r21, r21
     974:	8a 95       	dec	r24
     976:	d2 f7       	brpl	.-12     	; 0x96c <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	b6 95       	lsr	r27
     97e:	a7 95       	ror	r26
     980:	97 95       	ror	r25
     982:	87 95       	ror	r24
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	64 0d       	add	r22, r4
     98a:	75 1d       	adc	r23, r5
     98c:	86 1d       	adc	r24, r6
     98e:	97 1d       	adc	r25, r7
     990:	0e 94 47 1c 	call	0x388e	; 0x388e <__udivmodsi4>
     994:	21 50       	subi	r18, 0x01	; 1
     996:	31 09       	sbc	r19, r1
     998:	41 09       	sbc	r20, r1
     99a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     99c:	83 2f       	mov	r24, r19
     99e:	8f 70       	andi	r24, 0x0F	; 15
     9a0:	c2 95       	swap	r28
     9a2:	c0 7f       	andi	r28, 0xF0	; 240
     9a4:	c8 2b       	or	r28, r24
     9a6:	f7 01       	movw	r30, r14
     9a8:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     9aa:	26 83       	std	Z+6, r18	; 0x06

	return true;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	18 c0       	rjmp	.+48     	; 0x9e0 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <usart_set_baudrate+0x20a>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     9b8:	d5 01       	movw	r26, r10
     9ba:	c4 01       	movw	r24, r8
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	aa 1f       	adc	r26, r26
     9c2:	bb 1f       	adc	r27, r27
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	aa 1f       	adc	r26, r26
     9ca:	bb 1f       	adc	r27, r27
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	aa 1f       	adc	r26, r26
     9d2:	bb 1f       	adc	r27, r27
     9d4:	48 1a       	sub	r4, r24
     9d6:	59 0a       	sbc	r5, r25
     9d8:	6a 0a       	sbc	r6, r26
     9da:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9dc:	c9 ef       	ldi	r28, 0xF9	; 249
     9de:	89 cf       	rjmp	.-238    	; 0x8f2 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
     9f2:	7f 90       	pop	r7
     9f4:	6f 90       	pop	r6
     9f6:	5f 90       	pop	r5
     9f8:	4f 90       	pop	r4
     9fa:	08 95       	ret

000009fc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
     a06:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	09 f4       	brne	.+2      	; 0xa0e <usart_init_rs232+0x12>
     a0c:	36 c1       	rjmp	.+620    	; 0xc7a <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     a0e:	80 3c       	cpi	r24, 0xC0	; 192
     a10:	91 05       	cpc	r25, r1
     a12:	21 f4       	brne	.+8      	; 0xa1c <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     a14:	60 e1       	ldi	r22, 0x10	; 16
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	c1 d5       	rcall	.+2946   	; 0x159c <sysclk_enable_module>
     a1a:	2f c1       	rjmp	.+606    	; 0xc7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     a1c:	c0 34       	cpi	r28, 0x40	; 64
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	d8 07       	cpc	r29, r24
     a22:	21 f4       	brne	.+8      	; 0xa2c <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     a24:	68 e0       	ldi	r22, 0x08	; 8
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	b9 d5       	rcall	.+2930   	; 0x159c <sysclk_enable_module>
     a2a:	27 c1       	rjmp	.+590    	; 0xc7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     a2c:	c1 15       	cp	r28, r1
     a2e:	e4 e0       	ldi	r30, 0x04	; 4
     a30:	de 07       	cpc	r29, r30
     a32:	21 f4       	brne	.+8      	; 0xa3c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     a34:	64 e0       	ldi	r22, 0x04	; 4
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	b1 d5       	rcall	.+2914   	; 0x159c <sysclk_enable_module>
     a3a:	1f c1       	rjmp	.+574    	; 0xc7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     a3c:	c0 38       	cpi	r28, 0x80	; 128
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     a42:	21 f4       	brne	.+8      	; 0xa4c <usart_init_rs232+0x50>
     a44:	62 e0       	ldi	r22, 0x02	; 2
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	a9 d5       	rcall	.+2898   	; 0x159c <sysclk_enable_module>
     a4a:	17 c1       	rjmp	.+558    	; 0xc7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     a4c:	c1 15       	cp	r28, r1
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     a52:	21 f4       	brne	.+8      	; 0xa5c <usart_init_rs232+0x60>
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	a1 d5       	rcall	.+2882   	; 0x159c <sysclk_enable_module>
     a5a:	0f c1       	rjmp	.+542    	; 0xc7a <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     a5c:	c0 38       	cpi	r28, 0x80	; 128
     a5e:	e3 e0       	ldi	r30, 0x03	; 3
     a60:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     a62:	21 f4       	brne	.+8      	; 0xa6c <usart_init_rs232+0x70>
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	99 d5       	rcall	.+2866   	; 0x159c <sysclk_enable_module>
     a6a:	07 c1       	rjmp	.+526    	; 0xc7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     a6c:	c0 39       	cpi	r28, 0x90	; 144
     a6e:	f3 e0       	ldi	r31, 0x03	; 3
     a70:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     a72:	21 f4       	brne	.+8      	; 0xa7c <usart_init_rs232+0x80>
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	91 d5       	rcall	.+2850   	; 0x159c <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     a7a:	ff c0       	rjmp	.+510    	; 0xc7a <usart_init_rs232+0x27e>
     a7c:	c1 15       	cp	r28, r1
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     a82:	21 f4       	brne	.+8      	; 0xa8c <usart_init_rs232+0x90>
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	89 d5       	rcall	.+2834   	; 0x159c <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     a8a:	f7 c0       	rjmp	.+494    	; 0xc7a <usart_init_rs232+0x27e>
     a8c:	c0 34       	cpi	r28, 0x40	; 64
     a8e:	e2 e0       	ldi	r30, 0x02	; 2
     a90:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     a92:	21 f4       	brne	.+8      	; 0xa9c <usart_init_rs232+0xa0>
     a94:	62 e0       	ldi	r22, 0x02	; 2
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	81 d5       	rcall	.+2818   	; 0x159c <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     a9a:	ef c0       	rjmp	.+478    	; 0xc7a <usart_init_rs232+0x27e>
     a9c:	c1 15       	cp	r28, r1
     a9e:	f3 e0       	ldi	r31, 0x03	; 3
     aa0:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     aa2:	21 f4       	brne	.+8      	; 0xaac <usart_init_rs232+0xb0>
     aa4:	64 e0       	ldi	r22, 0x04	; 4
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	79 d5       	rcall	.+2802   	; 0x159c <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     aaa:	e7 c0       	rjmp	.+462    	; 0xc7a <usart_init_rs232+0x27e>
     aac:	c0 32       	cpi	r28, 0x20	; 32
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     ab2:	21 f4       	brne	.+8      	; 0xabc <usart_init_rs232+0xc0>
     ab4:	64 e0       	ldi	r22, 0x04	; 4
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	71 d5       	rcall	.+2786   	; 0x159c <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     aba:	df c0       	rjmp	.+446    	; 0xc7a <usart_init_rs232+0x27e>
     abc:	c1 15       	cp	r28, r1
     abe:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     ac0:	de 07       	cpc	r29, r30
     ac2:	21 f4       	brne	.+8      	; 0xacc <usart_init_rs232+0xd0>
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	69 d5       	rcall	.+2770   	; 0x159c <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     aca:	d7 c0       	rjmp	.+430    	; 0xc7a <usart_init_rs232+0x27e>
     acc:	c1 15       	cp	r28, r1
     ace:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     ad0:	df 07       	cpc	r29, r31
     ad2:	21 f4       	brne	.+8      	; 0xadc <usart_init_rs232+0xe0>
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	84 e0       	ldi	r24, 0x04	; 4
     ad8:	61 d5       	rcall	.+2754   	; 0x159c <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     ada:	cf c0       	rjmp	.+414    	; 0xc7a <usart_init_rs232+0x27e>
     adc:	c1 15       	cp	r28, r1
     ade:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     ae0:	d8 07       	cpc	r29, r24
     ae2:	21 f4       	brne	.+8      	; 0xaec <usart_init_rs232+0xf0>
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	85 e0       	ldi	r24, 0x05	; 5
     ae8:	59 d5       	rcall	.+2738   	; 0x159c <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     aea:	c7 c0       	rjmp	.+398    	; 0xc7a <usart_init_rs232+0x27e>
     aec:	c1 15       	cp	r28, r1
     aee:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     af0:	de 07       	cpc	r29, r30
     af2:	21 f4       	brne	.+8      	; 0xafc <usart_init_rs232+0x100>
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     af8:	51 d5       	rcall	.+2722   	; 0x159c <sysclk_enable_module>
     afa:	bf c0       	rjmp	.+382    	; 0xc7a <usart_init_rs232+0x27e>
     afc:	c0 34       	cpi	r28, 0x40	; 64
     afe:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     b00:	df 07       	cpc	r29, r31
     b02:	21 f4       	brne	.+8      	; 0xb0c <usart_init_rs232+0x110>
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     b08:	49 d5       	rcall	.+2706   	; 0x159c <sysclk_enable_module>
     b0a:	b7 c0       	rjmp	.+366    	; 0xc7a <usart_init_rs232+0x27e>
     b0c:	c0 34       	cpi	r28, 0x40	; 64
     b0e:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     b10:	d8 07       	cpc	r29, r24
     b12:	21 f4       	brne	.+8      	; 0xb1c <usart_init_rs232+0x120>
     b14:	62 e0       	ldi	r22, 0x02	; 2
     b16:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     b18:	41 d5       	rcall	.+2690   	; 0x159c <sysclk_enable_module>
     b1a:	af c0       	rjmp	.+350    	; 0xc7a <usart_init_rs232+0x27e>
     b1c:	c0 34       	cpi	r28, 0x40	; 64
     b1e:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     b20:	de 07       	cpc	r29, r30
     b22:	21 f4       	brne	.+8      	; 0xb2c <usart_init_rs232+0x130>
     b24:	62 e0       	ldi	r22, 0x02	; 2
     b26:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     b28:	39 d5       	rcall	.+2674   	; 0x159c <sysclk_enable_module>
     b2a:	a7 c0       	rjmp	.+334    	; 0xc7a <usart_init_rs232+0x27e>
     b2c:	c0 34       	cpi	r28, 0x40	; 64
     b2e:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     b30:	df 07       	cpc	r29, r31
     b32:	21 f4       	brne	.+8      	; 0xb3c <usart_init_rs232+0x140>
     b34:	62 e0       	ldi	r22, 0x02	; 2
     b36:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     b38:	31 d5       	rcall	.+2658   	; 0x159c <sysclk_enable_module>
     b3a:	9f c0       	rjmp	.+318    	; 0xc7a <usart_init_rs232+0x27e>
     b3c:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     b3e:	88 e0       	ldi	r24, 0x08	; 8
     b40:	d8 07       	cpc	r29, r24
     b42:	21 f4       	brne	.+8      	; 0xb4c <usart_init_rs232+0x150>
     b44:	64 e0       	ldi	r22, 0x04	; 4
     b46:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     b48:	29 d5       	rcall	.+2642   	; 0x159c <sysclk_enable_module>
     b4a:	97 c0       	rjmp	.+302    	; 0xc7a <usart_init_rs232+0x27e>
     b4c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     b4e:	e9 e0       	ldi	r30, 0x09	; 9
     b50:	de 07       	cpc	r29, r30
     b52:	21 f4       	brne	.+8      	; 0xb5c <usart_init_rs232+0x160>
     b54:	64 e0       	ldi	r22, 0x04	; 4
     b56:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     b58:	21 d5       	rcall	.+2626   	; 0x159c <sysclk_enable_module>
     b5a:	8f c0       	rjmp	.+286    	; 0xc7a <usart_init_rs232+0x27e>
     b5c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     b5e:	fa e0       	ldi	r31, 0x0A	; 10
     b60:	df 07       	cpc	r29, r31
     b62:	21 f4       	brne	.+8      	; 0xb6c <usart_init_rs232+0x170>
     b64:	64 e0       	ldi	r22, 0x04	; 4
     b66:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     b68:	19 d5       	rcall	.+2610   	; 0x159c <sysclk_enable_module>
     b6a:	87 c0       	rjmp	.+270    	; 0xc7a <usart_init_rs232+0x27e>
     b6c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     b6e:	8b e0       	ldi	r24, 0x0B	; 11
     b70:	d8 07       	cpc	r29, r24
     b72:	21 f4       	brne	.+8      	; 0xb7c <usart_init_rs232+0x180>
     b74:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     b76:	86 e0       	ldi	r24, 0x06	; 6
     b78:	11 d5       	rcall	.+2594   	; 0x159c <sysclk_enable_module>
     b7a:	7f c0       	rjmp	.+254    	; 0xc7a <usart_init_rs232+0x27e>
     b7c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     b7e:	e8 e0       	ldi	r30, 0x08	; 8
     b80:	de 07       	cpc	r29, r30
     b82:	21 f4       	brne	.+8      	; 0xb8c <usart_init_rs232+0x190>
     b84:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	09 d5       	rcall	.+2578   	; 0x159c <sysclk_enable_module>
     b8a:	77 c0       	rjmp	.+238    	; 0xc7a <usart_init_rs232+0x27e>
     b8c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     b8e:	f9 e0       	ldi	r31, 0x09	; 9
     b90:	df 07       	cpc	r29, r31
     b92:	21 f4       	brne	.+8      	; 0xb9c <usart_init_rs232+0x1a0>
     b94:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	01 d5       	rcall	.+2562   	; 0x159c <sysclk_enable_module>
     b9a:	6f c0       	rjmp	.+222    	; 0xc7a <usart_init_rs232+0x27e>
     b9c:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     b9e:	8a e0       	ldi	r24, 0x0A	; 10
     ba0:	d8 07       	cpc	r29, r24
     ba2:	21 f4       	brne	.+8      	; 0xbac <usart_init_rs232+0x1b0>
     ba4:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ba6:	85 e0       	ldi	r24, 0x05	; 5
     ba8:	f9 d4       	rcall	.+2546   	; 0x159c <sysclk_enable_module>
     baa:	67 c0       	rjmp	.+206    	; 0xc7a <usart_init_rs232+0x27e>
     bac:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     bae:	eb e0       	ldi	r30, 0x0B	; 11
     bb0:	de 07       	cpc	r29, r30
     bb2:	21 f4       	brne	.+8      	; 0xbbc <usart_init_rs232+0x1c0>
     bb4:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     bb6:	86 e0       	ldi	r24, 0x06	; 6
     bb8:	f1 d4       	rcall	.+2530   	; 0x159c <sysclk_enable_module>
     bba:	5f c0       	rjmp	.+190    	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     bbc:	c0 3a       	cpi	r28, 0xA0	; 160
     bbe:	f8 e0       	ldi	r31, 0x08	; 8
     bc0:	df 07       	cpc	r29, r31
     bc2:	21 f4       	brne	.+8      	; 0xbcc <usart_init_rs232+0x1d0>
     bc4:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	e9 d4       	rcall	.+2514   	; 0x159c <sysclk_enable_module>
     bca:	57 c0       	rjmp	.+174    	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     bcc:	c0 3a       	cpi	r28, 0xA0	; 160
     bce:	89 e0       	ldi	r24, 0x09	; 9
     bd0:	d8 07       	cpc	r29, r24
     bd2:	21 f4       	brne	.+8      	; 0xbdc <usart_init_rs232+0x1e0>
     bd4:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	e1 d4       	rcall	.+2498   	; 0x159c <sysclk_enable_module>
     bda:	4f c0       	rjmp	.+158    	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     bdc:	c0 3a       	cpi	r28, 0xA0	; 160
     bde:	ea e0       	ldi	r30, 0x0A	; 10
     be0:	de 07       	cpc	r29, r30
     be2:	21 f4       	brne	.+8      	; 0xbec <usart_init_rs232+0x1f0>
     be4:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     be6:	85 e0       	ldi	r24, 0x05	; 5
     be8:	d9 d4       	rcall	.+2482   	; 0x159c <sysclk_enable_module>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     bec:	c0 3a       	cpi	r28, 0xA0	; 160
     bee:	fb e0       	ldi	r31, 0x0B	; 11
     bf0:	df 07       	cpc	r29, r31
     bf2:	21 f4       	brne	.+8      	; 0xbfc <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     bf4:	60 e1       	ldi	r22, 0x10	; 16
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	d1 d4       	rcall	.+2466   	; 0x159c <sysclk_enable_module>
     bfa:	3f c0       	rjmp	.+126    	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     bfc:	c0 3b       	cpi	r28, 0xB0	; 176
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	d8 07       	cpc	r29, r24
     c02:	21 f4       	brne	.+8      	; 0xc0c <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     c04:	60 e2       	ldi	r22, 0x20	; 32
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	c9 d4       	rcall	.+2450   	; 0x159c <sysclk_enable_module>
     c0a:	37 c0       	rjmp	.+110    	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     c0c:	c0 3b       	cpi	r28, 0xB0	; 176
     c0e:	e9 e0       	ldi	r30, 0x09	; 9
     c10:	de 07       	cpc	r29, r30
     c12:	21 f4       	brne	.+8      	; 0xc1c <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     c14:	60 e2       	ldi	r22, 0x20	; 32
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	c1 d4       	rcall	.+2434   	; 0x159c <sysclk_enable_module>
     c1a:	2f c0       	rjmp	.+94     	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     c1c:	c0 3b       	cpi	r28, 0xB0	; 176
     c1e:	fa e0       	ldi	r31, 0x0A	; 10
     c20:	df 07       	cpc	r29, r31
     c22:	21 f4       	brne	.+8      	; 0xc2c <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     c24:	60 e2       	ldi	r22, 0x20	; 32
     c26:	85 e0       	ldi	r24, 0x05	; 5
     c28:	b9 d4       	rcall	.+2418   	; 0x159c <sysclk_enable_module>
     c2a:	27 c0       	rjmp	.+78     	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     c2c:	c0 3b       	cpi	r28, 0xB0	; 176
     c2e:	8b e0       	ldi	r24, 0x0B	; 11
     c30:	d8 07       	cpc	r29, r24
     c32:	21 f4       	brne	.+8      	; 0xc3c <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     c34:	60 e2       	ldi	r22, 0x20	; 32
     c36:	86 e0       	ldi	r24, 0x06	; 6
     c38:	b1 d4       	rcall	.+2402   	; 0x159c <sysclk_enable_module>
     c3a:	1f c0       	rjmp	.+62     	; 0xc7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     c3c:	c0 38       	cpi	r28, 0x80	; 128
     c3e:	e4 e0       	ldi	r30, 0x04	; 4
     c40:	de 07       	cpc	r29, r30
     c42:	21 f4       	brne	.+8      	; 0xc4c <usart_init_rs232+0x250>
     c44:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	a9 d4       	rcall	.+2386   	; 0x159c <sysclk_enable_module>
     c4a:	17 c0       	rjmp	.+46     	; 0xc7a <usart_init_rs232+0x27e>
     c4c:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     c4e:	f4 e0       	ldi	r31, 0x04	; 4
     c50:	df 07       	cpc	r29, r31
     c52:	21 f4       	brne	.+8      	; 0xc5c <usart_init_rs232+0x260>
     c54:	60 e4       	ldi	r22, 0x40	; 64
     c56:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     c58:	a1 d4       	rcall	.+2370   	; 0x159c <sysclk_enable_module>
     c5a:	0f c0       	rjmp	.+30     	; 0xc7a <usart_init_rs232+0x27e>
     c5c:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	d8 07       	cpc	r29, r24
     c62:	21 f4       	brne	.+8      	; 0xc6c <usart_init_rs232+0x270>
     c64:	60 e4       	ldi	r22, 0x40	; 64
     c66:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     c68:	99 d4       	rcall	.+2354   	; 0x159c <sysclk_enable_module>
     c6a:	07 c0       	rjmp	.+14     	; 0xc7a <usart_init_rs232+0x27e>
     c6c:	c0 3b       	cpi	r28, 0xB0	; 176
     c6e:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     c70:	de 07       	cpc	r29, r30
     c72:	19 f4       	brne	.+6      	; 0xc7a <usart_init_rs232+0x27e>
     c74:	60 e4       	ldi	r22, 0x40	; 64
     c76:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     c78:	91 d4       	rcall	.+2338   	; 0x159c <sysclk_enable_module>
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	f8 01       	movw	r30, r16
     c82:	95 81       	ldd	r25, Z+5	; 0x05
     c84:	84 81       	ldd	r24, Z+4	; 0x04
     c86:	89 2b       	or	r24, r25
     c88:	96 81       	ldd	r25, Z+6	; 0x06
     c8a:	91 11       	cpse	r25, r1
     c8c:	98 e0       	ldi	r25, 0x08	; 8
     c8e:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     c90:	8d 83       	std	Y+5, r24	; 0x05
     c92:	f8 01       	movw	r30, r16
     c94:	40 81       	ld	r20, Z
     c96:	51 81       	ldd	r21, Z+1	; 0x01
     c98:	62 81       	ldd	r22, Z+2	; 0x02
     c9a:	73 81       	ldd	r23, Z+3	; 0x03
     c9c:	00 e0       	ldi	r16, 0x00	; 0
     c9e:	18 e4       	ldi	r17, 0x48	; 72
     ca0:	28 ee       	ldi	r18, 0xE8	; 232
     ca2:	31 e0       	ldi	r19, 0x01	; 1
     ca4:	ce 01       	movw	r24, r28
     ca6:	97 dd       	rcall	.-1234   	; 0x7d6 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	98 60       	ori	r25, 0x08	; 8
     cac:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	90 61       	ori	r25, 0x10	; 16
     cb2:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask, uint8_t pos)
{
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	2b 97       	sbiw	r28, 0x0b	; 11
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	7c 01       	movw	r14, r24
     cd6:	06 2f       	mov	r16, r22
     cd8:	14 2f       	mov	r17, r20
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
     cda:	be 01       	movw	r22, r28
     cdc:	6f 5f       	subi	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	42 d3       	rcall	.+1668   	; 0x1366 <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
     ce2:	ae 01       	movw	r20, r28
     ce4:	48 5f       	subi	r20, 0xF8	; 248
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
     ce8:	60 2f       	mov	r22, r16
     cea:	c7 01       	movw	r24, r14
     cec:	c2 d3       	rcall	.+1924   	; 0x1472 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	8f 78       	andi	r24, 0x8F	; 143
     cf4:	80 61       	ori	r24, 0x10	; 16
     cf6:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     cf8:	89 2f       	mov	r24, r25
     cfa:	81 7e       	andi	r24, 0xE1	; 225
     cfc:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     cfe:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	8d 83       	std	Y+5, r24	; 0x05
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
	if (pos >= ADCCH_POS_TEMPSENSE) {
     d04:	10 31       	cpi	r17, 0x10	; 16
     d06:	38 f0       	brcs	.+14     	; 0xd16 <adc_init+0x58>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
     d08:	18 86       	std	Y+8, r1	; 0x08
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
     d0a:	10 51       	subi	r17, 0x10	; 16
     d0c:	11 0f       	add	r17, r17
     d0e:	11 0f       	add	r17, r17
     d10:	11 0f       	add	r17, r17
     d12:	19 87       	std	Y+9, r17	; 0x09
     d14:	06 c0       	rjmp	.+12     	; 0xd22 <adc_init+0x64>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     d1a:	11 0f       	add	r17, r17
     d1c:	11 0f       	add	r17, r17
     d1e:	11 0f       	add	r17, r17
     d20:	19 87       	std	Y+9, r17	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, pos, ADCCH_NEG_NONE, 1);
	adc_write_configuration(adc, &adc_conf);
     d22:	be 01       	movw	r22, r28
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	c7 01       	movw	r24, r14
     d2a:	b3 d2       	rcall	.+1382   	; 0x1292 <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
     d2c:	ae 01       	movw	r20, r28
     d2e:	48 5f       	subi	r20, 0xF8	; 248
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	60 2f       	mov	r22, r16
     d34:	c7 01       	movw	r24, r14
     d36:	50 d3       	rcall	.+1696   	; 0x13d8 <adcch_write_configuration>
	
	
}
     d38:	2b 96       	adiw	r28, 0x0b	; 11
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	08 95       	ret

00000d4c <getADCRead>:

float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	1f 92       	push	r1
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	7c 01       	movw	r14, r24
     d60:	16 2f       	mov	r17, r22
	adc_enable(adc);
     d62:	7a db       	rcall	.-2316   	; 0x458 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d64:	8f b7       	in	r24, 0x3f	; 63
     d66:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d68:	f8 94       	cli
	return flags;
     d6a:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     d6c:	f7 01       	movw	r30, r14
     d6e:	80 81       	ld	r24, Z
     d70:	21 2f       	mov	r18, r17
     d72:	22 0f       	add	r18, r18
     d74:	22 0f       	add	r18, r18
     d76:	82 2b       	or	r24, r18
     d78:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d7a:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     d7c:	f7 01       	movw	r30, r14
     d7e:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     d80:	81 23       	and	r24, r17
     d82:	18 13       	cpse	r17, r24
     d84:	fb cf       	rjmp	.-10     	; 0xd7c <getADCRead+0x30>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     d86:	16 83       	std	Z+6, r17	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d88:	81 2f       	mov	r24, r17
     d8a:	83 70       	andi	r24, 0x03	; 3
     d8c:	21 f4       	brne	.+8      	; 0xd96 <getADCRead+0x4a>
		index += 2;
		ch_mask >>= 2;
     d8e:	16 95       	lsr	r17
     d90:	16 95       	lsr	r17
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <getADCRead+0x4c>
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     d96:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d98:	10 ff       	sbrs	r17, 0
		index++;
     d9a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     d9c:	f7 01       	movw	r30, r14
     d9e:	b0 96       	adiw	r30, 0x20	; 32
     da0:	98 e0       	ldi	r25, 0x08	; 8
     da2:	89 9f       	mul	r24, r25
     da4:	e0 0d       	add	r30, r0
     da6:	f1 1d       	adc	r31, r1
     da8:	11 24       	eor	r1, r1
	
	
	adc_start_conversion(adc, ch_mask);
	adc_wait_for_interrupt_flag(adc, ch_mask);
	uint16_t adcReading = adc_get_result(adc, ch_mask);
     daa:	04 81       	ldd	r16, Z+4	; 0x04
     dac:	15 81       	ldd	r17, Z+5	; 0x05
	//printf("ADC reading = %u\n", adcReading);
	//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	
	adc_disable(adc);
     dae:	c7 01       	movw	r24, r14
     db0:	7f db       	rcall	.-2306   	; 0x4b0 <adc_disable>
	return adcReading;
     db2:	b8 01       	movw	r22, r16
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__floatunsisf>
	
}
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	08 95       	ret

00000dcc <thermistor_init>:



void thermistor_init(void)
{
	adc_init(&THERM_ADC,THERM_ADC_CH,THERM_POS);
     dcc:	46 e0       	ldi	r20, 0x06	; 6
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	74 df       	rcall	.-280    	; 0xcbe <adc_init>
	
	printf("Thermistor Initialized.\n");
     dd6:	85 e1       	ldi	r24, 0x15	; 21
     dd8:	90 e2       	ldi	r25, 0x20	; 32
     dda:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <puts>
     dde:	08 95       	ret

00000de0 <getTemperature>:
}


float getTemperature(void)
{
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	aa df       	rcall	.-172    	; 0xd4c <getADCRead>
     df8:	25 ee       	ldi	r18, 0xE5	; 229
     dfa:	30 ed       	ldi	r19, 0xD0	; 208
     dfc:	42 e2       	ldi	r20, 0x22	; 34
     dfe:	5f e3       	ldi	r21, 0x3F	; 63
     e00:	0e 94 2e 18 	call	0x305c	; 0x305c <__mulsf3>
     e04:	f6 2e       	mov	r15, r22
     e06:	e7 2e       	mov	r14, r23
     e08:	d8 2e       	mov	r13, r24
     e0a:	c9 2e       	mov	r12, r25
	//float resistance = (8300.0)*((adc_val/3.3)-1);
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3977.0*log(4096.0/(float)adc_val-1.0));
     e0c:	76 2f       	mov	r23, r22
     e0e:	27 2f       	mov	r18, r23
     e10:	3e 2d       	mov	r19, r14
     e12:	4d 2d       	mov	r20, r13
     e14:	5c 2d       	mov	r21, r12
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	80 e8       	ldi	r24, 0x80	; 128
     e1c:	95 e4       	ldi	r25, 0x45	; 69
     e1e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__divsf3>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e8       	ldi	r20, 0x80	; 128
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__subsf3>
     e2e:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <log>
	printf("temp: %3.2f\n", (float) temperature-273.15);
     e32:	2c e7       	ldi	r18, 0x7C	; 124
     e34:	34 ed       	ldi	r19, 0xD4	; 212
     e36:	43 e8       	ldi	r20, 0x83	; 131
     e38:	59 e3       	ldi	r21, 0x39	; 57
     e3a:	0e 94 2e 18 	call	0x305c	; 0x305c <__mulsf3>
     e3e:	2f e0       	ldi	r18, 0x0F	; 15
     e40:	3f ec       	ldi	r19, 0xCF	; 207
     e42:	4b e5       	ldi	r20, 0x5B	; 91
     e44:	5b e3       	ldi	r21, 0x3B	; 59
     e46:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__addsf3>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	9f e3       	ldi	r25, 0x3F	; 63
     e56:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__divsf3>
     e5a:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <__fixunssfsi>
     e5e:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__floatunsisf>
     e62:	23 e3       	ldi	r18, 0x33	; 51
     e64:	33 e9       	ldi	r19, 0x93	; 147
     e66:	48 e8       	ldi	r20, 0x88	; 136
     e68:	53 e4       	ldi	r21, 0x43	; 67
     e6a:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__subsf3>
     e6e:	06 2f       	mov	r16, r22
     e70:	17 2f       	mov	r17, r23
     e72:	d8 2f       	mov	r29, r24
     e74:	c9 2f       	mov	r28, r25
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	7f 93       	push	r23
     e7c:	6f 93       	push	r22
     e7e:	8d e2       	ldi	r24, 0x2D	; 45
     e80:	90 e2       	ldi	r25, 0x20	; 32
     e82:	9f 93       	push	r25
     e84:	8f 93       	push	r24
     e86:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <printf>

	printf("%i\n", adc_val);
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	8a e3       	ldi	r24, 0x3A	; 58
     e94:	90 e2       	ldi	r25, 0x20	; 32
     e96:	9f 93       	push	r25
     e98:	8f 93       	push	r24
     e9a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <printf>
	return (temperature - 273.15);
     e9e:	8d b7       	in	r24, 0x3d	; 61
     ea0:	9e b7       	in	r25, 0x3e	; 62
     ea2:	0c 96       	adiw	r24, 0x0c	; 12
     ea4:	8d bf       	out	0x3d, r24	; 61
     ea6:	9e bf       	out	0x3e, r25	; 62
	
     ea8:	60 2f       	mov	r22, r16
     eaa:	71 2f       	mov	r23, r17
     eac:	8d 2f       	mov	r24, r29
     eae:	9c 2f       	mov	r25, r28
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	08 95       	ret

00000ec2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	08 b6       	in	r0, 0x38	; 56
     ece:	0f 92       	push	r0
     ed0:	18 be       	out	0x38, r1	; 56
     ed2:	09 b6       	in	r0, 0x39	; 57
     ed4:	0f 92       	push	r0
     ed6:	19 be       	out	0x39, r1	; 57
     ed8:	0b b6       	in	r0, 0x3b	; 59
     eda:	0f 92       	push	r0
     edc:	1b be       	out	0x3b, r1	; 59
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     ef6:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     efa:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     efe:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adca_callback>
     f02:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adca_callback+0x1>
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	19 95       	eicall
}
     f0e:	ff 91       	pop	r31
     f10:	ef 91       	pop	r30
     f12:	bf 91       	pop	r27
     f14:	af 91       	pop	r26
     f16:	9f 91       	pop	r25
     f18:	8f 91       	pop	r24
     f1a:	7f 91       	pop	r23
     f1c:	6f 91       	pop	r22
     f1e:	5f 91       	pop	r21
     f20:	4f 91       	pop	r20
     f22:	3f 91       	pop	r19
     f24:	2f 91       	pop	r18
     f26:	0f 90       	pop	r0
     f28:	0b be       	out	0x3b, r0	; 59
     f2a:	0f 90       	pop	r0
     f2c:	09 be       	out	0x39, r0	; 57
     f2e:	0f 90       	pop	r0
     f30:	08 be       	out	0x38, r0	; 56
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	08 b6       	in	r0, 0x38	; 56
     f48:	0f 92       	push	r0
     f4a:	18 be       	out	0x38, r1	; 56
     f4c:	09 b6       	in	r0, 0x39	; 57
     f4e:	0f 92       	push	r0
     f50:	19 be       	out	0x39, r1	; 57
     f52:	0b b6       	in	r0, 0x3b	; 59
     f54:	0f 92       	push	r0
     f56:	1b be       	out	0x3b, r1	; 59
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     f70:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     f74:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     f78:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adca_callback>
     f7c:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adca_callback+0x1>
     f80:	62 e0       	ldi	r22, 0x02	; 2
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	19 95       	eicall
}
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0b be       	out	0x3b, r0	; 59
     fa4:	0f 90       	pop	r0
     fa6:	09 be       	out	0x39, r0	; 57
     fa8:	0f 90       	pop	r0
     faa:	08 be       	out	0x38, r0	; 56
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	08 b6       	in	r0, 0x38	; 56
     fc2:	0f 92       	push	r0
     fc4:	18 be       	out	0x38, r1	; 56
     fc6:	09 b6       	in	r0, 0x39	; 57
     fc8:	0f 92       	push	r0
     fca:	19 be       	out	0x39, r1	; 57
     fcc:	0b b6       	in	r0, 0x3b	; 59
     fce:	0f 92       	push	r0
     fd0:	1b be       	out	0x3b, r1	; 59
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     fea:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     fee:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     ff2:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adca_callback>
     ff6:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adca_callback+0x1>
     ffa:	64 e0       	ldi	r22, 0x04	; 4
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	19 95       	eicall
}
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	bf 91       	pop	r27
    1008:	af 91       	pop	r26
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	7f 91       	pop	r23
    1010:	6f 91       	pop	r22
    1012:	5f 91       	pop	r21
    1014:	4f 91       	pop	r20
    1016:	3f 91       	pop	r19
    1018:	2f 91       	pop	r18
    101a:	0f 90       	pop	r0
    101c:	0b be       	out	0x3b, r0	; 59
    101e:	0f 90       	pop	r0
    1020:	09 be       	out	0x39, r0	; 57
    1022:	0f 90       	pop	r0
    1024:	08 be       	out	0x38, r0	; 56
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	08 b6       	in	r0, 0x38	; 56
    103c:	0f 92       	push	r0
    103e:	18 be       	out	0x38, r1	; 56
    1040:	09 b6       	in	r0, 0x39	; 57
    1042:	0f 92       	push	r0
    1044:	19 be       	out	0x39, r1	; 57
    1046:	0b b6       	in	r0, 0x3b	; 59
    1048:	0f 92       	push	r0
    104a:	1b be       	out	0x3b, r1	; 59
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1064:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1068:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    106c:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adca_callback>
    1070:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adca_callback+0x1>
    1074:	68 e0       	ldi	r22, 0x08	; 8
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	92 e0       	ldi	r25, 0x02	; 2
    107a:	19 95       	eicall
}
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0b be       	out	0x3b, r0	; 59
    1098:	0f 90       	pop	r0
    109a:	09 be       	out	0x39, r0	; 57
    109c:	0f 90       	pop	r0
    109e:	08 be       	out	0x38, r0	; 56
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	08 b6       	in	r0, 0x38	; 56
    10b6:	0f 92       	push	r0
    10b8:	18 be       	out	0x38, r1	; 56
    10ba:	09 b6       	in	r0, 0x39	; 57
    10bc:	0f 92       	push	r0
    10be:	19 be       	out	0x39, r1	; 57
    10c0:	0b b6       	in	r0, 0x3b	; 59
    10c2:	0f 92       	push	r0
    10c4:	1b be       	out	0x3b, r1	; 59
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    10de:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    10e2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    10e6:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <adcb_callback>
    10ea:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <adcb_callback+0x1>
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	80 e4       	ldi	r24, 0x40	; 64
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	19 95       	eicall
}
    10f6:	ff 91       	pop	r31
    10f8:	ef 91       	pop	r30
    10fa:	bf 91       	pop	r27
    10fc:	af 91       	pop	r26
    10fe:	9f 91       	pop	r25
    1100:	8f 91       	pop	r24
    1102:	7f 91       	pop	r23
    1104:	6f 91       	pop	r22
    1106:	5f 91       	pop	r21
    1108:	4f 91       	pop	r20
    110a:	3f 91       	pop	r19
    110c:	2f 91       	pop	r18
    110e:	0f 90       	pop	r0
    1110:	0b be       	out	0x3b, r0	; 59
    1112:	0f 90       	pop	r0
    1114:	09 be       	out	0x39, r0	; 57
    1116:	0f 90       	pop	r0
    1118:	08 be       	out	0x38, r0	; 56
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	08 b6       	in	r0, 0x38	; 56
    1130:	0f 92       	push	r0
    1132:	18 be       	out	0x38, r1	; 56
    1134:	09 b6       	in	r0, 0x39	; 57
    1136:	0f 92       	push	r0
    1138:	19 be       	out	0x39, r1	; 57
    113a:	0b b6       	in	r0, 0x3b	; 59
    113c:	0f 92       	push	r0
    113e:	1b be       	out	0x3b, r1	; 59
    1140:	2f 93       	push	r18
    1142:	3f 93       	push	r19
    1144:	4f 93       	push	r20
    1146:	5f 93       	push	r21
    1148:	6f 93       	push	r22
    114a:	7f 93       	push	r23
    114c:	8f 93       	push	r24
    114e:	9f 93       	push	r25
    1150:	af 93       	push	r26
    1152:	bf 93       	push	r27
    1154:	ef 93       	push	r30
    1156:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1158:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    115c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1160:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <adcb_callback>
    1164:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <adcb_callback+0x1>
    1168:	62 e0       	ldi	r22, 0x02	; 2
    116a:	80 e4       	ldi	r24, 0x40	; 64
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	19 95       	eicall
}
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	0f 90       	pop	r0
    118a:	0b be       	out	0x3b, r0	; 59
    118c:	0f 90       	pop	r0
    118e:	09 be       	out	0x39, r0	; 57
    1190:	0f 90       	pop	r0
    1192:	08 be       	out	0x38, r0	; 56
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	08 b6       	in	r0, 0x38	; 56
    11aa:	0f 92       	push	r0
    11ac:	18 be       	out	0x38, r1	; 56
    11ae:	09 b6       	in	r0, 0x39	; 57
    11b0:	0f 92       	push	r0
    11b2:	19 be       	out	0x39, r1	; 57
    11b4:	0b b6       	in	r0, 0x3b	; 59
    11b6:	0f 92       	push	r0
    11b8:	1b be       	out	0x3b, r1	; 59
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    11d2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    11d6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    11da:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <adcb_callback>
    11de:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <adcb_callback+0x1>
    11e2:	64 e0       	ldi	r22, 0x04	; 4
    11e4:	80 e4       	ldi	r24, 0x40	; 64
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	19 95       	eicall
}
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0b be       	out	0x3b, r0	; 59
    1206:	0f 90       	pop	r0
    1208:	09 be       	out	0x39, r0	; 57
    120a:	0f 90       	pop	r0
    120c:	08 be       	out	0x38, r0	; 56
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	08 b6       	in	r0, 0x38	; 56
    1224:	0f 92       	push	r0
    1226:	18 be       	out	0x38, r1	; 56
    1228:	09 b6       	in	r0, 0x39	; 57
    122a:	0f 92       	push	r0
    122c:	19 be       	out	0x39, r1	; 57
    122e:	0b b6       	in	r0, 0x3b	; 59
    1230:	0f 92       	push	r0
    1232:	1b be       	out	0x3b, r1	; 59
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    124c:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1250:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    1254:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <adcb_callback>
    1258:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <adcb_callback+0x1>
    125c:	68 e0       	ldi	r22, 0x08	; 8
    125e:	80 e4       	ldi	r24, 0x40	; 64
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	19 95       	eicall
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0b be       	out	0x3b, r0	; 59
    1280:	0f 90       	pop	r0
    1282:	09 be       	out	0x39, r0	; 57
    1284:	0f 90       	pop	r0
    1286:	08 be       	out	0x38, r0	; 56
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	1f 92       	push	r1
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	8c 01       	movw	r16, r24
    12ac:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    12ae:	81 15       	cp	r24, r1
    12b0:	22 e0       	ldi	r18, 0x02	; 2
    12b2:	92 07       	cpc	r25, r18
    12b4:	81 f4       	brne	.+32     	; 0x12d6 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    12b6:	61 e2       	ldi	r22, 0x21	; 33
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    12c0:	c8 2e       	mov	r12, r24
    12c2:	d1 2c       	mov	r13, r1
    12c4:	60 e2       	ldi	r22, 0x20	; 32
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    12ce:	dc 2c       	mov	r13, r12
    12d0:	cc 24       	eor	r12, r12
    12d2:	c8 2a       	or	r12, r24
    12d4:	12 c0       	rjmp	.+36     	; 0x12fa <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    12d6:	80 34       	cpi	r24, 0x40	; 64
    12d8:	92 40       	sbci	r25, 0x02	; 2
    12da:	d1 f5       	brne	.+116    	; 0x1350 <adc_write_configuration+0xbe>
    12dc:	65 e2       	ldi	r22, 0x25	; 37
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    12e6:	c8 2e       	mov	r12, r24
    12e8:	d1 2c       	mov	r13, r1
    12ea:	64 e2       	ldi	r22, 0x24	; 36
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    12f4:	dc 2c       	mov	r13, r12
    12f6:	cc 24       	eor	r12, r12
    12f8:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12fa:	8f b7       	in	r24, 0x3f	; 63
    12fc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    12fe:	f8 94       	cli
	return flags;
    1300:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1302:	c8 01       	movw	r24, r16
    1304:	69 d8       	rcall	.-3886   	; 0x3d8 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1306:	f8 01       	movw	r30, r16
    1308:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	90 83       	st	Z, r25
	adc->CAL = cal;
    130e:	c4 86       	std	Z+12, r12	; 0x0c
    1310:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    1312:	f7 01       	movw	r30, r14
    1314:	25 81       	ldd	r18, Z+5	; 0x05
    1316:	36 81       	ldd	r19, Z+6	; 0x06
    1318:	f8 01       	movw	r30, r16
    131a:	20 8f       	std	Z+24, r18	; 0x18
    131c:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    131e:	f7 01       	movw	r30, r14
    1320:	92 81       	ldd	r25, Z+2	; 0x02
    1322:	f8 01       	movw	r30, r16
    1324:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1326:	f7 01       	movw	r30, r14
    1328:	94 81       	ldd	r25, Z+4	; 0x04
    132a:	f8 01       	movw	r30, r16
    132c:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    132e:	f7 01       	movw	r30, r14
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	f8 01       	movw	r30, r16
    1334:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1336:	f7 01       	movw	r30, r14
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	f8 01       	movw	r30, r16
    133c:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    133e:	81 70       	andi	r24, 0x01	; 1
    1340:	f7 01       	movw	r30, r14
    1342:	90 81       	ld	r25, Z
    1344:	89 2b       	or	r24, r25
    1346:	f8 01       	movw	r30, r16
    1348:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    134a:	c8 01       	movw	r24, r16
    134c:	66 d8       	rcall	.-3892   	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    134e:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    1350:	0f 90       	pop	r0
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	df 90       	pop	r13
    1360:	cf 90       	pop	r12
    1362:	bf 90       	pop	r11
    1364:	08 95       	ret

00001366 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	1f 92       	push	r1
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	8c 01       	movw	r16, r24
    137c:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    137e:	8f b7       	in	r24, 0x3f	; 63
    1380:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1382:	f8 94       	cli
	return flags;
    1384:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1386:	c8 01       	movw	r24, r16
    1388:	27 d8       	rcall	.-4018   	; 0x3d8 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    138a:	f8 01       	movw	r30, r16
    138c:	80 81       	ld	r24, Z
    138e:	80 7c       	andi	r24, 0xC0	; 192
    1390:	f7 01       	movw	r30, r14
    1392:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1394:	f8 01       	movw	r30, r16
    1396:	80 8d       	ldd	r24, Z+24	; 0x18
    1398:	91 8d       	ldd	r25, Z+25	; 0x19
    139a:	f7 01       	movw	r30, r14
    139c:	85 83       	std	Z+5, r24	; 0x05
    139e:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    13a0:	f8 01       	movw	r30, r16
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	f7 01       	movw	r30, r14
    13a6:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    13a8:	f8 01       	movw	r30, r16
    13aa:	84 81       	ldd	r24, Z+4	; 0x04
    13ac:	f7 01       	movw	r30, r14
    13ae:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    13b0:	f8 01       	movw	r30, r16
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	f7 01       	movw	r30, r14
    13b6:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    13b8:	f8 01       	movw	r30, r16
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	f7 01       	movw	r30, r14
    13be:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    13c0:	c8 01       	movw	r24, r16
    13c2:	2b d8       	rcall	.-4010   	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13c4:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    13c6:	0f 90       	pop	r0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	08 95       	ret

000013d8 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    13d8:	af 92       	push	r10
    13da:	bf 92       	push	r11
    13dc:	cf 92       	push	r12
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	1f 92       	push	r1
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	6c 01       	movw	r12, r24
    13f4:	b6 2e       	mov	r11, r22
    13f6:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    13f8:	86 2f       	mov	r24, r22
    13fa:	83 70       	andi	r24, 0x03	; 3
    13fc:	29 f4       	brne	.+10     	; 0x1408 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    13fe:	96 2f       	mov	r25, r22
    1400:	96 95       	lsr	r25
    1402:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	02 c0       	rjmp	.+4      	; 0x140c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1408:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    140a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    140c:	90 ff       	sbrs	r25, 0
		index++;
    140e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1410:	86 01       	movw	r16, r12
    1412:	00 5e       	subi	r16, 0xE0	; 224
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	98 e0       	ldi	r25, 0x08	; 8
    1418:	89 9f       	mul	r24, r25
    141a:	00 0d       	add	r16, r0
    141c:	11 1d       	adc	r17, r1
    141e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1420:	8f b7       	in	r24, 0x3f	; 63
    1422:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1424:	f8 94       	cli
	return flags;
    1426:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1428:	c6 01       	movw	r24, r12
    142a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    142e:	f7 01       	movw	r30, r14
    1430:	80 81       	ld	r24, Z
    1432:	f8 01       	movw	r30, r16
    1434:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1436:	f7 01       	movw	r30, r14
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	f8 01       	movw	r30, r16
    143c:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    143e:	f7 01       	movw	r30, r14
    1440:	81 81       	ldd	r24, Z+1	; 0x01
    1442:	f8 01       	movw	r30, r16
    1444:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1446:	b0 fe       	sbrs	r11, 0
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <adcch_write_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    144a:	f7 01       	movw	r30, r14
    144c:	83 81       	ldd	r24, Z+3	; 0x03
    144e:	f8 01       	movw	r30, r16
    1450:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1452:	c6 01       	movw	r24, r12
    1454:	0e 94 0d 02 	call	0x41a	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1458:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    145a:	0f 90       	pop	r0
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	bf 90       	pop	r11
    146e:	af 90       	pop	r10
    1470:	08 95       	ret

00001472 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	1f 92       	push	r1
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	6c 01       	movw	r12, r24
    148e:	b6 2e       	mov	r11, r22
    1490:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1492:	86 2f       	mov	r24, r22
    1494:	83 70       	andi	r24, 0x03	; 3
    1496:	29 f4       	brne	.+10     	; 0x14a2 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1498:	96 2f       	mov	r25, r22
    149a:	96 95       	lsr	r25
    149c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14a2:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    14a4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    14a6:	90 ff       	sbrs	r25, 0
		index++;
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    14aa:	86 01       	movw	r16, r12
    14ac:	00 5e       	subi	r16, 0xE0	; 224
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	98 e0       	ldi	r25, 0x08	; 8
    14b2:	89 9f       	mul	r24, r25
    14b4:	00 0d       	add	r16, r0
    14b6:	11 1d       	adc	r17, r1
    14b8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14ba:	8f b7       	in	r24, 0x3f	; 63
    14bc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14be:	f8 94       	cli
	return flags;
    14c0:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    14c2:	c6 01       	movw	r24, r12
    14c4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    14c8:	f8 01       	movw	r30, r16
    14ca:	80 81       	ld	r24, Z
    14cc:	f7 01       	movw	r30, r14
    14ce:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    14d0:	f8 01       	movw	r30, r16
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	f7 01       	movw	r30, r14
    14d6:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    14d8:	f8 01       	movw	r30, r16
    14da:	81 81       	ldd	r24, Z+1	; 0x01
    14dc:	f7 01       	movw	r30, r14
    14de:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    14e0:	b0 fe       	sbrs	r11, 0
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <adcch_read_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    14e4:	f8 01       	movw	r30, r16
    14e6:	86 81       	ldd	r24, Z+6	; 0x06
    14e8:	f7 01       	movw	r30, r14
    14ea:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    14ec:	c6 01       	movw	r24, r12
    14ee:	0e 94 0d 02 	call	0x41a	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14f2:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	08 95       	ret

0000150c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    150c:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    150e:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <stdio_base>
    1512:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <stdio_base+0x1>
    1516:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <ptr_put>
    151a:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <ptr_put+0x1>
    151e:	19 95       	eicall
    1520:	99 23       	and	r25, r25
    1522:	1c f0       	brlt	.+6      	; 0x152a <_write+0x1e>
		return -1;
	}
	return 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    152e:	08 95       	ret

00001530 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	1f 92       	push	r1
    1536:	1f 92       	push	r1
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1542:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1546:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    154a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    154e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1552:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1556:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    155a:	8f b7       	in	r24, 0x3f	; 63
    155c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    155e:	f8 94       	cli
	return flags;
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1562:	e0 e5       	ldi	r30, 0x50	; 80
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	82 60       	ori	r24, 0x02	; 2
    156a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    156c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    156e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1570:	81 ff       	sbrs	r24, 1
    1572:	fd cf       	rjmp	.-6      	; 0x156e <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	80 e4       	ldi	r24, 0x40	; 64
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    157e:	8f b7       	in	r24, 0x3f	; 63
    1580:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1582:	f8 94       	cli
	return flags;
    1584:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1586:	e0 e5       	ldi	r30, 0x50	; 80
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8e 7f       	andi	r24, 0xFE	; 254
    158e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1590:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	1f 92       	push	r1
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15a6:	9f b7       	in	r25, 0x3f	; 63
    15a8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    15aa:	f8 94       	cli
	return flags;
    15ac:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    15ae:	e8 2f       	mov	r30, r24
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	e0 59       	subi	r30, 0x90	; 144
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 95       	com	r22
    15b8:	80 81       	ld	r24, Z
    15ba:	68 23       	and	r22, r24
    15bc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15be:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    15c0:	0f 90       	pop	r0
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	1f 92       	push	r1
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15d2:	9f b7       	in	r25, 0x3f	; 63
    15d4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    15d6:	f8 94       	cli
	return flags;
    15d8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    15da:	e8 2f       	mov	r30, r24
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	e0 59       	subi	r30, 0x90	; 144
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	68 2b       	or	r22, r24
    15e6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15e8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    15ea:	0f 90       	pop	r0
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	08 b6       	in	r0, 0x38	; 56
    15fe:	0f 92       	push	r0
    1600:	18 be       	out	0x38, r1	; 56
    1602:	0b b6       	in	r0, 0x3b	; 59
    1604:	0f 92       	push	r0
    1606:	1b be       	out	0x3b, r1	; 59
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
	rtc_data.counter_high++;
    1610:	e7 ee       	ldi	r30, 0xE7	; 231
    1612:	f0 e2       	ldi	r31, 0x20	; 32
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	80 83       	st	Z, r24
    161c:	91 83       	std	Z+1, r25	; 0x01
}
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	0f 90       	pop	r0
    1628:	0b be       	out	0x3b, r0	; 59
    162a:	0f 90       	pop	r0
    162c:	08 be       	out	0x38, r0	; 56
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	08 b6       	in	r0, 0x38	; 56
    1644:	0f 92       	push	r0
    1646:	18 be       	out	0x38, r1	; 56
    1648:	09 b6       	in	r0, 0x39	; 57
    164a:	0f 92       	push	r0
    164c:	19 be       	out	0x39, r1	; 57
    164e:	0b b6       	in	r0, 0x3b	; 59
    1650:	0f 92       	push	r0
    1652:	1b be       	out	0x3b, r1	; 59
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    1678:	e7 ee       	ldi	r30, 0xE7	; 231
    167a:	f0 e2       	ldi	r31, 0x20	; 32
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	22 81       	ldd	r18, Z+2	; 0x02
    1682:	33 81       	ldd	r19, Z+3	; 0x03
    1684:	82 17       	cp	r24, r18
    1686:	93 07       	cpc	r25, r19
    1688:	f0 f1       	brcs	.+124    	; 0x1706 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    168a:	21 e0       	ldi	r18, 0x01	; 1
    168c:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
    1690:	e0 91 ed 20 	lds	r30, 0x20ED	; 0x8020ed <rtc_data+0x6>
    1694:	f0 91 ee 20 	lds	r31, 0x20EE	; 0x8020ee <rtc_data+0x7>
    1698:	30 97       	sbiw	r30, 0x00	; 0
    169a:	a9 f1       	breq	.+106    	; 0x1706 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    169c:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    16a0:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	dc 01       	movw	r26, r24
    16aa:	99 27       	eor	r25, r25
    16ac:	88 27       	eor	r24, r24
    16ae:	ab 01       	movw	r20, r22
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	8c 01       	movw	r16, r24
    16b6:	9d 01       	movw	r18, r26
    16b8:	04 2b       	or	r16, r20
    16ba:	15 2b       	or	r17, r21
    16bc:	26 2b       	or	r18, r22
    16be:	37 2b       	or	r19, r23
    16c0:	c9 01       	movw	r24, r18
    16c2:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    16c4:	a7 ee       	ldi	r26, 0xE7	; 231
    16c6:	b0 e2       	ldi	r27, 0x20	; 32
    16c8:	12 96       	adiw	r26, 0x02	; 2
    16ca:	0d 91       	ld	r16, X+
    16cc:	1c 91       	ld	r17, X
    16ce:	13 97       	sbiw	r26, 0x03	; 3
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	98 01       	movw	r18, r16
    16d6:	11 27       	eor	r17, r17
    16d8:	00 27       	eor	r16, r16
    16da:	14 96       	adiw	r26, 0x04	; 4
    16dc:	cd 90       	ld	r12, X+
    16de:	dc 90       	ld	r13, X
    16e0:	15 97       	sbiw	r26, 0x05	; 5
    16e2:	e1 2c       	mov	r14, r1
    16e4:	f1 2c       	mov	r15, r1
    16e6:	0c 29       	or	r16, r12
    16e8:	1d 29       	or	r17, r13
    16ea:	2e 29       	or	r18, r14
    16ec:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    16ee:	06 17       	cp	r16, r22
    16f0:	17 07       	cpc	r17, r23
    16f2:	28 07       	cpc	r18, r24
    16f4:	39 07       	cpc	r19, r25
    16f6:	30 f0       	brcs	.+12     	; 0x1704 <__vector_11+0xcc>
				count = alarm + 1;
    16f8:	c9 01       	movw	r24, r18
    16fa:	b8 01       	movw	r22, r16
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	8f 4f       	sbci	r24, 0xFF	; 255
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    1704:	19 95       	eicall
		}
	}
}
    1706:	ff 91       	pop	r31
    1708:	ef 91       	pop	r30
    170a:	bf 91       	pop	r27
    170c:	af 91       	pop	r26
    170e:	9f 91       	pop	r25
    1710:	8f 91       	pop	r24
    1712:	7f 91       	pop	r23
    1714:	6f 91       	pop	r22
    1716:	5f 91       	pop	r21
    1718:	4f 91       	pop	r20
    171a:	3f 91       	pop	r19
    171c:	2f 91       	pop	r18
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	0f 90       	pop	r0
    172c:	0b be       	out	0x3b, r0	; 59
    172e:	0f 90       	pop	r0
    1730:	09 be       	out	0x39, r0	; 57
    1732:	0f 90       	pop	r0
    1734:	08 be       	out	0x38, r0	; 56
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	08 b6       	in	r0, 0x38	; 56
    174c:	0f 92       	push	r0
    174e:	18 be       	out	0x38, r1	; 56
    1750:	09 b6       	in	r0, 0x39	; 57
    1752:	0f 92       	push	r0
    1754:	19 be       	out	0x39, r1	; 57
    1756:	0b b6       	in	r0, 0x3b	; 59
    1758:	0f 92       	push	r0
    175a:	1b be       	out	0x3b, r1	; 59
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
    1774:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <tc_tcc0_ovf_callback>
    1778:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <tc_tcc0_ovf_callback+0x1>
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	09 f0       	breq	.+2      	; 0x1782 <__vector_14+0x42>
    1780:	19 95       	eicall
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0b be       	out	0x3b, r0	; 59
    179e:	0f 90       	pop	r0
    17a0:	09 be       	out	0x39, r0	; 57
    17a2:	0f 90       	pop	r0
    17a4:	08 be       	out	0x38, r0	; 56
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <__vector_15>:
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	08 b6       	in	r0, 0x38	; 56
    17bc:	0f 92       	push	r0
    17be:	18 be       	out	0x38, r1	; 56
    17c0:	09 b6       	in	r0, 0x39	; 57
    17c2:	0f 92       	push	r0
    17c4:	19 be       	out	0x39, r1	; 57
    17c6:	0b b6       	in	r0, 0x3b	; 59
    17c8:	0f 92       	push	r0
    17ca:	1b be       	out	0x3b, r1	; 59
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <tc_tcc0_err_callback>
    17e8:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <tc_tcc0_err_callback+0x1>
    17ec:	30 97       	sbiw	r30, 0x00	; 0
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <__vector_15+0x42>
    17f0:	19 95       	eicall
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	7f 91       	pop	r23
    1800:	6f 91       	pop	r22
    1802:	5f 91       	pop	r21
    1804:	4f 91       	pop	r20
    1806:	3f 91       	pop	r19
    1808:	2f 91       	pop	r18
    180a:	0f 90       	pop	r0
    180c:	0b be       	out	0x3b, r0	; 59
    180e:	0f 90       	pop	r0
    1810:	09 be       	out	0x39, r0	; 57
    1812:	0f 90       	pop	r0
    1814:	08 be       	out	0x38, r0	; 56
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

00001820 <__vector_16>:
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	08 b6       	in	r0, 0x38	; 56
    182c:	0f 92       	push	r0
    182e:	18 be       	out	0x38, r1	; 56
    1830:	09 b6       	in	r0, 0x39	; 57
    1832:	0f 92       	push	r0
    1834:	19 be       	out	0x39, r1	; 57
    1836:	0b b6       	in	r0, 0x3b	; 59
    1838:	0f 92       	push	r0
    183a:	1b be       	out	0x3b, r1	; 59
    183c:	2f 93       	push	r18
    183e:	3f 93       	push	r19
    1840:	4f 93       	push	r20
    1842:	5f 93       	push	r21
    1844:	6f 93       	push	r22
    1846:	7f 93       	push	r23
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
    1854:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <tc_tcc0_cca_callback>
    1858:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <tc_tcc0_cca_callback+0x1>
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	09 f0       	breq	.+2      	; 0x1862 <__vector_16+0x42>
    1860:	19 95       	eicall
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0b be       	out	0x3b, r0	; 59
    187e:	0f 90       	pop	r0
    1880:	09 be       	out	0x39, r0	; 57
    1882:	0f 90       	pop	r0
    1884:	08 be       	out	0x38, r0	; 56
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_17>:
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	08 b6       	in	r0, 0x38	; 56
    189c:	0f 92       	push	r0
    189e:	18 be       	out	0x38, r1	; 56
    18a0:	09 b6       	in	r0, 0x39	; 57
    18a2:	0f 92       	push	r0
    18a4:	19 be       	out	0x39, r1	; 57
    18a6:	0b b6       	in	r0, 0x3b	; 59
    18a8:	0f 92       	push	r0
    18aa:	1b be       	out	0x3b, r1	; 59
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tcc0_ccb_callback>
    18c8:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tcc0_ccb_callback+0x1>
    18cc:	30 97       	sbiw	r30, 0x00	; 0
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__vector_17+0x42>
    18d0:	19 95       	eicall
    18d2:	ff 91       	pop	r31
    18d4:	ef 91       	pop	r30
    18d6:	bf 91       	pop	r27
    18d8:	af 91       	pop	r26
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	7f 91       	pop	r23
    18e0:	6f 91       	pop	r22
    18e2:	5f 91       	pop	r21
    18e4:	4f 91       	pop	r20
    18e6:	3f 91       	pop	r19
    18e8:	2f 91       	pop	r18
    18ea:	0f 90       	pop	r0
    18ec:	0b be       	out	0x3b, r0	; 59
    18ee:	0f 90       	pop	r0
    18f0:	09 be       	out	0x39, r0	; 57
    18f2:	0f 90       	pop	r0
    18f4:	08 be       	out	0x38, r0	; 56
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <__vector_18>:
    1900:	1f 92       	push	r1
    1902:	0f 92       	push	r0
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	11 24       	eor	r1, r1
    190a:	08 b6       	in	r0, 0x38	; 56
    190c:	0f 92       	push	r0
    190e:	18 be       	out	0x38, r1	; 56
    1910:	09 b6       	in	r0, 0x39	; 57
    1912:	0f 92       	push	r0
    1914:	19 be       	out	0x39, r1	; 57
    1916:	0b b6       	in	r0, 0x3b	; 59
    1918:	0f 92       	push	r0
    191a:	1b be       	out	0x3b, r1	; 59
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
    1934:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tcc0_ccc_callback>
    1938:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tcc0_ccc_callback+0x1>
    193c:	30 97       	sbiw	r30, 0x00	; 0
    193e:	09 f0       	breq	.+2      	; 0x1942 <__vector_18+0x42>
    1940:	19 95       	eicall
    1942:	ff 91       	pop	r31
    1944:	ef 91       	pop	r30
    1946:	bf 91       	pop	r27
    1948:	af 91       	pop	r26
    194a:	9f 91       	pop	r25
    194c:	8f 91       	pop	r24
    194e:	7f 91       	pop	r23
    1950:	6f 91       	pop	r22
    1952:	5f 91       	pop	r21
    1954:	4f 91       	pop	r20
    1956:	3f 91       	pop	r19
    1958:	2f 91       	pop	r18
    195a:	0f 90       	pop	r0
    195c:	0b be       	out	0x3b, r0	; 59
    195e:	0f 90       	pop	r0
    1960:	09 be       	out	0x39, r0	; 57
    1962:	0f 90       	pop	r0
    1964:	08 be       	out	0x38, r0	; 56
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	0f 90       	pop	r0
    196c:	1f 90       	pop	r1
    196e:	18 95       	reti

00001970 <__vector_19>:
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	08 b6       	in	r0, 0x38	; 56
    197c:	0f 92       	push	r0
    197e:	18 be       	out	0x38, r1	; 56
    1980:	09 b6       	in	r0, 0x39	; 57
    1982:	0f 92       	push	r0
    1984:	19 be       	out	0x39, r1	; 57
    1986:	0b b6       	in	r0, 0x3b	; 59
    1988:	0f 92       	push	r0
    198a:	1b be       	out	0x3b, r1	; 59
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
    19a4:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcc0_ccd_callback>
    19a8:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcc0_ccd_callback+0x1>
    19ac:	30 97       	sbiw	r30, 0x00	; 0
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <__vector_19+0x42>
    19b0:	19 95       	eicall
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	0f 90       	pop	r0
    19cc:	0b be       	out	0x3b, r0	; 59
    19ce:	0f 90       	pop	r0
    19d0:	09 be       	out	0x39, r0	; 57
    19d2:	0f 90       	pop	r0
    19d4:	08 be       	out	0x38, r0	; 56
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <__vector_20>:
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	08 b6       	in	r0, 0x38	; 56
    19ec:	0f 92       	push	r0
    19ee:	18 be       	out	0x38, r1	; 56
    19f0:	09 b6       	in	r0, 0x39	; 57
    19f2:	0f 92       	push	r0
    19f4:	19 be       	out	0x39, r1	; 57
    19f6:	0b b6       	in	r0, 0x3b	; 59
    19f8:	0f 92       	push	r0
    19fa:	1b be       	out	0x3b, r1	; 59
    19fc:	2f 93       	push	r18
    19fe:	3f 93       	push	r19
    1a00:	4f 93       	push	r20
    1a02:	5f 93       	push	r21
    1a04:	6f 93       	push	r22
    1a06:	7f 93       	push	r23
    1a08:	8f 93       	push	r24
    1a0a:	9f 93       	push	r25
    1a0c:	af 93       	push	r26
    1a0e:	bf 93       	push	r27
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
    1a14:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcc1_ovf_callback>
    1a18:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcc1_ovf_callback+0x1>
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <__vector_20+0x42>
    1a20:	19 95       	eicall
    1a22:	ff 91       	pop	r31
    1a24:	ef 91       	pop	r30
    1a26:	bf 91       	pop	r27
    1a28:	af 91       	pop	r26
    1a2a:	9f 91       	pop	r25
    1a2c:	8f 91       	pop	r24
    1a2e:	7f 91       	pop	r23
    1a30:	6f 91       	pop	r22
    1a32:	5f 91       	pop	r21
    1a34:	4f 91       	pop	r20
    1a36:	3f 91       	pop	r19
    1a38:	2f 91       	pop	r18
    1a3a:	0f 90       	pop	r0
    1a3c:	0b be       	out	0x3b, r0	; 59
    1a3e:	0f 90       	pop	r0
    1a40:	09 be       	out	0x39, r0	; 57
    1a42:	0f 90       	pop	r0
    1a44:	08 be       	out	0x38, r0	; 56
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	0f 90       	pop	r0
    1a4c:	1f 90       	pop	r1
    1a4e:	18 95       	reti

00001a50 <__vector_21>:
    1a50:	1f 92       	push	r1
    1a52:	0f 92       	push	r0
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	0f 92       	push	r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	08 b6       	in	r0, 0x38	; 56
    1a5c:	0f 92       	push	r0
    1a5e:	18 be       	out	0x38, r1	; 56
    1a60:	09 b6       	in	r0, 0x39	; 57
    1a62:	0f 92       	push	r0
    1a64:	19 be       	out	0x39, r1	; 57
    1a66:	0b b6       	in	r0, 0x3b	; 59
    1a68:	0f 92       	push	r0
    1a6a:	1b be       	out	0x3b, r1	; 59
    1a6c:	2f 93       	push	r18
    1a6e:	3f 93       	push	r19
    1a70:	4f 93       	push	r20
    1a72:	5f 93       	push	r21
    1a74:	6f 93       	push	r22
    1a76:	7f 93       	push	r23
    1a78:	8f 93       	push	r24
    1a7a:	9f 93       	push	r25
    1a7c:	af 93       	push	r26
    1a7e:	bf 93       	push	r27
    1a80:	ef 93       	push	r30
    1a82:	ff 93       	push	r31
    1a84:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcc1_err_callback>
    1a88:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcc1_err_callback+0x1>
    1a8c:	30 97       	sbiw	r30, 0x00	; 0
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <__vector_21+0x42>
    1a90:	19 95       	eicall
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	0f 90       	pop	r0
    1aac:	0b be       	out	0x3b, r0	; 59
    1aae:	0f 90       	pop	r0
    1ab0:	09 be       	out	0x39, r0	; 57
    1ab2:	0f 90       	pop	r0
    1ab4:	08 be       	out	0x38, r0	; 56
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	0f 90       	pop	r0
    1abc:	1f 90       	pop	r1
    1abe:	18 95       	reti

00001ac0 <__vector_22>:
    1ac0:	1f 92       	push	r1
    1ac2:	0f 92       	push	r0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	0f 92       	push	r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	08 b6       	in	r0, 0x38	; 56
    1acc:	0f 92       	push	r0
    1ace:	18 be       	out	0x38, r1	; 56
    1ad0:	09 b6       	in	r0, 0x39	; 57
    1ad2:	0f 92       	push	r0
    1ad4:	19 be       	out	0x39, r1	; 57
    1ad6:	0b b6       	in	r0, 0x3b	; 59
    1ad8:	0f 92       	push	r0
    1ada:	1b be       	out	0x3b, r1	; 59
    1adc:	2f 93       	push	r18
    1ade:	3f 93       	push	r19
    1ae0:	4f 93       	push	r20
    1ae2:	5f 93       	push	r21
    1ae4:	6f 93       	push	r22
    1ae6:	7f 93       	push	r23
    1ae8:	8f 93       	push	r24
    1aea:	9f 93       	push	r25
    1aec:	af 93       	push	r26
    1aee:	bf 93       	push	r27
    1af0:	ef 93       	push	r30
    1af2:	ff 93       	push	r31
    1af4:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcc1_cca_callback>
    1af8:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcc1_cca_callback+0x1>
    1afc:	30 97       	sbiw	r30, 0x00	; 0
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <__vector_22+0x42>
    1b00:	19 95       	eicall
    1b02:	ff 91       	pop	r31
    1b04:	ef 91       	pop	r30
    1b06:	bf 91       	pop	r27
    1b08:	af 91       	pop	r26
    1b0a:	9f 91       	pop	r25
    1b0c:	8f 91       	pop	r24
    1b0e:	7f 91       	pop	r23
    1b10:	6f 91       	pop	r22
    1b12:	5f 91       	pop	r21
    1b14:	4f 91       	pop	r20
    1b16:	3f 91       	pop	r19
    1b18:	2f 91       	pop	r18
    1b1a:	0f 90       	pop	r0
    1b1c:	0b be       	out	0x3b, r0	; 59
    1b1e:	0f 90       	pop	r0
    1b20:	09 be       	out	0x39, r0	; 57
    1b22:	0f 90       	pop	r0
    1b24:	08 be       	out	0x38, r0	; 56
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	0f 90       	pop	r0
    1b2c:	1f 90       	pop	r1
    1b2e:	18 95       	reti

00001b30 <__vector_23>:
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	08 b6       	in	r0, 0x38	; 56
    1b3c:	0f 92       	push	r0
    1b3e:	18 be       	out	0x38, r1	; 56
    1b40:	09 b6       	in	r0, 0x39	; 57
    1b42:	0f 92       	push	r0
    1b44:	19 be       	out	0x39, r1	; 57
    1b46:	0b b6       	in	r0, 0x3b	; 59
    1b48:	0f 92       	push	r0
    1b4a:	1b be       	out	0x3b, r1	; 59
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	7f 93       	push	r23
    1b58:	8f 93       	push	r24
    1b5a:	9f 93       	push	r25
    1b5c:	af 93       	push	r26
    1b5e:	bf 93       	push	r27
    1b60:	ef 93       	push	r30
    1b62:	ff 93       	push	r31
    1b64:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcc1_ccb_callback>
    1b68:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcc1_ccb_callback+0x1>
    1b6c:	30 97       	sbiw	r30, 0x00	; 0
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <__vector_23+0x42>
    1b70:	19 95       	eicall
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	7f 91       	pop	r23
    1b80:	6f 91       	pop	r22
    1b82:	5f 91       	pop	r21
    1b84:	4f 91       	pop	r20
    1b86:	3f 91       	pop	r19
    1b88:	2f 91       	pop	r18
    1b8a:	0f 90       	pop	r0
    1b8c:	0b be       	out	0x3b, r0	; 59
    1b8e:	0f 90       	pop	r0
    1b90:	09 be       	out	0x39, r0	; 57
    1b92:	0f 90       	pop	r0
    1b94:	08 be       	out	0x38, r0	; 56
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	0f 90       	pop	r0
    1b9c:	1f 90       	pop	r1
    1b9e:	18 95       	reti

00001ba0 <__vector_77>:
    1ba0:	1f 92       	push	r1
    1ba2:	0f 92       	push	r0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	0f 92       	push	r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	08 b6       	in	r0, 0x38	; 56
    1bac:	0f 92       	push	r0
    1bae:	18 be       	out	0x38, r1	; 56
    1bb0:	09 b6       	in	r0, 0x39	; 57
    1bb2:	0f 92       	push	r0
    1bb4:	19 be       	out	0x39, r1	; 57
    1bb6:	0b b6       	in	r0, 0x3b	; 59
    1bb8:	0f 92       	push	r0
    1bba:	1b be       	out	0x3b, r1	; 59
    1bbc:	2f 93       	push	r18
    1bbe:	3f 93       	push	r19
    1bc0:	4f 93       	push	r20
    1bc2:	5f 93       	push	r21
    1bc4:	6f 93       	push	r22
    1bc6:	7f 93       	push	r23
    1bc8:	8f 93       	push	r24
    1bca:	9f 93       	push	r25
    1bcc:	af 93       	push	r26
    1bce:	bf 93       	push	r27
    1bd0:	ef 93       	push	r30
    1bd2:	ff 93       	push	r31
    1bd4:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcd0_ovf_callback>
    1bd8:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcd0_ovf_callback+0x1>
    1bdc:	30 97       	sbiw	r30, 0x00	; 0
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <__vector_77+0x42>
    1be0:	19 95       	eicall
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	7f 91       	pop	r23
    1bf0:	6f 91       	pop	r22
    1bf2:	5f 91       	pop	r21
    1bf4:	4f 91       	pop	r20
    1bf6:	3f 91       	pop	r19
    1bf8:	2f 91       	pop	r18
    1bfa:	0f 90       	pop	r0
    1bfc:	0b be       	out	0x3b, r0	; 59
    1bfe:	0f 90       	pop	r0
    1c00:	09 be       	out	0x39, r0	; 57
    1c02:	0f 90       	pop	r0
    1c04:	08 be       	out	0x38, r0	; 56
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	0f 90       	pop	r0
    1c0c:	1f 90       	pop	r1
    1c0e:	18 95       	reti

00001c10 <__vector_78>:
    1c10:	1f 92       	push	r1
    1c12:	0f 92       	push	r0
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	0f 92       	push	r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	08 b6       	in	r0, 0x38	; 56
    1c1c:	0f 92       	push	r0
    1c1e:	18 be       	out	0x38, r1	; 56
    1c20:	09 b6       	in	r0, 0x39	; 57
    1c22:	0f 92       	push	r0
    1c24:	19 be       	out	0x39, r1	; 57
    1c26:	0b b6       	in	r0, 0x3b	; 59
    1c28:	0f 92       	push	r0
    1c2a:	1b be       	out	0x3b, r1	; 59
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
    1c44:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcd0_err_callback>
    1c48:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcd0_err_callback+0x1>
    1c4c:	30 97       	sbiw	r30, 0x00	; 0
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <__vector_78+0x42>
    1c50:	19 95       	eicall
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	0f 90       	pop	r0
    1c6c:	0b be       	out	0x3b, r0	; 59
    1c6e:	0f 90       	pop	r0
    1c70:	09 be       	out	0x39, r0	; 57
    1c72:	0f 90       	pop	r0
    1c74:	08 be       	out	0x38, r0	; 56
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <__vector_79>:
    1c80:	1f 92       	push	r1
    1c82:	0f 92       	push	r0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	0f 92       	push	r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	08 b6       	in	r0, 0x38	; 56
    1c8c:	0f 92       	push	r0
    1c8e:	18 be       	out	0x38, r1	; 56
    1c90:	09 b6       	in	r0, 0x39	; 57
    1c92:	0f 92       	push	r0
    1c94:	19 be       	out	0x39, r1	; 57
    1c96:	0b b6       	in	r0, 0x3b	; 59
    1c98:	0f 92       	push	r0
    1c9a:	1b be       	out	0x3b, r1	; 59
    1c9c:	2f 93       	push	r18
    1c9e:	3f 93       	push	r19
    1ca0:	4f 93       	push	r20
    1ca2:	5f 93       	push	r21
    1ca4:	6f 93       	push	r22
    1ca6:	7f 93       	push	r23
    1ca8:	8f 93       	push	r24
    1caa:	9f 93       	push	r25
    1cac:	af 93       	push	r26
    1cae:	bf 93       	push	r27
    1cb0:	ef 93       	push	r30
    1cb2:	ff 93       	push	r31
    1cb4:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcd0_cca_callback>
    1cb8:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcd0_cca_callback+0x1>
    1cbc:	30 97       	sbiw	r30, 0x00	; 0
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <__vector_79+0x42>
    1cc0:	19 95       	eicall
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	bf 91       	pop	r27
    1cc8:	af 91       	pop	r26
    1cca:	9f 91       	pop	r25
    1ccc:	8f 91       	pop	r24
    1cce:	7f 91       	pop	r23
    1cd0:	6f 91       	pop	r22
    1cd2:	5f 91       	pop	r21
    1cd4:	4f 91       	pop	r20
    1cd6:	3f 91       	pop	r19
    1cd8:	2f 91       	pop	r18
    1cda:	0f 90       	pop	r0
    1cdc:	0b be       	out	0x3b, r0	; 59
    1cde:	0f 90       	pop	r0
    1ce0:	09 be       	out	0x39, r0	; 57
    1ce2:	0f 90       	pop	r0
    1ce4:	08 be       	out	0x38, r0	; 56
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	0f 90       	pop	r0
    1cec:	1f 90       	pop	r1
    1cee:	18 95       	reti

00001cf0 <__vector_80>:
    1cf0:	1f 92       	push	r1
    1cf2:	0f 92       	push	r0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	0f 92       	push	r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	08 b6       	in	r0, 0x38	; 56
    1cfc:	0f 92       	push	r0
    1cfe:	18 be       	out	0x38, r1	; 56
    1d00:	09 b6       	in	r0, 0x39	; 57
    1d02:	0f 92       	push	r0
    1d04:	19 be       	out	0x39, r1	; 57
    1d06:	0b b6       	in	r0, 0x3b	; 59
    1d08:	0f 92       	push	r0
    1d0a:	1b be       	out	0x3b, r1	; 59
    1d0c:	2f 93       	push	r18
    1d0e:	3f 93       	push	r19
    1d10:	4f 93       	push	r20
    1d12:	5f 93       	push	r21
    1d14:	6f 93       	push	r22
    1d16:	7f 93       	push	r23
    1d18:	8f 93       	push	r24
    1d1a:	9f 93       	push	r25
    1d1c:	af 93       	push	r26
    1d1e:	bf 93       	push	r27
    1d20:	ef 93       	push	r30
    1d22:	ff 93       	push	r31
    1d24:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcd0_ccb_callback>
    1d28:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcd0_ccb_callback+0x1>
    1d2c:	30 97       	sbiw	r30, 0x00	; 0
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <__vector_80+0x42>
    1d30:	19 95       	eicall
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0b be       	out	0x3b, r0	; 59
    1d4e:	0f 90       	pop	r0
    1d50:	09 be       	out	0x39, r0	; 57
    1d52:	0f 90       	pop	r0
    1d54:	08 be       	out	0x38, r0	; 56
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <__vector_81>:
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	08 b6       	in	r0, 0x38	; 56
    1d6c:	0f 92       	push	r0
    1d6e:	18 be       	out	0x38, r1	; 56
    1d70:	09 b6       	in	r0, 0x39	; 57
    1d72:	0f 92       	push	r0
    1d74:	19 be       	out	0x39, r1	; 57
    1d76:	0b b6       	in	r0, 0x3b	; 59
    1d78:	0f 92       	push	r0
    1d7a:	1b be       	out	0x3b, r1	; 59
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
    1d94:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcd0_ccc_callback>
    1d98:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcd0_ccc_callback+0x1>
    1d9c:	30 97       	sbiw	r30, 0x00	; 0
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <__vector_81+0x42>
    1da0:	19 95       	eicall
    1da2:	ff 91       	pop	r31
    1da4:	ef 91       	pop	r30
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	7f 91       	pop	r23
    1db0:	6f 91       	pop	r22
    1db2:	5f 91       	pop	r21
    1db4:	4f 91       	pop	r20
    1db6:	3f 91       	pop	r19
    1db8:	2f 91       	pop	r18
    1dba:	0f 90       	pop	r0
    1dbc:	0b be       	out	0x3b, r0	; 59
    1dbe:	0f 90       	pop	r0
    1dc0:	09 be       	out	0x39, r0	; 57
    1dc2:	0f 90       	pop	r0
    1dc4:	08 be       	out	0x38, r0	; 56
    1dc6:	0f 90       	pop	r0
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	0f 90       	pop	r0
    1dcc:	1f 90       	pop	r1
    1dce:	18 95       	reti

00001dd0 <__vector_82>:
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	08 b6       	in	r0, 0x38	; 56
    1ddc:	0f 92       	push	r0
    1dde:	18 be       	out	0x38, r1	; 56
    1de0:	09 b6       	in	r0, 0x39	; 57
    1de2:	0f 92       	push	r0
    1de4:	19 be       	out	0x39, r1	; 57
    1de6:	0b b6       	in	r0, 0x3b	; 59
    1de8:	0f 92       	push	r0
    1dea:	1b be       	out	0x3b, r1	; 59
    1dec:	2f 93       	push	r18
    1dee:	3f 93       	push	r19
    1df0:	4f 93       	push	r20
    1df2:	5f 93       	push	r21
    1df4:	6f 93       	push	r22
    1df6:	7f 93       	push	r23
    1df8:	8f 93       	push	r24
    1dfa:	9f 93       	push	r25
    1dfc:	af 93       	push	r26
    1dfe:	bf 93       	push	r27
    1e00:	ef 93       	push	r30
    1e02:	ff 93       	push	r31
    1e04:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcd0_ccd_callback>
    1e08:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcd0_ccd_callback+0x1>
    1e0c:	30 97       	sbiw	r30, 0x00	; 0
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <__vector_82+0x42>
    1e10:	19 95       	eicall
    1e12:	ff 91       	pop	r31
    1e14:	ef 91       	pop	r30
    1e16:	bf 91       	pop	r27
    1e18:	af 91       	pop	r26
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	7f 91       	pop	r23
    1e20:	6f 91       	pop	r22
    1e22:	5f 91       	pop	r21
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	0b be       	out	0x3b, r0	; 59
    1e2e:	0f 90       	pop	r0
    1e30:	09 be       	out	0x39, r0	; 57
    1e32:	0f 90       	pop	r0
    1e34:	08 be       	out	0x38, r0	; 56
    1e36:	0f 90       	pop	r0
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	0f 90       	pop	r0
    1e3c:	1f 90       	pop	r1
    1e3e:	18 95       	reti

00001e40 <__vector_83>:
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	08 b6       	in	r0, 0x38	; 56
    1e4c:	0f 92       	push	r0
    1e4e:	18 be       	out	0x38, r1	; 56
    1e50:	09 b6       	in	r0, 0x39	; 57
    1e52:	0f 92       	push	r0
    1e54:	19 be       	out	0x39, r1	; 57
    1e56:	0b b6       	in	r0, 0x3b	; 59
    1e58:	0f 92       	push	r0
    1e5a:	1b be       	out	0x3b, r1	; 59
    1e5c:	2f 93       	push	r18
    1e5e:	3f 93       	push	r19
    1e60:	4f 93       	push	r20
    1e62:	5f 93       	push	r21
    1e64:	6f 93       	push	r22
    1e66:	7f 93       	push	r23
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	af 93       	push	r26
    1e6e:	bf 93       	push	r27
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
    1e74:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tcd1_ovf_callback>
    1e78:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tcd1_ovf_callback+0x1>
    1e7c:	30 97       	sbiw	r30, 0x00	; 0
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <__vector_83+0x42>
    1e80:	19 95       	eicall
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0b be       	out	0x3b, r0	; 59
    1e9e:	0f 90       	pop	r0
    1ea0:	09 be       	out	0x39, r0	; 57
    1ea2:	0f 90       	pop	r0
    1ea4:	08 be       	out	0x38, r0	; 56
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0f 90       	pop	r0
    1eac:	1f 90       	pop	r1
    1eae:	18 95       	reti

00001eb0 <__vector_84>:
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	08 b6       	in	r0, 0x38	; 56
    1ebc:	0f 92       	push	r0
    1ebe:	18 be       	out	0x38, r1	; 56
    1ec0:	09 b6       	in	r0, 0x39	; 57
    1ec2:	0f 92       	push	r0
    1ec4:	19 be       	out	0x39, r1	; 57
    1ec6:	0b b6       	in	r0, 0x3b	; 59
    1ec8:	0f 92       	push	r0
    1eca:	1b be       	out	0x3b, r1	; 59
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tcd1_err_callback>
    1ee8:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tcd1_err_callback+0x1>
    1eec:	30 97       	sbiw	r30, 0x00	; 0
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <__vector_84+0x42>
    1ef0:	19 95       	eicall
    1ef2:	ff 91       	pop	r31
    1ef4:	ef 91       	pop	r30
    1ef6:	bf 91       	pop	r27
    1ef8:	af 91       	pop	r26
    1efa:	9f 91       	pop	r25
    1efc:	8f 91       	pop	r24
    1efe:	7f 91       	pop	r23
    1f00:	6f 91       	pop	r22
    1f02:	5f 91       	pop	r21
    1f04:	4f 91       	pop	r20
    1f06:	3f 91       	pop	r19
    1f08:	2f 91       	pop	r18
    1f0a:	0f 90       	pop	r0
    1f0c:	0b be       	out	0x3b, r0	; 59
    1f0e:	0f 90       	pop	r0
    1f10:	09 be       	out	0x39, r0	; 57
    1f12:	0f 90       	pop	r0
    1f14:	08 be       	out	0x38, r0	; 56
    1f16:	0f 90       	pop	r0
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	0f 90       	pop	r0
    1f1c:	1f 90       	pop	r1
    1f1e:	18 95       	reti

00001f20 <__vector_85>:
    1f20:	1f 92       	push	r1
    1f22:	0f 92       	push	r0
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	0f 92       	push	r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	08 b6       	in	r0, 0x38	; 56
    1f2c:	0f 92       	push	r0
    1f2e:	18 be       	out	0x38, r1	; 56
    1f30:	09 b6       	in	r0, 0x39	; 57
    1f32:	0f 92       	push	r0
    1f34:	19 be       	out	0x39, r1	; 57
    1f36:	0b b6       	in	r0, 0x3b	; 59
    1f38:	0f 92       	push	r0
    1f3a:	1b be       	out	0x3b, r1	; 59
    1f3c:	2f 93       	push	r18
    1f3e:	3f 93       	push	r19
    1f40:	4f 93       	push	r20
    1f42:	5f 93       	push	r21
    1f44:	6f 93       	push	r22
    1f46:	7f 93       	push	r23
    1f48:	8f 93       	push	r24
    1f4a:	9f 93       	push	r25
    1f4c:	af 93       	push	r26
    1f4e:	bf 93       	push	r27
    1f50:	ef 93       	push	r30
    1f52:	ff 93       	push	r31
    1f54:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tcd1_cca_callback>
    1f58:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tcd1_cca_callback+0x1>
    1f5c:	30 97       	sbiw	r30, 0x00	; 0
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <__vector_85+0x42>
    1f60:	19 95       	eicall
    1f62:	ff 91       	pop	r31
    1f64:	ef 91       	pop	r30
    1f66:	bf 91       	pop	r27
    1f68:	af 91       	pop	r26
    1f6a:	9f 91       	pop	r25
    1f6c:	8f 91       	pop	r24
    1f6e:	7f 91       	pop	r23
    1f70:	6f 91       	pop	r22
    1f72:	5f 91       	pop	r21
    1f74:	4f 91       	pop	r20
    1f76:	3f 91       	pop	r19
    1f78:	2f 91       	pop	r18
    1f7a:	0f 90       	pop	r0
    1f7c:	0b be       	out	0x3b, r0	; 59
    1f7e:	0f 90       	pop	r0
    1f80:	09 be       	out	0x39, r0	; 57
    1f82:	0f 90       	pop	r0
    1f84:	08 be       	out	0x38, r0	; 56
    1f86:	0f 90       	pop	r0
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	0f 90       	pop	r0
    1f8c:	1f 90       	pop	r1
    1f8e:	18 95       	reti

00001f90 <__vector_86>:
    1f90:	1f 92       	push	r1
    1f92:	0f 92       	push	r0
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	0f 92       	push	r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	08 b6       	in	r0, 0x38	; 56
    1f9c:	0f 92       	push	r0
    1f9e:	18 be       	out	0x38, r1	; 56
    1fa0:	09 b6       	in	r0, 0x39	; 57
    1fa2:	0f 92       	push	r0
    1fa4:	19 be       	out	0x39, r1	; 57
    1fa6:	0b b6       	in	r0, 0x3b	; 59
    1fa8:	0f 92       	push	r0
    1faa:	1b be       	out	0x3b, r1	; 59
    1fac:	2f 93       	push	r18
    1fae:	3f 93       	push	r19
    1fb0:	4f 93       	push	r20
    1fb2:	5f 93       	push	r21
    1fb4:	6f 93       	push	r22
    1fb6:	7f 93       	push	r23
    1fb8:	8f 93       	push	r24
    1fba:	9f 93       	push	r25
    1fbc:	af 93       	push	r26
    1fbe:	bf 93       	push	r27
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
    1fc4:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tcd1_ccb_callback>
    1fc8:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tcd1_ccb_callback+0x1>
    1fcc:	30 97       	sbiw	r30, 0x00	; 0
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <__vector_86+0x42>
    1fd0:	19 95       	eicall
    1fd2:	ff 91       	pop	r31
    1fd4:	ef 91       	pop	r30
    1fd6:	bf 91       	pop	r27
    1fd8:	af 91       	pop	r26
    1fda:	9f 91       	pop	r25
    1fdc:	8f 91       	pop	r24
    1fde:	7f 91       	pop	r23
    1fe0:	6f 91       	pop	r22
    1fe2:	5f 91       	pop	r21
    1fe4:	4f 91       	pop	r20
    1fe6:	3f 91       	pop	r19
    1fe8:	2f 91       	pop	r18
    1fea:	0f 90       	pop	r0
    1fec:	0b be       	out	0x3b, r0	; 59
    1fee:	0f 90       	pop	r0
    1ff0:	09 be       	out	0x39, r0	; 57
    1ff2:	0f 90       	pop	r0
    1ff4:	08 be       	out	0x38, r0	; 56
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <__vector_47>:
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	0f 92       	push	r0
    2008:	11 24       	eor	r1, r1
    200a:	08 b6       	in	r0, 0x38	; 56
    200c:	0f 92       	push	r0
    200e:	18 be       	out	0x38, r1	; 56
    2010:	09 b6       	in	r0, 0x39	; 57
    2012:	0f 92       	push	r0
    2014:	19 be       	out	0x39, r1	; 57
    2016:	0b b6       	in	r0, 0x3b	; 59
    2018:	0f 92       	push	r0
    201a:	1b be       	out	0x3b, r1	; 59
    201c:	2f 93       	push	r18
    201e:	3f 93       	push	r19
    2020:	4f 93       	push	r20
    2022:	5f 93       	push	r21
    2024:	6f 93       	push	r22
    2026:	7f 93       	push	r23
    2028:	8f 93       	push	r24
    202a:	9f 93       	push	r25
    202c:	af 93       	push	r26
    202e:	bf 93       	push	r27
    2030:	ef 93       	push	r30
    2032:	ff 93       	push	r31
    2034:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tce0_ovf_callback>
    2038:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tce0_ovf_callback+0x1>
    203c:	30 97       	sbiw	r30, 0x00	; 0
    203e:	09 f0       	breq	.+2      	; 0x2042 <__vector_47+0x42>
    2040:	19 95       	eicall
    2042:	ff 91       	pop	r31
    2044:	ef 91       	pop	r30
    2046:	bf 91       	pop	r27
    2048:	af 91       	pop	r26
    204a:	9f 91       	pop	r25
    204c:	8f 91       	pop	r24
    204e:	7f 91       	pop	r23
    2050:	6f 91       	pop	r22
    2052:	5f 91       	pop	r21
    2054:	4f 91       	pop	r20
    2056:	3f 91       	pop	r19
    2058:	2f 91       	pop	r18
    205a:	0f 90       	pop	r0
    205c:	0b be       	out	0x3b, r0	; 59
    205e:	0f 90       	pop	r0
    2060:	09 be       	out	0x39, r0	; 57
    2062:	0f 90       	pop	r0
    2064:	08 be       	out	0x38, r0	; 56
    2066:	0f 90       	pop	r0
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	0f 90       	pop	r0
    206c:	1f 90       	pop	r1
    206e:	18 95       	reti

00002070 <__vector_48>:
    2070:	1f 92       	push	r1
    2072:	0f 92       	push	r0
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	0f 92       	push	r0
    2078:	11 24       	eor	r1, r1
    207a:	08 b6       	in	r0, 0x38	; 56
    207c:	0f 92       	push	r0
    207e:	18 be       	out	0x38, r1	; 56
    2080:	09 b6       	in	r0, 0x39	; 57
    2082:	0f 92       	push	r0
    2084:	19 be       	out	0x39, r1	; 57
    2086:	0b b6       	in	r0, 0x3b	; 59
    2088:	0f 92       	push	r0
    208a:	1b be       	out	0x3b, r1	; 59
    208c:	2f 93       	push	r18
    208e:	3f 93       	push	r19
    2090:	4f 93       	push	r20
    2092:	5f 93       	push	r21
    2094:	6f 93       	push	r22
    2096:	7f 93       	push	r23
    2098:	8f 93       	push	r24
    209a:	9f 93       	push	r25
    209c:	af 93       	push	r26
    209e:	bf 93       	push	r27
    20a0:	ef 93       	push	r30
    20a2:	ff 93       	push	r31
    20a4:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tce0_err_callback>
    20a8:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tce0_err_callback+0x1>
    20ac:	30 97       	sbiw	r30, 0x00	; 0
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <__vector_48+0x42>
    20b0:	19 95       	eicall
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	bf 91       	pop	r27
    20b8:	af 91       	pop	r26
    20ba:	9f 91       	pop	r25
    20bc:	8f 91       	pop	r24
    20be:	7f 91       	pop	r23
    20c0:	6f 91       	pop	r22
    20c2:	5f 91       	pop	r21
    20c4:	4f 91       	pop	r20
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0b be       	out	0x3b, r0	; 59
    20ce:	0f 90       	pop	r0
    20d0:	09 be       	out	0x39, r0	; 57
    20d2:	0f 90       	pop	r0
    20d4:	08 be       	out	0x38, r0	; 56
    20d6:	0f 90       	pop	r0
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	0f 90       	pop	r0
    20dc:	1f 90       	pop	r1
    20de:	18 95       	reti

000020e0 <__vector_49>:
    20e0:	1f 92       	push	r1
    20e2:	0f 92       	push	r0
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	0f 92       	push	r0
    20e8:	11 24       	eor	r1, r1
    20ea:	08 b6       	in	r0, 0x38	; 56
    20ec:	0f 92       	push	r0
    20ee:	18 be       	out	0x38, r1	; 56
    20f0:	09 b6       	in	r0, 0x39	; 57
    20f2:	0f 92       	push	r0
    20f4:	19 be       	out	0x39, r1	; 57
    20f6:	0b b6       	in	r0, 0x3b	; 59
    20f8:	0f 92       	push	r0
    20fa:	1b be       	out	0x3b, r1	; 59
    20fc:	2f 93       	push	r18
    20fe:	3f 93       	push	r19
    2100:	4f 93       	push	r20
    2102:	5f 93       	push	r21
    2104:	6f 93       	push	r22
    2106:	7f 93       	push	r23
    2108:	8f 93       	push	r24
    210a:	9f 93       	push	r25
    210c:	af 93       	push	r26
    210e:	bf 93       	push	r27
    2110:	ef 93       	push	r30
    2112:	ff 93       	push	r31
    2114:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tce0_cca_callback>
    2118:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tce0_cca_callback+0x1>
    211c:	30 97       	sbiw	r30, 0x00	; 0
    211e:	09 f0       	breq	.+2      	; 0x2122 <__vector_49+0x42>
    2120:	19 95       	eicall
    2122:	ff 91       	pop	r31
    2124:	ef 91       	pop	r30
    2126:	bf 91       	pop	r27
    2128:	af 91       	pop	r26
    212a:	9f 91       	pop	r25
    212c:	8f 91       	pop	r24
    212e:	7f 91       	pop	r23
    2130:	6f 91       	pop	r22
    2132:	5f 91       	pop	r21
    2134:	4f 91       	pop	r20
    2136:	3f 91       	pop	r19
    2138:	2f 91       	pop	r18
    213a:	0f 90       	pop	r0
    213c:	0b be       	out	0x3b, r0	; 59
    213e:	0f 90       	pop	r0
    2140:	09 be       	out	0x39, r0	; 57
    2142:	0f 90       	pop	r0
    2144:	08 be       	out	0x38, r0	; 56
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	0f 90       	pop	r0
    214c:	1f 90       	pop	r1
    214e:	18 95       	reti

00002150 <__vector_50>:
    2150:	1f 92       	push	r1
    2152:	0f 92       	push	r0
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	0f 92       	push	r0
    2158:	11 24       	eor	r1, r1
    215a:	08 b6       	in	r0, 0x38	; 56
    215c:	0f 92       	push	r0
    215e:	18 be       	out	0x38, r1	; 56
    2160:	09 b6       	in	r0, 0x39	; 57
    2162:	0f 92       	push	r0
    2164:	19 be       	out	0x39, r1	; 57
    2166:	0b b6       	in	r0, 0x3b	; 59
    2168:	0f 92       	push	r0
    216a:	1b be       	out	0x3b, r1	; 59
    216c:	2f 93       	push	r18
    216e:	3f 93       	push	r19
    2170:	4f 93       	push	r20
    2172:	5f 93       	push	r21
    2174:	6f 93       	push	r22
    2176:	7f 93       	push	r23
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
    2184:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tce0_ccb_callback>
    2188:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tce0_ccb_callback+0x1>
    218c:	30 97       	sbiw	r30, 0x00	; 0
    218e:	09 f0       	breq	.+2      	; 0x2192 <__vector_50+0x42>
    2190:	19 95       	eicall
    2192:	ff 91       	pop	r31
    2194:	ef 91       	pop	r30
    2196:	bf 91       	pop	r27
    2198:	af 91       	pop	r26
    219a:	9f 91       	pop	r25
    219c:	8f 91       	pop	r24
    219e:	7f 91       	pop	r23
    21a0:	6f 91       	pop	r22
    21a2:	5f 91       	pop	r21
    21a4:	4f 91       	pop	r20
    21a6:	3f 91       	pop	r19
    21a8:	2f 91       	pop	r18
    21aa:	0f 90       	pop	r0
    21ac:	0b be       	out	0x3b, r0	; 59
    21ae:	0f 90       	pop	r0
    21b0:	09 be       	out	0x39, r0	; 57
    21b2:	0f 90       	pop	r0
    21b4:	08 be       	out	0x38, r0	; 56
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti

000021c0 <__vector_51>:
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	08 b6       	in	r0, 0x38	; 56
    21cc:	0f 92       	push	r0
    21ce:	18 be       	out	0x38, r1	; 56
    21d0:	09 b6       	in	r0, 0x39	; 57
    21d2:	0f 92       	push	r0
    21d4:	19 be       	out	0x39, r1	; 57
    21d6:	0b b6       	in	r0, 0x3b	; 59
    21d8:	0f 92       	push	r0
    21da:	1b be       	out	0x3b, r1	; 59
    21dc:	2f 93       	push	r18
    21de:	3f 93       	push	r19
    21e0:	4f 93       	push	r20
    21e2:	5f 93       	push	r21
    21e4:	6f 93       	push	r22
    21e6:	7f 93       	push	r23
    21e8:	8f 93       	push	r24
    21ea:	9f 93       	push	r25
    21ec:	af 93       	push	r26
    21ee:	bf 93       	push	r27
    21f0:	ef 93       	push	r30
    21f2:	ff 93       	push	r31
    21f4:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tce0_ccc_callback>
    21f8:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tce0_ccc_callback+0x1>
    21fc:	30 97       	sbiw	r30, 0x00	; 0
    21fe:	09 f0       	breq	.+2      	; 0x2202 <__vector_51+0x42>
    2200:	19 95       	eicall
    2202:	ff 91       	pop	r31
    2204:	ef 91       	pop	r30
    2206:	bf 91       	pop	r27
    2208:	af 91       	pop	r26
    220a:	9f 91       	pop	r25
    220c:	8f 91       	pop	r24
    220e:	7f 91       	pop	r23
    2210:	6f 91       	pop	r22
    2212:	5f 91       	pop	r21
    2214:	4f 91       	pop	r20
    2216:	3f 91       	pop	r19
    2218:	2f 91       	pop	r18
    221a:	0f 90       	pop	r0
    221c:	0b be       	out	0x3b, r0	; 59
    221e:	0f 90       	pop	r0
    2220:	09 be       	out	0x39, r0	; 57
    2222:	0f 90       	pop	r0
    2224:	08 be       	out	0x38, r0	; 56
    2226:	0f 90       	pop	r0
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	0f 90       	pop	r0
    222c:	1f 90       	pop	r1
    222e:	18 95       	reti

00002230 <__vector_52>:
    2230:	1f 92       	push	r1
    2232:	0f 92       	push	r0
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	0f 92       	push	r0
    2238:	11 24       	eor	r1, r1
    223a:	08 b6       	in	r0, 0x38	; 56
    223c:	0f 92       	push	r0
    223e:	18 be       	out	0x38, r1	; 56
    2240:	09 b6       	in	r0, 0x39	; 57
    2242:	0f 92       	push	r0
    2244:	19 be       	out	0x39, r1	; 57
    2246:	0b b6       	in	r0, 0x3b	; 59
    2248:	0f 92       	push	r0
    224a:	1b be       	out	0x3b, r1	; 59
    224c:	2f 93       	push	r18
    224e:	3f 93       	push	r19
    2250:	4f 93       	push	r20
    2252:	5f 93       	push	r21
    2254:	6f 93       	push	r22
    2256:	7f 93       	push	r23
    2258:	8f 93       	push	r24
    225a:	9f 93       	push	r25
    225c:	af 93       	push	r26
    225e:	bf 93       	push	r27
    2260:	ef 93       	push	r30
    2262:	ff 93       	push	r31
    2264:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tce0_ccd_callback>
    2268:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tce0_ccd_callback+0x1>
    226c:	30 97       	sbiw	r30, 0x00	; 0
    226e:	09 f0       	breq	.+2      	; 0x2272 <__vector_52+0x42>
    2270:	19 95       	eicall
    2272:	ff 91       	pop	r31
    2274:	ef 91       	pop	r30
    2276:	bf 91       	pop	r27
    2278:	af 91       	pop	r26
    227a:	9f 91       	pop	r25
    227c:	8f 91       	pop	r24
    227e:	7f 91       	pop	r23
    2280:	6f 91       	pop	r22
    2282:	5f 91       	pop	r21
    2284:	4f 91       	pop	r20
    2286:	3f 91       	pop	r19
    2288:	2f 91       	pop	r18
    228a:	0f 90       	pop	r0
    228c:	0b be       	out	0x3b, r0	; 59
    228e:	0f 90       	pop	r0
    2290:	09 be       	out	0x39, r0	; 57
    2292:	0f 90       	pop	r0
    2294:	08 be       	out	0x38, r0	; 56
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	0f 90       	pop	r0
    229c:	1f 90       	pop	r1
    229e:	18 95       	reti

000022a0 <__vector_53>:
    22a0:	1f 92       	push	r1
    22a2:	0f 92       	push	r0
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	0f 92       	push	r0
    22a8:	11 24       	eor	r1, r1
    22aa:	08 b6       	in	r0, 0x38	; 56
    22ac:	0f 92       	push	r0
    22ae:	18 be       	out	0x38, r1	; 56
    22b0:	09 b6       	in	r0, 0x39	; 57
    22b2:	0f 92       	push	r0
    22b4:	19 be       	out	0x39, r1	; 57
    22b6:	0b b6       	in	r0, 0x3b	; 59
    22b8:	0f 92       	push	r0
    22ba:	1b be       	out	0x3b, r1	; 59
    22bc:	2f 93       	push	r18
    22be:	3f 93       	push	r19
    22c0:	4f 93       	push	r20
    22c2:	5f 93       	push	r21
    22c4:	6f 93       	push	r22
    22c6:	7f 93       	push	r23
    22c8:	8f 93       	push	r24
    22ca:	9f 93       	push	r25
    22cc:	af 93       	push	r26
    22ce:	bf 93       	push	r27
    22d0:	ef 93       	push	r30
    22d2:	ff 93       	push	r31
    22d4:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tce1_ovf_callback>
    22d8:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tce1_ovf_callback+0x1>
    22dc:	30 97       	sbiw	r30, 0x00	; 0
    22de:	09 f0       	breq	.+2      	; 0x22e2 <__vector_53+0x42>
    22e0:	19 95       	eicall
    22e2:	ff 91       	pop	r31
    22e4:	ef 91       	pop	r30
    22e6:	bf 91       	pop	r27
    22e8:	af 91       	pop	r26
    22ea:	9f 91       	pop	r25
    22ec:	8f 91       	pop	r24
    22ee:	7f 91       	pop	r23
    22f0:	6f 91       	pop	r22
    22f2:	5f 91       	pop	r21
    22f4:	4f 91       	pop	r20
    22f6:	3f 91       	pop	r19
    22f8:	2f 91       	pop	r18
    22fa:	0f 90       	pop	r0
    22fc:	0b be       	out	0x3b, r0	; 59
    22fe:	0f 90       	pop	r0
    2300:	09 be       	out	0x39, r0	; 57
    2302:	0f 90       	pop	r0
    2304:	08 be       	out	0x38, r0	; 56
    2306:	0f 90       	pop	r0
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	0f 90       	pop	r0
    230c:	1f 90       	pop	r1
    230e:	18 95       	reti

00002310 <__vector_54>:
    2310:	1f 92       	push	r1
    2312:	0f 92       	push	r0
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	0f 92       	push	r0
    2318:	11 24       	eor	r1, r1
    231a:	08 b6       	in	r0, 0x38	; 56
    231c:	0f 92       	push	r0
    231e:	18 be       	out	0x38, r1	; 56
    2320:	09 b6       	in	r0, 0x39	; 57
    2322:	0f 92       	push	r0
    2324:	19 be       	out	0x39, r1	; 57
    2326:	0b b6       	in	r0, 0x3b	; 59
    2328:	0f 92       	push	r0
    232a:	1b be       	out	0x3b, r1	; 59
    232c:	2f 93       	push	r18
    232e:	3f 93       	push	r19
    2330:	4f 93       	push	r20
    2332:	5f 93       	push	r21
    2334:	6f 93       	push	r22
    2336:	7f 93       	push	r23
    2338:	8f 93       	push	r24
    233a:	9f 93       	push	r25
    233c:	af 93       	push	r26
    233e:	bf 93       	push	r27
    2340:	ef 93       	push	r30
    2342:	ff 93       	push	r31
    2344:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tce1_err_callback>
    2348:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tce1_err_callback+0x1>
    234c:	30 97       	sbiw	r30, 0x00	; 0
    234e:	09 f0       	breq	.+2      	; 0x2352 <__vector_54+0x42>
    2350:	19 95       	eicall
    2352:	ff 91       	pop	r31
    2354:	ef 91       	pop	r30
    2356:	bf 91       	pop	r27
    2358:	af 91       	pop	r26
    235a:	9f 91       	pop	r25
    235c:	8f 91       	pop	r24
    235e:	7f 91       	pop	r23
    2360:	6f 91       	pop	r22
    2362:	5f 91       	pop	r21
    2364:	4f 91       	pop	r20
    2366:	3f 91       	pop	r19
    2368:	2f 91       	pop	r18
    236a:	0f 90       	pop	r0
    236c:	0b be       	out	0x3b, r0	; 59
    236e:	0f 90       	pop	r0
    2370:	09 be       	out	0x39, r0	; 57
    2372:	0f 90       	pop	r0
    2374:	08 be       	out	0x38, r0	; 56
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	0f 90       	pop	r0
    237c:	1f 90       	pop	r1
    237e:	18 95       	reti

00002380 <__vector_55>:
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	08 b6       	in	r0, 0x38	; 56
    238c:	0f 92       	push	r0
    238e:	18 be       	out	0x38, r1	; 56
    2390:	09 b6       	in	r0, 0x39	; 57
    2392:	0f 92       	push	r0
    2394:	19 be       	out	0x39, r1	; 57
    2396:	0b b6       	in	r0, 0x3b	; 59
    2398:	0f 92       	push	r0
    239a:	1b be       	out	0x3b, r1	; 59
    239c:	2f 93       	push	r18
    239e:	3f 93       	push	r19
    23a0:	4f 93       	push	r20
    23a2:	5f 93       	push	r21
    23a4:	6f 93       	push	r22
    23a6:	7f 93       	push	r23
    23a8:	8f 93       	push	r24
    23aa:	9f 93       	push	r25
    23ac:	af 93       	push	r26
    23ae:	bf 93       	push	r27
    23b0:	ef 93       	push	r30
    23b2:	ff 93       	push	r31
    23b4:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tce1_cca_callback>
    23b8:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tce1_cca_callback+0x1>
    23bc:	30 97       	sbiw	r30, 0x00	; 0
    23be:	09 f0       	breq	.+2      	; 0x23c2 <__vector_55+0x42>
    23c0:	19 95       	eicall
    23c2:	ff 91       	pop	r31
    23c4:	ef 91       	pop	r30
    23c6:	bf 91       	pop	r27
    23c8:	af 91       	pop	r26
    23ca:	9f 91       	pop	r25
    23cc:	8f 91       	pop	r24
    23ce:	7f 91       	pop	r23
    23d0:	6f 91       	pop	r22
    23d2:	5f 91       	pop	r21
    23d4:	4f 91       	pop	r20
    23d6:	3f 91       	pop	r19
    23d8:	2f 91       	pop	r18
    23da:	0f 90       	pop	r0
    23dc:	0b be       	out	0x3b, r0	; 59
    23de:	0f 90       	pop	r0
    23e0:	09 be       	out	0x39, r0	; 57
    23e2:	0f 90       	pop	r0
    23e4:	08 be       	out	0x38, r0	; 56
    23e6:	0f 90       	pop	r0
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	0f 90       	pop	r0
    23ec:	1f 90       	pop	r1
    23ee:	18 95       	reti

000023f0 <__vector_56>:
    23f0:	1f 92       	push	r1
    23f2:	0f 92       	push	r0
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	0f 92       	push	r0
    23f8:	11 24       	eor	r1, r1
    23fa:	08 b6       	in	r0, 0x38	; 56
    23fc:	0f 92       	push	r0
    23fe:	18 be       	out	0x38, r1	; 56
    2400:	09 b6       	in	r0, 0x39	; 57
    2402:	0f 92       	push	r0
    2404:	19 be       	out	0x39, r1	; 57
    2406:	0b b6       	in	r0, 0x3b	; 59
    2408:	0f 92       	push	r0
    240a:	1b be       	out	0x3b, r1	; 59
    240c:	2f 93       	push	r18
    240e:	3f 93       	push	r19
    2410:	4f 93       	push	r20
    2412:	5f 93       	push	r21
    2414:	6f 93       	push	r22
    2416:	7f 93       	push	r23
    2418:	8f 93       	push	r24
    241a:	9f 93       	push	r25
    241c:	af 93       	push	r26
    241e:	bf 93       	push	r27
    2420:	ef 93       	push	r30
    2422:	ff 93       	push	r31
    2424:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tce1_ccb_callback>
    2428:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tce1_ccb_callback+0x1>
    242c:	30 97       	sbiw	r30, 0x00	; 0
    242e:	09 f0       	breq	.+2      	; 0x2432 <__vector_56+0x42>
    2430:	19 95       	eicall
    2432:	ff 91       	pop	r31
    2434:	ef 91       	pop	r30
    2436:	bf 91       	pop	r27
    2438:	af 91       	pop	r26
    243a:	9f 91       	pop	r25
    243c:	8f 91       	pop	r24
    243e:	7f 91       	pop	r23
    2440:	6f 91       	pop	r22
    2442:	5f 91       	pop	r21
    2444:	4f 91       	pop	r20
    2446:	3f 91       	pop	r19
    2448:	2f 91       	pop	r18
    244a:	0f 90       	pop	r0
    244c:	0b be       	out	0x3b, r0	; 59
    244e:	0f 90       	pop	r0
    2450:	09 be       	out	0x39, r0	; 57
    2452:	0f 90       	pop	r0
    2454:	08 be       	out	0x38, r0	; 56
    2456:	0f 90       	pop	r0
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	0f 90       	pop	r0
    245c:	1f 90       	pop	r1
    245e:	18 95       	reti

00002460 <__vector_108>:
    2460:	1f 92       	push	r1
    2462:	0f 92       	push	r0
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	0f 92       	push	r0
    2468:	11 24       	eor	r1, r1
    246a:	08 b6       	in	r0, 0x38	; 56
    246c:	0f 92       	push	r0
    246e:	18 be       	out	0x38, r1	; 56
    2470:	09 b6       	in	r0, 0x39	; 57
    2472:	0f 92       	push	r0
    2474:	19 be       	out	0x39, r1	; 57
    2476:	0b b6       	in	r0, 0x3b	; 59
    2478:	0f 92       	push	r0
    247a:	1b be       	out	0x3b, r1	; 59
    247c:	2f 93       	push	r18
    247e:	3f 93       	push	r19
    2480:	4f 93       	push	r20
    2482:	5f 93       	push	r21
    2484:	6f 93       	push	r22
    2486:	7f 93       	push	r23
    2488:	8f 93       	push	r24
    248a:	9f 93       	push	r25
    248c:	af 93       	push	r26
    248e:	bf 93       	push	r27
    2490:	ef 93       	push	r30
    2492:	ff 93       	push	r31
    2494:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tcf0_ovf_callback>
    2498:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tcf0_ovf_callback+0x1>
    249c:	30 97       	sbiw	r30, 0x00	; 0
    249e:	09 f0       	breq	.+2      	; 0x24a2 <__vector_108+0x42>
    24a0:	19 95       	eicall
    24a2:	ff 91       	pop	r31
    24a4:	ef 91       	pop	r30
    24a6:	bf 91       	pop	r27
    24a8:	af 91       	pop	r26
    24aa:	9f 91       	pop	r25
    24ac:	8f 91       	pop	r24
    24ae:	7f 91       	pop	r23
    24b0:	6f 91       	pop	r22
    24b2:	5f 91       	pop	r21
    24b4:	4f 91       	pop	r20
    24b6:	3f 91       	pop	r19
    24b8:	2f 91       	pop	r18
    24ba:	0f 90       	pop	r0
    24bc:	0b be       	out	0x3b, r0	; 59
    24be:	0f 90       	pop	r0
    24c0:	09 be       	out	0x39, r0	; 57
    24c2:	0f 90       	pop	r0
    24c4:	08 be       	out	0x38, r0	; 56
    24c6:	0f 90       	pop	r0
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	0f 90       	pop	r0
    24cc:	1f 90       	pop	r1
    24ce:	18 95       	reti

000024d0 <__vector_109>:
    24d0:	1f 92       	push	r1
    24d2:	0f 92       	push	r0
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	0f 92       	push	r0
    24d8:	11 24       	eor	r1, r1
    24da:	08 b6       	in	r0, 0x38	; 56
    24dc:	0f 92       	push	r0
    24de:	18 be       	out	0x38, r1	; 56
    24e0:	09 b6       	in	r0, 0x39	; 57
    24e2:	0f 92       	push	r0
    24e4:	19 be       	out	0x39, r1	; 57
    24e6:	0b b6       	in	r0, 0x3b	; 59
    24e8:	0f 92       	push	r0
    24ea:	1b be       	out	0x3b, r1	; 59
    24ec:	2f 93       	push	r18
    24ee:	3f 93       	push	r19
    24f0:	4f 93       	push	r20
    24f2:	5f 93       	push	r21
    24f4:	6f 93       	push	r22
    24f6:	7f 93       	push	r23
    24f8:	8f 93       	push	r24
    24fa:	9f 93       	push	r25
    24fc:	af 93       	push	r26
    24fe:	bf 93       	push	r27
    2500:	ef 93       	push	r30
    2502:	ff 93       	push	r31
    2504:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tcf0_err_callback>
    2508:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tcf0_err_callback+0x1>
    250c:	30 97       	sbiw	r30, 0x00	; 0
    250e:	09 f0       	breq	.+2      	; 0x2512 <__vector_109+0x42>
    2510:	19 95       	eicall
    2512:	ff 91       	pop	r31
    2514:	ef 91       	pop	r30
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	0f 90       	pop	r0
    252c:	0b be       	out	0x3b, r0	; 59
    252e:	0f 90       	pop	r0
    2530:	09 be       	out	0x39, r0	; 57
    2532:	0f 90       	pop	r0
    2534:	08 be       	out	0x38, r0	; 56
    2536:	0f 90       	pop	r0
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	0f 90       	pop	r0
    253c:	1f 90       	pop	r1
    253e:	18 95       	reti

00002540 <__vector_110>:
    2540:	1f 92       	push	r1
    2542:	0f 92       	push	r0
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	0f 92       	push	r0
    2548:	11 24       	eor	r1, r1
    254a:	08 b6       	in	r0, 0x38	; 56
    254c:	0f 92       	push	r0
    254e:	18 be       	out	0x38, r1	; 56
    2550:	09 b6       	in	r0, 0x39	; 57
    2552:	0f 92       	push	r0
    2554:	19 be       	out	0x39, r1	; 57
    2556:	0b b6       	in	r0, 0x3b	; 59
    2558:	0f 92       	push	r0
    255a:	1b be       	out	0x3b, r1	; 59
    255c:	2f 93       	push	r18
    255e:	3f 93       	push	r19
    2560:	4f 93       	push	r20
    2562:	5f 93       	push	r21
    2564:	6f 93       	push	r22
    2566:	7f 93       	push	r23
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	ef 93       	push	r30
    2572:	ff 93       	push	r31
    2574:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tcf0_cca_callback>
    2578:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tcf0_cca_callback+0x1>
    257c:	30 97       	sbiw	r30, 0x00	; 0
    257e:	09 f0       	breq	.+2      	; 0x2582 <__vector_110+0x42>
    2580:	19 95       	eicall
    2582:	ff 91       	pop	r31
    2584:	ef 91       	pop	r30
    2586:	bf 91       	pop	r27
    2588:	af 91       	pop	r26
    258a:	9f 91       	pop	r25
    258c:	8f 91       	pop	r24
    258e:	7f 91       	pop	r23
    2590:	6f 91       	pop	r22
    2592:	5f 91       	pop	r21
    2594:	4f 91       	pop	r20
    2596:	3f 91       	pop	r19
    2598:	2f 91       	pop	r18
    259a:	0f 90       	pop	r0
    259c:	0b be       	out	0x3b, r0	; 59
    259e:	0f 90       	pop	r0
    25a0:	09 be       	out	0x39, r0	; 57
    25a2:	0f 90       	pop	r0
    25a4:	08 be       	out	0x38, r0	; 56
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <__vector_111>:
    25b0:	1f 92       	push	r1
    25b2:	0f 92       	push	r0
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	0f 92       	push	r0
    25b8:	11 24       	eor	r1, r1
    25ba:	08 b6       	in	r0, 0x38	; 56
    25bc:	0f 92       	push	r0
    25be:	18 be       	out	0x38, r1	; 56
    25c0:	09 b6       	in	r0, 0x39	; 57
    25c2:	0f 92       	push	r0
    25c4:	19 be       	out	0x39, r1	; 57
    25c6:	0b b6       	in	r0, 0x3b	; 59
    25c8:	0f 92       	push	r0
    25ca:	1b be       	out	0x3b, r1	; 59
    25cc:	2f 93       	push	r18
    25ce:	3f 93       	push	r19
    25d0:	4f 93       	push	r20
    25d2:	5f 93       	push	r21
    25d4:	6f 93       	push	r22
    25d6:	7f 93       	push	r23
    25d8:	8f 93       	push	r24
    25da:	9f 93       	push	r25
    25dc:	af 93       	push	r26
    25de:	bf 93       	push	r27
    25e0:	ef 93       	push	r30
    25e2:	ff 93       	push	r31
    25e4:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tcf0_ccb_callback>
    25e8:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tcf0_ccb_callback+0x1>
    25ec:	30 97       	sbiw	r30, 0x00	; 0
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <__vector_111+0x42>
    25f0:	19 95       	eicall
    25f2:	ff 91       	pop	r31
    25f4:	ef 91       	pop	r30
    25f6:	bf 91       	pop	r27
    25f8:	af 91       	pop	r26
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	7f 91       	pop	r23
    2600:	6f 91       	pop	r22
    2602:	5f 91       	pop	r21
    2604:	4f 91       	pop	r20
    2606:	3f 91       	pop	r19
    2608:	2f 91       	pop	r18
    260a:	0f 90       	pop	r0
    260c:	0b be       	out	0x3b, r0	; 59
    260e:	0f 90       	pop	r0
    2610:	09 be       	out	0x39, r0	; 57
    2612:	0f 90       	pop	r0
    2614:	08 be       	out	0x38, r0	; 56
    2616:	0f 90       	pop	r0
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	0f 90       	pop	r0
    261c:	1f 90       	pop	r1
    261e:	18 95       	reti

00002620 <__vector_112>:
    2620:	1f 92       	push	r1
    2622:	0f 92       	push	r0
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	0f 92       	push	r0
    2628:	11 24       	eor	r1, r1
    262a:	08 b6       	in	r0, 0x38	; 56
    262c:	0f 92       	push	r0
    262e:	18 be       	out	0x38, r1	; 56
    2630:	09 b6       	in	r0, 0x39	; 57
    2632:	0f 92       	push	r0
    2634:	19 be       	out	0x39, r1	; 57
    2636:	0b b6       	in	r0, 0x3b	; 59
    2638:	0f 92       	push	r0
    263a:	1b be       	out	0x3b, r1	; 59
    263c:	2f 93       	push	r18
    263e:	3f 93       	push	r19
    2640:	4f 93       	push	r20
    2642:	5f 93       	push	r21
    2644:	6f 93       	push	r22
    2646:	7f 93       	push	r23
    2648:	8f 93       	push	r24
    264a:	9f 93       	push	r25
    264c:	af 93       	push	r26
    264e:	bf 93       	push	r27
    2650:	ef 93       	push	r30
    2652:	ff 93       	push	r31
    2654:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tcf0_ccc_callback>
    2658:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tcf0_ccc_callback+0x1>
    265c:	30 97       	sbiw	r30, 0x00	; 0
    265e:	09 f0       	breq	.+2      	; 0x2662 <__vector_112+0x42>
    2660:	19 95       	eicall
    2662:	ff 91       	pop	r31
    2664:	ef 91       	pop	r30
    2666:	bf 91       	pop	r27
    2668:	af 91       	pop	r26
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	7f 91       	pop	r23
    2670:	6f 91       	pop	r22
    2672:	5f 91       	pop	r21
    2674:	4f 91       	pop	r20
    2676:	3f 91       	pop	r19
    2678:	2f 91       	pop	r18
    267a:	0f 90       	pop	r0
    267c:	0b be       	out	0x3b, r0	; 59
    267e:	0f 90       	pop	r0
    2680:	09 be       	out	0x39, r0	; 57
    2682:	0f 90       	pop	r0
    2684:	08 be       	out	0x38, r0	; 56
    2686:	0f 90       	pop	r0
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	0f 90       	pop	r0
    268c:	1f 90       	pop	r1
    268e:	18 95       	reti

00002690 <__vector_113>:
    2690:	1f 92       	push	r1
    2692:	0f 92       	push	r0
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	0f 92       	push	r0
    2698:	11 24       	eor	r1, r1
    269a:	08 b6       	in	r0, 0x38	; 56
    269c:	0f 92       	push	r0
    269e:	18 be       	out	0x38, r1	; 56
    26a0:	09 b6       	in	r0, 0x39	; 57
    26a2:	0f 92       	push	r0
    26a4:	19 be       	out	0x39, r1	; 57
    26a6:	0b b6       	in	r0, 0x3b	; 59
    26a8:	0f 92       	push	r0
    26aa:	1b be       	out	0x3b, r1	; 59
    26ac:	2f 93       	push	r18
    26ae:	3f 93       	push	r19
    26b0:	4f 93       	push	r20
    26b2:	5f 93       	push	r21
    26b4:	6f 93       	push	r22
    26b6:	7f 93       	push	r23
    26b8:	8f 93       	push	r24
    26ba:	9f 93       	push	r25
    26bc:	af 93       	push	r26
    26be:	bf 93       	push	r27
    26c0:	ef 93       	push	r30
    26c2:	ff 93       	push	r31
    26c4:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tcf0_ccd_callback>
    26c8:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tcf0_ccd_callback+0x1>
    26cc:	30 97       	sbiw	r30, 0x00	; 0
    26ce:	09 f0       	breq	.+2      	; 0x26d2 <__vector_113+0x42>
    26d0:	19 95       	eicall
    26d2:	ff 91       	pop	r31
    26d4:	ef 91       	pop	r30
    26d6:	bf 91       	pop	r27
    26d8:	af 91       	pop	r26
    26da:	9f 91       	pop	r25
    26dc:	8f 91       	pop	r24
    26de:	7f 91       	pop	r23
    26e0:	6f 91       	pop	r22
    26e2:	5f 91       	pop	r21
    26e4:	4f 91       	pop	r20
    26e6:	3f 91       	pop	r19
    26e8:	2f 91       	pop	r18
    26ea:	0f 90       	pop	r0
    26ec:	0b be       	out	0x3b, r0	; 59
    26ee:	0f 90       	pop	r0
    26f0:	09 be       	out	0x39, r0	; 57
    26f2:	0f 90       	pop	r0
    26f4:	08 be       	out	0x38, r0	; 56
    26f6:	0f 90       	pop	r0
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	0f 90       	pop	r0
    26fc:	1f 90       	pop	r1
    26fe:	18 95       	reti

00002700 <__vector_114>:
    2700:	1f 92       	push	r1
    2702:	0f 92       	push	r0
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	0f 92       	push	r0
    2708:	11 24       	eor	r1, r1
    270a:	08 b6       	in	r0, 0x38	; 56
    270c:	0f 92       	push	r0
    270e:	18 be       	out	0x38, r1	; 56
    2710:	09 b6       	in	r0, 0x39	; 57
    2712:	0f 92       	push	r0
    2714:	19 be       	out	0x39, r1	; 57
    2716:	0b b6       	in	r0, 0x3b	; 59
    2718:	0f 92       	push	r0
    271a:	1b be       	out	0x3b, r1	; 59
    271c:	2f 93       	push	r18
    271e:	3f 93       	push	r19
    2720:	4f 93       	push	r20
    2722:	5f 93       	push	r21
    2724:	6f 93       	push	r22
    2726:	7f 93       	push	r23
    2728:	8f 93       	push	r24
    272a:	9f 93       	push	r25
    272c:	af 93       	push	r26
    272e:	bf 93       	push	r27
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
    2734:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <tc_tcf1_ovf_callback>
    2738:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <tc_tcf1_ovf_callback+0x1>
    273c:	30 97       	sbiw	r30, 0x00	; 0
    273e:	09 f0       	breq	.+2      	; 0x2742 <__vector_114+0x42>
    2740:	19 95       	eicall
    2742:	ff 91       	pop	r31
    2744:	ef 91       	pop	r30
    2746:	bf 91       	pop	r27
    2748:	af 91       	pop	r26
    274a:	9f 91       	pop	r25
    274c:	8f 91       	pop	r24
    274e:	7f 91       	pop	r23
    2750:	6f 91       	pop	r22
    2752:	5f 91       	pop	r21
    2754:	4f 91       	pop	r20
    2756:	3f 91       	pop	r19
    2758:	2f 91       	pop	r18
    275a:	0f 90       	pop	r0
    275c:	0b be       	out	0x3b, r0	; 59
    275e:	0f 90       	pop	r0
    2760:	09 be       	out	0x39, r0	; 57
    2762:	0f 90       	pop	r0
    2764:	08 be       	out	0x38, r0	; 56
    2766:	0f 90       	pop	r0
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	0f 90       	pop	r0
    276c:	1f 90       	pop	r1
    276e:	18 95       	reti

00002770 <__vector_115>:
    2770:	1f 92       	push	r1
    2772:	0f 92       	push	r0
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	0f 92       	push	r0
    2778:	11 24       	eor	r1, r1
    277a:	08 b6       	in	r0, 0x38	; 56
    277c:	0f 92       	push	r0
    277e:	18 be       	out	0x38, r1	; 56
    2780:	09 b6       	in	r0, 0x39	; 57
    2782:	0f 92       	push	r0
    2784:	19 be       	out	0x39, r1	; 57
    2786:	0b b6       	in	r0, 0x3b	; 59
    2788:	0f 92       	push	r0
    278a:	1b be       	out	0x3b, r1	; 59
    278c:	2f 93       	push	r18
    278e:	3f 93       	push	r19
    2790:	4f 93       	push	r20
    2792:	5f 93       	push	r21
    2794:	6f 93       	push	r22
    2796:	7f 93       	push	r23
    2798:	8f 93       	push	r24
    279a:	9f 93       	push	r25
    279c:	af 93       	push	r26
    279e:	bf 93       	push	r27
    27a0:	ef 93       	push	r30
    27a2:	ff 93       	push	r31
    27a4:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <tc_tcf1_err_callback>
    27a8:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <tc_tcf1_err_callback+0x1>
    27ac:	30 97       	sbiw	r30, 0x00	; 0
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <__vector_115+0x42>
    27b0:	19 95       	eicall
    27b2:	ff 91       	pop	r31
    27b4:	ef 91       	pop	r30
    27b6:	bf 91       	pop	r27
    27b8:	af 91       	pop	r26
    27ba:	9f 91       	pop	r25
    27bc:	8f 91       	pop	r24
    27be:	7f 91       	pop	r23
    27c0:	6f 91       	pop	r22
    27c2:	5f 91       	pop	r21
    27c4:	4f 91       	pop	r20
    27c6:	3f 91       	pop	r19
    27c8:	2f 91       	pop	r18
    27ca:	0f 90       	pop	r0
    27cc:	0b be       	out	0x3b, r0	; 59
    27ce:	0f 90       	pop	r0
    27d0:	09 be       	out	0x39, r0	; 57
    27d2:	0f 90       	pop	r0
    27d4:	08 be       	out	0x38, r0	; 56
    27d6:	0f 90       	pop	r0
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	0f 90       	pop	r0
    27dc:	1f 90       	pop	r1
    27de:	18 95       	reti

000027e0 <__vector_116>:
    27e0:	1f 92       	push	r1
    27e2:	0f 92       	push	r0
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	0f 92       	push	r0
    27e8:	11 24       	eor	r1, r1
    27ea:	08 b6       	in	r0, 0x38	; 56
    27ec:	0f 92       	push	r0
    27ee:	18 be       	out	0x38, r1	; 56
    27f0:	09 b6       	in	r0, 0x39	; 57
    27f2:	0f 92       	push	r0
    27f4:	19 be       	out	0x39, r1	; 57
    27f6:	0b b6       	in	r0, 0x3b	; 59
    27f8:	0f 92       	push	r0
    27fa:	1b be       	out	0x3b, r1	; 59
    27fc:	2f 93       	push	r18
    27fe:	3f 93       	push	r19
    2800:	4f 93       	push	r20
    2802:	5f 93       	push	r21
    2804:	6f 93       	push	r22
    2806:	7f 93       	push	r23
    2808:	8f 93       	push	r24
    280a:	9f 93       	push	r25
    280c:	af 93       	push	r26
    280e:	bf 93       	push	r27
    2810:	ef 93       	push	r30
    2812:	ff 93       	push	r31
    2814:	e0 91 89 20 	lds	r30, 0x2089	; 0x802089 <tc_tcf1_cca_callback>
    2818:	f0 91 8a 20 	lds	r31, 0x208A	; 0x80208a <tc_tcf1_cca_callback+0x1>
    281c:	30 97       	sbiw	r30, 0x00	; 0
    281e:	09 f0       	breq	.+2      	; 0x2822 <__vector_116+0x42>
    2820:	19 95       	eicall
    2822:	ff 91       	pop	r31
    2824:	ef 91       	pop	r30
    2826:	bf 91       	pop	r27
    2828:	af 91       	pop	r26
    282a:	9f 91       	pop	r25
    282c:	8f 91       	pop	r24
    282e:	7f 91       	pop	r23
    2830:	6f 91       	pop	r22
    2832:	5f 91       	pop	r21
    2834:	4f 91       	pop	r20
    2836:	3f 91       	pop	r19
    2838:	2f 91       	pop	r18
    283a:	0f 90       	pop	r0
    283c:	0b be       	out	0x3b, r0	; 59
    283e:	0f 90       	pop	r0
    2840:	09 be       	out	0x39, r0	; 57
    2842:	0f 90       	pop	r0
    2844:	08 be       	out	0x38, r0	; 56
    2846:	0f 90       	pop	r0
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	0f 90       	pop	r0
    284c:	1f 90       	pop	r1
    284e:	18 95       	reti

00002850 <__vector_117>:
    2850:	1f 92       	push	r1
    2852:	0f 92       	push	r0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	0f 92       	push	r0
    2858:	11 24       	eor	r1, r1
    285a:	08 b6       	in	r0, 0x38	; 56
    285c:	0f 92       	push	r0
    285e:	18 be       	out	0x38, r1	; 56
    2860:	09 b6       	in	r0, 0x39	; 57
    2862:	0f 92       	push	r0
    2864:	19 be       	out	0x39, r1	; 57
    2866:	0b b6       	in	r0, 0x3b	; 59
    2868:	0f 92       	push	r0
    286a:	1b be       	out	0x3b, r1	; 59
    286c:	2f 93       	push	r18
    286e:	3f 93       	push	r19
    2870:	4f 93       	push	r20
    2872:	5f 93       	push	r21
    2874:	6f 93       	push	r22
    2876:	7f 93       	push	r23
    2878:	8f 93       	push	r24
    287a:	9f 93       	push	r25
    287c:	af 93       	push	r26
    287e:	bf 93       	push	r27
    2880:	ef 93       	push	r30
    2882:	ff 93       	push	r31
    2884:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <tc_tcf1_ccb_callback>
    2888:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <tc_tcf1_ccb_callback+0x1>
    288c:	30 97       	sbiw	r30, 0x00	; 0
    288e:	09 f0       	breq	.+2      	; 0x2892 <__vector_117+0x42>
    2890:	19 95       	eicall
    2892:	ff 91       	pop	r31
    2894:	ef 91       	pop	r30
    2896:	bf 91       	pop	r27
    2898:	af 91       	pop	r26
    289a:	9f 91       	pop	r25
    289c:	8f 91       	pop	r24
    289e:	7f 91       	pop	r23
    28a0:	6f 91       	pop	r22
    28a2:	5f 91       	pop	r21
    28a4:	4f 91       	pop	r20
    28a6:	3f 91       	pop	r19
    28a8:	2f 91       	pop	r18
    28aa:	0f 90       	pop	r0
    28ac:	0b be       	out	0x3b, r0	; 59
    28ae:	0f 90       	pop	r0
    28b0:	09 be       	out	0x39, r0	; 57
    28b2:	0f 90       	pop	r0
    28b4:	08 be       	out	0x38, r0	; 56
    28b6:	0f 90       	pop	r0
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	0f 90       	pop	r0
    28bc:	1f 90       	pop	r1
    28be:	18 95       	reti

000028c0 <tc_enable>:
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	1f 92       	push	r1
    28c8:	1f 92       	push	r1
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	2f b7       	in	r18, 0x3f	; 63
    28d0:	2a 83       	std	Y+2, r18	; 0x02
    28d2:	f8 94       	cli
    28d4:	1a 81       	ldd	r17, Y+2	; 0x02
    28d6:	28 2f       	mov	r18, r24
    28d8:	39 2f       	mov	r19, r25
    28da:	21 15       	cp	r18, r1
    28dc:	88 e0       	ldi	r24, 0x08	; 8
    28de:	38 07       	cpc	r19, r24
    28e0:	49 f4       	brne	.+18     	; 0x28f4 <tc_enable+0x34>
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	83 e0       	ldi	r24, 0x03	; 3
    28e6:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    28ea:	64 e0       	ldi	r22, 0x04	; 4
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    28f2:	5c c0       	rjmp	.+184    	; 0x29ac <tc_enable+0xec>
    28f4:	20 34       	cpi	r18, 0x40	; 64
    28f6:	88 e0       	ldi	r24, 0x08	; 8
    28f8:	38 07       	cpc	r19, r24
    28fa:	49 f4       	brne	.+18     	; 0x290e <tc_enable+0x4e>
    28fc:	62 e0       	ldi	r22, 0x02	; 2
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    2904:	64 e0       	ldi	r22, 0x04	; 4
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    290c:	4f c0       	rjmp	.+158    	; 0x29ac <tc_enable+0xec>
    290e:	21 15       	cp	r18, r1
    2910:	89 e0       	ldi	r24, 0x09	; 9
    2912:	38 07       	cpc	r19, r24
    2914:	49 f4       	brne	.+18     	; 0x2928 <tc_enable+0x68>
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	84 e0       	ldi	r24, 0x04	; 4
    291a:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    291e:	64 e0       	ldi	r22, 0x04	; 4
    2920:	84 e0       	ldi	r24, 0x04	; 4
    2922:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    2926:	42 c0       	rjmp	.+132    	; 0x29ac <tc_enable+0xec>
    2928:	20 34       	cpi	r18, 0x40	; 64
    292a:	89 e0       	ldi	r24, 0x09	; 9
    292c:	38 07       	cpc	r19, r24
    292e:	49 f4       	brne	.+18     	; 0x2942 <tc_enable+0x82>
    2930:	62 e0       	ldi	r22, 0x02	; 2
    2932:	84 e0       	ldi	r24, 0x04	; 4
    2934:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    2938:	64 e0       	ldi	r22, 0x04	; 4
    293a:	84 e0       	ldi	r24, 0x04	; 4
    293c:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    2940:	35 c0       	rjmp	.+106    	; 0x29ac <tc_enable+0xec>
    2942:	21 15       	cp	r18, r1
    2944:	8a e0       	ldi	r24, 0x0A	; 10
    2946:	38 07       	cpc	r19, r24
    2948:	49 f4       	brne	.+18     	; 0x295c <tc_enable+0x9c>
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	85 e0       	ldi	r24, 0x05	; 5
    294e:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    2952:	64 e0       	ldi	r22, 0x04	; 4
    2954:	85 e0       	ldi	r24, 0x05	; 5
    2956:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    295a:	28 c0       	rjmp	.+80     	; 0x29ac <tc_enable+0xec>
    295c:	20 34       	cpi	r18, 0x40	; 64
    295e:	8a e0       	ldi	r24, 0x0A	; 10
    2960:	38 07       	cpc	r19, r24
    2962:	49 f4       	brne	.+18     	; 0x2976 <tc_enable+0xb6>
    2964:	62 e0       	ldi	r22, 0x02	; 2
    2966:	85 e0       	ldi	r24, 0x05	; 5
    2968:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    296c:	64 e0       	ldi	r22, 0x04	; 4
    296e:	85 e0       	ldi	r24, 0x05	; 5
    2970:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    2974:	1b c0       	rjmp	.+54     	; 0x29ac <tc_enable+0xec>
    2976:	21 15       	cp	r18, r1
    2978:	8b e0       	ldi	r24, 0x0B	; 11
    297a:	38 07       	cpc	r19, r24
    297c:	49 f4       	brne	.+18     	; 0x2990 <tc_enable+0xd0>
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	86 e0       	ldi	r24, 0x06	; 6
    2982:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    2986:	64 e0       	ldi	r22, 0x04	; 4
    2988:	86 e0       	ldi	r24, 0x06	; 6
    298a:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    298e:	0e c0       	rjmp	.+28     	; 0x29ac <tc_enable+0xec>
    2990:	20 34       	cpi	r18, 0x40	; 64
    2992:	3b 40       	sbci	r19, 0x0B	; 11
    2994:	49 f4       	brne	.+18     	; 0x29a8 <tc_enable+0xe8>
    2996:	62 e0       	ldi	r22, 0x02	; 2
    2998:	86 e0       	ldi	r24, 0x06	; 6
    299a:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    299e:	64 e0       	ldi	r22, 0x04	; 4
    29a0:	86 e0       	ldi	r24, 0x06	; 6
    29a2:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <tc_enable+0xec>
    29a8:	1f bf       	out	0x3f, r17	; 63
    29aa:	10 c0       	rjmp	.+32     	; 0x29cc <tc_enable+0x10c>
    29ac:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <sleepmgr_locks+0x1>
    29b0:	8f 3f       	cpi	r24, 0xFF	; 255
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <tc_enable+0xf6>
    29b4:	ff cf       	rjmp	.-2      	; 0x29b4 <tc_enable+0xf4>
    29b6:	8f b7       	in	r24, 0x3f	; 63
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	f8 94       	cli
    29bc:	99 81       	ldd	r25, Y+1	; 0x01
    29be:	e1 ee       	ldi	r30, 0xE1	; 225
    29c0:	f0 e2       	ldi	r31, 0x20	; 32
    29c2:	81 81       	ldd	r24, Z+1	; 0x01
    29c4:	8f 5f       	subi	r24, 0xFF	; 255
    29c6:	81 83       	std	Z+1, r24	; 0x01
    29c8:	9f bf       	out	0x3f, r25	; 63
    29ca:	1f bf       	out	0x3f, r17	; 63
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	08 95       	ret

000029d8 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    29d8:	81 15       	cp	r24, r1
    29da:	28 e0       	ldi	r18, 0x08	; 8
    29dc:	92 07       	cpc	r25, r18
    29de:	29 f4       	brne	.+10     	; 0x29ea <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    29e0:	60 93 d5 20 	sts	0x20D5, r22	; 0x8020d5 <tc_tcc0_ovf_callback>
    29e4:	70 93 d6 20 	sts	0x20D6, r23	; 0x8020d6 <tc_tcc0_ovf_callback+0x1>
    29e8:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    29ea:	80 34       	cpi	r24, 0x40	; 64
    29ec:	28 e0       	ldi	r18, 0x08	; 8
    29ee:	92 07       	cpc	r25, r18
    29f0:	29 f4       	brne	.+10     	; 0x29fc <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    29f2:	60 93 c9 20 	sts	0x20C9, r22	; 0x8020c9 <tc_tcc1_ovf_callback>
    29f6:	70 93 ca 20 	sts	0x20CA, r23	; 0x8020ca <tc_tcc1_ovf_callback+0x1>
    29fa:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    29fc:	81 15       	cp	r24, r1
    29fe:	29 e0       	ldi	r18, 0x09	; 9
    2a00:	92 07       	cpc	r25, r18
    2a02:	29 f4       	brne	.+10     	; 0x2a0e <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    2a04:	60 93 c1 20 	sts	0x20C1, r22	; 0x8020c1 <tc_tcd0_ovf_callback>
    2a08:	70 93 c2 20 	sts	0x20C2, r23	; 0x8020c2 <tc_tcd0_ovf_callback+0x1>
    2a0c:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2a0e:	80 34       	cpi	r24, 0x40	; 64
    2a10:	29 e0       	ldi	r18, 0x09	; 9
    2a12:	92 07       	cpc	r25, r18
    2a14:	29 f4       	brne	.+10     	; 0x2a20 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    2a16:	60 93 b5 20 	sts	0x20B5, r22	; 0x8020b5 <tc_tcd1_ovf_callback>
    2a1a:	70 93 b6 20 	sts	0x20B6, r23	; 0x8020b6 <tc_tcd1_ovf_callback+0x1>
    2a1e:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2a20:	81 15       	cp	r24, r1
    2a22:	2a e0       	ldi	r18, 0x0A	; 10
    2a24:	92 07       	cpc	r25, r18
    2a26:	29 f4       	brne	.+10     	; 0x2a32 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    2a28:	60 93 ad 20 	sts	0x20AD, r22	; 0x8020ad <tc_tce0_ovf_callback>
    2a2c:	70 93 ae 20 	sts	0x20AE, r23	; 0x8020ae <tc_tce0_ovf_callback+0x1>
    2a30:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2a32:	80 34       	cpi	r24, 0x40	; 64
    2a34:	2a e0       	ldi	r18, 0x0A	; 10
    2a36:	92 07       	cpc	r25, r18
    2a38:	29 f4       	brne	.+10     	; 0x2a44 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    2a3a:	60 93 a1 20 	sts	0x20A1, r22	; 0x8020a1 <tc_tce1_ovf_callback>
    2a3e:	70 93 a2 20 	sts	0x20A2, r23	; 0x8020a2 <tc_tce1_ovf_callback+0x1>
    2a42:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2a44:	81 15       	cp	r24, r1
    2a46:	2b e0       	ldi	r18, 0x0B	; 11
    2a48:	92 07       	cpc	r25, r18
    2a4a:	29 f4       	brne	.+10     	; 0x2a56 <tc_set_overflow_interrupt_callback+0x7e>
		tc_tcf0_ovf_callback = callback;
    2a4c:	60 93 99 20 	sts	0x2099, r22	; 0x802099 <tc_tcf0_ovf_callback>
    2a50:	70 93 9a 20 	sts	0x209A, r23	; 0x80209a <tc_tcf0_ovf_callback+0x1>
    2a54:	08 95       	ret
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    2a56:	80 34       	cpi	r24, 0x40	; 64
    2a58:	9b 40       	sbci	r25, 0x0B	; 11
    2a5a:	21 f4       	brne	.+8      	; 0x2a64 <tc_set_overflow_interrupt_callback+0x8c>
		tc_tcf1_ovf_callback = callback;
    2a5c:	60 93 8d 20 	sts	0x208D, r22	; 0x80208d <tc_tcf1_ovf_callback>
    2a60:	70 93 8e 20 	sts	0x208E, r23	; 0x80208e <tc_tcf1_ovf_callback+0x1>
    2a64:	08 95       	ret

00002a66 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2a66:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2a6a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2a6c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2a6e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2a72:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2a74:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2a78:	08 95       	ret

00002a7a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2a7a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2a7c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2a7e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2a80:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2a82:	60 83       	st	Z, r22
	ret                             // Return to caller
    2a84:	08 95       	ret

00002a86 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2a90:	c6 2f       	mov	r28, r22
    2a92:	d0 e0       	ldi	r29, 0x00	; 0
    2a94:	de 01       	movw	r26, r28
    2a96:	02 2e       	mov	r0, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <ioport_configure_port_pin+0x18>
    2a9a:	b5 95       	asr	r27
    2a9c:	a7 95       	ror	r26
    2a9e:	0a 94       	dec	r0
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <ioport_configure_port_pin+0x14>
    2aa2:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2aa4:	50 8b       	std	Z+16, r21	; 0x10
    2aa6:	2f 5f       	subi	r18, 0xFF	; 255
    2aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aaa:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2aac:	28 30       	cpi	r18, 0x08	; 8
    2aae:	31 05       	cpc	r19, r1
    2ab0:	89 f7       	brne	.-30     	; 0x2a94 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2ab2:	40 ff       	sbrs	r20, 0
    2ab4:	0a c0       	rjmp	.+20     	; 0x2aca <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2ab6:	41 ff       	sbrs	r20, 1
    2ab8:	03 c0       	rjmp	.+6      	; 0x2ac0 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2aba:	fc 01       	movw	r30, r24
    2abc:	65 83       	std	Z+5, r22	; 0x05
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	61 83       	std	Z+1, r22	; 0x01
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2aca:	fc 01       	movw	r30, r24
    2acc:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2ad4:	43 e0       	ldi	r20, 0x03	; 3
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	68 e0       	ldi	r22, 0x08	; 8
    2ada:	80 ec       	ldi	r24, 0xC0	; 192
    2adc:	97 e0       	ldi	r25, 0x07	; 7
    2ade:	d3 df       	rcall	.-90     	; 0x2a86 <ioport_configure_port_pin>
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	58 e1       	ldi	r21, 0x18	; 24
    2ae4:	64 e0       	ldi	r22, 0x04	; 4
    2ae6:	80 ec       	ldi	r24, 0xC0	; 192
    2ae8:	97 e0       	ldi	r25, 0x07	; 7
    2aea:	cd cf       	rjmp	.-102    	; 0x2a86 <ioport_configure_port_pin>
    2aec:	08 95       	ret

00002aee <__portable_avr_delay_cycles>:
	tc_write_clock_source(settings.TC, TC_CLKSEL_DIV1024_gc);//sets the prescaler which divides the main clock of 32MG by 1024 which means our clock will count at 31250Hz
}
void TC_period_shift(TCdef settings)
{
	tc_write_period(settings.TC, settings.period);//sets the number that the timer counter counts to before the interupt is triggered
}
    2aee:	04 c0       	rjmp	.+8      	; 0x2af8 <__portable_avr_delay_cycles+0xa>
    2af0:	61 50       	subi	r22, 0x01	; 1
    2af2:	71 09       	sbc	r23, r1
    2af4:	81 09       	sbc	r24, r1
    2af6:	91 09       	sbc	r25, r1
    2af8:	61 15       	cp	r22, r1
    2afa:	71 05       	cpc	r23, r1
    2afc:	81 05       	cpc	r24, r1
    2afe:	91 05       	cpc	r25, r1
    2b00:	b9 f7       	brne	.-18     	; 0x2af0 <__portable_avr_delay_cycles+0x2>
    2b02:	08 95       	ret

00002b04 <example_handle>:
    2b04:	e0 ec       	ldi	r30, 0xC0	; 192
    2b06:	f7 e0       	ldi	r31, 0x07	; 7
    2b08:	94 81       	ldd	r25, Z+4	; 0x04
    2b0a:	88 e0       	ldi	r24, 0x08	; 8
    2b0c:	89 27       	eor	r24, r25
    2b0e:	84 83       	std	Z+4, r24	; 0x04
    2b10:	08 95       	ret

00002b12 <TCInit>:
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	28 97       	sbiw	r28, 0x08	; 8
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	29 83       	std	Y+1, r18	; 0x01
    2b26:	3a 83       	std	Y+2, r19	; 0x02
    2b28:	4b 83       	std	Y+3, r20	; 0x03
    2b2a:	5c 83       	std	Y+4, r21	; 0x04
    2b2c:	6d 83       	std	Y+5, r22	; 0x05
    2b2e:	7e 83       	std	Y+6, r23	; 0x06
    2b30:	8f 83       	std	Y+7, r24	; 0x07
    2b32:	98 87       	std	Y+8, r25	; 0x08
    2b34:	0b 81       	ldd	r16, Y+3	; 0x03
    2b36:	1c 81       	ldd	r17, Y+4	; 0x04
    2b38:	87 e0       	ldi	r24, 0x07	; 7
    2b3a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2b3e:	c8 01       	movw	r24, r16
    2b40:	bf de       	rcall	.-642    	; 0x28c0 <tc_enable>
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	c8 01       	movw	r24, r16
    2b48:	47 df       	rcall	.-370    	; 0x29d8 <tc_set_overflow_interrupt_callback>
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	81 81       	ldd	r24, Z+1	; 0x01
    2b4e:	88 7f       	andi	r24, 0xF8	; 248
    2b50:	81 83       	std	Z+1, r24	; 0x01
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	86 a3       	std	Z+38, r24	; 0x26
    2b58:	97 a3       	std	Z+39, r25	; 0x27
    2b5a:	86 81       	ldd	r24, Z+6	; 0x06
    2b5c:	8c 7f       	andi	r24, 0xFC	; 252
    2b5e:	86 83       	std	Z+6, r24	; 0x06
    2b60:	86 81       	ldd	r24, Z+6	; 0x06
    2b62:	81 60       	ori	r24, 0x01	; 1
    2b64:	86 83       	std	Z+6, r24	; 0x06
    2b66:	78 94       	sei
    2b68:	80 81       	ld	r24, Z
    2b6a:	80 7f       	andi	r24, 0xF0	; 240
    2b6c:	87 60       	ori	r24, 0x07	; 7
    2b6e:	80 83       	st	Z, r24
    2b70:	28 96       	adiw	r28, 0x08	; 8
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	08 95       	ret

00002b80 <exampleTC>:
void exampleTC(void)//testing the timer counter code by blinking led on microchip at 1Hz
{
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	28 97       	sbiw	r28, 0x08	; 8
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	de bf       	out	0x3e, r29	; 62
	PORTQ.DIR|=0x08;
    2b8e:	e0 ec       	ldi	r30, 0xC0	; 192
    2b90:	f7 e0       	ldi	r31, 0x07	; 7
    2b92:	80 81       	ld	r24, Z
    2b94:	88 60       	ori	r24, 0x08	; 8
    2b96:	80 83       	st	Z, r24
	TCdef examplestruct={
    2b98:	88 e0       	ldi	r24, 0x08	; 8
    2b9a:	ed e0       	ldi	r30, 0x0D	; 13
    2b9c:	f0 e2       	ldi	r31, 0x20	; 32
    2b9e:	de 01       	movw	r26, r28
    2ba0:	11 96       	adiw	r26, 0x01	; 1
    2ba2:	01 90       	ld	r0, Z+
    2ba4:	0d 92       	st	X+, r0
    2ba6:	8a 95       	dec	r24
    2ba8:	e1 f7       	brne	.-8      	; 0x2ba2 <exampleTC+0x22>
		.port=&PORTE,
		.TC=&TCE0,
		.period=31250,
		.FunHandle=example_handle
	};
	TCInit(examplestruct);
    2baa:	29 81       	ldd	r18, Y+1	; 0x01
    2bac:	3a 81       	ldd	r19, Y+2	; 0x02
    2bae:	4b 81       	ldd	r20, Y+3	; 0x03
    2bb0:	5c 81       	ldd	r21, Y+4	; 0x04
    2bb2:	6d 81       	ldd	r22, Y+5	; 0x05
    2bb4:	7e 81       	ldd	r23, Y+6	; 0x06
    2bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb8:	98 85       	ldd	r25, Y+8	; 0x08
    2bba:	ab df       	rcall	.-170    	; 0x2b12 <TCInit>
	delay_s(5);
    2bbc:	6c ea       	ldi	r22, 0xAC	; 172
    2bbe:	76 ee       	ldi	r23, 0xE6	; 230
    2bc0:	86 e9       	ldi	r24, 0x96	; 150
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	94 df       	rcall	.-216    	; 0x2aee <__portable_avr_delay_cycles>
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2bc6:	89 e0       	ldi	r24, 0x09	; 9
    2bc8:	9d e3       	ldi	r25, 0x3D	; 61
    2bca:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
    2bce:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
	examplestruct.period=31250/2;
	TC_period_shift(examplestruct);
}
    2bd2:	28 96       	adiw	r28, 0x08	; 8
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	08 95       	ret

00002bde <usart_serial_getchar>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	eb 01       	movw	r28, r22
    2be4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <usart_getchar>
    2be8:	88 83       	st	Y, r24
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <usart_serial_putchar>:
    2bf0:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <usart_putchar>
    2bf4:	08 95       	ret

00002bf6 <uart_terminal_init>:

void uart_terminal_init()
{
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	27 97       	sbiw	r28, 0x07	; 7
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2c04:	60 e1       	ldi	r22, 0x10	; 16
    2c06:	85 e0       	ldi	r24, 0x05	; 5
    2c08:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    2c0c:	e0 e8       	ldi	r30, 0x80	; 128
    2c0e:	f6 e0       	ldi	r31, 0x06	; 6
    2c10:	80 81       	ld	r24, Z
    2c12:	88 60       	ori	r24, 0x08	; 8
    2c14:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2c16:	80 ea       	ldi	r24, 0xA0	; 160
    2c18:	9a e0       	ldi	r25, 0x0A	; 10
    2c1a:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <stdio_base>
    2c1e:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2c22:	88 ef       	ldi	r24, 0xF8	; 248
    2c24:	95 e1       	ldi	r25, 0x15	; 21
    2c26:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <ptr_put>
    2c2a:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2c2e:	8f ee       	ldi	r24, 0xEF	; 239
    2c30:	95 e1       	ldi	r25, 0x15	; 21
    2c32:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <ptr_get>
    2c36:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    2c3a:	e6 e0       	ldi	r30, 0x06	; 6
    2c3c:	f0 e2       	ldi	r31, 0x20	; 32
    2c3e:	84 81       	ldd	r24, Z+4	; 0x04
    2c40:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2c42:	85 81       	ldd	r24, Z+5	; 0x05
    2c44:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2c46:	86 81       	ldd	r24, Z+6	; 0x06
    2c48:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2c50:	b3 81       	ldd	r27, Z+3	; 0x03
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	ab 83       	std	Y+3, r26	; 0x03
    2c58:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    2c5a:	60 e1       	ldi	r22, 0x10	; 16
    2c5c:	85 e0       	ldi	r24, 0x05	; 5
    2c5e:	0e 94 ce 0a 	call	0x159c	; 0x159c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2c62:	be 01       	movw	r22, r28
    2c64:	6f 5f       	subi	r22, 0xFF	; 255
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255
    2c68:	80 ea       	ldi	r24, 0xA0	; 160
    2c6a:	9a e0       	ldi	r25, 0x0A	; 10
    2c6c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    2c70:	63 ed       	ldi	r22, 0xD3	; 211
    2c72:	71 e0       	ldi	r23, 0x01	; 1
    2c74:	86 e8       	ldi	r24, 0x86	; 134
    2c76:	9a e0       	ldi	r25, 0x0A	; 10
    2c78:	1a d7       	rcall	.+3636   	; 0x3aae <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat Valkyrie Initializing...\n");
    2c7a:	8e e3       	ldi	r24, 0x3E	; 62
    2c7c:	90 e2       	ldi	r25, 0x20	; 32
    2c7e:	b0 d7       	rcall	.+3936   	; 0x3be0 <puts>
		printf("UART Initialized\n");
    2c80:	83 e6       	ldi	r24, 0x63	; 99
    2c82:	90 e2       	ldi	r25, 0x20	; 32
    2c84:	ad d7       	rcall	.+3930   	; 0x3be0 <puts>
	}
    2c86:	27 96       	adiw	r28, 0x07	; 7
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	08 95       	ret

00002c92 <main>:


#include "def.h"
int main (void)
{
	board_init();
    2c92:	20 df       	rcall	.-448    	; 0x2ad4 <board_init>
	sysclk_init();
    2c94:	0e 94 98 0a 	call	0x1530	; 0x1530 <sysclk_init>
	uart_terminal_init();
    2c98:	ae df       	rcall	.-164    	; 0x2bf6 <uart_terminal_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2c9a:	e0 ea       	ldi	r30, 0xA0	; 160
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	87 e0       	ldi	r24, 0x07	; 7
    2ca0:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	80 68       	ori	r24, 0x80	; 128
    2ca6:	82 83       	std	Z+2, r24	; 0x02
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	cpu_irq_enable();
    2ca8:	78 94       	sei
	
	printf("u Gay");
    2caa:	84 e7       	ldi	r24, 0x74	; 116
    2cac:	90 e2       	ldi	r25, 0x20	; 32
    2cae:	9f 93       	push	r25
    2cb0:	8f 93       	push	r24
    2cb2:	83 d7       	rcall	.+3846   	; 0x3bba <printf>
	
	//spi_init_pins();
	thermistor_init();
    2cb4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <thermistor_init>
	exampleTC();
    2cb8:	63 df       	rcall	.-314    	; 0x2b80 <exampleTC>
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0e 94 f0 06 	call	0xde0	; 0xde0 <getTemperature>
			///* No, so turn LED off. */
			//ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		//}
		
		
		int tempura = getTemperature();
    2cc2:	fd cf       	rjmp	.-6      	; 0x2cbe <main+0x2c>

00002cc4 <__subsf3>:
    2cc4:	50 58       	subi	r21, 0x80	; 128

00002cc6 <__addsf3>:
    2cc6:	bb 27       	eor	r27, r27
    2cc8:	aa 27       	eor	r26, r26
    2cca:	0e d0       	rcall	.+28     	; 0x2ce8 <__addsf3x>
    2ccc:	48 c1       	rjmp	.+656    	; 0x2f5e <__fp_round>
    2cce:	39 d1       	rcall	.+626    	; 0x2f42 <__fp_pscA>
    2cd0:	30 f0       	brcs	.+12     	; 0x2cde <__addsf3+0x18>
    2cd2:	3e d1       	rcall	.+636    	; 0x2f50 <__fp_pscB>
    2cd4:	20 f0       	brcs	.+8      	; 0x2cde <__addsf3+0x18>
    2cd6:	31 f4       	brne	.+12     	; 0x2ce4 <__addsf3+0x1e>
    2cd8:	9f 3f       	cpi	r25, 0xFF	; 255
    2cda:	11 f4       	brne	.+4      	; 0x2ce0 <__addsf3+0x1a>
    2cdc:	1e f4       	brtc	.+6      	; 0x2ce4 <__addsf3+0x1e>
    2cde:	2e c1       	rjmp	.+604    	; 0x2f3c <__fp_nan>
    2ce0:	0e f4       	brtc	.+2      	; 0x2ce4 <__addsf3+0x1e>
    2ce2:	e0 95       	com	r30
    2ce4:	e7 fb       	bst	r30, 7
    2ce6:	24 c1       	rjmp	.+584    	; 0x2f30 <__fp_inf>

00002ce8 <__addsf3x>:
    2ce8:	e9 2f       	mov	r30, r25
    2cea:	4a d1       	rcall	.+660    	; 0x2f80 <__fp_split3>
    2cec:	80 f3       	brcs	.-32     	; 0x2cce <__addsf3+0x8>
    2cee:	ba 17       	cp	r27, r26
    2cf0:	62 07       	cpc	r22, r18
    2cf2:	73 07       	cpc	r23, r19
    2cf4:	84 07       	cpc	r24, r20
    2cf6:	95 07       	cpc	r25, r21
    2cf8:	18 f0       	brcs	.+6      	; 0x2d00 <__addsf3x+0x18>
    2cfa:	71 f4       	brne	.+28     	; 0x2d18 <__addsf3x+0x30>
    2cfc:	9e f5       	brtc	.+102    	; 0x2d64 <__addsf3x+0x7c>
    2cfe:	62 c1       	rjmp	.+708    	; 0x2fc4 <__fp_zero>
    2d00:	0e f4       	brtc	.+2      	; 0x2d04 <__addsf3x+0x1c>
    2d02:	e0 95       	com	r30
    2d04:	0b 2e       	mov	r0, r27
    2d06:	ba 2f       	mov	r27, r26
    2d08:	a0 2d       	mov	r26, r0
    2d0a:	0b 01       	movw	r0, r22
    2d0c:	b9 01       	movw	r22, r18
    2d0e:	90 01       	movw	r18, r0
    2d10:	0c 01       	movw	r0, r24
    2d12:	ca 01       	movw	r24, r20
    2d14:	a0 01       	movw	r20, r0
    2d16:	11 24       	eor	r1, r1
    2d18:	ff 27       	eor	r31, r31
    2d1a:	59 1b       	sub	r21, r25
    2d1c:	99 f0       	breq	.+38     	; 0x2d44 <__addsf3x+0x5c>
    2d1e:	59 3f       	cpi	r21, 0xF9	; 249
    2d20:	50 f4       	brcc	.+20     	; 0x2d36 <__addsf3x+0x4e>
    2d22:	50 3e       	cpi	r21, 0xE0	; 224
    2d24:	68 f1       	brcs	.+90     	; 0x2d80 <__addsf3x+0x98>
    2d26:	1a 16       	cp	r1, r26
    2d28:	f0 40       	sbci	r31, 0x00	; 0
    2d2a:	a2 2f       	mov	r26, r18
    2d2c:	23 2f       	mov	r18, r19
    2d2e:	34 2f       	mov	r19, r20
    2d30:	44 27       	eor	r20, r20
    2d32:	58 5f       	subi	r21, 0xF8	; 248
    2d34:	f3 cf       	rjmp	.-26     	; 0x2d1c <__addsf3x+0x34>
    2d36:	46 95       	lsr	r20
    2d38:	37 95       	ror	r19
    2d3a:	27 95       	ror	r18
    2d3c:	a7 95       	ror	r26
    2d3e:	f0 40       	sbci	r31, 0x00	; 0
    2d40:	53 95       	inc	r21
    2d42:	c9 f7       	brne	.-14     	; 0x2d36 <__addsf3x+0x4e>
    2d44:	7e f4       	brtc	.+30     	; 0x2d64 <__addsf3x+0x7c>
    2d46:	1f 16       	cp	r1, r31
    2d48:	ba 0b       	sbc	r27, r26
    2d4a:	62 0b       	sbc	r22, r18
    2d4c:	73 0b       	sbc	r23, r19
    2d4e:	84 0b       	sbc	r24, r20
    2d50:	ba f0       	brmi	.+46     	; 0x2d80 <__addsf3x+0x98>
    2d52:	91 50       	subi	r25, 0x01	; 1
    2d54:	a1 f0       	breq	.+40     	; 0x2d7e <__addsf3x+0x96>
    2d56:	ff 0f       	add	r31, r31
    2d58:	bb 1f       	adc	r27, r27
    2d5a:	66 1f       	adc	r22, r22
    2d5c:	77 1f       	adc	r23, r23
    2d5e:	88 1f       	adc	r24, r24
    2d60:	c2 f7       	brpl	.-16     	; 0x2d52 <__addsf3x+0x6a>
    2d62:	0e c0       	rjmp	.+28     	; 0x2d80 <__addsf3x+0x98>
    2d64:	ba 0f       	add	r27, r26
    2d66:	62 1f       	adc	r22, r18
    2d68:	73 1f       	adc	r23, r19
    2d6a:	84 1f       	adc	r24, r20
    2d6c:	48 f4       	brcc	.+18     	; 0x2d80 <__addsf3x+0x98>
    2d6e:	87 95       	ror	r24
    2d70:	77 95       	ror	r23
    2d72:	67 95       	ror	r22
    2d74:	b7 95       	ror	r27
    2d76:	f7 95       	ror	r31
    2d78:	9e 3f       	cpi	r25, 0xFE	; 254
    2d7a:	08 f0       	brcs	.+2      	; 0x2d7e <__addsf3x+0x96>
    2d7c:	b3 cf       	rjmp	.-154    	; 0x2ce4 <__addsf3+0x1e>
    2d7e:	93 95       	inc	r25
    2d80:	88 0f       	add	r24, r24
    2d82:	08 f0       	brcs	.+2      	; 0x2d86 <__addsf3x+0x9e>
    2d84:	99 27       	eor	r25, r25
    2d86:	ee 0f       	add	r30, r30
    2d88:	97 95       	ror	r25
    2d8a:	87 95       	ror	r24
    2d8c:	08 95       	ret

00002d8e <__divsf3>:
    2d8e:	0c d0       	rcall	.+24     	; 0x2da8 <__divsf3x>
    2d90:	e6 c0       	rjmp	.+460    	; 0x2f5e <__fp_round>
    2d92:	de d0       	rcall	.+444    	; 0x2f50 <__fp_pscB>
    2d94:	40 f0       	brcs	.+16     	; 0x2da6 <__divsf3+0x18>
    2d96:	d5 d0       	rcall	.+426    	; 0x2f42 <__fp_pscA>
    2d98:	30 f0       	brcs	.+12     	; 0x2da6 <__divsf3+0x18>
    2d9a:	21 f4       	brne	.+8      	; 0x2da4 <__divsf3+0x16>
    2d9c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d9e:	19 f0       	breq	.+6      	; 0x2da6 <__divsf3+0x18>
    2da0:	c7 c0       	rjmp	.+398    	; 0x2f30 <__fp_inf>
    2da2:	51 11       	cpse	r21, r1
    2da4:	10 c1       	rjmp	.+544    	; 0x2fc6 <__fp_szero>
    2da6:	ca c0       	rjmp	.+404    	; 0x2f3c <__fp_nan>

00002da8 <__divsf3x>:
    2da8:	eb d0       	rcall	.+470    	; 0x2f80 <__fp_split3>
    2daa:	98 f3       	brcs	.-26     	; 0x2d92 <__divsf3+0x4>

00002dac <__divsf3_pse>:
    2dac:	99 23       	and	r25, r25
    2dae:	c9 f3       	breq	.-14     	; 0x2da2 <__divsf3+0x14>
    2db0:	55 23       	and	r21, r21
    2db2:	b1 f3       	breq	.-20     	; 0x2da0 <__divsf3+0x12>
    2db4:	95 1b       	sub	r25, r21
    2db6:	55 0b       	sbc	r21, r21
    2db8:	bb 27       	eor	r27, r27
    2dba:	aa 27       	eor	r26, r26
    2dbc:	62 17       	cp	r22, r18
    2dbe:	73 07       	cpc	r23, r19
    2dc0:	84 07       	cpc	r24, r20
    2dc2:	38 f0       	brcs	.+14     	; 0x2dd2 <__divsf3_pse+0x26>
    2dc4:	9f 5f       	subi	r25, 0xFF	; 255
    2dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc8:	22 0f       	add	r18, r18
    2dca:	33 1f       	adc	r19, r19
    2dcc:	44 1f       	adc	r20, r20
    2dce:	aa 1f       	adc	r26, r26
    2dd0:	a9 f3       	breq	.-22     	; 0x2dbc <__divsf3_pse+0x10>
    2dd2:	33 d0       	rcall	.+102    	; 0x2e3a <__divsf3_pse+0x8e>
    2dd4:	0e 2e       	mov	r0, r30
    2dd6:	3a f0       	brmi	.+14     	; 0x2de6 <__divsf3_pse+0x3a>
    2dd8:	e0 e8       	ldi	r30, 0x80	; 128
    2dda:	30 d0       	rcall	.+96     	; 0x2e3c <__divsf3_pse+0x90>
    2ddc:	91 50       	subi	r25, 0x01	; 1
    2dde:	50 40       	sbci	r21, 0x00	; 0
    2de0:	e6 95       	lsr	r30
    2de2:	00 1c       	adc	r0, r0
    2de4:	ca f7       	brpl	.-14     	; 0x2dd8 <__divsf3_pse+0x2c>
    2de6:	29 d0       	rcall	.+82     	; 0x2e3a <__divsf3_pse+0x8e>
    2de8:	fe 2f       	mov	r31, r30
    2dea:	27 d0       	rcall	.+78     	; 0x2e3a <__divsf3_pse+0x8e>
    2dec:	66 0f       	add	r22, r22
    2dee:	77 1f       	adc	r23, r23
    2df0:	88 1f       	adc	r24, r24
    2df2:	bb 1f       	adc	r27, r27
    2df4:	26 17       	cp	r18, r22
    2df6:	37 07       	cpc	r19, r23
    2df8:	48 07       	cpc	r20, r24
    2dfa:	ab 07       	cpc	r26, r27
    2dfc:	b0 e8       	ldi	r27, 0x80	; 128
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <__divsf3_pse+0x56>
    2e00:	bb 0b       	sbc	r27, r27
    2e02:	80 2d       	mov	r24, r0
    2e04:	bf 01       	movw	r22, r30
    2e06:	ff 27       	eor	r31, r31
    2e08:	93 58       	subi	r25, 0x83	; 131
    2e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0c:	2a f0       	brmi	.+10     	; 0x2e18 <__divsf3_pse+0x6c>
    2e0e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e10:	51 05       	cpc	r21, r1
    2e12:	68 f0       	brcs	.+26     	; 0x2e2e <__divsf3_pse+0x82>
    2e14:	8d c0       	rjmp	.+282    	; 0x2f30 <__fp_inf>
    2e16:	d7 c0       	rjmp	.+430    	; 0x2fc6 <__fp_szero>
    2e18:	5f 3f       	cpi	r21, 0xFF	; 255
    2e1a:	ec f3       	brlt	.-6      	; 0x2e16 <__divsf3_pse+0x6a>
    2e1c:	98 3e       	cpi	r25, 0xE8	; 232
    2e1e:	dc f3       	brlt	.-10     	; 0x2e16 <__divsf3_pse+0x6a>
    2e20:	86 95       	lsr	r24
    2e22:	77 95       	ror	r23
    2e24:	67 95       	ror	r22
    2e26:	b7 95       	ror	r27
    2e28:	f7 95       	ror	r31
    2e2a:	9f 5f       	subi	r25, 0xFF	; 255
    2e2c:	c9 f7       	brne	.-14     	; 0x2e20 <__divsf3_pse+0x74>
    2e2e:	88 0f       	add	r24, r24
    2e30:	91 1d       	adc	r25, r1
    2e32:	96 95       	lsr	r25
    2e34:	87 95       	ror	r24
    2e36:	97 f9       	bld	r25, 7
    2e38:	08 95       	ret
    2e3a:	e1 e0       	ldi	r30, 0x01	; 1
    2e3c:	66 0f       	add	r22, r22
    2e3e:	77 1f       	adc	r23, r23
    2e40:	88 1f       	adc	r24, r24
    2e42:	bb 1f       	adc	r27, r27
    2e44:	62 17       	cp	r22, r18
    2e46:	73 07       	cpc	r23, r19
    2e48:	84 07       	cpc	r24, r20
    2e4a:	ba 07       	cpc	r27, r26
    2e4c:	20 f0       	brcs	.+8      	; 0x2e56 <__divsf3_pse+0xaa>
    2e4e:	62 1b       	sub	r22, r18
    2e50:	73 0b       	sbc	r23, r19
    2e52:	84 0b       	sbc	r24, r20
    2e54:	ba 0b       	sbc	r27, r26
    2e56:	ee 1f       	adc	r30, r30
    2e58:	88 f7       	brcc	.-30     	; 0x2e3c <__divsf3_pse+0x90>
    2e5a:	e0 95       	com	r30
    2e5c:	08 95       	ret

00002e5e <__fixunssfsi>:
    2e5e:	98 d0       	rcall	.+304    	; 0x2f90 <__fp_splitA>
    2e60:	88 f0       	brcs	.+34     	; 0x2e84 <__fixunssfsi+0x26>
    2e62:	9f 57       	subi	r25, 0x7F	; 127
    2e64:	90 f0       	brcs	.+36     	; 0x2e8a <__fixunssfsi+0x2c>
    2e66:	b9 2f       	mov	r27, r25
    2e68:	99 27       	eor	r25, r25
    2e6a:	b7 51       	subi	r27, 0x17	; 23
    2e6c:	a0 f0       	brcs	.+40     	; 0x2e96 <__fixunssfsi+0x38>
    2e6e:	d1 f0       	breq	.+52     	; 0x2ea4 <__fixunssfsi+0x46>
    2e70:	66 0f       	add	r22, r22
    2e72:	77 1f       	adc	r23, r23
    2e74:	88 1f       	adc	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	1a f0       	brmi	.+6      	; 0x2e80 <__fixunssfsi+0x22>
    2e7a:	ba 95       	dec	r27
    2e7c:	c9 f7       	brne	.-14     	; 0x2e70 <__fixunssfsi+0x12>
    2e7e:	12 c0       	rjmp	.+36     	; 0x2ea4 <__fixunssfsi+0x46>
    2e80:	b1 30       	cpi	r27, 0x01	; 1
    2e82:	81 f0       	breq	.+32     	; 0x2ea4 <__fixunssfsi+0x46>
    2e84:	9f d0       	rcall	.+318    	; 0x2fc4 <__fp_zero>
    2e86:	b1 e0       	ldi	r27, 0x01	; 1
    2e88:	08 95       	ret
    2e8a:	9c c0       	rjmp	.+312    	; 0x2fc4 <__fp_zero>
    2e8c:	67 2f       	mov	r22, r23
    2e8e:	78 2f       	mov	r23, r24
    2e90:	88 27       	eor	r24, r24
    2e92:	b8 5f       	subi	r27, 0xF8	; 248
    2e94:	39 f0       	breq	.+14     	; 0x2ea4 <__fixunssfsi+0x46>
    2e96:	b9 3f       	cpi	r27, 0xF9	; 249
    2e98:	cc f3       	brlt	.-14     	; 0x2e8c <__fixunssfsi+0x2e>
    2e9a:	86 95       	lsr	r24
    2e9c:	77 95       	ror	r23
    2e9e:	67 95       	ror	r22
    2ea0:	b3 95       	inc	r27
    2ea2:	d9 f7       	brne	.-10     	; 0x2e9a <__fixunssfsi+0x3c>
    2ea4:	3e f4       	brtc	.+14     	; 0x2eb4 <__fixunssfsi+0x56>
    2ea6:	90 95       	com	r25
    2ea8:	80 95       	com	r24
    2eaa:	70 95       	com	r23
    2eac:	61 95       	neg	r22
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb4:	08 95       	ret

00002eb6 <__floatunsisf>:
    2eb6:	e8 94       	clt
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <__floatsisf+0x12>

00002eba <__floatsisf>:
    2eba:	97 fb       	bst	r25, 7
    2ebc:	3e f4       	brtc	.+14     	; 0x2ecc <__floatsisf+0x12>
    2ebe:	90 95       	com	r25
    2ec0:	80 95       	com	r24
    2ec2:	70 95       	com	r23
    2ec4:	61 95       	neg	r22
    2ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec8:	8f 4f       	sbci	r24, 0xFF	; 255
    2eca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ecc:	99 23       	and	r25, r25
    2ece:	a9 f0       	breq	.+42     	; 0x2efa <__floatsisf+0x40>
    2ed0:	f9 2f       	mov	r31, r25
    2ed2:	96 e9       	ldi	r25, 0x96	; 150
    2ed4:	bb 27       	eor	r27, r27
    2ed6:	93 95       	inc	r25
    2ed8:	f6 95       	lsr	r31
    2eda:	87 95       	ror	r24
    2edc:	77 95       	ror	r23
    2ede:	67 95       	ror	r22
    2ee0:	b7 95       	ror	r27
    2ee2:	f1 11       	cpse	r31, r1
    2ee4:	f8 cf       	rjmp	.-16     	; 0x2ed6 <__floatsisf+0x1c>
    2ee6:	fa f4       	brpl	.+62     	; 0x2f26 <__floatsisf+0x6c>
    2ee8:	bb 0f       	add	r27, r27
    2eea:	11 f4       	brne	.+4      	; 0x2ef0 <__floatsisf+0x36>
    2eec:	60 ff       	sbrs	r22, 0
    2eee:	1b c0       	rjmp	.+54     	; 0x2f26 <__floatsisf+0x6c>
    2ef0:	6f 5f       	subi	r22, 0xFF	; 255
    2ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef8:	16 c0       	rjmp	.+44     	; 0x2f26 <__floatsisf+0x6c>
    2efa:	88 23       	and	r24, r24
    2efc:	11 f0       	breq	.+4      	; 0x2f02 <__floatsisf+0x48>
    2efe:	96 e9       	ldi	r25, 0x96	; 150
    2f00:	11 c0       	rjmp	.+34     	; 0x2f24 <__floatsisf+0x6a>
    2f02:	77 23       	and	r23, r23
    2f04:	21 f0       	breq	.+8      	; 0x2f0e <__floatsisf+0x54>
    2f06:	9e e8       	ldi	r25, 0x8E	; 142
    2f08:	87 2f       	mov	r24, r23
    2f0a:	76 2f       	mov	r23, r22
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <__floatsisf+0x5e>
    2f0e:	66 23       	and	r22, r22
    2f10:	71 f0       	breq	.+28     	; 0x2f2e <__floatsisf+0x74>
    2f12:	96 e8       	ldi	r25, 0x86	; 134
    2f14:	86 2f       	mov	r24, r22
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	2a f0       	brmi	.+10     	; 0x2f26 <__floatsisf+0x6c>
    2f1c:	9a 95       	dec	r25
    2f1e:	66 0f       	add	r22, r22
    2f20:	77 1f       	adc	r23, r23
    2f22:	88 1f       	adc	r24, r24
    2f24:	da f7       	brpl	.-10     	; 0x2f1c <__floatsisf+0x62>
    2f26:	88 0f       	add	r24, r24
    2f28:	96 95       	lsr	r25
    2f2a:	87 95       	ror	r24
    2f2c:	97 f9       	bld	r25, 7
    2f2e:	08 95       	ret

00002f30 <__fp_inf>:
    2f30:	97 f9       	bld	r25, 7
    2f32:	9f 67       	ori	r25, 0x7F	; 127
    2f34:	80 e8       	ldi	r24, 0x80	; 128
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	08 95       	ret

00002f3c <__fp_nan>:
    2f3c:	9f ef       	ldi	r25, 0xFF	; 255
    2f3e:	80 ec       	ldi	r24, 0xC0	; 192
    2f40:	08 95       	ret

00002f42 <__fp_pscA>:
    2f42:	00 24       	eor	r0, r0
    2f44:	0a 94       	dec	r0
    2f46:	16 16       	cp	r1, r22
    2f48:	17 06       	cpc	r1, r23
    2f4a:	18 06       	cpc	r1, r24
    2f4c:	09 06       	cpc	r0, r25
    2f4e:	08 95       	ret

00002f50 <__fp_pscB>:
    2f50:	00 24       	eor	r0, r0
    2f52:	0a 94       	dec	r0
    2f54:	12 16       	cp	r1, r18
    2f56:	13 06       	cpc	r1, r19
    2f58:	14 06       	cpc	r1, r20
    2f5a:	05 06       	cpc	r0, r21
    2f5c:	08 95       	ret

00002f5e <__fp_round>:
    2f5e:	09 2e       	mov	r0, r25
    2f60:	03 94       	inc	r0
    2f62:	00 0c       	add	r0, r0
    2f64:	11 f4       	brne	.+4      	; 0x2f6a <__fp_round+0xc>
    2f66:	88 23       	and	r24, r24
    2f68:	52 f0       	brmi	.+20     	; 0x2f7e <__fp_round+0x20>
    2f6a:	bb 0f       	add	r27, r27
    2f6c:	40 f4       	brcc	.+16     	; 0x2f7e <__fp_round+0x20>
    2f6e:	bf 2b       	or	r27, r31
    2f70:	11 f4       	brne	.+4      	; 0x2f76 <__fp_round+0x18>
    2f72:	60 ff       	sbrs	r22, 0
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <__fp_round+0x20>
    2f76:	6f 5f       	subi	r22, 0xFF	; 255
    2f78:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7e:	08 95       	ret

00002f80 <__fp_split3>:
    2f80:	57 fd       	sbrc	r21, 7
    2f82:	90 58       	subi	r25, 0x80	; 128
    2f84:	44 0f       	add	r20, r20
    2f86:	55 1f       	adc	r21, r21
    2f88:	59 f0       	breq	.+22     	; 0x2fa0 <__fp_splitA+0x10>
    2f8a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f8c:	71 f0       	breq	.+28     	; 0x2faa <__fp_splitA+0x1a>
    2f8e:	47 95       	ror	r20

00002f90 <__fp_splitA>:
    2f90:	88 0f       	add	r24, r24
    2f92:	97 fb       	bst	r25, 7
    2f94:	99 1f       	adc	r25, r25
    2f96:	61 f0       	breq	.+24     	; 0x2fb0 <__fp_splitA+0x20>
    2f98:	9f 3f       	cpi	r25, 0xFF	; 255
    2f9a:	79 f0       	breq	.+30     	; 0x2fba <__fp_splitA+0x2a>
    2f9c:	87 95       	ror	r24
    2f9e:	08 95       	ret
    2fa0:	12 16       	cp	r1, r18
    2fa2:	13 06       	cpc	r1, r19
    2fa4:	14 06       	cpc	r1, r20
    2fa6:	55 1f       	adc	r21, r21
    2fa8:	f2 cf       	rjmp	.-28     	; 0x2f8e <__fp_split3+0xe>
    2faa:	46 95       	lsr	r20
    2fac:	f1 df       	rcall	.-30     	; 0x2f90 <__fp_splitA>
    2fae:	08 c0       	rjmp	.+16     	; 0x2fc0 <__fp_splitA+0x30>
    2fb0:	16 16       	cp	r1, r22
    2fb2:	17 06       	cpc	r1, r23
    2fb4:	18 06       	cpc	r1, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	f1 cf       	rjmp	.-30     	; 0x2f9c <__fp_splitA+0xc>
    2fba:	86 95       	lsr	r24
    2fbc:	71 05       	cpc	r23, r1
    2fbe:	61 05       	cpc	r22, r1
    2fc0:	08 94       	sec
    2fc2:	08 95       	ret

00002fc4 <__fp_zero>:
    2fc4:	e8 94       	clt

00002fc6 <__fp_szero>:
    2fc6:	bb 27       	eor	r27, r27
    2fc8:	66 27       	eor	r22, r22
    2fca:	77 27       	eor	r23, r23
    2fcc:	cb 01       	movw	r24, r22
    2fce:	97 f9       	bld	r25, 7
    2fd0:	08 95       	ret
    2fd2:	0e f0       	brts	.+2      	; 0x2fd6 <__fp_szero+0x10>
    2fd4:	a6 c0       	rjmp	.+332    	; 0x3122 <__fp_mpack>
    2fd6:	b2 cf       	rjmp	.-156    	; 0x2f3c <__fp_nan>
    2fd8:	68 94       	set
    2fda:	aa cf       	rjmp	.-172    	; 0x2f30 <__fp_inf>

00002fdc <log>:
    2fdc:	d9 df       	rcall	.-78     	; 0x2f90 <__fp_splitA>
    2fde:	c8 f3       	brcs	.-14     	; 0x2fd2 <__fp_szero+0xc>
    2fe0:	99 23       	and	r25, r25
    2fe2:	d1 f3       	breq	.-12     	; 0x2fd8 <__fp_szero+0x12>
    2fe4:	c6 f3       	brts	.-16     	; 0x2fd6 <__fp_szero+0x10>
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	1f 93       	push	r17
    2fec:	0f 93       	push	r16
    2fee:	ff 92       	push	r15
    2ff0:	c9 2f       	mov	r28, r25
    2ff2:	dd 27       	eor	r29, r29
    2ff4:	88 23       	and	r24, r24
    2ff6:	2a f0       	brmi	.+10     	; 0x3002 <log+0x26>
    2ff8:	21 97       	sbiw	r28, 0x01	; 1
    2ffa:	66 0f       	add	r22, r22
    2ffc:	77 1f       	adc	r23, r23
    2ffe:	88 1f       	adc	r24, r24
    3000:	da f7       	brpl	.-10     	; 0x2ff8 <log+0x1c>
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e8       	ldi	r20, 0x80	; 128
    3008:	5f eb       	ldi	r21, 0xBF	; 191
    300a:	9f e3       	ldi	r25, 0x3F	; 63
    300c:	88 39       	cpi	r24, 0x98	; 152
    300e:	20 f0       	brcs	.+8      	; 0x3018 <log+0x3c>
    3010:	80 3e       	cpi	r24, 0xE0	; 224
    3012:	30 f0       	brcs	.+12     	; 0x3020 <log+0x44>
    3014:	21 96       	adiw	r28, 0x01	; 1
    3016:	8f 77       	andi	r24, 0x7F	; 127
    3018:	56 de       	rcall	.-852    	; 0x2cc6 <__addsf3>
    301a:	ec ef       	ldi	r30, 0xFC	; 252
    301c:	f1 e0       	ldi	r31, 0x01	; 1
    301e:	03 c0       	rjmp	.+6      	; 0x3026 <log+0x4a>
    3020:	52 de       	rcall	.-860    	; 0x2cc6 <__addsf3>
    3022:	e9 e2       	ldi	r30, 0x29	; 41
    3024:	f2 e0       	ldi	r31, 0x02	; 2
    3026:	8b d0       	rcall	.+278    	; 0x313e <__fp_powser>
    3028:	8b 01       	movw	r16, r22
    302a:	be 01       	movw	r22, r28
    302c:	ec 01       	movw	r28, r24
    302e:	fb 2e       	mov	r15, r27
    3030:	6f 57       	subi	r22, 0x7F	; 127
    3032:	71 09       	sbc	r23, r1
    3034:	75 95       	asr	r23
    3036:	77 1f       	adc	r23, r23
    3038:	88 0b       	sbc	r24, r24
    303a:	99 0b       	sbc	r25, r25
    303c:	3e df       	rcall	.-388    	; 0x2eba <__floatsisf>
    303e:	28 e1       	ldi	r18, 0x18	; 24
    3040:	32 e7       	ldi	r19, 0x72	; 114
    3042:	41 e3       	ldi	r20, 0x31	; 49
    3044:	5f e3       	ldi	r21, 0x3F	; 63
    3046:	16 d0       	rcall	.+44     	; 0x3074 <__mulsf3x>
    3048:	af 2d       	mov	r26, r15
    304a:	98 01       	movw	r18, r16
    304c:	ae 01       	movw	r20, r28
    304e:	ff 90       	pop	r15
    3050:	0f 91       	pop	r16
    3052:	1f 91       	pop	r17
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	47 de       	rcall	.-882    	; 0x2ce8 <__addsf3x>
    305a:	81 cf       	rjmp	.-254    	; 0x2f5e <__fp_round>

0000305c <__mulsf3>:
    305c:	0b d0       	rcall	.+22     	; 0x3074 <__mulsf3x>
    305e:	7f cf       	rjmp	.-258    	; 0x2f5e <__fp_round>
    3060:	70 df       	rcall	.-288    	; 0x2f42 <__fp_pscA>
    3062:	28 f0       	brcs	.+10     	; 0x306e <__mulsf3+0x12>
    3064:	75 df       	rcall	.-278    	; 0x2f50 <__fp_pscB>
    3066:	18 f0       	brcs	.+6      	; 0x306e <__mulsf3+0x12>
    3068:	95 23       	and	r25, r21
    306a:	09 f0       	breq	.+2      	; 0x306e <__mulsf3+0x12>
    306c:	61 cf       	rjmp	.-318    	; 0x2f30 <__fp_inf>
    306e:	66 cf       	rjmp	.-308    	; 0x2f3c <__fp_nan>
    3070:	11 24       	eor	r1, r1
    3072:	a9 cf       	rjmp	.-174    	; 0x2fc6 <__fp_szero>

00003074 <__mulsf3x>:
    3074:	85 df       	rcall	.-246    	; 0x2f80 <__fp_split3>
    3076:	a0 f3       	brcs	.-24     	; 0x3060 <__mulsf3+0x4>

00003078 <__mulsf3_pse>:
    3078:	95 9f       	mul	r25, r21
    307a:	d1 f3       	breq	.-12     	; 0x3070 <__mulsf3+0x14>
    307c:	95 0f       	add	r25, r21
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	55 1f       	adc	r21, r21
    3082:	62 9f       	mul	r22, r18
    3084:	f0 01       	movw	r30, r0
    3086:	72 9f       	mul	r23, r18
    3088:	bb 27       	eor	r27, r27
    308a:	f0 0d       	add	r31, r0
    308c:	b1 1d       	adc	r27, r1
    308e:	63 9f       	mul	r22, r19
    3090:	aa 27       	eor	r26, r26
    3092:	f0 0d       	add	r31, r0
    3094:	b1 1d       	adc	r27, r1
    3096:	aa 1f       	adc	r26, r26
    3098:	64 9f       	mul	r22, r20
    309a:	66 27       	eor	r22, r22
    309c:	b0 0d       	add	r27, r0
    309e:	a1 1d       	adc	r26, r1
    30a0:	66 1f       	adc	r22, r22
    30a2:	82 9f       	mul	r24, r18
    30a4:	22 27       	eor	r18, r18
    30a6:	b0 0d       	add	r27, r0
    30a8:	a1 1d       	adc	r26, r1
    30aa:	62 1f       	adc	r22, r18
    30ac:	73 9f       	mul	r23, r19
    30ae:	b0 0d       	add	r27, r0
    30b0:	a1 1d       	adc	r26, r1
    30b2:	62 1f       	adc	r22, r18
    30b4:	83 9f       	mul	r24, r19
    30b6:	a0 0d       	add	r26, r0
    30b8:	61 1d       	adc	r22, r1
    30ba:	22 1f       	adc	r18, r18
    30bc:	74 9f       	mul	r23, r20
    30be:	33 27       	eor	r19, r19
    30c0:	a0 0d       	add	r26, r0
    30c2:	61 1d       	adc	r22, r1
    30c4:	23 1f       	adc	r18, r19
    30c6:	84 9f       	mul	r24, r20
    30c8:	60 0d       	add	r22, r0
    30ca:	21 1d       	adc	r18, r1
    30cc:	82 2f       	mov	r24, r18
    30ce:	76 2f       	mov	r23, r22
    30d0:	6a 2f       	mov	r22, r26
    30d2:	11 24       	eor	r1, r1
    30d4:	9f 57       	subi	r25, 0x7F	; 127
    30d6:	50 40       	sbci	r21, 0x00	; 0
    30d8:	8a f0       	brmi	.+34     	; 0x30fc <__mulsf3_pse+0x84>
    30da:	e1 f0       	breq	.+56     	; 0x3114 <__mulsf3_pse+0x9c>
    30dc:	88 23       	and	r24, r24
    30de:	4a f0       	brmi	.+18     	; 0x30f2 <__mulsf3_pse+0x7a>
    30e0:	ee 0f       	add	r30, r30
    30e2:	ff 1f       	adc	r31, r31
    30e4:	bb 1f       	adc	r27, r27
    30e6:	66 1f       	adc	r22, r22
    30e8:	77 1f       	adc	r23, r23
    30ea:	88 1f       	adc	r24, r24
    30ec:	91 50       	subi	r25, 0x01	; 1
    30ee:	50 40       	sbci	r21, 0x00	; 0
    30f0:	a9 f7       	brne	.-22     	; 0x30dc <__mulsf3_pse+0x64>
    30f2:	9e 3f       	cpi	r25, 0xFE	; 254
    30f4:	51 05       	cpc	r21, r1
    30f6:	70 f0       	brcs	.+28     	; 0x3114 <__mulsf3_pse+0x9c>
    30f8:	1b cf       	rjmp	.-458    	; 0x2f30 <__fp_inf>
    30fa:	65 cf       	rjmp	.-310    	; 0x2fc6 <__fp_szero>
    30fc:	5f 3f       	cpi	r21, 0xFF	; 255
    30fe:	ec f3       	brlt	.-6      	; 0x30fa <__mulsf3_pse+0x82>
    3100:	98 3e       	cpi	r25, 0xE8	; 232
    3102:	dc f3       	brlt	.-10     	; 0x30fa <__mulsf3_pse+0x82>
    3104:	86 95       	lsr	r24
    3106:	77 95       	ror	r23
    3108:	67 95       	ror	r22
    310a:	b7 95       	ror	r27
    310c:	f7 95       	ror	r31
    310e:	e7 95       	ror	r30
    3110:	9f 5f       	subi	r25, 0xFF	; 255
    3112:	c1 f7       	brne	.-16     	; 0x3104 <__mulsf3_pse+0x8c>
    3114:	fe 2b       	or	r31, r30
    3116:	88 0f       	add	r24, r24
    3118:	91 1d       	adc	r25, r1
    311a:	96 95       	lsr	r25
    311c:	87 95       	ror	r24
    311e:	97 f9       	bld	r25, 7
    3120:	08 95       	ret

00003122 <__fp_mpack>:
    3122:	9f 3f       	cpi	r25, 0xFF	; 255
    3124:	31 f0       	breq	.+12     	; 0x3132 <__fp_mpack_finite+0xc>

00003126 <__fp_mpack_finite>:
    3126:	91 50       	subi	r25, 0x01	; 1
    3128:	20 f4       	brcc	.+8      	; 0x3132 <__fp_mpack_finite+0xc>
    312a:	87 95       	ror	r24
    312c:	77 95       	ror	r23
    312e:	67 95       	ror	r22
    3130:	b7 95       	ror	r27
    3132:	88 0f       	add	r24, r24
    3134:	91 1d       	adc	r25, r1
    3136:	96 95       	lsr	r25
    3138:	87 95       	ror	r24
    313a:	97 f9       	bld	r25, 7
    313c:	08 95       	ret

0000313e <__fp_powser>:
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	1f 93       	push	r17
    3144:	0f 93       	push	r16
    3146:	ff 92       	push	r15
    3148:	ef 92       	push	r14
    314a:	df 92       	push	r13
    314c:	7b 01       	movw	r14, r22
    314e:	8c 01       	movw	r16, r24
    3150:	68 94       	set
    3152:	05 c0       	rjmp	.+10     	; 0x315e <__fp_powser+0x20>
    3154:	da 2e       	mov	r13, r26
    3156:	ef 01       	movw	r28, r30
    3158:	8d df       	rcall	.-230    	; 0x3074 <__mulsf3x>
    315a:	fe 01       	movw	r30, r28
    315c:	e8 94       	clt
    315e:	a5 91       	lpm	r26, Z+
    3160:	25 91       	lpm	r18, Z+
    3162:	35 91       	lpm	r19, Z+
    3164:	45 91       	lpm	r20, Z+
    3166:	55 91       	lpm	r21, Z+
    3168:	ae f3       	brts	.-22     	; 0x3154 <__fp_powser+0x16>
    316a:	ef 01       	movw	r28, r30
    316c:	bd dd       	rcall	.-1158   	; 0x2ce8 <__addsf3x>
    316e:	fe 01       	movw	r30, r28
    3170:	97 01       	movw	r18, r14
    3172:	a8 01       	movw	r20, r16
    3174:	da 94       	dec	r13
    3176:	79 f7       	brne	.-34     	; 0x3156 <__fp_powser+0x18>
    3178:	df 90       	pop	r13
    317a:	ef 90       	pop	r14
    317c:	ff 90       	pop	r15
    317e:	0f 91       	pop	r16
    3180:	1f 91       	pop	r17
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <vfprintf>:
    3188:	2f 92       	push	r2
    318a:	3f 92       	push	r3
    318c:	4f 92       	push	r4
    318e:	5f 92       	push	r5
    3190:	6f 92       	push	r6
    3192:	7f 92       	push	r7
    3194:	8f 92       	push	r8
    3196:	9f 92       	push	r9
    3198:	af 92       	push	r10
    319a:	bf 92       	push	r11
    319c:	cf 92       	push	r12
    319e:	df 92       	push	r13
    31a0:	ef 92       	push	r14
    31a2:	ff 92       	push	r15
    31a4:	0f 93       	push	r16
    31a6:	1f 93       	push	r17
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	60 97       	sbiw	r28, 0x10	; 16
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	7c 01       	movw	r14, r24
    31b8:	1b 01       	movw	r2, r22
    31ba:	6a 01       	movw	r12, r20
    31bc:	fc 01       	movw	r30, r24
    31be:	16 82       	std	Z+6, r1	; 0x06
    31c0:	17 82       	std	Z+7, r1	; 0x07
    31c2:	83 81       	ldd	r24, Z+3	; 0x03
    31c4:	81 ff       	sbrs	r24, 1
    31c6:	2a c3       	rjmp	.+1620   	; 0x381c <vfprintf+0x694>
    31c8:	9e 01       	movw	r18, r28
    31ca:	2f 5f       	subi	r18, 0xFF	; 255
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	39 01       	movw	r6, r18
    31d0:	f7 01       	movw	r30, r14
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	f1 01       	movw	r30, r2
    31d6:	93 fd       	sbrc	r25, 3
    31d8:	85 91       	lpm	r24, Z+
    31da:	93 ff       	sbrs	r25, 3
    31dc:	81 91       	ld	r24, Z+
    31de:	1f 01       	movw	r2, r30
    31e0:	88 23       	and	r24, r24
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <vfprintf+0x5e>
    31e4:	17 c3       	rjmp	.+1582   	; 0x3814 <vfprintf+0x68c>
    31e6:	85 32       	cpi	r24, 0x25	; 37
    31e8:	39 f4       	brne	.+14     	; 0x31f8 <vfprintf+0x70>
    31ea:	93 fd       	sbrc	r25, 3
    31ec:	85 91       	lpm	r24, Z+
    31ee:	93 ff       	sbrs	r25, 3
    31f0:	81 91       	ld	r24, Z+
    31f2:	1f 01       	movw	r2, r30
    31f4:	85 32       	cpi	r24, 0x25	; 37
    31f6:	31 f4       	brne	.+12     	; 0x3204 <vfprintf+0x7c>
    31f8:	b7 01       	movw	r22, r14
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	a2 d4       	rcall	.+2372   	; 0x3b42 <fputc>
    31fe:	56 01       	movw	r10, r12
    3200:	65 01       	movw	r12, r10
    3202:	e6 cf       	rjmp	.-52     	; 0x31d0 <vfprintf+0x48>
    3204:	10 e0       	ldi	r17, 0x00	; 0
    3206:	51 2c       	mov	r5, r1
    3208:	91 2c       	mov	r9, r1
    320a:	ff e1       	ldi	r31, 0x1F	; 31
    320c:	f9 15       	cp	r31, r9
    320e:	d8 f0       	brcs	.+54     	; 0x3246 <vfprintf+0xbe>
    3210:	8b 32       	cpi	r24, 0x2B	; 43
    3212:	79 f0       	breq	.+30     	; 0x3232 <vfprintf+0xaa>
    3214:	38 f4       	brcc	.+14     	; 0x3224 <vfprintf+0x9c>
    3216:	80 32       	cpi	r24, 0x20	; 32
    3218:	79 f0       	breq	.+30     	; 0x3238 <vfprintf+0xb0>
    321a:	83 32       	cpi	r24, 0x23	; 35
    321c:	a1 f4       	brne	.+40     	; 0x3246 <vfprintf+0xbe>
    321e:	f9 2d       	mov	r31, r9
    3220:	f0 61       	ori	r31, 0x10	; 16
    3222:	2e c0       	rjmp	.+92     	; 0x3280 <vfprintf+0xf8>
    3224:	8d 32       	cpi	r24, 0x2D	; 45
    3226:	61 f0       	breq	.+24     	; 0x3240 <vfprintf+0xb8>
    3228:	80 33       	cpi	r24, 0x30	; 48
    322a:	69 f4       	brne	.+26     	; 0x3246 <vfprintf+0xbe>
    322c:	29 2d       	mov	r18, r9
    322e:	21 60       	ori	r18, 0x01	; 1
    3230:	2d c0       	rjmp	.+90     	; 0x328c <vfprintf+0x104>
    3232:	39 2d       	mov	r19, r9
    3234:	32 60       	ori	r19, 0x02	; 2
    3236:	93 2e       	mov	r9, r19
    3238:	89 2d       	mov	r24, r9
    323a:	84 60       	ori	r24, 0x04	; 4
    323c:	98 2e       	mov	r9, r24
    323e:	2a c0       	rjmp	.+84     	; 0x3294 <vfprintf+0x10c>
    3240:	e9 2d       	mov	r30, r9
    3242:	e8 60       	ori	r30, 0x08	; 8
    3244:	15 c0       	rjmp	.+42     	; 0x3270 <vfprintf+0xe8>
    3246:	97 fc       	sbrc	r9, 7
    3248:	2d c0       	rjmp	.+90     	; 0x32a4 <vfprintf+0x11c>
    324a:	20 ed       	ldi	r18, 0xD0	; 208
    324c:	28 0f       	add	r18, r24
    324e:	2a 30       	cpi	r18, 0x0A	; 10
    3250:	88 f4       	brcc	.+34     	; 0x3274 <vfprintf+0xec>
    3252:	96 fe       	sbrs	r9, 6
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <vfprintf+0xda>
    3256:	3a e0       	ldi	r19, 0x0A	; 10
    3258:	13 9f       	mul	r17, r19
    325a:	20 0d       	add	r18, r0
    325c:	11 24       	eor	r1, r1
    325e:	12 2f       	mov	r17, r18
    3260:	19 c0       	rjmp	.+50     	; 0x3294 <vfprintf+0x10c>
    3262:	8a e0       	ldi	r24, 0x0A	; 10
    3264:	58 9e       	mul	r5, r24
    3266:	20 0d       	add	r18, r0
    3268:	11 24       	eor	r1, r1
    326a:	52 2e       	mov	r5, r18
    326c:	e9 2d       	mov	r30, r9
    326e:	e0 62       	ori	r30, 0x20	; 32
    3270:	9e 2e       	mov	r9, r30
    3272:	10 c0       	rjmp	.+32     	; 0x3294 <vfprintf+0x10c>
    3274:	8e 32       	cpi	r24, 0x2E	; 46
    3276:	31 f4       	brne	.+12     	; 0x3284 <vfprintf+0xfc>
    3278:	96 fc       	sbrc	r9, 6
    327a:	cc c2       	rjmp	.+1432   	; 0x3814 <vfprintf+0x68c>
    327c:	f9 2d       	mov	r31, r9
    327e:	f0 64       	ori	r31, 0x40	; 64
    3280:	9f 2e       	mov	r9, r31
    3282:	08 c0       	rjmp	.+16     	; 0x3294 <vfprintf+0x10c>
    3284:	8c 36       	cpi	r24, 0x6C	; 108
    3286:	21 f4       	brne	.+8      	; 0x3290 <vfprintf+0x108>
    3288:	29 2d       	mov	r18, r9
    328a:	20 68       	ori	r18, 0x80	; 128
    328c:	92 2e       	mov	r9, r18
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <vfprintf+0x10c>
    3290:	88 36       	cpi	r24, 0x68	; 104
    3292:	41 f4       	brne	.+16     	; 0x32a4 <vfprintf+0x11c>
    3294:	f1 01       	movw	r30, r2
    3296:	93 fd       	sbrc	r25, 3
    3298:	85 91       	lpm	r24, Z+
    329a:	93 ff       	sbrs	r25, 3
    329c:	81 91       	ld	r24, Z+
    329e:	1f 01       	movw	r2, r30
    32a0:	81 11       	cpse	r24, r1
    32a2:	b3 cf       	rjmp	.-154    	; 0x320a <vfprintf+0x82>
    32a4:	9b eb       	ldi	r25, 0xBB	; 187
    32a6:	98 0f       	add	r25, r24
    32a8:	93 30       	cpi	r25, 0x03	; 3
    32aa:	20 f4       	brcc	.+8      	; 0x32b4 <vfprintf+0x12c>
    32ac:	99 2d       	mov	r25, r9
    32ae:	90 61       	ori	r25, 0x10	; 16
    32b0:	80 5e       	subi	r24, 0xE0	; 224
    32b2:	07 c0       	rjmp	.+14     	; 0x32c2 <vfprintf+0x13a>
    32b4:	9b e9       	ldi	r25, 0x9B	; 155
    32b6:	98 0f       	add	r25, r24
    32b8:	93 30       	cpi	r25, 0x03	; 3
    32ba:	08 f0       	brcs	.+2      	; 0x32be <vfprintf+0x136>
    32bc:	59 c1       	rjmp	.+690    	; 0x3570 <vfprintf+0x3e8>
    32be:	99 2d       	mov	r25, r9
    32c0:	9f 7e       	andi	r25, 0xEF	; 239
    32c2:	96 ff       	sbrs	r25, 6
    32c4:	16 e0       	ldi	r17, 0x06	; 6
    32c6:	9f 73       	andi	r25, 0x3F	; 63
    32c8:	99 2e       	mov	r9, r25
    32ca:	85 36       	cpi	r24, 0x65	; 101
    32cc:	19 f4       	brne	.+6      	; 0x32d4 <vfprintf+0x14c>
    32ce:	90 64       	ori	r25, 0x40	; 64
    32d0:	99 2e       	mov	r9, r25
    32d2:	08 c0       	rjmp	.+16     	; 0x32e4 <vfprintf+0x15c>
    32d4:	86 36       	cpi	r24, 0x66	; 102
    32d6:	21 f4       	brne	.+8      	; 0x32e0 <vfprintf+0x158>
    32d8:	39 2f       	mov	r19, r25
    32da:	30 68       	ori	r19, 0x80	; 128
    32dc:	93 2e       	mov	r9, r19
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <vfprintf+0x15c>
    32e0:	11 11       	cpse	r17, r1
    32e2:	11 50       	subi	r17, 0x01	; 1
    32e4:	97 fe       	sbrs	r9, 7
    32e6:	07 c0       	rjmp	.+14     	; 0x32f6 <vfprintf+0x16e>
    32e8:	1c 33       	cpi	r17, 0x3C	; 60
    32ea:	50 f4       	brcc	.+20     	; 0x3300 <vfprintf+0x178>
    32ec:	44 24       	eor	r4, r4
    32ee:	43 94       	inc	r4
    32f0:	41 0e       	add	r4, r17
    32f2:	27 e0       	ldi	r18, 0x07	; 7
    32f4:	0b c0       	rjmp	.+22     	; 0x330c <vfprintf+0x184>
    32f6:	18 30       	cpi	r17, 0x08	; 8
    32f8:	38 f0       	brcs	.+14     	; 0x3308 <vfprintf+0x180>
    32fa:	27 e0       	ldi	r18, 0x07	; 7
    32fc:	17 e0       	ldi	r17, 0x07	; 7
    32fe:	05 c0       	rjmp	.+10     	; 0x330a <vfprintf+0x182>
    3300:	27 e0       	ldi	r18, 0x07	; 7
    3302:	9c e3       	ldi	r25, 0x3C	; 60
    3304:	49 2e       	mov	r4, r25
    3306:	02 c0       	rjmp	.+4      	; 0x330c <vfprintf+0x184>
    3308:	21 2f       	mov	r18, r17
    330a:	41 2c       	mov	r4, r1
    330c:	56 01       	movw	r10, r12
    330e:	84 e0       	ldi	r24, 0x04	; 4
    3310:	a8 0e       	add	r10, r24
    3312:	b1 1c       	adc	r11, r1
    3314:	f6 01       	movw	r30, r12
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	04 2d       	mov	r16, r4
    3320:	a3 01       	movw	r20, r6
    3322:	d7 d2       	rcall	.+1454   	; 0x38d2 <__ftoa_engine>
    3324:	6c 01       	movw	r12, r24
    3326:	f9 81       	ldd	r31, Y+1	; 0x01
    3328:	fc 87       	std	Y+12, r31	; 0x0c
    332a:	f0 ff       	sbrs	r31, 0
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <vfprintf+0x1aa>
    332e:	f3 ff       	sbrs	r31, 3
    3330:	06 c0       	rjmp	.+12     	; 0x333e <vfprintf+0x1b6>
    3332:	91 fc       	sbrc	r9, 1
    3334:	06 c0       	rjmp	.+12     	; 0x3342 <vfprintf+0x1ba>
    3336:	92 fe       	sbrs	r9, 2
    3338:	06 c0       	rjmp	.+12     	; 0x3346 <vfprintf+0x1be>
    333a:	00 e2       	ldi	r16, 0x20	; 32
    333c:	05 c0       	rjmp	.+10     	; 0x3348 <vfprintf+0x1c0>
    333e:	0d e2       	ldi	r16, 0x2D	; 45
    3340:	03 c0       	rjmp	.+6      	; 0x3348 <vfprintf+0x1c0>
    3342:	0b e2       	ldi	r16, 0x2B	; 43
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <vfprintf+0x1c0>
    3346:	00 e0       	ldi	r16, 0x00	; 0
    3348:	8c 85       	ldd	r24, Y+12	; 0x0c
    334a:	8c 70       	andi	r24, 0x0C	; 12
    334c:	19 f0       	breq	.+6      	; 0x3354 <vfprintf+0x1cc>
    334e:	01 11       	cpse	r16, r1
    3350:	43 c2       	rjmp	.+1158   	; 0x37d8 <vfprintf+0x650>
    3352:	80 c2       	rjmp	.+1280   	; 0x3854 <vfprintf+0x6cc>
    3354:	97 fe       	sbrs	r9, 7
    3356:	10 c0       	rjmp	.+32     	; 0x3378 <vfprintf+0x1f0>
    3358:	4c 0c       	add	r4, r12
    335a:	fc 85       	ldd	r31, Y+12	; 0x0c
    335c:	f4 ff       	sbrs	r31, 4
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <vfprintf+0x1e0>
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	81 33       	cpi	r24, 0x31	; 49
    3364:	09 f4       	brne	.+2      	; 0x3368 <vfprintf+0x1e0>
    3366:	4a 94       	dec	r4
    3368:	14 14       	cp	r1, r4
    336a:	74 f5       	brge	.+92     	; 0x33c8 <vfprintf+0x240>
    336c:	28 e0       	ldi	r18, 0x08	; 8
    336e:	24 15       	cp	r18, r4
    3370:	78 f5       	brcc	.+94     	; 0x33d0 <vfprintf+0x248>
    3372:	88 e0       	ldi	r24, 0x08	; 8
    3374:	48 2e       	mov	r4, r24
    3376:	2c c0       	rjmp	.+88     	; 0x33d0 <vfprintf+0x248>
    3378:	96 fc       	sbrc	r9, 6
    337a:	2a c0       	rjmp	.+84     	; 0x33d0 <vfprintf+0x248>
    337c:	81 2f       	mov	r24, r17
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	8c 15       	cp	r24, r12
    3382:	9d 05       	cpc	r25, r13
    3384:	9c f0       	brlt	.+38     	; 0x33ac <vfprintf+0x224>
    3386:	3c ef       	ldi	r19, 0xFC	; 252
    3388:	c3 16       	cp	r12, r19
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	d3 06       	cpc	r13, r19
    338e:	74 f0       	brlt	.+28     	; 0x33ac <vfprintf+0x224>
    3390:	89 2d       	mov	r24, r9
    3392:	80 68       	ori	r24, 0x80	; 128
    3394:	98 2e       	mov	r9, r24
    3396:	0a c0       	rjmp	.+20     	; 0x33ac <vfprintf+0x224>
    3398:	e2 e0       	ldi	r30, 0x02	; 2
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	ec 0f       	add	r30, r28
    339e:	fd 1f       	adc	r31, r29
    33a0:	e1 0f       	add	r30, r17
    33a2:	f1 1d       	adc	r31, r1
    33a4:	80 81       	ld	r24, Z
    33a6:	80 33       	cpi	r24, 0x30	; 48
    33a8:	19 f4       	brne	.+6      	; 0x33b0 <vfprintf+0x228>
    33aa:	11 50       	subi	r17, 0x01	; 1
    33ac:	11 11       	cpse	r17, r1
    33ae:	f4 cf       	rjmp	.-24     	; 0x3398 <vfprintf+0x210>
    33b0:	97 fe       	sbrs	r9, 7
    33b2:	0e c0       	rjmp	.+28     	; 0x33d0 <vfprintf+0x248>
    33b4:	44 24       	eor	r4, r4
    33b6:	43 94       	inc	r4
    33b8:	41 0e       	add	r4, r17
    33ba:	81 2f       	mov	r24, r17
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	c8 16       	cp	r12, r24
    33c0:	d9 06       	cpc	r13, r25
    33c2:	2c f4       	brge	.+10     	; 0x33ce <vfprintf+0x246>
    33c4:	1c 19       	sub	r17, r12
    33c6:	04 c0       	rjmp	.+8      	; 0x33d0 <vfprintf+0x248>
    33c8:	44 24       	eor	r4, r4
    33ca:	43 94       	inc	r4
    33cc:	01 c0       	rjmp	.+2      	; 0x33d0 <vfprintf+0x248>
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	97 fe       	sbrs	r9, 7
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <vfprintf+0x258>
    33d4:	1c 14       	cp	r1, r12
    33d6:	1d 04       	cpc	r1, r13
    33d8:	34 f4       	brge	.+12     	; 0x33e6 <vfprintf+0x25e>
    33da:	c6 01       	movw	r24, r12
    33dc:	01 96       	adiw	r24, 0x01	; 1
    33de:	05 c0       	rjmp	.+10     	; 0x33ea <vfprintf+0x262>
    33e0:	85 e0       	ldi	r24, 0x05	; 5
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <vfprintf+0x262>
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	01 11       	cpse	r16, r1
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	11 23       	and	r17, r17
    33f0:	31 f0       	breq	.+12     	; 0x33fe <vfprintf+0x276>
    33f2:	21 2f       	mov	r18, r17
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	2f 5f       	subi	r18, 0xFF	; 255
    33f8:	3f 4f       	sbci	r19, 0xFF	; 255
    33fa:	82 0f       	add	r24, r18
    33fc:	93 1f       	adc	r25, r19
    33fe:	25 2d       	mov	r18, r5
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	82 17       	cp	r24, r18
    3404:	93 07       	cpc	r25, r19
    3406:	14 f4       	brge	.+4      	; 0x340c <vfprintf+0x284>
    3408:	58 1a       	sub	r5, r24
    340a:	01 c0       	rjmp	.+2      	; 0x340e <vfprintf+0x286>
    340c:	51 2c       	mov	r5, r1
    340e:	89 2d       	mov	r24, r9
    3410:	89 70       	andi	r24, 0x09	; 9
    3412:	41 f4       	brne	.+16     	; 0x3424 <vfprintf+0x29c>
    3414:	55 20       	and	r5, r5
    3416:	31 f0       	breq	.+12     	; 0x3424 <vfprintf+0x29c>
    3418:	b7 01       	movw	r22, r14
    341a:	80 e2       	ldi	r24, 0x20	; 32
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	91 d3       	rcall	.+1826   	; 0x3b42 <fputc>
    3420:	5a 94       	dec	r5
    3422:	f8 cf       	rjmp	.-16     	; 0x3414 <vfprintf+0x28c>
    3424:	00 23       	and	r16, r16
    3426:	21 f0       	breq	.+8      	; 0x3430 <vfprintf+0x2a8>
    3428:	b7 01       	movw	r22, r14
    342a:	80 2f       	mov	r24, r16
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	89 d3       	rcall	.+1810   	; 0x3b42 <fputc>
    3430:	93 fc       	sbrc	r9, 3
    3432:	08 c0       	rjmp	.+16     	; 0x3444 <vfprintf+0x2bc>
    3434:	55 20       	and	r5, r5
    3436:	31 f0       	breq	.+12     	; 0x3444 <vfprintf+0x2bc>
    3438:	b7 01       	movw	r22, r14
    343a:	80 e3       	ldi	r24, 0x30	; 48
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	81 d3       	rcall	.+1794   	; 0x3b42 <fputc>
    3440:	5a 94       	dec	r5
    3442:	f8 cf       	rjmp	.-16     	; 0x3434 <vfprintf+0x2ac>
    3444:	97 fe       	sbrs	r9, 7
    3446:	4a c0       	rjmp	.+148    	; 0x34dc <vfprintf+0x354>
    3448:	46 01       	movw	r8, r12
    344a:	d7 fe       	sbrs	r13, 7
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <vfprintf+0x2ca>
    344e:	81 2c       	mov	r8, r1
    3450:	91 2c       	mov	r9, r1
    3452:	c6 01       	movw	r24, r12
    3454:	88 19       	sub	r24, r8
    3456:	99 09       	sbc	r25, r9
    3458:	f3 01       	movw	r30, r6
    345a:	e8 0f       	add	r30, r24
    345c:	f9 1f       	adc	r31, r25
    345e:	ed 87       	std	Y+13, r30	; 0x0d
    3460:	fe 87       	std	Y+14, r31	; 0x0e
    3462:	96 01       	movw	r18, r12
    3464:	24 19       	sub	r18, r4
    3466:	31 09       	sbc	r19, r1
    3468:	2f 87       	std	Y+15, r18	; 0x0f
    346a:	38 8b       	std	Y+16, r19	; 0x10
    346c:	01 2f       	mov	r16, r17
    346e:	10 e0       	ldi	r17, 0x00	; 0
    3470:	11 95       	neg	r17
    3472:	01 95       	neg	r16
    3474:	11 09       	sbc	r17, r1
    3476:	3f ef       	ldi	r19, 0xFF	; 255
    3478:	83 16       	cp	r8, r19
    347a:	93 06       	cpc	r9, r19
    347c:	21 f4       	brne	.+8      	; 0x3486 <vfprintf+0x2fe>
    347e:	b7 01       	movw	r22, r14
    3480:	8e e2       	ldi	r24, 0x2E	; 46
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	5e d3       	rcall	.+1724   	; 0x3b42 <fputc>
    3486:	c8 14       	cp	r12, r8
    3488:	d9 04       	cpc	r13, r9
    348a:	4c f0       	brlt	.+18     	; 0x349e <vfprintf+0x316>
    348c:	8f 85       	ldd	r24, Y+15	; 0x0f
    348e:	98 89       	ldd	r25, Y+16	; 0x10
    3490:	88 15       	cp	r24, r8
    3492:	99 05       	cpc	r25, r9
    3494:	24 f4       	brge	.+8      	; 0x349e <vfprintf+0x316>
    3496:	ed 85       	ldd	r30, Y+13	; 0x0d
    3498:	fe 85       	ldd	r31, Y+14	; 0x0e
    349a:	81 81       	ldd	r24, Z+1	; 0x01
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <vfprintf+0x318>
    349e:	80 e3       	ldi	r24, 0x30	; 48
    34a0:	f1 e0       	ldi	r31, 0x01	; 1
    34a2:	8f 1a       	sub	r8, r31
    34a4:	91 08       	sbc	r9, r1
    34a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    34a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    34aa:	2f 5f       	subi	r18, 0xFF	; 255
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	2d 87       	std	Y+13, r18	; 0x0d
    34b0:	3e 87       	std	Y+14, r19	; 0x0e
    34b2:	80 16       	cp	r8, r16
    34b4:	91 06       	cpc	r9, r17
    34b6:	24 f0       	brlt	.+8      	; 0x34c0 <vfprintf+0x338>
    34b8:	b7 01       	movw	r22, r14
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	42 d3       	rcall	.+1668   	; 0x3b42 <fputc>
    34be:	db cf       	rjmp	.-74     	; 0x3476 <vfprintf+0x2ee>
    34c0:	c8 14       	cp	r12, r8
    34c2:	d9 04       	cpc	r13, r9
    34c4:	41 f4       	brne	.+16     	; 0x34d6 <vfprintf+0x34e>
    34c6:	9a 81       	ldd	r25, Y+2	; 0x02
    34c8:	96 33       	cpi	r25, 0x36	; 54
    34ca:	20 f4       	brcc	.+8      	; 0x34d4 <vfprintf+0x34c>
    34cc:	95 33       	cpi	r25, 0x35	; 53
    34ce:	19 f4       	brne	.+6      	; 0x34d6 <vfprintf+0x34e>
    34d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    34d2:	34 ff       	sbrs	r19, 4
    34d4:	81 e3       	ldi	r24, 0x31	; 49
    34d6:	b7 01       	movw	r22, r14
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	48 c0       	rjmp	.+144    	; 0x356c <vfprintf+0x3e4>
    34dc:	8a 81       	ldd	r24, Y+2	; 0x02
    34de:	81 33       	cpi	r24, 0x31	; 49
    34e0:	19 f0       	breq	.+6      	; 0x34e8 <vfprintf+0x360>
    34e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    34e4:	9f 7e       	andi	r25, 0xEF	; 239
    34e6:	9c 87       	std	Y+12, r25	; 0x0c
    34e8:	b7 01       	movw	r22, r14
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	2a d3       	rcall	.+1620   	; 0x3b42 <fputc>
    34ee:	11 11       	cpse	r17, r1
    34f0:	05 c0       	rjmp	.+10     	; 0x34fc <vfprintf+0x374>
    34f2:	94 fc       	sbrc	r9, 4
    34f4:	16 c0       	rjmp	.+44     	; 0x3522 <vfprintf+0x39a>
    34f6:	85 e6       	ldi	r24, 0x65	; 101
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	15 c0       	rjmp	.+42     	; 0x3526 <vfprintf+0x39e>
    34fc:	b7 01       	movw	r22, r14
    34fe:	8e e2       	ldi	r24, 0x2E	; 46
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	1f d3       	rcall	.+1598   	; 0x3b42 <fputc>
    3504:	1e 5f       	subi	r17, 0xFE	; 254
    3506:	82 e0       	ldi	r24, 0x02	; 2
    3508:	01 e0       	ldi	r16, 0x01	; 1
    350a:	08 0f       	add	r16, r24
    350c:	f3 01       	movw	r30, r6
    350e:	e8 0f       	add	r30, r24
    3510:	f1 1d       	adc	r31, r1
    3512:	80 81       	ld	r24, Z
    3514:	b7 01       	movw	r22, r14
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	14 d3       	rcall	.+1576   	; 0x3b42 <fputc>
    351a:	80 2f       	mov	r24, r16
    351c:	01 13       	cpse	r16, r17
    351e:	f4 cf       	rjmp	.-24     	; 0x3508 <vfprintf+0x380>
    3520:	e8 cf       	rjmp	.-48     	; 0x34f2 <vfprintf+0x36a>
    3522:	85 e4       	ldi	r24, 0x45	; 69
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	b7 01       	movw	r22, r14
    3528:	0c d3       	rcall	.+1560   	; 0x3b42 <fputc>
    352a:	d7 fc       	sbrc	r13, 7
    352c:	06 c0       	rjmp	.+12     	; 0x353a <vfprintf+0x3b2>
    352e:	c1 14       	cp	r12, r1
    3530:	d1 04       	cpc	r13, r1
    3532:	41 f4       	brne	.+16     	; 0x3544 <vfprintf+0x3bc>
    3534:	ec 85       	ldd	r30, Y+12	; 0x0c
    3536:	e4 ff       	sbrs	r30, 4
    3538:	05 c0       	rjmp	.+10     	; 0x3544 <vfprintf+0x3bc>
    353a:	d1 94       	neg	r13
    353c:	c1 94       	neg	r12
    353e:	d1 08       	sbc	r13, r1
    3540:	8d e2       	ldi	r24, 0x2D	; 45
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <vfprintf+0x3be>
    3544:	8b e2       	ldi	r24, 0x2B	; 43
    3546:	b7 01       	movw	r22, r14
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	fb d2       	rcall	.+1526   	; 0x3b42 <fputc>
    354c:	80 e3       	ldi	r24, 0x30	; 48
    354e:	2a e0       	ldi	r18, 0x0A	; 10
    3550:	c2 16       	cp	r12, r18
    3552:	d1 04       	cpc	r13, r1
    3554:	2c f0       	brlt	.+10     	; 0x3560 <vfprintf+0x3d8>
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	fa e0       	ldi	r31, 0x0A	; 10
    355a:	cf 1a       	sub	r12, r31
    355c:	d1 08       	sbc	r13, r1
    355e:	f7 cf       	rjmp	.-18     	; 0x354e <vfprintf+0x3c6>
    3560:	b7 01       	movw	r22, r14
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	ee d2       	rcall	.+1500   	; 0x3b42 <fputc>
    3566:	b7 01       	movw	r22, r14
    3568:	c6 01       	movw	r24, r12
    356a:	c0 96       	adiw	r24, 0x30	; 48
    356c:	ea d2       	rcall	.+1492   	; 0x3b42 <fputc>
    356e:	49 c1       	rjmp	.+658    	; 0x3802 <vfprintf+0x67a>
    3570:	83 36       	cpi	r24, 0x63	; 99
    3572:	31 f0       	breq	.+12     	; 0x3580 <vfprintf+0x3f8>
    3574:	83 37       	cpi	r24, 0x73	; 115
    3576:	79 f0       	breq	.+30     	; 0x3596 <vfprintf+0x40e>
    3578:	83 35       	cpi	r24, 0x53	; 83
    357a:	09 f0       	breq	.+2      	; 0x357e <vfprintf+0x3f6>
    357c:	52 c0       	rjmp	.+164    	; 0x3622 <vfprintf+0x49a>
    357e:	1f c0       	rjmp	.+62     	; 0x35be <vfprintf+0x436>
    3580:	56 01       	movw	r10, r12
    3582:	32 e0       	ldi	r19, 0x02	; 2
    3584:	a3 0e       	add	r10, r19
    3586:	b1 1c       	adc	r11, r1
    3588:	f6 01       	movw	r30, r12
    358a:	80 81       	ld	r24, Z
    358c:	89 83       	std	Y+1, r24	; 0x01
    358e:	01 e0       	ldi	r16, 0x01	; 1
    3590:	10 e0       	ldi	r17, 0x00	; 0
    3592:	63 01       	movw	r12, r6
    3594:	11 c0       	rjmp	.+34     	; 0x35b8 <vfprintf+0x430>
    3596:	56 01       	movw	r10, r12
    3598:	f2 e0       	ldi	r31, 0x02	; 2
    359a:	af 0e       	add	r10, r31
    359c:	b1 1c       	adc	r11, r1
    359e:	f6 01       	movw	r30, r12
    35a0:	c0 80       	ld	r12, Z
    35a2:	d1 80       	ldd	r13, Z+1	; 0x01
    35a4:	96 fe       	sbrs	r9, 6
    35a6:	03 c0       	rjmp	.+6      	; 0x35ae <vfprintf+0x426>
    35a8:	61 2f       	mov	r22, r17
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	02 c0       	rjmp	.+4      	; 0x35b2 <vfprintf+0x42a>
    35ae:	6f ef       	ldi	r22, 0xFF	; 255
    35b0:	7f ef       	ldi	r23, 0xFF	; 255
    35b2:	c6 01       	movw	r24, r12
    35b4:	71 d2       	rcall	.+1250   	; 0x3a98 <strnlen>
    35b6:	8c 01       	movw	r16, r24
    35b8:	f9 2d       	mov	r31, r9
    35ba:	ff 77       	andi	r31, 0x7F	; 127
    35bc:	13 c0       	rjmp	.+38     	; 0x35e4 <vfprintf+0x45c>
    35be:	56 01       	movw	r10, r12
    35c0:	22 e0       	ldi	r18, 0x02	; 2
    35c2:	a2 0e       	add	r10, r18
    35c4:	b1 1c       	adc	r11, r1
    35c6:	f6 01       	movw	r30, r12
    35c8:	c0 80       	ld	r12, Z
    35ca:	d1 80       	ldd	r13, Z+1	; 0x01
    35cc:	96 fe       	sbrs	r9, 6
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <vfprintf+0x44e>
    35d0:	61 2f       	mov	r22, r17
    35d2:	70 e0       	ldi	r23, 0x00	; 0
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <vfprintf+0x452>
    35d6:	6f ef       	ldi	r22, 0xFF	; 255
    35d8:	7f ef       	ldi	r23, 0xFF	; 255
    35da:	c6 01       	movw	r24, r12
    35dc:	52 d2       	rcall	.+1188   	; 0x3a82 <strnlen_P>
    35de:	8c 01       	movw	r16, r24
    35e0:	f9 2d       	mov	r31, r9
    35e2:	f0 68       	ori	r31, 0x80	; 128
    35e4:	9f 2e       	mov	r9, r31
    35e6:	f3 fd       	sbrc	r31, 3
    35e8:	18 c0       	rjmp	.+48     	; 0x361a <vfprintf+0x492>
    35ea:	85 2d       	mov	r24, r5
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	08 17       	cp	r16, r24
    35f0:	19 07       	cpc	r17, r25
    35f2:	98 f4       	brcc	.+38     	; 0x361a <vfprintf+0x492>
    35f4:	b7 01       	movw	r22, r14
    35f6:	80 e2       	ldi	r24, 0x20	; 32
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a3 d2       	rcall	.+1350   	; 0x3b42 <fputc>
    35fc:	5a 94       	dec	r5
    35fe:	f5 cf       	rjmp	.-22     	; 0x35ea <vfprintf+0x462>
    3600:	f6 01       	movw	r30, r12
    3602:	97 fc       	sbrc	r9, 7
    3604:	85 91       	lpm	r24, Z+
    3606:	97 fe       	sbrs	r9, 7
    3608:	81 91       	ld	r24, Z+
    360a:	6f 01       	movw	r12, r30
    360c:	b7 01       	movw	r22, r14
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	98 d2       	rcall	.+1328   	; 0x3b42 <fputc>
    3612:	51 10       	cpse	r5, r1
    3614:	5a 94       	dec	r5
    3616:	01 50       	subi	r16, 0x01	; 1
    3618:	11 09       	sbc	r17, r1
    361a:	01 15       	cp	r16, r1
    361c:	11 05       	cpc	r17, r1
    361e:	81 f7       	brne	.-32     	; 0x3600 <vfprintf+0x478>
    3620:	f0 c0       	rjmp	.+480    	; 0x3802 <vfprintf+0x67a>
    3622:	84 36       	cpi	r24, 0x64	; 100
    3624:	11 f0       	breq	.+4      	; 0x362a <vfprintf+0x4a2>
    3626:	89 36       	cpi	r24, 0x69	; 105
    3628:	59 f5       	brne	.+86     	; 0x3680 <vfprintf+0x4f8>
    362a:	56 01       	movw	r10, r12
    362c:	97 fe       	sbrs	r9, 7
    362e:	09 c0       	rjmp	.+18     	; 0x3642 <vfprintf+0x4ba>
    3630:	24 e0       	ldi	r18, 0x04	; 4
    3632:	a2 0e       	add	r10, r18
    3634:	b1 1c       	adc	r11, r1
    3636:	f6 01       	movw	r30, r12
    3638:	60 81       	ld	r22, Z
    363a:	71 81       	ldd	r23, Z+1	; 0x01
    363c:	82 81       	ldd	r24, Z+2	; 0x02
    363e:	93 81       	ldd	r25, Z+3	; 0x03
    3640:	0a c0       	rjmp	.+20     	; 0x3656 <vfprintf+0x4ce>
    3642:	f2 e0       	ldi	r31, 0x02	; 2
    3644:	af 0e       	add	r10, r31
    3646:	b1 1c       	adc	r11, r1
    3648:	f6 01       	movw	r30, r12
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	07 2e       	mov	r0, r23
    3650:	00 0c       	add	r0, r0
    3652:	88 0b       	sbc	r24, r24
    3654:	99 0b       	sbc	r25, r25
    3656:	f9 2d       	mov	r31, r9
    3658:	ff 76       	andi	r31, 0x6F	; 111
    365a:	9f 2e       	mov	r9, r31
    365c:	97 ff       	sbrs	r25, 7
    365e:	09 c0       	rjmp	.+18     	; 0x3672 <vfprintf+0x4ea>
    3660:	90 95       	com	r25
    3662:	80 95       	com	r24
    3664:	70 95       	com	r23
    3666:	61 95       	neg	r22
    3668:	7f 4f       	sbci	r23, 0xFF	; 255
    366a:	8f 4f       	sbci	r24, 0xFF	; 255
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	f0 68       	ori	r31, 0x80	; 128
    3670:	9f 2e       	mov	r9, r31
    3672:	2a e0       	ldi	r18, 0x0A	; 10
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	a3 01       	movw	r20, r6
    3678:	e3 d2       	rcall	.+1478   	; 0x3c40 <__ultoa_invert>
    367a:	c8 2e       	mov	r12, r24
    367c:	c6 18       	sub	r12, r6
    367e:	3e c0       	rjmp	.+124    	; 0x36fc <vfprintf+0x574>
    3680:	09 2d       	mov	r16, r9
    3682:	85 37       	cpi	r24, 0x75	; 117
    3684:	21 f4       	brne	.+8      	; 0x368e <vfprintf+0x506>
    3686:	0f 7e       	andi	r16, 0xEF	; 239
    3688:	2a e0       	ldi	r18, 0x0A	; 10
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	1d c0       	rjmp	.+58     	; 0x36c8 <vfprintf+0x540>
    368e:	09 7f       	andi	r16, 0xF9	; 249
    3690:	8f 36       	cpi	r24, 0x6F	; 111
    3692:	91 f0       	breq	.+36     	; 0x36b8 <vfprintf+0x530>
    3694:	18 f4       	brcc	.+6      	; 0x369c <vfprintf+0x514>
    3696:	88 35       	cpi	r24, 0x58	; 88
    3698:	59 f0       	breq	.+22     	; 0x36b0 <vfprintf+0x528>
    369a:	bc c0       	rjmp	.+376    	; 0x3814 <vfprintf+0x68c>
    369c:	80 37       	cpi	r24, 0x70	; 112
    369e:	19 f0       	breq	.+6      	; 0x36a6 <vfprintf+0x51e>
    36a0:	88 37       	cpi	r24, 0x78	; 120
    36a2:	11 f0       	breq	.+4      	; 0x36a8 <vfprintf+0x520>
    36a4:	b7 c0       	rjmp	.+366    	; 0x3814 <vfprintf+0x68c>
    36a6:	00 61       	ori	r16, 0x10	; 16
    36a8:	04 ff       	sbrs	r16, 4
    36aa:	09 c0       	rjmp	.+18     	; 0x36be <vfprintf+0x536>
    36ac:	04 60       	ori	r16, 0x04	; 4
    36ae:	07 c0       	rjmp	.+14     	; 0x36be <vfprintf+0x536>
    36b0:	94 fe       	sbrs	r9, 4
    36b2:	08 c0       	rjmp	.+16     	; 0x36c4 <vfprintf+0x53c>
    36b4:	06 60       	ori	r16, 0x06	; 6
    36b6:	06 c0       	rjmp	.+12     	; 0x36c4 <vfprintf+0x53c>
    36b8:	28 e0       	ldi	r18, 0x08	; 8
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	05 c0       	rjmp	.+10     	; 0x36c8 <vfprintf+0x540>
    36be:	20 e1       	ldi	r18, 0x10	; 16
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <vfprintf+0x540>
    36c4:	20 e1       	ldi	r18, 0x10	; 16
    36c6:	32 e0       	ldi	r19, 0x02	; 2
    36c8:	56 01       	movw	r10, r12
    36ca:	07 ff       	sbrs	r16, 7
    36cc:	09 c0       	rjmp	.+18     	; 0x36e0 <vfprintf+0x558>
    36ce:	84 e0       	ldi	r24, 0x04	; 4
    36d0:	a8 0e       	add	r10, r24
    36d2:	b1 1c       	adc	r11, r1
    36d4:	f6 01       	movw	r30, r12
    36d6:	60 81       	ld	r22, Z
    36d8:	71 81       	ldd	r23, Z+1	; 0x01
    36da:	82 81       	ldd	r24, Z+2	; 0x02
    36dc:	93 81       	ldd	r25, Z+3	; 0x03
    36de:	08 c0       	rjmp	.+16     	; 0x36f0 <vfprintf+0x568>
    36e0:	f2 e0       	ldi	r31, 0x02	; 2
    36e2:	af 0e       	add	r10, r31
    36e4:	b1 1c       	adc	r11, r1
    36e6:	f6 01       	movw	r30, r12
    36e8:	60 81       	ld	r22, Z
    36ea:	71 81       	ldd	r23, Z+1	; 0x01
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a3 01       	movw	r20, r6
    36f2:	a6 d2       	rcall	.+1356   	; 0x3c40 <__ultoa_invert>
    36f4:	c8 2e       	mov	r12, r24
    36f6:	c6 18       	sub	r12, r6
    36f8:	0f 77       	andi	r16, 0x7F	; 127
    36fa:	90 2e       	mov	r9, r16
    36fc:	96 fe       	sbrs	r9, 6
    36fe:	0b c0       	rjmp	.+22     	; 0x3716 <vfprintf+0x58e>
    3700:	09 2d       	mov	r16, r9
    3702:	0e 7f       	andi	r16, 0xFE	; 254
    3704:	c1 16       	cp	r12, r17
    3706:	50 f4       	brcc	.+20     	; 0x371c <vfprintf+0x594>
    3708:	94 fe       	sbrs	r9, 4
    370a:	0a c0       	rjmp	.+20     	; 0x3720 <vfprintf+0x598>
    370c:	92 fc       	sbrc	r9, 2
    370e:	08 c0       	rjmp	.+16     	; 0x3720 <vfprintf+0x598>
    3710:	09 2d       	mov	r16, r9
    3712:	0e 7e       	andi	r16, 0xEE	; 238
    3714:	05 c0       	rjmp	.+10     	; 0x3720 <vfprintf+0x598>
    3716:	dc 2c       	mov	r13, r12
    3718:	09 2d       	mov	r16, r9
    371a:	03 c0       	rjmp	.+6      	; 0x3722 <vfprintf+0x59a>
    371c:	dc 2c       	mov	r13, r12
    371e:	01 c0       	rjmp	.+2      	; 0x3722 <vfprintf+0x59a>
    3720:	d1 2e       	mov	r13, r17
    3722:	04 ff       	sbrs	r16, 4
    3724:	0d c0       	rjmp	.+26     	; 0x3740 <vfprintf+0x5b8>
    3726:	fe 01       	movw	r30, r28
    3728:	ec 0d       	add	r30, r12
    372a:	f1 1d       	adc	r31, r1
    372c:	80 81       	ld	r24, Z
    372e:	80 33       	cpi	r24, 0x30	; 48
    3730:	11 f4       	brne	.+4      	; 0x3736 <vfprintf+0x5ae>
    3732:	09 7e       	andi	r16, 0xE9	; 233
    3734:	09 c0       	rjmp	.+18     	; 0x3748 <vfprintf+0x5c0>
    3736:	02 ff       	sbrs	r16, 2
    3738:	06 c0       	rjmp	.+12     	; 0x3746 <vfprintf+0x5be>
    373a:	d3 94       	inc	r13
    373c:	d3 94       	inc	r13
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <vfprintf+0x5c0>
    3740:	80 2f       	mov	r24, r16
    3742:	86 78       	andi	r24, 0x86	; 134
    3744:	09 f0       	breq	.+2      	; 0x3748 <vfprintf+0x5c0>
    3746:	d3 94       	inc	r13
    3748:	03 fd       	sbrc	r16, 3
    374a:	10 c0       	rjmp	.+32     	; 0x376c <vfprintf+0x5e4>
    374c:	00 ff       	sbrs	r16, 0
    374e:	06 c0       	rjmp	.+12     	; 0x375c <vfprintf+0x5d4>
    3750:	1c 2d       	mov	r17, r12
    3752:	d5 14       	cp	r13, r5
    3754:	78 f4       	brcc	.+30     	; 0x3774 <vfprintf+0x5ec>
    3756:	15 0d       	add	r17, r5
    3758:	1d 19       	sub	r17, r13
    375a:	0c c0       	rjmp	.+24     	; 0x3774 <vfprintf+0x5ec>
    375c:	d5 14       	cp	r13, r5
    375e:	50 f4       	brcc	.+20     	; 0x3774 <vfprintf+0x5ec>
    3760:	b7 01       	movw	r22, r14
    3762:	80 e2       	ldi	r24, 0x20	; 32
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	ed d1       	rcall	.+986    	; 0x3b42 <fputc>
    3768:	d3 94       	inc	r13
    376a:	f8 cf       	rjmp	.-16     	; 0x375c <vfprintf+0x5d4>
    376c:	d5 14       	cp	r13, r5
    376e:	10 f4       	brcc	.+4      	; 0x3774 <vfprintf+0x5ec>
    3770:	5d 18       	sub	r5, r13
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <vfprintf+0x5ee>
    3774:	51 2c       	mov	r5, r1
    3776:	04 ff       	sbrs	r16, 4
    3778:	0f c0       	rjmp	.+30     	; 0x3798 <vfprintf+0x610>
    377a:	b7 01       	movw	r22, r14
    377c:	80 e3       	ldi	r24, 0x30	; 48
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	e0 d1       	rcall	.+960    	; 0x3b42 <fputc>
    3782:	02 ff       	sbrs	r16, 2
    3784:	16 c0       	rjmp	.+44     	; 0x37b2 <vfprintf+0x62a>
    3786:	01 fd       	sbrc	r16, 1
    3788:	03 c0       	rjmp	.+6      	; 0x3790 <vfprintf+0x608>
    378a:	88 e7       	ldi	r24, 0x78	; 120
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <vfprintf+0x60c>
    3790:	88 e5       	ldi	r24, 0x58	; 88
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	b7 01       	movw	r22, r14
    3796:	0c c0       	rjmp	.+24     	; 0x37b0 <vfprintf+0x628>
    3798:	80 2f       	mov	r24, r16
    379a:	86 78       	andi	r24, 0x86	; 134
    379c:	51 f0       	breq	.+20     	; 0x37b2 <vfprintf+0x62a>
    379e:	01 ff       	sbrs	r16, 1
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <vfprintf+0x61e>
    37a2:	8b e2       	ldi	r24, 0x2B	; 43
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <vfprintf+0x620>
    37a6:	80 e2       	ldi	r24, 0x20	; 32
    37a8:	07 fd       	sbrc	r16, 7
    37aa:	8d e2       	ldi	r24, 0x2D	; 45
    37ac:	b7 01       	movw	r22, r14
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	c8 d1       	rcall	.+912    	; 0x3b42 <fputc>
    37b2:	c1 16       	cp	r12, r17
    37b4:	30 f4       	brcc	.+12     	; 0x37c2 <vfprintf+0x63a>
    37b6:	b7 01       	movw	r22, r14
    37b8:	80 e3       	ldi	r24, 0x30	; 48
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	c2 d1       	rcall	.+900    	; 0x3b42 <fputc>
    37be:	11 50       	subi	r17, 0x01	; 1
    37c0:	f8 cf       	rjmp	.-16     	; 0x37b2 <vfprintf+0x62a>
    37c2:	ca 94       	dec	r12
    37c4:	f3 01       	movw	r30, r6
    37c6:	ec 0d       	add	r30, r12
    37c8:	f1 1d       	adc	r31, r1
    37ca:	80 81       	ld	r24, Z
    37cc:	b7 01       	movw	r22, r14
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	b8 d1       	rcall	.+880    	; 0x3b42 <fputc>
    37d2:	c1 10       	cpse	r12, r1
    37d4:	f6 cf       	rjmp	.-20     	; 0x37c2 <vfprintf+0x63a>
    37d6:	15 c0       	rjmp	.+42     	; 0x3802 <vfprintf+0x67a>
    37d8:	f4 e0       	ldi	r31, 0x04	; 4
    37da:	f5 15       	cp	r31, r5
    37dc:	50 f5       	brcc	.+84     	; 0x3832 <vfprintf+0x6aa>
    37de:	84 e0       	ldi	r24, 0x04	; 4
    37e0:	58 1a       	sub	r5, r24
    37e2:	93 fe       	sbrs	r9, 3
    37e4:	1e c0       	rjmp	.+60     	; 0x3822 <vfprintf+0x69a>
    37e6:	01 11       	cpse	r16, r1
    37e8:	25 c0       	rjmp	.+74     	; 0x3834 <vfprintf+0x6ac>
    37ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    37ec:	23 ff       	sbrs	r18, 3
    37ee:	27 c0       	rjmp	.+78     	; 0x383e <vfprintf+0x6b6>
    37f0:	06 e5       	ldi	r16, 0x56	; 86
    37f2:	12 e0       	ldi	r17, 0x02	; 2
    37f4:	39 2d       	mov	r19, r9
    37f6:	30 71       	andi	r19, 0x10	; 16
    37f8:	93 2e       	mov	r9, r19
    37fa:	f8 01       	movw	r30, r16
    37fc:	84 91       	lpm	r24, Z
    37fe:	81 11       	cpse	r24, r1
    3800:	21 c0       	rjmp	.+66     	; 0x3844 <vfprintf+0x6bc>
    3802:	55 20       	and	r5, r5
    3804:	09 f4       	brne	.+2      	; 0x3808 <vfprintf+0x680>
    3806:	fc cc       	rjmp	.-1544   	; 0x3200 <vfprintf+0x78>
    3808:	b7 01       	movw	r22, r14
    380a:	80 e2       	ldi	r24, 0x20	; 32
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	99 d1       	rcall	.+818    	; 0x3b42 <fputc>
    3810:	5a 94       	dec	r5
    3812:	f7 cf       	rjmp	.-18     	; 0x3802 <vfprintf+0x67a>
    3814:	f7 01       	movw	r30, r14
    3816:	86 81       	ldd	r24, Z+6	; 0x06
    3818:	97 81       	ldd	r25, Z+7	; 0x07
    381a:	23 c0       	rjmp	.+70     	; 0x3862 <vfprintf+0x6da>
    381c:	8f ef       	ldi	r24, 0xFF	; 255
    381e:	9f ef       	ldi	r25, 0xFF	; 255
    3820:	20 c0       	rjmp	.+64     	; 0x3862 <vfprintf+0x6da>
    3822:	b7 01       	movw	r22, r14
    3824:	80 e2       	ldi	r24, 0x20	; 32
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	8c d1       	rcall	.+792    	; 0x3b42 <fputc>
    382a:	5a 94       	dec	r5
    382c:	51 10       	cpse	r5, r1
    382e:	f9 cf       	rjmp	.-14     	; 0x3822 <vfprintf+0x69a>
    3830:	da cf       	rjmp	.-76     	; 0x37e6 <vfprintf+0x65e>
    3832:	51 2c       	mov	r5, r1
    3834:	b7 01       	movw	r22, r14
    3836:	80 2f       	mov	r24, r16
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	83 d1       	rcall	.+774    	; 0x3b42 <fputc>
    383c:	d6 cf       	rjmp	.-84     	; 0x37ea <vfprintf+0x662>
    383e:	0a e5       	ldi	r16, 0x5A	; 90
    3840:	12 e0       	ldi	r17, 0x02	; 2
    3842:	d8 cf       	rjmp	.-80     	; 0x37f4 <vfprintf+0x66c>
    3844:	91 10       	cpse	r9, r1
    3846:	80 52       	subi	r24, 0x20	; 32
    3848:	b7 01       	movw	r22, r14
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	7a d1       	rcall	.+756    	; 0x3b42 <fputc>
    384e:	0f 5f       	subi	r16, 0xFF	; 255
    3850:	1f 4f       	sbci	r17, 0xFF	; 255
    3852:	d3 cf       	rjmp	.-90     	; 0x37fa <vfprintf+0x672>
    3854:	23 e0       	ldi	r18, 0x03	; 3
    3856:	25 15       	cp	r18, r5
    3858:	10 f4       	brcc	.+4      	; 0x385e <vfprintf+0x6d6>
    385a:	83 e0       	ldi	r24, 0x03	; 3
    385c:	c1 cf       	rjmp	.-126    	; 0x37e0 <vfprintf+0x658>
    385e:	51 2c       	mov	r5, r1
    3860:	c4 cf       	rjmp	.-120    	; 0x37ea <vfprintf+0x662>
    3862:	60 96       	adiw	r28, 0x10	; 16
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	df 90       	pop	r13
    3876:	cf 90       	pop	r12
    3878:	bf 90       	pop	r11
    387a:	af 90       	pop	r10
    387c:	9f 90       	pop	r9
    387e:	8f 90       	pop	r8
    3880:	7f 90       	pop	r7
    3882:	6f 90       	pop	r6
    3884:	5f 90       	pop	r5
    3886:	4f 90       	pop	r4
    3888:	3f 90       	pop	r3
    388a:	2f 90       	pop	r2
    388c:	08 95       	ret

0000388e <__udivmodsi4>:
    388e:	a1 e2       	ldi	r26, 0x21	; 33
    3890:	1a 2e       	mov	r1, r26
    3892:	aa 1b       	sub	r26, r26
    3894:	bb 1b       	sub	r27, r27
    3896:	fd 01       	movw	r30, r26
    3898:	0d c0       	rjmp	.+26     	; 0x38b4 <__udivmodsi4_ep>

0000389a <__udivmodsi4_loop>:
    389a:	aa 1f       	adc	r26, r26
    389c:	bb 1f       	adc	r27, r27
    389e:	ee 1f       	adc	r30, r30
    38a0:	ff 1f       	adc	r31, r31
    38a2:	a2 17       	cp	r26, r18
    38a4:	b3 07       	cpc	r27, r19
    38a6:	e4 07       	cpc	r30, r20
    38a8:	f5 07       	cpc	r31, r21
    38aa:	20 f0       	brcs	.+8      	; 0x38b4 <__udivmodsi4_ep>
    38ac:	a2 1b       	sub	r26, r18
    38ae:	b3 0b       	sbc	r27, r19
    38b0:	e4 0b       	sbc	r30, r20
    38b2:	f5 0b       	sbc	r31, r21

000038b4 <__udivmodsi4_ep>:
    38b4:	66 1f       	adc	r22, r22
    38b6:	77 1f       	adc	r23, r23
    38b8:	88 1f       	adc	r24, r24
    38ba:	99 1f       	adc	r25, r25
    38bc:	1a 94       	dec	r1
    38be:	69 f7       	brne	.-38     	; 0x389a <__udivmodsi4_loop>
    38c0:	60 95       	com	r22
    38c2:	70 95       	com	r23
    38c4:	80 95       	com	r24
    38c6:	90 95       	com	r25
    38c8:	9b 01       	movw	r18, r22
    38ca:	ac 01       	movw	r20, r24
    38cc:	bd 01       	movw	r22, r26
    38ce:	cf 01       	movw	r24, r30
    38d0:	08 95       	ret

000038d2 <__ftoa_engine>:
    38d2:	28 30       	cpi	r18, 0x08	; 8
    38d4:	08 f0       	brcs	.+2      	; 0x38d8 <__ftoa_engine+0x6>
    38d6:	27 e0       	ldi	r18, 0x07	; 7
    38d8:	33 27       	eor	r19, r19
    38da:	da 01       	movw	r26, r20
    38dc:	99 0f       	add	r25, r25
    38de:	31 1d       	adc	r19, r1
    38e0:	87 fd       	sbrc	r24, 7
    38e2:	91 60       	ori	r25, 0x01	; 1
    38e4:	00 96       	adiw	r24, 0x00	; 0
    38e6:	61 05       	cpc	r22, r1
    38e8:	71 05       	cpc	r23, r1
    38ea:	39 f4       	brne	.+14     	; 0x38fa <__ftoa_engine+0x28>
    38ec:	32 60       	ori	r19, 0x02	; 2
    38ee:	2e 5f       	subi	r18, 0xFE	; 254
    38f0:	3d 93       	st	X+, r19
    38f2:	30 e3       	ldi	r19, 0x30	; 48
    38f4:	2a 95       	dec	r18
    38f6:	e1 f7       	brne	.-8      	; 0x38f0 <__ftoa_engine+0x1e>
    38f8:	08 95       	ret
    38fa:	9f 3f       	cpi	r25, 0xFF	; 255
    38fc:	30 f0       	brcs	.+12     	; 0x390a <__ftoa_engine+0x38>
    38fe:	80 38       	cpi	r24, 0x80	; 128
    3900:	71 05       	cpc	r23, r1
    3902:	61 05       	cpc	r22, r1
    3904:	09 f0       	breq	.+2      	; 0x3908 <__ftoa_engine+0x36>
    3906:	3c 5f       	subi	r19, 0xFC	; 252
    3908:	3c 5f       	subi	r19, 0xFC	; 252
    390a:	3d 93       	st	X+, r19
    390c:	91 30       	cpi	r25, 0x01	; 1
    390e:	08 f0       	brcs	.+2      	; 0x3912 <__ftoa_engine+0x40>
    3910:	80 68       	ori	r24, 0x80	; 128
    3912:	91 1d       	adc	r25, r1
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	1f 93       	push	r17
    391a:	0f 93       	push	r16
    391c:	ff 92       	push	r15
    391e:	ef 92       	push	r14
    3920:	19 2f       	mov	r17, r25
    3922:	98 7f       	andi	r25, 0xF8	; 248
    3924:	96 95       	lsr	r25
    3926:	e9 2f       	mov	r30, r25
    3928:	96 95       	lsr	r25
    392a:	96 95       	lsr	r25
    392c:	e9 0f       	add	r30, r25
    392e:	ff 27       	eor	r31, r31
    3930:	e8 54       	subi	r30, 0x48	; 72
    3932:	fd 4f       	sbci	r31, 0xFD	; 253
    3934:	99 27       	eor	r25, r25
    3936:	33 27       	eor	r19, r19
    3938:	ee 24       	eor	r14, r14
    393a:	ff 24       	eor	r15, r15
    393c:	a7 01       	movw	r20, r14
    393e:	e7 01       	movw	r28, r14
    3940:	05 90       	lpm	r0, Z+
    3942:	08 94       	sec
    3944:	07 94       	ror	r0
    3946:	28 f4       	brcc	.+10     	; 0x3952 <__ftoa_engine+0x80>
    3948:	36 0f       	add	r19, r22
    394a:	e7 1e       	adc	r14, r23
    394c:	f8 1e       	adc	r15, r24
    394e:	49 1f       	adc	r20, r25
    3950:	51 1d       	adc	r21, r1
    3952:	66 0f       	add	r22, r22
    3954:	77 1f       	adc	r23, r23
    3956:	88 1f       	adc	r24, r24
    3958:	99 1f       	adc	r25, r25
    395a:	06 94       	lsr	r0
    395c:	a1 f7       	brne	.-24     	; 0x3946 <__ftoa_engine+0x74>
    395e:	05 90       	lpm	r0, Z+
    3960:	07 94       	ror	r0
    3962:	28 f4       	brcc	.+10     	; 0x396e <__ftoa_engine+0x9c>
    3964:	e7 0e       	add	r14, r23
    3966:	f8 1e       	adc	r15, r24
    3968:	49 1f       	adc	r20, r25
    396a:	56 1f       	adc	r21, r22
    396c:	c1 1d       	adc	r28, r1
    396e:	77 0f       	add	r23, r23
    3970:	88 1f       	adc	r24, r24
    3972:	99 1f       	adc	r25, r25
    3974:	66 1f       	adc	r22, r22
    3976:	06 94       	lsr	r0
    3978:	a1 f7       	brne	.-24     	; 0x3962 <__ftoa_engine+0x90>
    397a:	05 90       	lpm	r0, Z+
    397c:	07 94       	ror	r0
    397e:	28 f4       	brcc	.+10     	; 0x398a <__ftoa_engine+0xb8>
    3980:	f8 0e       	add	r15, r24
    3982:	49 1f       	adc	r20, r25
    3984:	56 1f       	adc	r21, r22
    3986:	c7 1f       	adc	r28, r23
    3988:	d1 1d       	adc	r29, r1
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	66 1f       	adc	r22, r22
    3990:	77 1f       	adc	r23, r23
    3992:	06 94       	lsr	r0
    3994:	a1 f7       	brne	.-24     	; 0x397e <__ftoa_engine+0xac>
    3996:	05 90       	lpm	r0, Z+
    3998:	07 94       	ror	r0
    399a:	20 f4       	brcc	.+8      	; 0x39a4 <__ftoa_engine+0xd2>
    399c:	49 0f       	add	r20, r25
    399e:	56 1f       	adc	r21, r22
    39a0:	c7 1f       	adc	r28, r23
    39a2:	d8 1f       	adc	r29, r24
    39a4:	99 0f       	add	r25, r25
    39a6:	66 1f       	adc	r22, r22
    39a8:	77 1f       	adc	r23, r23
    39aa:	88 1f       	adc	r24, r24
    39ac:	06 94       	lsr	r0
    39ae:	a9 f7       	brne	.-22     	; 0x399a <__ftoa_engine+0xc8>
    39b0:	84 91       	lpm	r24, Z
    39b2:	10 95       	com	r17
    39b4:	17 70       	andi	r17, 0x07	; 7
    39b6:	41 f0       	breq	.+16     	; 0x39c8 <__ftoa_engine+0xf6>
    39b8:	d6 95       	lsr	r29
    39ba:	c7 95       	ror	r28
    39bc:	57 95       	ror	r21
    39be:	47 95       	ror	r20
    39c0:	f7 94       	ror	r15
    39c2:	e7 94       	ror	r14
    39c4:	1a 95       	dec	r17
    39c6:	c1 f7       	brne	.-16     	; 0x39b8 <__ftoa_engine+0xe6>
    39c8:	ee e5       	ldi	r30, 0x5E	; 94
    39ca:	f2 e0       	ldi	r31, 0x02	; 2
    39cc:	68 94       	set
    39ce:	15 90       	lpm	r1, Z+
    39d0:	15 91       	lpm	r17, Z+
    39d2:	35 91       	lpm	r19, Z+
    39d4:	65 91       	lpm	r22, Z+
    39d6:	95 91       	lpm	r25, Z+
    39d8:	05 90       	lpm	r0, Z+
    39da:	7f e2       	ldi	r23, 0x2F	; 47
    39dc:	73 95       	inc	r23
    39de:	e1 18       	sub	r14, r1
    39e0:	f1 0a       	sbc	r15, r17
    39e2:	43 0b       	sbc	r20, r19
    39e4:	56 0b       	sbc	r21, r22
    39e6:	c9 0b       	sbc	r28, r25
    39e8:	d0 09       	sbc	r29, r0
    39ea:	c0 f7       	brcc	.-16     	; 0x39dc <__ftoa_engine+0x10a>
    39ec:	e1 0c       	add	r14, r1
    39ee:	f1 1e       	adc	r15, r17
    39f0:	43 1f       	adc	r20, r19
    39f2:	56 1f       	adc	r21, r22
    39f4:	c9 1f       	adc	r28, r25
    39f6:	d0 1d       	adc	r29, r0
    39f8:	7e f4       	brtc	.+30     	; 0x3a18 <__ftoa_engine+0x146>
    39fa:	70 33       	cpi	r23, 0x30	; 48
    39fc:	11 f4       	brne	.+4      	; 0x3a02 <__ftoa_engine+0x130>
    39fe:	8a 95       	dec	r24
    3a00:	e6 cf       	rjmp	.-52     	; 0x39ce <__ftoa_engine+0xfc>
    3a02:	e8 94       	clt
    3a04:	01 50       	subi	r16, 0x01	; 1
    3a06:	30 f0       	brcs	.+12     	; 0x3a14 <__ftoa_engine+0x142>
    3a08:	08 0f       	add	r16, r24
    3a0a:	0a f4       	brpl	.+2      	; 0x3a0e <__ftoa_engine+0x13c>
    3a0c:	00 27       	eor	r16, r16
    3a0e:	02 17       	cp	r16, r18
    3a10:	08 f4       	brcc	.+2      	; 0x3a14 <__ftoa_engine+0x142>
    3a12:	20 2f       	mov	r18, r16
    3a14:	23 95       	inc	r18
    3a16:	02 2f       	mov	r16, r18
    3a18:	7a 33       	cpi	r23, 0x3A	; 58
    3a1a:	28 f0       	brcs	.+10     	; 0x3a26 <__ftoa_engine+0x154>
    3a1c:	79 e3       	ldi	r23, 0x39	; 57
    3a1e:	7d 93       	st	X+, r23
    3a20:	2a 95       	dec	r18
    3a22:	e9 f7       	brne	.-6      	; 0x3a1e <__ftoa_engine+0x14c>
    3a24:	10 c0       	rjmp	.+32     	; 0x3a46 <__ftoa_engine+0x174>
    3a26:	7d 93       	st	X+, r23
    3a28:	2a 95       	dec	r18
    3a2a:	89 f6       	brne	.-94     	; 0x39ce <__ftoa_engine+0xfc>
    3a2c:	06 94       	lsr	r0
    3a2e:	97 95       	ror	r25
    3a30:	67 95       	ror	r22
    3a32:	37 95       	ror	r19
    3a34:	17 95       	ror	r17
    3a36:	17 94       	ror	r1
    3a38:	e1 18       	sub	r14, r1
    3a3a:	f1 0a       	sbc	r15, r17
    3a3c:	43 0b       	sbc	r20, r19
    3a3e:	56 0b       	sbc	r21, r22
    3a40:	c9 0b       	sbc	r28, r25
    3a42:	d0 09       	sbc	r29, r0
    3a44:	98 f0       	brcs	.+38     	; 0x3a6c <__ftoa_engine+0x19a>
    3a46:	23 95       	inc	r18
    3a48:	7e 91       	ld	r23, -X
    3a4a:	73 95       	inc	r23
    3a4c:	7a 33       	cpi	r23, 0x3A	; 58
    3a4e:	08 f0       	brcs	.+2      	; 0x3a52 <__ftoa_engine+0x180>
    3a50:	70 e3       	ldi	r23, 0x30	; 48
    3a52:	7c 93       	st	X, r23
    3a54:	20 13       	cpse	r18, r16
    3a56:	b8 f7       	brcc	.-18     	; 0x3a46 <__ftoa_engine+0x174>
    3a58:	7e 91       	ld	r23, -X
    3a5a:	70 61       	ori	r23, 0x10	; 16
    3a5c:	7d 93       	st	X+, r23
    3a5e:	30 f0       	brcs	.+12     	; 0x3a6c <__ftoa_engine+0x19a>
    3a60:	83 95       	inc	r24
    3a62:	71 e3       	ldi	r23, 0x31	; 49
    3a64:	7d 93       	st	X+, r23
    3a66:	70 e3       	ldi	r23, 0x30	; 48
    3a68:	2a 95       	dec	r18
    3a6a:	e1 f7       	brne	.-8      	; 0x3a64 <__ftoa_engine+0x192>
    3a6c:	11 24       	eor	r1, r1
    3a6e:	ef 90       	pop	r14
    3a70:	ff 90       	pop	r15
    3a72:	0f 91       	pop	r16
    3a74:	1f 91       	pop	r17
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	99 27       	eor	r25, r25
    3a7c:	87 fd       	sbrc	r24, 7
    3a7e:	90 95       	com	r25
    3a80:	08 95       	ret

00003a82 <strnlen_P>:
    3a82:	fc 01       	movw	r30, r24
    3a84:	05 90       	lpm	r0, Z+
    3a86:	61 50       	subi	r22, 0x01	; 1
    3a88:	70 40       	sbci	r23, 0x00	; 0
    3a8a:	01 10       	cpse	r0, r1
    3a8c:	d8 f7       	brcc	.-10     	; 0x3a84 <strnlen_P+0x2>
    3a8e:	80 95       	com	r24
    3a90:	90 95       	com	r25
    3a92:	8e 0f       	add	r24, r30
    3a94:	9f 1f       	adc	r25, r31
    3a96:	08 95       	ret

00003a98 <strnlen>:
    3a98:	fc 01       	movw	r30, r24
    3a9a:	61 50       	subi	r22, 0x01	; 1
    3a9c:	70 40       	sbci	r23, 0x00	; 0
    3a9e:	01 90       	ld	r0, Z+
    3aa0:	01 10       	cpse	r0, r1
    3aa2:	d8 f7       	brcc	.-10     	; 0x3a9a <strnlen+0x2>
    3aa4:	80 95       	com	r24
    3aa6:	90 95       	com	r25
    3aa8:	8e 0f       	add	r24, r30
    3aaa:	9f 1f       	adc	r25, r31
    3aac:	08 95       	ret

00003aae <fdevopen>:
    3aae:	0f 93       	push	r16
    3ab0:	1f 93       	push	r17
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	31 f4       	brne	.+12     	; 0x3ac6 <fdevopen+0x18>
    3aba:	61 15       	cp	r22, r1
    3abc:	71 05       	cpc	r23, r1
    3abe:	19 f4       	brne	.+6      	; 0x3ac6 <fdevopen+0x18>
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	39 c0       	rjmp	.+114    	; 0x3b38 <fdevopen+0x8a>
    3ac6:	8b 01       	movw	r16, r22
    3ac8:	ec 01       	movw	r28, r24
    3aca:	6e e0       	ldi	r22, 0x0E	; 14
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	14 d1       	rcall	.+552    	; 0x3cfc <calloc>
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	89 2b       	or	r24, r25
    3ad8:	99 f3       	breq	.-26     	; 0x3ac0 <fdevopen+0x12>
    3ada:	80 e8       	ldi	r24, 0x80	; 128
    3adc:	83 83       	std	Z+3, r24	; 0x03
    3ade:	01 15       	cp	r16, r1
    3ae0:	11 05       	cpc	r17, r1
    3ae2:	71 f0       	breq	.+28     	; 0x3b00 <fdevopen+0x52>
    3ae4:	02 87       	std	Z+10, r16	; 0x0a
    3ae6:	13 87       	std	Z+11, r17	; 0x0b
    3ae8:	81 e8       	ldi	r24, 0x81	; 129
    3aea:	83 83       	std	Z+3, r24	; 0x03
    3aec:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <__iob>
    3af0:	90 91 f0 20 	lds	r25, 0x20F0	; 0x8020f0 <__iob+0x1>
    3af4:	89 2b       	or	r24, r25
    3af6:	21 f4       	brne	.+8      	; 0x3b00 <fdevopen+0x52>
    3af8:	e0 93 ef 20 	sts	0x20EF, r30	; 0x8020ef <__iob>
    3afc:	f0 93 f0 20 	sts	0x20F0, r31	; 0x8020f0 <__iob+0x1>
    3b00:	20 97       	sbiw	r28, 0x00	; 0
    3b02:	c9 f0       	breq	.+50     	; 0x3b36 <fdevopen+0x88>
    3b04:	c0 87       	std	Z+8, r28	; 0x08
    3b06:	d1 87       	std	Z+9, r29	; 0x09
    3b08:	83 81       	ldd	r24, Z+3	; 0x03
    3b0a:	82 60       	ori	r24, 0x02	; 2
    3b0c:	83 83       	std	Z+3, r24	; 0x03
    3b0e:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <__iob+0x2>
    3b12:	90 91 f2 20 	lds	r25, 0x20F2	; 0x8020f2 <__iob+0x3>
    3b16:	89 2b       	or	r24, r25
    3b18:	71 f4       	brne	.+28     	; 0x3b36 <fdevopen+0x88>
    3b1a:	e0 93 f1 20 	sts	0x20F1, r30	; 0x8020f1 <__iob+0x2>
    3b1e:	f0 93 f2 20 	sts	0x20F2, r31	; 0x8020f2 <__iob+0x3>
    3b22:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <__iob+0x4>
    3b26:	90 91 f4 20 	lds	r25, 0x20F4	; 0x8020f4 <__iob+0x5>
    3b2a:	89 2b       	or	r24, r25
    3b2c:	21 f4       	brne	.+8      	; 0x3b36 <fdevopen+0x88>
    3b2e:	e0 93 f3 20 	sts	0x20F3, r30	; 0x8020f3 <__iob+0x4>
    3b32:	f0 93 f4 20 	sts	0x20F4, r31	; 0x8020f4 <__iob+0x5>
    3b36:	cf 01       	movw	r24, r30
    3b38:	df 91       	pop	r29
    3b3a:	cf 91       	pop	r28
    3b3c:	1f 91       	pop	r17
    3b3e:	0f 91       	pop	r16
    3b40:	08 95       	ret

00003b42 <fputc>:
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	fb 01       	movw	r30, r22
    3b4c:	23 81       	ldd	r18, Z+3	; 0x03
    3b4e:	21 fd       	sbrc	r18, 1
    3b50:	03 c0       	rjmp	.+6      	; 0x3b58 <fputc+0x16>
    3b52:	8f ef       	ldi	r24, 0xFF	; 255
    3b54:	9f ef       	ldi	r25, 0xFF	; 255
    3b56:	2c c0       	rjmp	.+88     	; 0x3bb0 <fputc+0x6e>
    3b58:	22 ff       	sbrs	r18, 2
    3b5a:	16 c0       	rjmp	.+44     	; 0x3b88 <fputc+0x46>
    3b5c:	46 81       	ldd	r20, Z+6	; 0x06
    3b5e:	57 81       	ldd	r21, Z+7	; 0x07
    3b60:	24 81       	ldd	r18, Z+4	; 0x04
    3b62:	35 81       	ldd	r19, Z+5	; 0x05
    3b64:	42 17       	cp	r20, r18
    3b66:	53 07       	cpc	r21, r19
    3b68:	44 f4       	brge	.+16     	; 0x3b7a <fputc+0x38>
    3b6a:	a0 81       	ld	r26, Z
    3b6c:	b1 81       	ldd	r27, Z+1	; 0x01
    3b6e:	9d 01       	movw	r18, r26
    3b70:	2f 5f       	subi	r18, 0xFF	; 255
    3b72:	3f 4f       	sbci	r19, 0xFF	; 255
    3b74:	20 83       	st	Z, r18
    3b76:	31 83       	std	Z+1, r19	; 0x01
    3b78:	8c 93       	st	X, r24
    3b7a:	26 81       	ldd	r18, Z+6	; 0x06
    3b7c:	37 81       	ldd	r19, Z+7	; 0x07
    3b7e:	2f 5f       	subi	r18, 0xFF	; 255
    3b80:	3f 4f       	sbci	r19, 0xFF	; 255
    3b82:	26 83       	std	Z+6, r18	; 0x06
    3b84:	37 83       	std	Z+7, r19	; 0x07
    3b86:	14 c0       	rjmp	.+40     	; 0x3bb0 <fputc+0x6e>
    3b88:	8b 01       	movw	r16, r22
    3b8a:	ec 01       	movw	r28, r24
    3b8c:	fb 01       	movw	r30, r22
    3b8e:	00 84       	ldd	r0, Z+8	; 0x08
    3b90:	f1 85       	ldd	r31, Z+9	; 0x09
    3b92:	e0 2d       	mov	r30, r0
    3b94:	19 95       	eicall
    3b96:	89 2b       	or	r24, r25
    3b98:	e1 f6       	brne	.-72     	; 0x3b52 <fputc+0x10>
    3b9a:	d8 01       	movw	r26, r16
    3b9c:	16 96       	adiw	r26, 0x06	; 6
    3b9e:	8d 91       	ld	r24, X+
    3ba0:	9c 91       	ld	r25, X
    3ba2:	17 97       	sbiw	r26, 0x07	; 7
    3ba4:	01 96       	adiw	r24, 0x01	; 1
    3ba6:	16 96       	adiw	r26, 0x06	; 6
    3ba8:	8d 93       	st	X+, r24
    3baa:	9c 93       	st	X, r25
    3bac:	17 97       	sbiw	r26, 0x07	; 7
    3bae:	ce 01       	movw	r24, r28
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	1f 91       	pop	r17
    3bb6:	0f 91       	pop	r16
    3bb8:	08 95       	ret

00003bba <printf>:
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	cd b7       	in	r28, 0x3d	; 61
    3bc0:	de b7       	in	r29, 0x3e	; 62
    3bc2:	ae 01       	movw	r20, r28
    3bc4:	4a 5f       	subi	r20, 0xFA	; 250
    3bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc8:	fa 01       	movw	r30, r20
    3bca:	61 91       	ld	r22, Z+
    3bcc:	71 91       	ld	r23, Z+
    3bce:	af 01       	movw	r20, r30
    3bd0:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <__iob+0x2>
    3bd4:	90 91 f2 20 	lds	r25, 0x20F2	; 0x8020f2 <__iob+0x3>
    3bd8:	d7 da       	rcall	.-2642   	; 0x3188 <vfprintf>
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	08 95       	ret

00003be0 <puts>:
    3be0:	0f 93       	push	r16
    3be2:	1f 93       	push	r17
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	e0 91 f1 20 	lds	r30, 0x20F1	; 0x8020f1 <__iob+0x2>
    3bec:	f0 91 f2 20 	lds	r31, 0x20F2	; 0x8020f2 <__iob+0x3>
    3bf0:	23 81       	ldd	r18, Z+3	; 0x03
    3bf2:	21 ff       	sbrs	r18, 1
    3bf4:	1b c0       	rjmp	.+54     	; 0x3c2c <puts+0x4c>
    3bf6:	8c 01       	movw	r16, r24
    3bf8:	d0 e0       	ldi	r29, 0x00	; 0
    3bfa:	c0 e0       	ldi	r28, 0x00	; 0
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	81 91       	ld	r24, Z+
    3c00:	8f 01       	movw	r16, r30
    3c02:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <__iob+0x2>
    3c06:	70 91 f2 20 	lds	r23, 0x20F2	; 0x8020f2 <__iob+0x3>
    3c0a:	db 01       	movw	r26, r22
    3c0c:	18 96       	adiw	r26, 0x08	; 8
    3c0e:	ed 91       	ld	r30, X+
    3c10:	fc 91       	ld	r31, X
    3c12:	19 97       	sbiw	r26, 0x09	; 9
    3c14:	88 23       	and	r24, r24
    3c16:	31 f0       	breq	.+12     	; 0x3c24 <puts+0x44>
    3c18:	19 95       	eicall
    3c1a:	89 2b       	or	r24, r25
    3c1c:	79 f3       	breq	.-34     	; 0x3bfc <puts+0x1c>
    3c1e:	df ef       	ldi	r29, 0xFF	; 255
    3c20:	cf ef       	ldi	r28, 0xFF	; 255
    3c22:	ec cf       	rjmp	.-40     	; 0x3bfc <puts+0x1c>
    3c24:	8a e0       	ldi	r24, 0x0A	; 10
    3c26:	19 95       	eicall
    3c28:	89 2b       	or	r24, r25
    3c2a:	19 f0       	breq	.+6      	; 0x3c32 <puts+0x52>
    3c2c:	8f ef       	ldi	r24, 0xFF	; 255
    3c2e:	9f ef       	ldi	r25, 0xFF	; 255
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <puts+0x56>
    3c32:	8d 2f       	mov	r24, r29
    3c34:	9c 2f       	mov	r25, r28
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	1f 91       	pop	r17
    3c3c:	0f 91       	pop	r16
    3c3e:	08 95       	ret

00003c40 <__ultoa_invert>:
    3c40:	fa 01       	movw	r30, r20
    3c42:	aa 27       	eor	r26, r26
    3c44:	28 30       	cpi	r18, 0x08	; 8
    3c46:	51 f1       	breq	.+84     	; 0x3c9c <__ultoa_invert+0x5c>
    3c48:	20 31       	cpi	r18, 0x10	; 16
    3c4a:	81 f1       	breq	.+96     	; 0x3cac <__ultoa_invert+0x6c>
    3c4c:	e8 94       	clt
    3c4e:	6f 93       	push	r22
    3c50:	6e 7f       	andi	r22, 0xFE	; 254
    3c52:	6e 5f       	subi	r22, 0xFE	; 254
    3c54:	7f 4f       	sbci	r23, 0xFF	; 255
    3c56:	8f 4f       	sbci	r24, 0xFF	; 255
    3c58:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5a:	af 4f       	sbci	r26, 0xFF	; 255
    3c5c:	b1 e0       	ldi	r27, 0x01	; 1
    3c5e:	3e d0       	rcall	.+124    	; 0x3cdc <__ultoa_invert+0x9c>
    3c60:	b4 e0       	ldi	r27, 0x04	; 4
    3c62:	3c d0       	rcall	.+120    	; 0x3cdc <__ultoa_invert+0x9c>
    3c64:	67 0f       	add	r22, r23
    3c66:	78 1f       	adc	r23, r24
    3c68:	89 1f       	adc	r24, r25
    3c6a:	9a 1f       	adc	r25, r26
    3c6c:	a1 1d       	adc	r26, r1
    3c6e:	68 0f       	add	r22, r24
    3c70:	79 1f       	adc	r23, r25
    3c72:	8a 1f       	adc	r24, r26
    3c74:	91 1d       	adc	r25, r1
    3c76:	a1 1d       	adc	r26, r1
    3c78:	6a 0f       	add	r22, r26
    3c7a:	71 1d       	adc	r23, r1
    3c7c:	81 1d       	adc	r24, r1
    3c7e:	91 1d       	adc	r25, r1
    3c80:	a1 1d       	adc	r26, r1
    3c82:	20 d0       	rcall	.+64     	; 0x3cc4 <__ultoa_invert+0x84>
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <__ultoa_invert+0x48>
    3c86:	68 94       	set
    3c88:	3f 91       	pop	r19
    3c8a:	2a e0       	ldi	r18, 0x0A	; 10
    3c8c:	26 9f       	mul	r18, r22
    3c8e:	11 24       	eor	r1, r1
    3c90:	30 19       	sub	r19, r0
    3c92:	30 5d       	subi	r19, 0xD0	; 208
    3c94:	31 93       	st	Z+, r19
    3c96:	de f6       	brtc	.-74     	; 0x3c4e <__ultoa_invert+0xe>
    3c98:	cf 01       	movw	r24, r30
    3c9a:	08 95       	ret
    3c9c:	46 2f       	mov	r20, r22
    3c9e:	47 70       	andi	r20, 0x07	; 7
    3ca0:	40 5d       	subi	r20, 0xD0	; 208
    3ca2:	41 93       	st	Z+, r20
    3ca4:	b3 e0       	ldi	r27, 0x03	; 3
    3ca6:	0f d0       	rcall	.+30     	; 0x3cc6 <__ultoa_invert+0x86>
    3ca8:	c9 f7       	brne	.-14     	; 0x3c9c <__ultoa_invert+0x5c>
    3caa:	f6 cf       	rjmp	.-20     	; 0x3c98 <__ultoa_invert+0x58>
    3cac:	46 2f       	mov	r20, r22
    3cae:	4f 70       	andi	r20, 0x0F	; 15
    3cb0:	40 5d       	subi	r20, 0xD0	; 208
    3cb2:	4a 33       	cpi	r20, 0x3A	; 58
    3cb4:	18 f0       	brcs	.+6      	; 0x3cbc <__ultoa_invert+0x7c>
    3cb6:	49 5d       	subi	r20, 0xD9	; 217
    3cb8:	31 fd       	sbrc	r19, 1
    3cba:	40 52       	subi	r20, 0x20	; 32
    3cbc:	41 93       	st	Z+, r20
    3cbe:	02 d0       	rcall	.+4      	; 0x3cc4 <__ultoa_invert+0x84>
    3cc0:	a9 f7       	brne	.-22     	; 0x3cac <__ultoa_invert+0x6c>
    3cc2:	ea cf       	rjmp	.-44     	; 0x3c98 <__ultoa_invert+0x58>
    3cc4:	b4 e0       	ldi	r27, 0x04	; 4
    3cc6:	a6 95       	lsr	r26
    3cc8:	97 95       	ror	r25
    3cca:	87 95       	ror	r24
    3ccc:	77 95       	ror	r23
    3cce:	67 95       	ror	r22
    3cd0:	ba 95       	dec	r27
    3cd2:	c9 f7       	brne	.-14     	; 0x3cc6 <__ultoa_invert+0x86>
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	61 05       	cpc	r22, r1
    3cd8:	71 05       	cpc	r23, r1
    3cda:	08 95       	ret
    3cdc:	9b 01       	movw	r18, r22
    3cde:	ac 01       	movw	r20, r24
    3ce0:	0a 2e       	mov	r0, r26
    3ce2:	06 94       	lsr	r0
    3ce4:	57 95       	ror	r21
    3ce6:	47 95       	ror	r20
    3ce8:	37 95       	ror	r19
    3cea:	27 95       	ror	r18
    3cec:	ba 95       	dec	r27
    3cee:	c9 f7       	brne	.-14     	; 0x3ce2 <__ultoa_invert+0xa2>
    3cf0:	62 0f       	add	r22, r18
    3cf2:	73 1f       	adc	r23, r19
    3cf4:	84 1f       	adc	r24, r20
    3cf6:	95 1f       	adc	r25, r21
    3cf8:	a0 1d       	adc	r26, r0
    3cfa:	08 95       	ret

00003cfc <calloc>:
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	86 9f       	mul	r24, r22
    3d06:	80 01       	movw	r16, r0
    3d08:	87 9f       	mul	r24, r23
    3d0a:	10 0d       	add	r17, r0
    3d0c:	96 9f       	mul	r25, r22
    3d0e:	10 0d       	add	r17, r0
    3d10:	11 24       	eor	r1, r1
    3d12:	c8 01       	movw	r24, r16
    3d14:	0d d0       	rcall	.+26     	; 0x3d30 <malloc>
    3d16:	ec 01       	movw	r28, r24
    3d18:	00 97       	sbiw	r24, 0x00	; 0
    3d1a:	21 f0       	breq	.+8      	; 0x3d24 <calloc+0x28>
    3d1c:	a8 01       	movw	r20, r16
    3d1e:	60 e0       	ldi	r22, 0x00	; 0
    3d20:	70 e0       	ldi	r23, 0x00	; 0
    3d22:	27 d1       	rcall	.+590    	; 0x3f72 <memset>
    3d24:	ce 01       	movw	r24, r28
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	08 95       	ret

00003d30 <malloc>:
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	82 30       	cpi	r24, 0x02	; 2
    3d3a:	91 05       	cpc	r25, r1
    3d3c:	10 f4       	brcc	.+4      	; 0x3d42 <malloc+0x12>
    3d3e:	82 e0       	ldi	r24, 0x02	; 2
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	e0 91 f7 20 	lds	r30, 0x20F7	; 0x8020f7 <__flp>
    3d46:	f0 91 f8 20 	lds	r31, 0x20F8	; 0x8020f8 <__flp+0x1>
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	a0 e0       	ldi	r26, 0x00	; 0
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	30 97       	sbiw	r30, 0x00	; 0
    3d54:	19 f1       	breq	.+70     	; 0x3d9c <malloc+0x6c>
    3d56:	40 81       	ld	r20, Z
    3d58:	51 81       	ldd	r21, Z+1	; 0x01
    3d5a:	02 81       	ldd	r16, Z+2	; 0x02
    3d5c:	13 81       	ldd	r17, Z+3	; 0x03
    3d5e:	48 17       	cp	r20, r24
    3d60:	59 07       	cpc	r21, r25
    3d62:	c8 f0       	brcs	.+50     	; 0x3d96 <malloc+0x66>
    3d64:	84 17       	cp	r24, r20
    3d66:	95 07       	cpc	r25, r21
    3d68:	69 f4       	brne	.+26     	; 0x3d84 <malloc+0x54>
    3d6a:	10 97       	sbiw	r26, 0x00	; 0
    3d6c:	31 f0       	breq	.+12     	; 0x3d7a <malloc+0x4a>
    3d6e:	12 96       	adiw	r26, 0x02	; 2
    3d70:	0c 93       	st	X, r16
    3d72:	12 97       	sbiw	r26, 0x02	; 2
    3d74:	13 96       	adiw	r26, 0x03	; 3
    3d76:	1c 93       	st	X, r17
    3d78:	27 c0       	rjmp	.+78     	; 0x3dc8 <malloc+0x98>
    3d7a:	00 93 f7 20 	sts	0x20F7, r16	; 0x8020f7 <__flp>
    3d7e:	10 93 f8 20 	sts	0x20F8, r17	; 0x8020f8 <__flp+0x1>
    3d82:	22 c0       	rjmp	.+68     	; 0x3dc8 <malloc+0x98>
    3d84:	21 15       	cp	r18, r1
    3d86:	31 05       	cpc	r19, r1
    3d88:	19 f0       	breq	.+6      	; 0x3d90 <malloc+0x60>
    3d8a:	42 17       	cp	r20, r18
    3d8c:	53 07       	cpc	r21, r19
    3d8e:	18 f4       	brcc	.+6      	; 0x3d96 <malloc+0x66>
    3d90:	9a 01       	movw	r18, r20
    3d92:	bd 01       	movw	r22, r26
    3d94:	ef 01       	movw	r28, r30
    3d96:	df 01       	movw	r26, r30
    3d98:	f8 01       	movw	r30, r16
    3d9a:	db cf       	rjmp	.-74     	; 0x3d52 <malloc+0x22>
    3d9c:	21 15       	cp	r18, r1
    3d9e:	31 05       	cpc	r19, r1
    3da0:	f9 f0       	breq	.+62     	; 0x3de0 <malloc+0xb0>
    3da2:	28 1b       	sub	r18, r24
    3da4:	39 0b       	sbc	r19, r25
    3da6:	24 30       	cpi	r18, 0x04	; 4
    3da8:	31 05       	cpc	r19, r1
    3daa:	80 f4       	brcc	.+32     	; 0x3dcc <malloc+0x9c>
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	9b 81       	ldd	r25, Y+3	; 0x03
    3db0:	61 15       	cp	r22, r1
    3db2:	71 05       	cpc	r23, r1
    3db4:	21 f0       	breq	.+8      	; 0x3dbe <malloc+0x8e>
    3db6:	fb 01       	movw	r30, r22
    3db8:	82 83       	std	Z+2, r24	; 0x02
    3dba:	93 83       	std	Z+3, r25	; 0x03
    3dbc:	04 c0       	rjmp	.+8      	; 0x3dc6 <malloc+0x96>
    3dbe:	80 93 f7 20 	sts	0x20F7, r24	; 0x8020f7 <__flp>
    3dc2:	90 93 f8 20 	sts	0x20F8, r25	; 0x8020f8 <__flp+0x1>
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	32 96       	adiw	r30, 0x02	; 2
    3dca:	44 c0       	rjmp	.+136    	; 0x3e54 <malloc+0x124>
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e2 0f       	add	r30, r18
    3dd0:	f3 1f       	adc	r31, r19
    3dd2:	81 93       	st	Z+, r24
    3dd4:	91 93       	st	Z+, r25
    3dd6:	22 50       	subi	r18, 0x02	; 2
    3dd8:	31 09       	sbc	r19, r1
    3dda:	28 83       	st	Y, r18
    3ddc:	39 83       	std	Y+1, r19	; 0x01
    3dde:	3a c0       	rjmp	.+116    	; 0x3e54 <malloc+0x124>
    3de0:	20 91 f5 20 	lds	r18, 0x20F5	; 0x8020f5 <__brkval>
    3de4:	30 91 f6 20 	lds	r19, 0x20F6	; 0x8020f6 <__brkval+0x1>
    3de8:	23 2b       	or	r18, r19
    3dea:	41 f4       	brne	.+16     	; 0x3dfc <malloc+0xcc>
    3dec:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3df0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3df4:	20 93 f5 20 	sts	0x20F5, r18	; 0x8020f5 <__brkval>
    3df8:	30 93 f6 20 	sts	0x20F6, r19	; 0x8020f6 <__brkval+0x1>
    3dfc:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    3e00:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    3e04:	21 15       	cp	r18, r1
    3e06:	31 05       	cpc	r19, r1
    3e08:	41 f4       	brne	.+16     	; 0x3e1a <malloc+0xea>
    3e0a:	2d b7       	in	r18, 0x3d	; 61
    3e0c:	3e b7       	in	r19, 0x3e	; 62
    3e0e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3e12:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3e16:	24 1b       	sub	r18, r20
    3e18:	35 0b       	sbc	r19, r21
    3e1a:	e0 91 f5 20 	lds	r30, 0x20F5	; 0x8020f5 <__brkval>
    3e1e:	f0 91 f6 20 	lds	r31, 0x20F6	; 0x8020f6 <__brkval+0x1>
    3e22:	e2 17       	cp	r30, r18
    3e24:	f3 07       	cpc	r31, r19
    3e26:	a0 f4       	brcc	.+40     	; 0x3e50 <malloc+0x120>
    3e28:	2e 1b       	sub	r18, r30
    3e2a:	3f 0b       	sbc	r19, r31
    3e2c:	28 17       	cp	r18, r24
    3e2e:	39 07       	cpc	r19, r25
    3e30:	78 f0       	brcs	.+30     	; 0x3e50 <malloc+0x120>
    3e32:	ac 01       	movw	r20, r24
    3e34:	4e 5f       	subi	r20, 0xFE	; 254
    3e36:	5f 4f       	sbci	r21, 0xFF	; 255
    3e38:	24 17       	cp	r18, r20
    3e3a:	35 07       	cpc	r19, r21
    3e3c:	48 f0       	brcs	.+18     	; 0x3e50 <malloc+0x120>
    3e3e:	4e 0f       	add	r20, r30
    3e40:	5f 1f       	adc	r21, r31
    3e42:	40 93 f5 20 	sts	0x20F5, r20	; 0x8020f5 <__brkval>
    3e46:	50 93 f6 20 	sts	0x20F6, r21	; 0x8020f6 <__brkval+0x1>
    3e4a:	81 93       	st	Z+, r24
    3e4c:	91 93       	st	Z+, r25
    3e4e:	02 c0       	rjmp	.+4      	; 0x3e54 <malloc+0x124>
    3e50:	e0 e0       	ldi	r30, 0x00	; 0
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	cf 01       	movw	r24, r30
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	08 95       	ret

00003e60 <free>:
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <free+0xa>
    3e68:	81 c0       	rjmp	.+258    	; 0x3f6c <free+0x10c>
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	32 97       	sbiw	r30, 0x02	; 2
    3e6e:	12 82       	std	Z+2, r1	; 0x02
    3e70:	13 82       	std	Z+3, r1	; 0x03
    3e72:	a0 91 f7 20 	lds	r26, 0x20F7	; 0x8020f7 <__flp>
    3e76:	b0 91 f8 20 	lds	r27, 0x20F8	; 0x8020f8 <__flp+0x1>
    3e7a:	10 97       	sbiw	r26, 0x00	; 0
    3e7c:	81 f4       	brne	.+32     	; 0x3e9e <free+0x3e>
    3e7e:	20 81       	ld	r18, Z
    3e80:	31 81       	ldd	r19, Z+1	; 0x01
    3e82:	82 0f       	add	r24, r18
    3e84:	93 1f       	adc	r25, r19
    3e86:	20 91 f5 20 	lds	r18, 0x20F5	; 0x8020f5 <__brkval>
    3e8a:	30 91 f6 20 	lds	r19, 0x20F6	; 0x8020f6 <__brkval+0x1>
    3e8e:	28 17       	cp	r18, r24
    3e90:	39 07       	cpc	r19, r25
    3e92:	51 f5       	brne	.+84     	; 0x3ee8 <free+0x88>
    3e94:	e0 93 f5 20 	sts	0x20F5, r30	; 0x8020f5 <__brkval>
    3e98:	f0 93 f6 20 	sts	0x20F6, r31	; 0x8020f6 <__brkval+0x1>
    3e9c:	67 c0       	rjmp	.+206    	; 0x3f6c <free+0x10c>
    3e9e:	ed 01       	movw	r28, r26
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	ce 17       	cp	r28, r30
    3ea6:	df 07       	cpc	r29, r31
    3ea8:	40 f4       	brcc	.+16     	; 0x3eba <free+0x5a>
    3eaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3eac:	5b 81       	ldd	r21, Y+3	; 0x03
    3eae:	9e 01       	movw	r18, r28
    3eb0:	41 15       	cp	r20, r1
    3eb2:	51 05       	cpc	r21, r1
    3eb4:	f1 f0       	breq	.+60     	; 0x3ef2 <free+0x92>
    3eb6:	ea 01       	movw	r28, r20
    3eb8:	f5 cf       	rjmp	.-22     	; 0x3ea4 <free+0x44>
    3eba:	c2 83       	std	Z+2, r28	; 0x02
    3ebc:	d3 83       	std	Z+3, r29	; 0x03
    3ebe:	40 81       	ld	r20, Z
    3ec0:	51 81       	ldd	r21, Z+1	; 0x01
    3ec2:	84 0f       	add	r24, r20
    3ec4:	95 1f       	adc	r25, r21
    3ec6:	c8 17       	cp	r28, r24
    3ec8:	d9 07       	cpc	r29, r25
    3eca:	59 f4       	brne	.+22     	; 0x3ee2 <free+0x82>
    3ecc:	88 81       	ld	r24, Y
    3ece:	99 81       	ldd	r25, Y+1	; 0x01
    3ed0:	84 0f       	add	r24, r20
    3ed2:	95 1f       	adc	r25, r21
    3ed4:	02 96       	adiw	r24, 0x02	; 2
    3ed6:	80 83       	st	Z, r24
    3ed8:	91 83       	std	Z+1, r25	; 0x01
    3eda:	8a 81       	ldd	r24, Y+2	; 0x02
    3edc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ede:	82 83       	std	Z+2, r24	; 0x02
    3ee0:	93 83       	std	Z+3, r25	; 0x03
    3ee2:	21 15       	cp	r18, r1
    3ee4:	31 05       	cpc	r19, r1
    3ee6:	29 f4       	brne	.+10     	; 0x3ef2 <free+0x92>
    3ee8:	e0 93 f7 20 	sts	0x20F7, r30	; 0x8020f7 <__flp>
    3eec:	f0 93 f8 20 	sts	0x20F8, r31	; 0x8020f8 <__flp+0x1>
    3ef0:	3d c0       	rjmp	.+122    	; 0x3f6c <free+0x10c>
    3ef2:	e9 01       	movw	r28, r18
    3ef4:	ea 83       	std	Y+2, r30	; 0x02
    3ef6:	fb 83       	std	Y+3, r31	; 0x03
    3ef8:	49 91       	ld	r20, Y+
    3efa:	59 91       	ld	r21, Y+
    3efc:	c4 0f       	add	r28, r20
    3efe:	d5 1f       	adc	r29, r21
    3f00:	ec 17       	cp	r30, r28
    3f02:	fd 07       	cpc	r31, r29
    3f04:	61 f4       	brne	.+24     	; 0x3f1e <free+0xbe>
    3f06:	80 81       	ld	r24, Z
    3f08:	91 81       	ldd	r25, Z+1	; 0x01
    3f0a:	84 0f       	add	r24, r20
    3f0c:	95 1f       	adc	r25, r21
    3f0e:	02 96       	adiw	r24, 0x02	; 2
    3f10:	e9 01       	movw	r28, r18
    3f12:	88 83       	st	Y, r24
    3f14:	99 83       	std	Y+1, r25	; 0x01
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	93 81       	ldd	r25, Z+3	; 0x03
    3f1a:	8a 83       	std	Y+2, r24	; 0x02
    3f1c:	9b 83       	std	Y+3, r25	; 0x03
    3f1e:	e0 e0       	ldi	r30, 0x00	; 0
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	12 96       	adiw	r26, 0x02	; 2
    3f24:	8d 91       	ld	r24, X+
    3f26:	9c 91       	ld	r25, X
    3f28:	13 97       	sbiw	r26, 0x03	; 3
    3f2a:	00 97       	sbiw	r24, 0x00	; 0
    3f2c:	19 f0       	breq	.+6      	; 0x3f34 <free+0xd4>
    3f2e:	fd 01       	movw	r30, r26
    3f30:	dc 01       	movw	r26, r24
    3f32:	f7 cf       	rjmp	.-18     	; 0x3f22 <free+0xc2>
    3f34:	8d 91       	ld	r24, X+
    3f36:	9c 91       	ld	r25, X
    3f38:	11 97       	sbiw	r26, 0x01	; 1
    3f3a:	9d 01       	movw	r18, r26
    3f3c:	2e 5f       	subi	r18, 0xFE	; 254
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	82 0f       	add	r24, r18
    3f42:	93 1f       	adc	r25, r19
    3f44:	20 91 f5 20 	lds	r18, 0x20F5	; 0x8020f5 <__brkval>
    3f48:	30 91 f6 20 	lds	r19, 0x20F6	; 0x8020f6 <__brkval+0x1>
    3f4c:	28 17       	cp	r18, r24
    3f4e:	39 07       	cpc	r19, r25
    3f50:	69 f4       	brne	.+26     	; 0x3f6c <free+0x10c>
    3f52:	30 97       	sbiw	r30, 0x00	; 0
    3f54:	29 f4       	brne	.+10     	; 0x3f60 <free+0x100>
    3f56:	10 92 f7 20 	sts	0x20F7, r1	; 0x8020f7 <__flp>
    3f5a:	10 92 f8 20 	sts	0x20F8, r1	; 0x8020f8 <__flp+0x1>
    3f5e:	02 c0       	rjmp	.+4      	; 0x3f64 <free+0x104>
    3f60:	12 82       	std	Z+2, r1	; 0x02
    3f62:	13 82       	std	Z+3, r1	; 0x03
    3f64:	a0 93 f5 20 	sts	0x20F5, r26	; 0x8020f5 <__brkval>
    3f68:	b0 93 f6 20 	sts	0x20F6, r27	; 0x8020f6 <__brkval+0x1>
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	08 95       	ret

00003f72 <memset>:
    3f72:	dc 01       	movw	r26, r24
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <memset+0x6>
    3f76:	6d 93       	st	X+, r22
    3f78:	41 50       	subi	r20, 0x01	; 1
    3f7a:	50 40       	sbci	r21, 0x00	; 0
    3f7c:	e0 f7       	brcc	.-8      	; 0x3f76 <memset+0x4>
    3f7e:	08 95       	ret

00003f80 <_exit>:
    3f80:	f8 94       	cli

00003f82 <__stop_program>:
    3f82:	ff cf       	rjmp	.-2      	; 0x3f82 <__stop_program>
