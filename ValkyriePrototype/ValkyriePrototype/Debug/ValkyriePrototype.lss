
ValkyriePrototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000457a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00802000  0000457a  0000460e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009b  0080207c  0080207c  0000468a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000468a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000046e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f8  00000000  00000000  00004728  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013068  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000065ba  00000000  00000000  00017d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a475  00000000  00000000  0001e342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d54  00000000  00000000  000287b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036bd6  00000000  00000000  0002a50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000638a  00000000  00000000  000610e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  00067470  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000dd14  00000000  00000000  000679f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_10>
      2c:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_11>
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c2       	rjmp	.+1524   	; 0x62a <__vector_13>
      36:	00 00       	nop
      38:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_14>
      3c:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__vector_15>
      40:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__vector_16>
      44:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_17>
      48:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__vector_18>
      4c:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__vector_19>
      50:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__vector_20>
      54:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__vector_21>
      58:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_22>
      5c:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_23>
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_39>
      a0:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_40>
      a4:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_41>
      a8:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_42>
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1c c3       	rjmp	.+1592   	; 0x6f2 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__vector_47>
      c0:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__vector_48>
      c4:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__vector_49>
      c8:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__vector_50>
      cc:	0c 94 36 13 	jmp	0x266c	; 0x266c <__vector_51>
      d0:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__vector_52>
      d4:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__vector_53>
      d8:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__vector_54>
      dc:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_55>
      e0:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__vector_56>
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_71>
     120:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_72>
     124:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_73>
     128:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__vector_74>
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	ae c2       	rjmp	.+1372   	; 0x68e <__vector_76>
     132:	00 00       	nop
     134:	0c 94 26 10 	jmp	0x204c	; 0x204c <__vector_77>
     138:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__vector_78>
     13c:	0c 94 96 10 	jmp	0x212c	; 0x212c <__vector_79>
     140:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__vector_80>
     144:	0c 94 06 11 	jmp	0x220c	; 0x220c <__vector_81>
     148:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__vector_82>
     14c:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_83>
     150:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__vector_84>
     154:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__vector_85>
     158:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_86>
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c1       	rjmp	.+566    	; 0x3a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d4 c2       	rjmp	.+1448   	; 0x756 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 86 14 	jmp	0x290c	; 0x290c <__vector_108>
     1b4:	0c 94 be 14 	jmp	0x297c	; 0x297c <__vector_109>
     1b8:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_110>
     1bc:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__vector_111>
     1c0:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_112>
     1c4:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__vector_113>
     1c8:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__vector_114>
     1cc:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__vector_115>
     1d0:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__vector_116>
     1d4:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__vector_117>
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c0       	rjmp	.+454    	; 0x3a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c0       	rjmp	.+442    	; 0x3a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c0       	rjmp	.+434    	; 0x3a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <usart_init_rs232+0x54>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	10 e2       	ldi	r17, 0x20	; 32
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	ea e7       	ldi	r30, 0x7A	; 122
     378:	f5 e4       	ldi	r31, 0x45	; 69
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 37       	cpi	r26, 0x7C	; 124
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	21 e2       	ldi	r18, 0x21	; 33
     38e:	ac e7       	ldi	r26, 0x7C	; 124
     390:	b0 e2       	ldi	r27, 0x20	; 32
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a7 31       	cpi	r26, 0x17	; 23
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 a1 18 	call	0x3142	; 0x3142 <main>
     3a0:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     3b0:	80 91 fd 20 	lds	r24, 0x20FD	; 0x8020fd <stdio_base>
     3b4:	90 91 fe 20 	lds	r25, 0x20FE	; 0x8020fe <stdio_base+0x1>
     3b8:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <ptr_get>
     3bc:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <ptr_get+0x1>
     3c0:	be 01       	movw	r22, r28
     3c2:	6f 5f       	subi	r22, 0xFF	; 255
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
     3c6:	19 95       	eicall
	return c;
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ca:	08 2e       	mov	r0, r24
     3cc:	00 0c       	add	r0, r0
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0f 90       	pop	r0
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3d8:	81 15       	cp	r24, r1
     3da:	22 e0       	ldi	r18, 0x02	; 2
     3dc:	92 07       	cpc	r25, r18
     3de:	69 f4       	brne	.+26     	; 0x3fa <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     3e0:	80 91 7d 20 	lds	r24, 0x207D	; 0x80207d <adca_enable_count>
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	98 0f       	add	r25, r24
     3e8:	90 93 7d 20 	sts	0x207D, r25	; 0x80207d <adca_enable_count>
     3ec:	81 11       	cpse	r24, r1
     3ee:	14 c0       	rjmp	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <sysclk_enable_module>
     3f8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     3fa:	80 34       	cpi	r24, 0x40	; 64
     3fc:	92 40       	sbci	r25, 0x02	; 2
     3fe:	61 f4       	brne	.+24     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     400:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <__data_end>
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	98 0f       	add	r25, r24
     408:	90 93 7c 20 	sts	0x207C, r25	; 0x80207c <__data_end>
     40c:	81 11       	cpse	r24, r1
     40e:	04 c0       	rjmp	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     410:	62 e0       	ldi	r22, 0x02	; 2
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <sysclk_enable_module>
     418:	08 95       	ret

0000041a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     41a:	81 15       	cp	r24, r1
     41c:	22 e0       	ldi	r18, 0x02	; 2
     41e:	92 07       	cpc	r25, r18
     420:	61 f4       	brne	.+24     	; 0x43a <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     422:	80 91 7d 20 	lds	r24, 0x207D	; 0x80207d <adca_enable_count>
     426:	81 50       	subi	r24, 0x01	; 1
     428:	80 93 7d 20 	sts	0x207D, r24	; 0x80207d <adca_enable_count>
     42c:	81 11       	cpse	r24, r1
     42e:	13 c0       	rjmp	.+38     	; 0x456 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     430:	62 e0       	ldi	r22, 0x02	; 2
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <sysclk_disable_module>
     438:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     43a:	80 34       	cpi	r24, 0x40	; 64
     43c:	92 40       	sbci	r25, 0x02	; 2
     43e:	59 f4       	brne	.+22     	; 0x456 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     440:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <__data_end>
     444:	81 50       	subi	r24, 0x01	; 1
     446:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <__data_end>
     44a:	81 11       	cpse	r24, r1
     44c:	04 c0       	rjmp	.+8      	; 0x456 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <sysclk_disable_module>
     456:	08 95       	ret

00000458 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	1f 92       	push	r1
     464:	1f 92       	push	r1
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     46c:	8f b7       	in	r24, 0x3f	; 63
     46e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     470:	f8 94       	cli
	return flags;
     472:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     474:	c7 01       	movw	r24, r14
     476:	b0 df       	rcall	.-160    	; 0x3d8 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     478:	f7 01       	movw	r30, r14
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     480:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     482:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <sleepmgr_locks+0x1>
     486:	8f 3f       	cpi	r24, 0xFF	; 255
     488:	09 f4       	brne	.+2      	; 0x48c <adc_enable+0x34>
     48a:	ff cf       	rjmp	.-2      	; 0x48a <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     48c:	8f b7       	in	r24, 0x3f	; 63
     48e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     490:	f8 94       	cli
	return flags;
     492:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     494:	ef ef       	ldi	r30, 0xFF	; 255
     496:	f0 e2       	ldi	r31, 0x20	; 32
     498:	81 81       	ldd	r24, Z+1	; 0x01
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     49e:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	08 95       	ret

000004b0 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	1f 92       	push	r1
     4b8:	1f 92       	push	r1
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4be:	2f b7       	in	r18, 0x3f	; 63
     4c0:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     4c2:	f8 94       	cli
	return flags;
     4c4:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 81       	ld	r18, Z
     4ca:	2e 7f       	andi	r18, 0xFE	; 254
     4cc:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     4ce:	a5 df       	rcall	.-182    	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4d0:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     4d2:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <sleepmgr_locks+0x1>
     4d6:	81 11       	cpse	r24, r1
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <adc_disable+0x2c>
     4da:	ff cf       	rjmp	.-2      	; 0x4da <adc_disable+0x2a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4dc:	8f b7       	in	r24, 0x3f	; 63
     4de:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     4e0:	f8 94       	cli
	return flags;
     4e2:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     4e4:	ef ef       	ldi	r30, 0xFF	; 255
     4e6:	f0 e2       	ldi	r31, 0x20	; 32
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	81 50       	subi	r24, 0x01	; 1
     4ec:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4ee:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	08 95       	ret

000004fc <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     500:	e0 91 7e 20 	lds	r30, 0x207E	; 0x80207e <transfer>
     504:	f0 91 7f 20 	lds	r31, 0x207F	; 0x80207f <transfer+0x1>
     508:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     50a:	83 ff       	sbrs	r24, 3
     50c:	08 c0       	rjmp	.+16     	; 0x51e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     516:	86 ef       	ldi	r24, 0xF6	; 246
     518:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <transfer+0xa>
     51c:	83 c0       	rjmp	.+262    	; 0x624 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     51e:	98 2f       	mov	r25, r24
     520:	94 71       	andi	r25, 0x14	; 20
     522:	31 f0       	breq	.+12     	; 0x530 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     528:	8f ef       	ldi	r24, 0xFF	; 255
     52a:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <transfer+0xa>
     52e:	7a c0       	rjmp	.+244    	; 0x624 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     530:	86 ff       	sbrs	r24, 6
     532:	43 c0       	rjmp	.+134    	; 0x5ba <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     534:	ce e7       	ldi	r28, 0x7E	; 126
     536:	d0 e2       	ldi	r29, 0x20	; 32
     538:	aa 81       	ldd	r26, Y+2	; 0x02
     53a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     53c:	8c 81       	ldd	r24, Y+4	; 0x04
     53e:	9d 81       	ldd	r25, Y+5	; 0x05
     540:	14 96       	adiw	r26, 0x04	; 4
     542:	2d 91       	ld	r18, X+
     544:	3c 91       	ld	r19, X
     546:	15 97       	sbiw	r26, 0x05	; 5
     548:	82 17       	cp	r24, r18
     54a:	93 07       	cpc	r25, r19
     54c:	6c f4       	brge	.+26     	; 0x568 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     54e:	9c 01       	movw	r18, r24
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	20 93 82 20 	sts	0x2082, r18	; 0x802082 <transfer+0x4>
     558:	30 93 83 20 	sts	0x2083, r19	; 0x802083 <transfer+0x5>
     55c:	a8 0f       	add	r26, r24
     55e:	b9 1f       	adc	r27, r25
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	8c 91       	ld	r24, X
     564:	87 83       	std	Z+7, r24	; 0x07
     566:	5e c0       	rjmp	.+188    	; 0x624 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     568:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <transfer+0x6>
     56c:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <transfer+0x7>
     570:	18 96       	adiw	r26, 0x08	; 8
     572:	2d 91       	ld	r18, X+
     574:	3c 91       	ld	r19, X
     576:	19 97       	sbiw	r26, 0x09	; 9
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	c8 f4       	brcc	.+50     	; 0x5b0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     57e:	20 91 86 20 	lds	r18, 0x2086	; 0x802086 <transfer+0x8>
     582:	22 23       	and	r18, r18
     584:	21 f0       	breq	.+8      	; 0x58e <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     586:	86 81       	ldd	r24, Z+6	; 0x06
     588:	81 60       	ori	r24, 0x01	; 1
     58a:	86 83       	std	Z+6, r24	; 0x06
     58c:	4b c0       	rjmp	.+150    	; 0x624 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     58e:	16 96       	adiw	r26, 0x06	; 6
     590:	2d 91       	ld	r18, X+
     592:	3c 91       	ld	r19, X
     594:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     596:	ac 01       	movw	r20, r24
     598:	4f 5f       	subi	r20, 0xFF	; 255
     59a:	5f 4f       	sbci	r21, 0xFF	; 255
     59c:	40 93 84 20 	sts	0x2084, r20	; 0x802084 <transfer+0x6>
     5a0:	50 93 85 20 	sts	0x2085, r21	; 0x802085 <transfer+0x7>
     5a4:	d9 01       	movw	r26, r18
     5a6:	a8 0f       	add	r26, r24
     5a8:	b9 1f       	adc	r27, r25
     5aa:	8c 91       	ld	r24, X
     5ac:	87 83       	std	Z+7, r24	; 0x07
     5ae:	3a c0       	rjmp	.+116    	; 0x624 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     5b4:	10 92 88 20 	sts	0x2088, r1	; 0x802088 <transfer+0xa>
     5b8:	35 c0       	rjmp	.+106    	; 0x624 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     5ba:	88 23       	and	r24, r24
     5bc:	84 f5       	brge	.+96     	; 0x61e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     5be:	ae e7       	ldi	r26, 0x7E	; 126
     5c0:	b0 e2       	ldi	r27, 0x20	; 32
     5c2:	12 96       	adiw	r26, 0x02	; 2
     5c4:	cd 91       	ld	r28, X+
     5c6:	dc 91       	ld	r29, X
     5c8:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     5ca:	16 96       	adiw	r26, 0x06	; 6
     5cc:	8d 91       	ld	r24, X+
     5ce:	9c 91       	ld	r25, X
     5d0:	17 97       	sbiw	r26, 0x07	; 7
     5d2:	28 85       	ldd	r18, Y+8	; 0x08
     5d4:	39 85       	ldd	r19, Y+9	; 0x09
     5d6:	82 17       	cp	r24, r18
     5d8:	93 07       	cpc	r25, r19
     5da:	d8 f4       	brcc	.+54     	; 0x612 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     5dc:	6e 81       	ldd	r22, Y+6	; 0x06
     5de:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     5e0:	9c 01       	movw	r18, r24
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	20 93 84 20 	sts	0x2084, r18	; 0x802084 <transfer+0x6>
     5ea:	30 93 85 20 	sts	0x2085, r19	; 0x802085 <transfer+0x7>
     5ee:	47 81       	ldd	r20, Z+7	; 0x07
     5f0:	db 01       	movw	r26, r22
     5f2:	a8 0f       	add	r26, r24
     5f4:	b9 1f       	adc	r27, r25
     5f6:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     5f8:	88 85       	ldd	r24, Y+8	; 0x08
     5fa:	99 85       	ldd	r25, Y+9	; 0x09
     5fc:	28 17       	cp	r18, r24
     5fe:	39 07       	cpc	r19, r25
     600:	18 f4       	brcc	.+6      	; 0x608 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	83 83       	std	Z+3, r24	; 0x03
     606:	0e c0       	rjmp	.+28     	; 0x624 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     608:	87 e0       	ldi	r24, 0x07	; 7
     60a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     60c:	10 92 88 20 	sts	0x2088, r1	; 0x802088 <transfer+0xa>
     610:	09 c0       	rjmp	.+18     	; 0x624 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     616:	89 ef       	ldi	r24, 0xF9	; 249
     618:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <transfer+0xa>
     61c:	03 c0       	rjmp	.+6      	; 0x624 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     61e:	8b ef       	ldi	r24, 0xFB	; 251
     620:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <transfer+0xa>
	}
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     62a:	1f 92       	push	r1
     62c:	0f 92       	push	r0
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	0f 92       	push	r0
     632:	11 24       	eor	r1, r1
     634:	08 b6       	in	r0, 0x38	; 56
     636:	0f 92       	push	r0
     638:	18 be       	out	0x38, r1	; 56
     63a:	09 b6       	in	r0, 0x39	; 57
     63c:	0f 92       	push	r0
     63e:	19 be       	out	0x39, r1	; 57
     640:	0b b6       	in	r0, 0x3b	; 59
     642:	0f 92       	push	r0
     644:	1b be       	out	0x3b, r1	; 59
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
     65e:	4e df       	rcall	.-356    	; 0x4fc <twim_interrupt_handler>
     660:	ff 91       	pop	r31
     662:	ef 91       	pop	r30
     664:	bf 91       	pop	r27
     666:	af 91       	pop	r26
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	7f 91       	pop	r23
     66e:	6f 91       	pop	r22
     670:	5f 91       	pop	r21
     672:	4f 91       	pop	r20
     674:	3f 91       	pop	r19
     676:	2f 91       	pop	r18
     678:	0f 90       	pop	r0
     67a:	0b be       	out	0x3b, r0	; 59
     67c:	0f 90       	pop	r0
     67e:	09 be       	out	0x39, r0	; 57
     680:	0f 90       	pop	r0
     682:	08 be       	out	0x38, r0	; 56
     684:	0f 90       	pop	r0
     686:	0f be       	out	0x3f, r0	; 63
     688:	0f 90       	pop	r0
     68a:	1f 90       	pop	r1
     68c:	18 95       	reti

0000068e <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     68e:	1f 92       	push	r1
     690:	0f 92       	push	r0
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	0f 92       	push	r0
     696:	11 24       	eor	r1, r1
     698:	08 b6       	in	r0, 0x38	; 56
     69a:	0f 92       	push	r0
     69c:	18 be       	out	0x38, r1	; 56
     69e:	09 b6       	in	r0, 0x39	; 57
     6a0:	0f 92       	push	r0
     6a2:	19 be       	out	0x39, r1	; 57
     6a4:	0b b6       	in	r0, 0x3b	; 59
     6a6:	0f 92       	push	r0
     6a8:	1b be       	out	0x3b, r1	; 59
     6aa:	2f 93       	push	r18
     6ac:	3f 93       	push	r19
     6ae:	4f 93       	push	r20
     6b0:	5f 93       	push	r21
     6b2:	6f 93       	push	r22
     6b4:	7f 93       	push	r23
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	ef 93       	push	r30
     6c0:	ff 93       	push	r31
     6c2:	1c df       	rcall	.-456    	; 0x4fc <twim_interrupt_handler>
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	08 b6       	in	r0, 0x38	; 56
     6fe:	0f 92       	push	r0
     700:	18 be       	out	0x38, r1	; 56
     702:	09 b6       	in	r0, 0x39	; 57
     704:	0f 92       	push	r0
     706:	19 be       	out	0x39, r1	; 57
     708:	0b b6       	in	r0, 0x3b	; 59
     70a:	0f 92       	push	r0
     70c:	1b be       	out	0x3b, r1	; 59
     70e:	2f 93       	push	r18
     710:	3f 93       	push	r19
     712:	4f 93       	push	r20
     714:	5f 93       	push	r21
     716:	6f 93       	push	r22
     718:	7f 93       	push	r23
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	af 93       	push	r26
     720:	bf 93       	push	r27
     722:	ef 93       	push	r30
     724:	ff 93       	push	r31
     726:	ea de       	rcall	.-556    	; 0x4fc <twim_interrupt_handler>
     728:	ff 91       	pop	r31
     72a:	ef 91       	pop	r30
     72c:	bf 91       	pop	r27
     72e:	af 91       	pop	r26
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	7f 91       	pop	r23
     736:	6f 91       	pop	r22
     738:	5f 91       	pop	r21
     73a:	4f 91       	pop	r20
     73c:	3f 91       	pop	r19
     73e:	2f 91       	pop	r18
     740:	0f 90       	pop	r0
     742:	0b be       	out	0x3b, r0	; 59
     744:	0f 90       	pop	r0
     746:	09 be       	out	0x39, r0	; 57
     748:	0f 90       	pop	r0
     74a:	08 be       	out	0x38, r0	; 56
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	08 b6       	in	r0, 0x38	; 56
     762:	0f 92       	push	r0
     764:	18 be       	out	0x38, r1	; 56
     766:	09 b6       	in	r0, 0x39	; 57
     768:	0f 92       	push	r0
     76a:	19 be       	out	0x39, r1	; 57
     76c:	0b b6       	in	r0, 0x3b	; 59
     76e:	0f 92       	push	r0
     770:	1b be       	out	0x3b, r1	; 59
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	b8 de       	rcall	.-656    	; 0x4fc <twim_interrupt_handler>
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0b be       	out	0x3b, r0	; 59
     7a8:	0f 90       	pop	r0
     7aa:	09 be       	out	0x39, r0	; 57
     7ac:	0f 90       	pop	r0
     7ae:	08 be       	out	0x38, r0	; 56
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     7ba:	fc 01       	movw	r30, r24
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	95 ff       	sbrs	r25, 5
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <usart_putchar+0x2>
     7c2:	60 83       	st	Z, r22
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	08 95       	ret

000007ca <usart_getchar>:
     7ca:	fc 01       	movw	r30, r24
     7cc:	91 81       	ldd	r25, Z+1	; 0x01
     7ce:	99 23       	and	r25, r25
     7d0:	ec f7       	brge	.-6      	; 0x7cc <usart_getchar+0x2>
     7d2:	80 81       	ld	r24, Z
     7d4:	08 95       	ret

000007d6 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     7d6:	4f 92       	push	r4
     7d8:	5f 92       	push	r5
     7da:	6f 92       	push	r6
     7dc:	7f 92       	push	r7
     7de:	8f 92       	push	r8
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	7c 01       	movw	r14, r24
     7f2:	4a 01       	movw	r8, r20
     7f4:	5b 01       	movw	r10, r22
     7f6:	28 01       	movw	r4, r16
     7f8:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7fa:	fc 01       	movw	r30, r24
     7fc:	84 81       	ldd	r24, Z+4	; 0x04
     7fe:	82 ff       	sbrs	r24, 2
     800:	16 c0       	rjmp	.+44     	; 0x82e <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     802:	d9 01       	movw	r26, r18
     804:	c8 01       	movw	r24, r16
     806:	68 94       	set
     808:	12 f8       	bld	r1, 2
     80a:	b6 95       	lsr	r27
     80c:	a7 95       	ror	r26
     80e:	97 95       	ror	r25
     810:	87 95       	ror	r24
     812:	16 94       	lsr	r1
     814:	d1 f7       	brne	.-12     	; 0x80a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     816:	b9 01       	movw	r22, r18
     818:	a8 01       	movw	r20, r16
     81a:	03 2e       	mov	r0, r19
     81c:	36 e1       	ldi	r19, 0x16	; 22
     81e:	76 95       	lsr	r23
     820:	67 95       	ror	r22
     822:	57 95       	ror	r21
     824:	47 95       	ror	r20
     826:	3a 95       	dec	r19
     828:	d1 f7       	brne	.-12     	; 0x81e <usart_set_baudrate+0x48>
     82a:	30 2d       	mov	r19, r0
     82c:	15 c0       	rjmp	.+42     	; 0x858 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     82e:	d9 01       	movw	r26, r18
     830:	c8 01       	movw	r24, r16
     832:	68 94       	set
     834:	13 f8       	bld	r1, 3
     836:	b6 95       	lsr	r27
     838:	a7 95       	ror	r26
     83a:	97 95       	ror	r25
     83c:	87 95       	ror	r24
     83e:	16 94       	lsr	r1
     840:	d1 f7       	brne	.-12     	; 0x836 <usart_set_baudrate+0x60>
		min_rate /= 2;
     842:	b9 01       	movw	r22, r18
     844:	a8 01       	movw	r20, r16
     846:	03 2e       	mov	r0, r19
     848:	37 e1       	ldi	r19, 0x17	; 23
     84a:	76 95       	lsr	r23
     84c:	67 95       	ror	r22
     84e:	57 95       	ror	r21
     850:	47 95       	ror	r20
     852:	3a 95       	dec	r19
     854:	d1 f7       	brne	.-12     	; 0x84a <usart_set_baudrate+0x74>
     856:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     858:	88 15       	cp	r24, r8
     85a:	99 05       	cpc	r25, r9
     85c:	aa 05       	cpc	r26, r10
     85e:	bb 05       	cpc	r27, r11
     860:	08 f4       	brcc	.+2      	; 0x864 <usart_set_baudrate+0x8e>
     862:	a6 c0       	rjmp	.+332    	; 0x9b0 <usart_set_baudrate+0x1da>
     864:	84 16       	cp	r8, r20
     866:	95 06       	cpc	r9, r21
     868:	a6 06       	cpc	r10, r22
     86a:	b7 06       	cpc	r11, r23
     86c:	08 f4       	brcc	.+2      	; 0x870 <usart_set_baudrate+0x9a>
     86e:	a2 c0       	rjmp	.+324    	; 0x9b4 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     870:	f7 01       	movw	r30, r14
     872:	84 81       	ldd	r24, Z+4	; 0x04
     874:	82 fd       	sbrc	r24, 2
     876:	04 c0       	rjmp	.+8      	; 0x880 <usart_set_baudrate+0xaa>
		baud *= 2;
     878:	88 0c       	add	r8, r8
     87a:	99 1c       	adc	r9, r9
     87c:	aa 1c       	adc	r10, r10
     87e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	a5 01       	movw	r20, r10
     886:	94 01       	movw	r18, r8
     888:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     88c:	2f 3f       	cpi	r18, 0xFF	; 255
     88e:	31 05       	cpc	r19, r1
     890:	41 05       	cpc	r20, r1
     892:	51 05       	cpc	r21, r1
     894:	08 f4       	brcc	.+2      	; 0x898 <usart_set_baudrate+0xc2>
     896:	90 c0       	rjmp	.+288    	; 0x9b8 <usart_set_baudrate+0x1e2>
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	c9 ef       	ldi	r28, 0xF9	; 249
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <usart_set_baudrate+0xd8>
     8a4:	28 17       	cp	r18, r24
     8a6:	39 07       	cpc	r19, r25
     8a8:	4a 07       	cpc	r20, r26
     8aa:	5b 07       	cpc	r21, r27
     8ac:	58 f0       	brcs	.+22     	; 0x8c4 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	aa 1f       	adc	r26, r26
     8b4:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     8b6:	cd 3f       	cpi	r28, 0xFD	; 253
     8b8:	0c f4       	brge	.+2      	; 0x8bc <usart_set_baudrate+0xe6>
			limit |= 1;
     8ba:	81 60       	ori	r24, 0x01	; 1
     8bc:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     8be:	c7 30       	cpi	r28, 0x07	; 7
     8c0:	89 f7       	brne	.-30     	; 0x8a4 <usart_set_baudrate+0xce>
     8c2:	4f c0       	rjmp	.+158    	; 0x962 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     8c4:	cc 23       	and	r28, r28
     8c6:	0c f0       	brlt	.+2      	; 0x8ca <usart_set_baudrate+0xf4>
     8c8:	4c c0       	rjmp	.+152    	; 0x962 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8ca:	d5 01       	movw	r26, r10
     8cc:	c4 01       	movw	r24, r8
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	aa 1f       	adc	r26, r26
     8dc:	bb 1f       	adc	r27, r27
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	48 1a       	sub	r4, r24
     8e8:	59 0a       	sbc	r5, r25
     8ea:	6a 0a       	sbc	r6, r26
     8ec:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     8ee:	ce 3f       	cpi	r28, 0xFE	; 254
     8f0:	f4 f4       	brge	.+60     	; 0x92e <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     8f2:	8d ef       	ldi	r24, 0xFD	; 253
     8f4:	9f ef       	ldi	r25, 0xFF	; 255
     8f6:	8c 1b       	sub	r24, r28
     8f8:	91 09       	sbc	r25, r1
     8fa:	c7 fd       	sbrc	r28, 7
     8fc:	93 95       	inc	r25
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <usart_set_baudrate+0x132>
     900:	44 0c       	add	r4, r4
     902:	55 1c       	adc	r5, r5
     904:	66 1c       	adc	r6, r6
     906:	77 1c       	adc	r7, r7
     908:	8a 95       	dec	r24
     90a:	d2 f7       	brpl	.-12     	; 0x900 <usart_set_baudrate+0x12a>
     90c:	d5 01       	movw	r26, r10
     90e:	c4 01       	movw	r24, r8
     910:	b6 95       	lsr	r27
     912:	a7 95       	ror	r26
     914:	97 95       	ror	r25
     916:	87 95       	ror	r24
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	64 0d       	add	r22, r4
     91e:	75 1d       	adc	r23, r5
     920:	86 1d       	adc	r24, r6
     922:	97 1d       	adc	r25, r7
     924:	a5 01       	movw	r20, r10
     926:	94 01       	movw	r18, r8
     928:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__udivmodsi4>
     92c:	37 c0       	rjmp	.+110    	; 0x99c <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	8c 0f       	add	r24, r28
     932:	a5 01       	movw	r20, r10
     934:	94 01       	movw	r18, r8
     936:	04 c0       	rjmp	.+8      	; 0x940 <usart_set_baudrate+0x16a>
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	44 1f       	adc	r20, r20
     93e:	55 1f       	adc	r21, r21
     940:	8a 95       	dec	r24
     942:	d2 f7       	brpl	.-12     	; 0x938 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     944:	da 01       	movw	r26, r20
     946:	c9 01       	movw	r24, r18
     948:	b6 95       	lsr	r27
     94a:	a7 95       	ror	r26
     94c:	97 95       	ror	r25
     94e:	87 95       	ror	r24
     950:	bc 01       	movw	r22, r24
     952:	cd 01       	movw	r24, r26
     954:	64 0d       	add	r22, r4
     956:	75 1d       	adc	r23, r5
     958:	86 1d       	adc	r24, r6
     95a:	97 1d       	adc	r25, r7
     95c:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__udivmodsi4>
     960:	1d c0       	rjmp	.+58     	; 0x99c <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	8c 0f       	add	r24, r28
     966:	a5 01       	movw	r20, r10
     968:	94 01       	movw	r18, r8
     96a:	04 c0       	rjmp	.+8      	; 0x974 <usart_set_baudrate+0x19e>
     96c:	22 0f       	add	r18, r18
     96e:	33 1f       	adc	r19, r19
     970:	44 1f       	adc	r20, r20
     972:	55 1f       	adc	r21, r21
     974:	8a 95       	dec	r24
     976:	d2 f7       	brpl	.-12     	; 0x96c <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	b6 95       	lsr	r27
     97e:	a7 95       	ror	r26
     980:	97 95       	ror	r25
     982:	87 95       	ror	r24
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	64 0d       	add	r22, r4
     98a:	75 1d       	adc	r23, r5
     98c:	86 1d       	adc	r24, r6
     98e:	97 1d       	adc	r25, r7
     990:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__udivmodsi4>
     994:	21 50       	subi	r18, 0x01	; 1
     996:	31 09       	sbc	r19, r1
     998:	41 09       	sbc	r20, r1
     99a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     99c:	83 2f       	mov	r24, r19
     99e:	8f 70       	andi	r24, 0x0F	; 15
     9a0:	c2 95       	swap	r28
     9a2:	c0 7f       	andi	r28, 0xF0	; 240
     9a4:	c8 2b       	or	r28, r24
     9a6:	f7 01       	movw	r30, r14
     9a8:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     9aa:	26 83       	std	Z+6, r18	; 0x06

	return true;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	18 c0       	rjmp	.+48     	; 0x9e0 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <usart_set_baudrate+0x20a>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     9b8:	d5 01       	movw	r26, r10
     9ba:	c4 01       	movw	r24, r8
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	aa 1f       	adc	r26, r26
     9c2:	bb 1f       	adc	r27, r27
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	aa 1f       	adc	r26, r26
     9ca:	bb 1f       	adc	r27, r27
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	aa 1f       	adc	r26, r26
     9d2:	bb 1f       	adc	r27, r27
     9d4:	48 1a       	sub	r4, r24
     9d6:	59 0a       	sbc	r5, r25
     9d8:	6a 0a       	sbc	r6, r26
     9da:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9dc:	c9 ef       	ldi	r28, 0xF9	; 249
     9de:	89 cf       	rjmp	.-238    	; 0x8f2 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
     9f2:	7f 90       	pop	r7
     9f4:	6f 90       	pop	r6
     9f6:	5f 90       	pop	r5
     9f8:	4f 90       	pop	r4
     9fa:	08 95       	ret

000009fc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
     a06:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	09 f4       	brne	.+2      	; 0xa0e <usart_init_rs232+0x12>
     a0c:	39 c1       	rjmp	.+626    	; 0xc80 <usart_init_rs232+0x284>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     a0e:	80 3c       	cpi	r24, 0xC0	; 192
     a10:	91 05       	cpc	r25, r1
     a12:	29 f4       	brne	.+10     	; 0xa1e <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     a14:	60 e1       	ldi	r22, 0x10	; 16
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
     a1c:	31 c1       	rjmp	.+610    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     a1e:	c0 34       	cpi	r28, 0x40	; 64
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	d8 07       	cpc	r29, r24
     a24:	29 f4       	brne	.+10     	; 0xa30 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     a26:	68 e0       	ldi	r22, 0x08	; 8
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
     a2e:	28 c1       	rjmp	.+592    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     a30:	c1 15       	cp	r28, r1
     a32:	e4 e0       	ldi	r30, 0x04	; 4
     a34:	de 07       	cpc	r29, r30
     a36:	29 f4       	brne	.+10     	; 0xa42 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     a38:	64 e0       	ldi	r22, 0x04	; 4
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
     a40:	1f c1       	rjmp	.+574    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     a42:	c0 38       	cpi	r28, 0x80	; 128
     a44:	f1 e0       	ldi	r31, 0x01	; 1
     a46:	df 07       	cpc	r29, r31
     a48:	21 f4       	brne	.+8      	; 0xa52 <usart_init_rs232+0x56>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     a4a:	62 e0       	ldi	r22, 0x02	; 2
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	fc d7       	rcall	.+4088   	; 0x1a48 <sysclk_enable_module>
     a50:	17 c1       	rjmp	.+558    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     a52:	c1 15       	cp	r28, r1
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	d8 07       	cpc	r29, r24
     a58:	21 f4       	brne	.+8      	; 0xa62 <usart_init_rs232+0x66>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	f4 d7       	rcall	.+4072   	; 0x1a48 <sysclk_enable_module>
     a60:	0f c1       	rjmp	.+542    	; 0xc80 <usart_init_rs232+0x284>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     a62:	c0 38       	cpi	r28, 0x80	; 128
     a64:	e3 e0       	ldi	r30, 0x03	; 3
     a66:	de 07       	cpc	r29, r30
     a68:	21 f4       	brne	.+8      	; 0xa72 <usart_init_rs232+0x76>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	ec d7       	rcall	.+4056   	; 0x1a48 <sysclk_enable_module>
     a70:	07 c1       	rjmp	.+526    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     a72:	c0 39       	cpi	r28, 0x90	; 144
     a74:	f3 e0       	ldi	r31, 0x03	; 3
     a76:	df 07       	cpc	r29, r31
     a78:	21 f4       	brne	.+8      	; 0xa82 <usart_init_rs232+0x86>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	e4 d7       	rcall	.+4040   	; 0x1a48 <sysclk_enable_module>
     a80:	ff c0       	rjmp	.+510    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     a82:	c1 15       	cp	r28, r1
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     a88:	21 f4       	brne	.+8      	; 0xa92 <usart_init_rs232+0x96>
     a8a:	62 e0       	ldi	r22, 0x02	; 2
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	dc d7       	rcall	.+4024   	; 0x1a48 <sysclk_enable_module>
     a90:	f7 c0       	rjmp	.+494    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     a92:	c0 34       	cpi	r28, 0x40	; 64
     a94:	e2 e0       	ldi	r30, 0x02	; 2
     a96:	de 07       	cpc	r29, r30
     a98:	21 f4       	brne	.+8      	; 0xaa2 <usart_init_rs232+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     a9a:	62 e0       	ldi	r22, 0x02	; 2
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	d4 d7       	rcall	.+4008   	; 0x1a48 <sysclk_enable_module>
     aa0:	ef c0       	rjmp	.+478    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     aa2:	c1 15       	cp	r28, r1
     aa4:	f3 e0       	ldi	r31, 0x03	; 3
     aa6:	df 07       	cpc	r29, r31
     aa8:	21 f4       	brne	.+8      	; 0xab2 <usart_init_rs232+0xb6>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     aaa:	64 e0       	ldi	r22, 0x04	; 4
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	cc d7       	rcall	.+3992   	; 0x1a48 <sysclk_enable_module>
     ab0:	e7 c0       	rjmp	.+462    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     ab2:	c0 32       	cpi	r28, 0x20	; 32
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	d8 07       	cpc	r29, r24
     ab8:	21 f4       	brne	.+8      	; 0xac2 <usart_init_rs232+0xc6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     aba:	64 e0       	ldi	r22, 0x04	; 4
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	c4 d7       	rcall	.+3976   	; 0x1a48 <sysclk_enable_module>
     ac0:	df c0       	rjmp	.+446    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     ac2:	c1 15       	cp	r28, r1
     ac4:	e8 e0       	ldi	r30, 0x08	; 8
     ac6:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     ac8:	21 f4       	brne	.+8      	; 0xad2 <usart_init_rs232+0xd6>
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	bc d7       	rcall	.+3960   	; 0x1a48 <sysclk_enable_module>
     ad0:	d7 c0       	rjmp	.+430    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     ad2:	c1 15       	cp	r28, r1
     ad4:	f9 e0       	ldi	r31, 0x09	; 9
     ad6:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     ad8:	21 f4       	brne	.+8      	; 0xae2 <usart_init_rs232+0xe6>
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	b4 d7       	rcall	.+3944   	; 0x1a48 <sysclk_enable_module>
     ae0:	cf c0       	rjmp	.+414    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     ae2:	c1 15       	cp	r28, r1
     ae4:	8a e0       	ldi	r24, 0x0A	; 10
     ae6:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <usart_init_rs232+0xf6>
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	85 e0       	ldi	r24, 0x05	; 5
     aee:	ac d7       	rcall	.+3928   	; 0x1a48 <sysclk_enable_module>
     af0:	c7 c0       	rjmp	.+398    	; 0xc80 <usart_init_rs232+0x284>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     af2:	c1 15       	cp	r28, r1
     af4:	eb e0       	ldi	r30, 0x0B	; 11
     af6:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     af8:	21 f4       	brne	.+8      	; 0xb02 <usart_init_rs232+0x106>
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	86 e0       	ldi	r24, 0x06	; 6
     afe:	a4 d7       	rcall	.+3912   	; 0x1a48 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     b00:	bf c0       	rjmp	.+382    	; 0xc80 <usart_init_rs232+0x284>
     b02:	c0 34       	cpi	r28, 0x40	; 64
     b04:	f8 e0       	ldi	r31, 0x08	; 8
     b06:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     b08:	21 f4       	brne	.+8      	; 0xb12 <usart_init_rs232+0x116>
     b0a:	62 e0       	ldi	r22, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	9c d7       	rcall	.+3896   	; 0x1a48 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     b10:	b7 c0       	rjmp	.+366    	; 0xc80 <usart_init_rs232+0x284>
     b12:	c0 34       	cpi	r28, 0x40	; 64
     b14:	89 e0       	ldi	r24, 0x09	; 9
     b16:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     b18:	21 f4       	brne	.+8      	; 0xb22 <usart_init_rs232+0x126>
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	94 d7       	rcall	.+3880   	; 0x1a48 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     b20:	af c0       	rjmp	.+350    	; 0xc80 <usart_init_rs232+0x284>
     b22:	c0 34       	cpi	r28, 0x40	; 64
     b24:	ea e0       	ldi	r30, 0x0A	; 10
     b26:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     b28:	21 f4       	brne	.+8      	; 0xb32 <usart_init_rs232+0x136>
     b2a:	62 e0       	ldi	r22, 0x02	; 2
     b2c:	85 e0       	ldi	r24, 0x05	; 5
     b2e:	8c d7       	rcall	.+3864   	; 0x1a48 <sysclk_enable_module>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     b30:	a7 c0       	rjmp	.+334    	; 0xc80 <usart_init_rs232+0x284>
     b32:	c0 34       	cpi	r28, 0x40	; 64
     b34:	fb e0       	ldi	r31, 0x0B	; 11
     b36:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     b38:	21 f4       	brne	.+8      	; 0xb42 <usart_init_rs232+0x146>
     b3a:	62 e0       	ldi	r22, 0x02	; 2
     b3c:	86 e0       	ldi	r24, 0x06	; 6
     b3e:	84 d7       	rcall	.+3848   	; 0x1a48 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     b40:	9f c0       	rjmp	.+318    	; 0xc80 <usart_init_rs232+0x284>
     b42:	c0 39       	cpi	r28, 0x90	; 144
     b44:	88 e0       	ldi	r24, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     b46:	d8 07       	cpc	r29, r24
     b48:	21 f4       	brne	.+8      	; 0xb52 <usart_init_rs232+0x156>
     b4a:	64 e0       	ldi	r22, 0x04	; 4
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	7c d7       	rcall	.+3832   	; 0x1a48 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     b50:	97 c0       	rjmp	.+302    	; 0xc80 <usart_init_rs232+0x284>
     b52:	c0 39       	cpi	r28, 0x90	; 144
     b54:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     b56:	de 07       	cpc	r29, r30
     b58:	21 f4       	brne	.+8      	; 0xb62 <usart_init_rs232+0x166>
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	74 d7       	rcall	.+3816   	; 0x1a48 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     b60:	8f c0       	rjmp	.+286    	; 0xc80 <usart_init_rs232+0x284>
     b62:	c0 39       	cpi	r28, 0x90	; 144
     b64:	fa e0       	ldi	r31, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     b66:	df 07       	cpc	r29, r31
     b68:	21 f4       	brne	.+8      	; 0xb72 <usart_init_rs232+0x176>
     b6a:	64 e0       	ldi	r22, 0x04	; 4
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	6c d7       	rcall	.+3800   	; 0x1a48 <sysclk_enable_module>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     b70:	87 c0       	rjmp	.+270    	; 0xc80 <usart_init_rs232+0x284>
     b72:	c0 39       	cpi	r28, 0x90	; 144
     b74:	8b e0       	ldi	r24, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     b76:	d8 07       	cpc	r29, r24
     b78:	21 f4       	brne	.+8      	; 0xb82 <usart_init_rs232+0x186>
     b7a:	64 e0       	ldi	r22, 0x04	; 4
     b7c:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     b7e:	64 d7       	rcall	.+3784   	; 0x1a48 <sysclk_enable_module>
     b80:	7f c0       	rjmp	.+254    	; 0xc80 <usart_init_rs232+0x284>
     b82:	c0 3c       	cpi	r28, 0xC0	; 192
     b84:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     b86:	de 07       	cpc	r29, r30
     b88:	21 f4       	brne	.+8      	; 0xb92 <usart_init_rs232+0x196>
     b8a:	68 e0       	ldi	r22, 0x08	; 8
     b8c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     b8e:	5c d7       	rcall	.+3768   	; 0x1a48 <sysclk_enable_module>
     b90:	77 c0       	rjmp	.+238    	; 0xc80 <usart_init_rs232+0x284>
     b92:	c0 3c       	cpi	r28, 0xC0	; 192
     b94:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     b96:	df 07       	cpc	r29, r31
     b98:	21 f4       	brne	.+8      	; 0xba2 <usart_init_rs232+0x1a6>
     b9a:	68 e0       	ldi	r22, 0x08	; 8
     b9c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     b9e:	54 d7       	rcall	.+3752   	; 0x1a48 <sysclk_enable_module>
     ba0:	6f c0       	rjmp	.+222    	; 0xc80 <usart_init_rs232+0x284>
     ba2:	c0 3c       	cpi	r28, 0xC0	; 192
     ba4:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ba6:	d8 07       	cpc	r29, r24
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <usart_init_rs232+0x1b6>
     baa:	68 e0       	ldi	r22, 0x08	; 8
     bac:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     bae:	4c d7       	rcall	.+3736   	; 0x1a48 <sysclk_enable_module>
     bb0:	67 c0       	rjmp	.+206    	; 0xc80 <usart_init_rs232+0x284>
     bb2:	c0 3c       	cpi	r28, 0xC0	; 192
     bb4:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     bb6:	de 07       	cpc	r29, r30
     bb8:	21 f4       	brne	.+8      	; 0xbc2 <usart_init_rs232+0x1c6>
     bba:	68 e0       	ldi	r22, 0x08	; 8
     bbc:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     bbe:	44 d7       	rcall	.+3720   	; 0x1a48 <sysclk_enable_module>
     bc0:	5f c0       	rjmp	.+190    	; 0xc80 <usart_init_rs232+0x284>
     bc2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     bc4:	f8 e0       	ldi	r31, 0x08	; 8
     bc6:	df 07       	cpc	r29, r31
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <usart_init_rs232+0x1d6>
     bca:	60 e1       	ldi	r22, 0x10	; 16
     bcc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     bce:	3c d7       	rcall	.+3704   	; 0x1a48 <sysclk_enable_module>
     bd0:	57 c0       	rjmp	.+174    	; 0xc80 <usart_init_rs232+0x284>
     bd2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     bd4:	89 e0       	ldi	r24, 0x09	; 9
     bd6:	d8 07       	cpc	r29, r24
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <usart_init_rs232+0x1e6>
     bda:	60 e1       	ldi	r22, 0x10	; 16
     bdc:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     bde:	34 d7       	rcall	.+3688   	; 0x1a48 <sysclk_enable_module>
     be0:	4f c0       	rjmp	.+158    	; 0xc80 <usart_init_rs232+0x284>
     be2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     be4:	ea e0       	ldi	r30, 0x0A	; 10
     be6:	de 07       	cpc	r29, r30
     be8:	21 f4       	brne	.+8      	; 0xbf2 <usart_init_rs232+0x1f6>
     bea:	60 e1       	ldi	r22, 0x10	; 16
     bec:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     bee:	2c d7       	rcall	.+3672   	; 0x1a48 <sysclk_enable_module>
     bf0:	47 c0       	rjmp	.+142    	; 0xc80 <usart_init_rs232+0x284>
     bf2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     bf4:	fb e0       	ldi	r31, 0x0B	; 11
     bf6:	df 07       	cpc	r29, r31
     bf8:	21 f4       	brne	.+8      	; 0xc02 <usart_init_rs232+0x206>
     bfa:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     bfc:	86 e0       	ldi	r24, 0x06	; 6
     bfe:	24 d7       	rcall	.+3656   	; 0x1a48 <sysclk_enable_module>
     c00:	3f c0       	rjmp	.+126    	; 0xc80 <usart_init_rs232+0x284>
     c02:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     c04:	88 e0       	ldi	r24, 0x08	; 8
     c06:	d8 07       	cpc	r29, r24
     c08:	21 f4       	brne	.+8      	; 0xc12 <usart_init_rs232+0x216>
     c0a:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	1c d7       	rcall	.+3640   	; 0x1a48 <sysclk_enable_module>
     c10:	37 c0       	rjmp	.+110    	; 0xc80 <usart_init_rs232+0x284>
     c12:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     c14:	e9 e0       	ldi	r30, 0x09	; 9
     c16:	de 07       	cpc	r29, r30
     c18:	21 f4       	brne	.+8      	; 0xc22 <usart_init_rs232+0x226>
     c1a:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     c1c:	84 e0       	ldi	r24, 0x04	; 4
     c1e:	14 d7       	rcall	.+3624   	; 0x1a48 <sysclk_enable_module>
     c20:	2f c0       	rjmp	.+94     	; 0xc80 <usart_init_rs232+0x284>
     c22:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     c24:	fa e0       	ldi	r31, 0x0A	; 10
     c26:	df 07       	cpc	r29, r31
     c28:	21 f4       	brne	.+8      	; 0xc32 <usart_init_rs232+0x236>
     c2a:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     c2c:	85 e0       	ldi	r24, 0x05	; 5
     c2e:	0c d7       	rcall	.+3608   	; 0x1a48 <sysclk_enable_module>
     c30:	27 c0       	rjmp	.+78     	; 0xc80 <usart_init_rs232+0x284>
     c32:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     c34:	8b e0       	ldi	r24, 0x0B	; 11
     c36:	d8 07       	cpc	r29, r24
     c38:	21 f4       	brne	.+8      	; 0xc42 <usart_init_rs232+0x246>
     c3a:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     c3c:	86 e0       	ldi	r24, 0x06	; 6
     c3e:	04 d7       	rcall	.+3592   	; 0x1a48 <sysclk_enable_module>
     c40:	1f c0       	rjmp	.+62     	; 0xc80 <usart_init_rs232+0x284>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     c42:	c0 38       	cpi	r28, 0x80	; 128
     c44:	e4 e0       	ldi	r30, 0x04	; 4
     c46:	de 07       	cpc	r29, r30
     c48:	21 f4       	brne	.+8      	; 0xc52 <usart_init_rs232+0x256>
     c4a:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	fc d6       	rcall	.+3576   	; 0x1a48 <sysclk_enable_module>
     c50:	17 c0       	rjmp	.+46     	; 0xc80 <usart_init_rs232+0x284>
     c52:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     c54:	f4 e0       	ldi	r31, 0x04	; 4
     c56:	df 07       	cpc	r29, r31
     c58:	21 f4       	brne	.+8      	; 0xc62 <usart_init_rs232+0x266>
     c5a:	60 e4       	ldi	r22, 0x40	; 64
     c5c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     c5e:	f4 d6       	rcall	.+3560   	; 0x1a48 <sysclk_enable_module>
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <usart_init_rs232+0x284>
     c62:	c0 3a       	cpi	r28, 0xA0	; 160
     c64:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     c66:	d8 07       	cpc	r29, r24
     c68:	21 f4       	brne	.+8      	; 0xc72 <usart_init_rs232+0x276>
     c6a:	60 e4       	ldi	r22, 0x40	; 64
     c6c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     c6e:	ec d6       	rcall	.+3544   	; 0x1a48 <sysclk_enable_module>
     c70:	07 c0       	rjmp	.+14     	; 0xc80 <usart_init_rs232+0x284>
     c72:	c0 3b       	cpi	r28, 0xB0	; 176
     c74:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     c76:	de 07       	cpc	r29, r30
     c78:	19 f4       	brne	.+6      	; 0xc80 <usart_init_rs232+0x284>
     c7a:	60 e4       	ldi	r22, 0x40	; 64
     c7c:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     c7e:	e4 d6       	rcall	.+3528   	; 0x1a48 <sysclk_enable_module>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     c84:	8d 83       	std	Y+5, r24	; 0x05
     c86:	f8 01       	movw	r30, r16
     c88:	95 81       	ldd	r25, Z+5	; 0x05
     c8a:	84 81       	ldd	r24, Z+4	; 0x04
     c8c:	89 2b       	or	r24, r25
     c8e:	96 81       	ldd	r25, Z+6	; 0x06
     c90:	91 11       	cpse	r25, r1
     c92:	98 e0       	ldi	r25, 0x08	; 8
     c94:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     c96:	8d 83       	std	Y+5, r24	; 0x05
     c98:	f8 01       	movw	r30, r16
     c9a:	40 81       	ld	r20, Z
     c9c:	51 81       	ldd	r21, Z+1	; 0x01
     c9e:	62 81       	ldd	r22, Z+2	; 0x02
     ca0:	73 81       	ldd	r23, Z+3	; 0x03
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	18 e4       	ldi	r17, 0x48	; 72
     ca6:	28 ee       	ldi	r18, 0xE8	; 232
     ca8:	31 e0       	ldi	r19, 0x01	; 1
     caa:	ce 01       	movw	r24, r28
     cac:	94 dd       	rcall	.-1240   	; 0x7d6 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	98 60       	ori	r25, 0x08	; 8
     cb2:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	90 61       	ori	r25, 0x10	; 16
     cb8:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask, uint8_t pos)
{
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	2b 97       	sbiw	r28, 0x0b	; 11
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	7c 01       	movw	r14, r24
     cdc:	06 2f       	mov	r16, r22
     cde:	14 2f       	mov	r17, r20
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
     ce0:	be 01       	movw	r22, r28
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	45 d5       	rcall	.+2698   	; 0x1772 <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
     ce8:	ae 01       	movw	r20, r28
     cea:	48 5f       	subi	r20, 0xF8	; 248
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	60 2f       	mov	r22, r16
     cf0:	c7 01       	movw	r24, r14
     cf2:	c7 d5       	rcall	.+2958   	; 0x1882 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	9f 78       	andi	r25, 0x8F	; 143
     cfa:	9b 83       	std	Y+3, r25	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     cfc:	81 7e       	andi	r24, 0xE1	; 225
     cfe:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     d00:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	8d 83       	std	Y+5, r24	; 0x05
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
	if (pos >= ADCCH_POS_TEMPSENSE) {
     d06:	10 31       	cpi	r17, 0x10	; 16
     d08:	38 f0       	brcs	.+14     	; 0xd18 <adc_init+0x54>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
     d0a:	18 86       	std	Y+8, r1	; 0x08
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
     d0c:	10 51       	subi	r17, 0x10	; 16
     d0e:	11 0f       	add	r17, r17
     d10:	11 0f       	add	r17, r17
     d12:	11 0f       	add	r17, r17
     d14:	19 87       	std	Y+9, r17	; 0x09
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <adc_init+0x60>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     d1c:	11 0f       	add	r17, r17
     d1e:	11 0f       	add	r17, r17
     d20:	11 0f       	add	r17, r17
     d22:	19 87       	std	Y+9, r17	; 0x09
static inline void adc_set_gain_impedance_mode(struct adc_config *conf,
		enum adc_gainstage_impmode impmode)
{
	switch (impmode) {
	case ADC_GAIN_HIGHIMPEDANCE:
		conf->ctrlb &= ~ADC_IMPMODE_bm;
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	8f 77       	andi	r24, 0x7F	; 127
     d28:	8a 83       	std	Y+2, r24	; 0x02
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	8b 83       	std	Y+3, r24	; 0x03
	
	adc_set_gain_impedance_mode(&adc_conf, ADC_GAIN_HIGHIMPEDANCE);
	adc_enable_internal_input(&adc_conf, ADC_INT_BANDGAP);


	adc_write_configuration(adc, &adc_conf);
     d30:	be 01       	movw	r22, r28
     d32:	6f 5f       	subi	r22, 0xFF	; 255
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	c7 01       	movw	r24, r14
     d38:	b0 d4       	rcall	.+2400   	; 0x169a <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
     d3a:	ae 01       	movw	r20, r28
     d3c:	48 5f       	subi	r20, 0xF8	; 248
     d3e:	5f 4f       	sbci	r21, 0xFF	; 255
     d40:	60 2f       	mov	r22, r16
     d42:	c7 01       	movw	r24, r14
     d44:	51 d5       	rcall	.+2722   	; 0x17e8 <adcch_write_configuration>
	
	
}
     d46:	2b 96       	adiw	r28, 0x0b	; 11
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	08 95       	ret

00000d5a <getADCRead>:

float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	1f 92       	push	r1
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	7c 01       	movw	r14, r24
     d6e:	16 2f       	mov	r17, r22
	adc_enable(adc);
     d70:	73 db       	rcall	.-2330   	; 0x458 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d72:	8f b7       	in	r24, 0x3f	; 63
     d74:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d76:	f8 94       	cli
	return flags;
     d78:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     d7a:	f7 01       	movw	r30, r14
     d7c:	80 81       	ld	r24, Z
     d7e:	21 2f       	mov	r18, r17
     d80:	22 0f       	add	r18, r18
     d82:	22 0f       	add	r18, r18
     d84:	82 2b       	or	r24, r18
     d86:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d88:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     d8a:	f7 01       	movw	r30, r14
     d8c:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     d8e:	81 23       	and	r24, r17
     d90:	18 13       	cpse	r17, r24
     d92:	fb cf       	rjmp	.-10     	; 0xd8a <getADCRead+0x30>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     d94:	16 83       	std	Z+6, r17	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d96:	81 2f       	mov	r24, r17
     d98:	83 70       	andi	r24, 0x03	; 3
     d9a:	21 f4       	brne	.+8      	; 0xda4 <getADCRead+0x4a>
		index += 2;
		ch_mask >>= 2;
     d9c:	16 95       	lsr	r17
     d9e:	16 95       	lsr	r17
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <getADCRead+0x4c>
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     da4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     da6:	10 ff       	sbrs	r17, 0
		index++;
     da8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     daa:	f7 01       	movw	r30, r14
     dac:	b0 96       	adiw	r30, 0x20	; 32
     dae:	98 e0       	ldi	r25, 0x08	; 8
     db0:	89 9f       	mul	r24, r25
     db2:	e0 0d       	add	r30, r0
     db4:	f1 1d       	adc	r31, r1
     db6:	11 24       	eor	r1, r1
	
	
	adc_start_conversion(adc, ch_mask);
	adc_wait_for_interrupt_flag(adc, ch_mask);
	uint32_t adcReading = adc_get_result(adc, ch_mask);
     db8:	04 81       	ldd	r16, Z+4	; 0x04
     dba:	15 81       	ldd	r17, Z+5	; 0x05
	//printf("ADC reading = %u\n", adcReading);
	//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	
	adc_disable(adc);
     dbc:	c7 01       	movw	r24, r14
     dbe:	78 db       	rcall	.-2320   	; 0x4b0 <adc_disable>
	return adcReading;
     dc0:	b8 01       	movw	r22, r16
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 95 19 	call	0x332a	; 0x332a <__floatunsisf>
	
}
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	08 95       	ret

00000dda <thermistor_init>:



void thermistor_init(void)
{
	adc_init(&THERM_ADC,THERM_ADC_CH,THERM_POS);
     dda:	46 e0       	ldi	r20, 0x06	; 6
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	70 df       	rcall	.-288    	; 0xcc4 <adc_init>
	
	printf("Thermistor Initialized.\n");
     de4:	87 e1       	ldi	r24, 0x17	; 23
     de6:	90 e2       	ldi	r25, 0x20	; 32
     de8:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <puts>
     dec:	08 95       	ret

00000dee <getTemperature>:
}


float getTemperature(void)
{
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH);
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	ae df       	rcall	.-164    	; 0xd5a <getADCRead>
	//printf("\n%f\n",resistance);
	float vol = adc_val/4096-0.04;
	float resistance = 1000*(3.3/vol-1);
	float temperature = 1.0/(1.0/(25+273.15) + 1.0/3380.0*log(resistance/10000));
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	59 e3       	ldi	r21, 0x39	; 57
     e06:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__mulsf3>
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	37 ed       	ldi	r19, 0xD7	; 215
     e0e:	43 e2       	ldi	r20, 0x23	; 35
     e10:	5d e3       	ldi	r21, 0x3D	; 61
     e12:	0e 94 c8 18 	call	0x3190	; 0x3190 <__subsf3>
     e16:	9b 01       	movw	r18, r22
     e18:	ac 01       	movw	r20, r24
     e1a:	63 e3       	ldi	r22, 0x33	; 51
     e1c:	73 e3       	ldi	r23, 0x33	; 51
     e1e:	83 e5       	ldi	r24, 0x53	; 83
     e20:	90 e4       	ldi	r25, 0x40	; 64
     e22:	0e 94 2d 19 	call	0x325a	; 0x325a <__divsf3>
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e8       	ldi	r20, 0x80	; 128
     e2c:	5f e3       	ldi	r21, 0x3F	; 63
     e2e:	0e 94 c8 18 	call	0x3190	; 0x3190 <__subsf3>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	4a e7       	ldi	r20, 0x7A	; 122
     e38:	54 e4       	ldi	r21, 0x44	; 68
     e3a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__mulsf3>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e4       	ldi	r19, 0x40	; 64
     e42:	4c e1       	ldi	r20, 0x1C	; 28
     e44:	56 e4       	ldi	r21, 0x46	; 70
     e46:	0e 94 2d 19 	call	0x325a	; 0x325a <__divsf3>
     e4a:	0e 94 28 1a 	call	0x3450	; 0x3450 <log>
	//float temperature = (3380.0*(25+273.15))/(3380.0+(25+273.15)*log(resistance/10000));
	//uint32_t temperature = (adc_val );
	printf("temp: %3.2f\n", (float) temperature-273.15);
     e4e:	23 e6       	ldi	r18, 0x63	; 99
     e50:	3d e1       	ldi	r19, 0x1D	; 29
     e52:	4b e9       	ldi	r20, 0x9B	; 155
     e54:	59 e3       	ldi	r21, 0x39	; 57
     e56:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__mulsf3>
     e5a:	2f e0       	ldi	r18, 0x0F	; 15
     e5c:	3f ec       	ldi	r19, 0xCF	; 207
     e5e:	4b e5       	ldi	r20, 0x5B	; 91
     e60:	5b e3       	ldi	r21, 0x3B	; 59
     e62:	0e 94 c9 18 	call	0x3192	; 0x3192 <__addsf3>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	9f e3       	ldi	r25, 0x3F	; 63
     e72:	0e 94 2d 19 	call	0x325a	; 0x325a <__divsf3>
     e76:	23 e3       	ldi	r18, 0x33	; 51
     e78:	33 e9       	ldi	r19, 0x93	; 147
     e7a:	48 e8       	ldi	r20, 0x88	; 136
     e7c:	53 e4       	ldi	r21, 0x43	; 67
     e7e:	0e 94 c8 18 	call	0x3190	; 0x3190 <__subsf3>
     e82:	06 2f       	mov	r16, r22
     e84:	17 2f       	mov	r17, r23
     e86:	d8 2f       	mov	r29, r24
     e88:	c9 2f       	mov	r28, r25
     e8a:	9f 93       	push	r25
     e8c:	8f 93       	push	r24
     e8e:	7f 93       	push	r23
     e90:	6f 93       	push	r22
     e92:	8f e2       	ldi	r24, 0x2F	; 47
     e94:	90 e2       	ldi	r25, 0x20	; 32
     e96:	9f 93       	push	r25
     e98:	8f 93       	push	r24
     e9a:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <printf>
	//printf("Voltage: %f\n", resistance);

	return (temperature - 273.15);
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
	
     eaa:	60 2f       	mov	r22, r16
     eac:	71 2f       	mov	r23, r17
     eae:	8d 2f       	mov	r24, r29
     eb0:	9c 2f       	mov	r25, r28
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <spi_init_pins>:
	
	spi_master_init(&MS5607_SPI_PORT);
	spi_master_setup_device(&MS5607_SPI_PORT, &spi_device_cong, SPI_MODE_0, 1000000,0);
	spi_enable(&MS5607_SPI_PORT);
	prom_read();
}
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	58 e1       	ldi	r21, 0x18	; 24
     ec0:	60 e1       	ldi	r22, 0x10	; 16
     ec2:	80 e4       	ldi	r24, 0x40	; 64
     ec4:	96 e0       	ldi	r25, 0x06	; 6
     ec6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ioport_configure_port_pin>
     eca:	43 e0       	ldi	r20, 0x03	; 3
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	60 e2       	ldi	r22, 0x20	; 32
     ed0:	80 e4       	ldi	r24, 0x40	; 64
     ed2:	96 e0       	ldi	r25, 0x06	; 6
     ed4:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ioport_configure_port_pin>
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	60 e4       	ldi	r22, 0x40	; 64
     ede:	80 e4       	ldi	r24, 0x40	; 64
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	0e 94 99 17 	call	0x2f32	; 0x2f32 <ioport_configure_port_pin>
     ee6:	43 e0       	ldi	r20, 0x03	; 3
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	60 e8       	ldi	r22, 0x80	; 128
     eec:	80 e4       	ldi	r24, 0x40	; 64
     eee:	96 e0       	ldi	r25, 0x06	; 6
     ef0:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <ioport_configure_port_pin>
     ef4:	08 95       	ret

00000ef6 <getPressure>:

	
}

int32_t getPressure(void)
{
     ef6:	2f 92       	push	r2
     ef8:	3f 92       	push	r3
     efa:	4f 92       	push	r4
     efc:	5f 92       	push	r5
     efe:	6f 92       	push	r6
     f00:	7f 92       	push	r7
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	2e 97       	sbiw	r28, 0x0e	; 14
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62

	struct spi_device  spi_device_cong = {
     f24:	81 e1       	ldi	r24, 0x11	; 17
     f26:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
     f28:	be 01       	movw	r22, r28
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	80 ec       	ldi	r24, 0xC0	; 192
     f30:	98 e0       	ldi	r25, 0x08	; 8
     f32:	28 d5       	rcall	.+2640   	; 0x1984 <spi_select_device>
     f34:	0f 2e       	mov	r0, r31
     f36:	f6 e0       	ldi	r31, 0x06	; 6
     f38:	ef 2e       	mov	r14, r31
     f3a:	f0 e2       	ldi	r31, 0x20	; 32
     f3c:	ff 2e       	mov	r15, r31
     f3e:	f0 2d       	mov	r31, r0
     f40:	03 ef       	ldi	r16, 0xF3	; 243
     f42:	10 e2       	ldi	r17, 0x20	; 32
     f44:	0f 2e       	mov	r0, r31
     f46:	fb ef       	ldi	r31, 0xFB	; 251
     f48:	cf 2e       	mov	r12, r31
     f4a:	f0 e2       	ldi	r31, 0x20	; 32
     f4c:	df 2e       	mov	r13, r31
     f4e:	f0 2d       	mov	r31, r0

	for(uint8_t i = 0; i < sizeof(commands); i++)
	{
		spi_write_packet(&MS5607_SPI_PORT, commands[i], 1);
     f50:	d7 01       	movw	r26, r14
     f52:	6d 91       	ld	r22, X+
     f54:	7d 01       	movw	r14, r26
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	80 ec       	ldi	r24, 0xC0	; 192
     f5e:	98 e0       	ldi	r25, 0x08	; 8
     f60:	ef d4       	rcall	.+2526   	; 0x1940 <spi_write_packet>
		spi_read_packet(&MS5607_SPI_PORT, read_buffer[i], 4);
     f62:	f8 01       	movw	r30, r16
     f64:	61 91       	ld	r22, Z+
     f66:	71 91       	ld	r23, Z+
     f68:	81 91       	ld	r24, Z+
     f6a:	91 91       	ld	r25, Z+
     f6c:	8f 01       	movw	r16, r30
     f6e:	44 e0       	ldi	r20, 0x04	; 4
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	80 ec       	ldi	r24, 0xC0	; 192
     f74:	98 e0       	ldi	r25, 0x08	; 8
     f76:	f3 d4       	rcall	.+2534   	; 0x195e <spi_read_packet>
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);

	for(uint8_t i = 0; i < sizeof(commands); i++)
     f78:	0c 15       	cp	r16, r12
     f7a:	1d 05       	cpc	r17, r13
     f7c:	49 f7       	brne	.-46     	; 0xf50 <getPressure+0x5a>
		
	}
	
	

	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
     f7e:	be 01       	movw	r22, r28
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	80 ec       	ldi	r24, 0xC0	; 192
     f86:	98 e0       	ldi	r25, 0x08	; 8
     f88:	13 d5       	rcall	.+2598   	; 0x19b0 <spi_deselect_device>
	uint32_t pressure_val = (uint32_t)read_buffer[0];
     f8a:	03 ef       	ldi	r16, 0xF3	; 243
     f8c:	10 e2       	ldi	r17, 0x20	; 32
	printf("%f\n", pressure_val);
     f8e:	d8 01       	movw	r26, r16
     f90:	13 96       	adiw	r26, 0x03	; 3
     f92:	8c 91       	ld	r24, X
     f94:	13 97       	sbiw	r26, 0x03	; 3
     f96:	8f 93       	push	r24
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	8c 91       	ld	r24, X
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	8f 93       	push	r24
     fa0:	11 96       	adiw	r26, 0x01	; 1
     fa2:	8c 91       	ld	r24, X
     fa4:	11 97       	sbiw	r26, 0x01	; 1
     fa6:	8f 93       	push	r24
     fa8:	8c 91       	ld	r24, X
     faa:	8f 93       	push	r24
     fac:	8c e3       	ldi	r24, 0x3C	; 60
     fae:	90 e2       	ldi	r25, 0x20	; 32
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <printf>
	
	D1 = read_buffer[0];
     fb8:	f8 01       	movw	r30, r16
     fba:	20 80       	ld	r2, Z
     fbc:	31 80       	ldd	r3, Z+1	; 0x01
     fbe:	42 80       	ldd	r4, Z+2	; 0x02
     fc0:	53 80       	ldd	r5, Z+3	; 0x03
     fc2:	20 92 ef 20 	sts	0x20EF, r2	; 0x8020ef <D1>
     fc6:	30 92 f0 20 	sts	0x20F0, r3	; 0x8020f0 <D1+0x1>
     fca:	40 92 f1 20 	sts	0x20F1, r4	; 0x8020f1 <D1+0x2>
     fce:	50 92 f2 20 	sts	0x20F2, r5	; 0x8020f2 <D1+0x3>
	D2 = read_buffer[1];
     fd2:	44 81       	ldd	r20, Z+4	; 0x04
     fd4:	55 81       	ldd	r21, Z+5	; 0x05
     fd6:	66 81       	ldd	r22, Z+6	; 0x06
     fd8:	77 81       	ldd	r23, Z+7	; 0x07
     fda:	40 93 e7 20 	sts	0x20E7, r20	; 0x8020e7 <D2>
     fde:	50 93 e8 20 	sts	0x20E8, r21	; 0x8020e8 <D2+0x1>
     fe2:	60 93 e9 20 	sts	0x20E9, r22	; 0x8020e9 <D2+0x2>
     fe6:	70 93 ea 20 	sts	0x20EA, r23	; 0x8020ea <D2+0x3>
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
     fea:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <C5>
     fee:	90 91 ec 20 	lds	r25, 0x20EC	; 0x8020ec <C5+0x1>
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	ba 2f       	mov	r27, r26
     ff8:	a9 2f       	mov	r26, r25
     ffa:	98 2f       	mov	r25, r24
     ffc:	88 27       	eor	r24, r24
     ffe:	8a 01       	movw	r16, r20
    1000:	9b 01       	movw	r18, r22
    1002:	08 1b       	sub	r16, r24
    1004:	19 0b       	sbc	r17, r25
    1006:	2a 0b       	sbc	r18, r26
    1008:	3b 0b       	sbc	r19, r27
    100a:	0a 83       	std	Y+2, r16	; 0x02
    100c:	1b 83       	std	Y+3, r17	; 0x03
    100e:	2c 83       	std	Y+4, r18	; 0x04
    1010:	3d 83       	std	Y+5, r19	; 0x05
    1012:	33 0f       	add	r19, r19
    1014:	00 0b       	sbc	r16, r16
    1016:	10 2f       	mov	r17, r16
    1018:	98 01       	movw	r18, r16
    101a:	0e 83       	std	Y+6, r16	; 0x06
    101c:	1f 83       	std	Y+7, r17	; 0x07
    101e:	28 87       	std	Y+8, r18	; 0x08
    1020:	39 87       	std	Y+9, r19	; 0x09

	
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128;
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
    1022:	40 91 e1 20 	lds	r20, 0x20E1	; 0x8020e1 <C3>
    1026:	50 91 e2 20 	lds	r21, 0x20E2	; 0x8020e2 <C3+0x1>
    102a:	aa 80       	ldd	r10, Y+2	; 0x02
    102c:	bb 80       	ldd	r11, Y+3	; 0x03
    102e:	cc 80       	ldd	r12, Y+4	; 0x04
    1030:	dd 80       	ldd	r13, Y+5	; 0x05
    1032:	ee 80       	ldd	r14, Y+6	; 0x06
    1034:	fe 2c       	mov	r15, r14
    1036:	0e 2d       	mov	r16, r14
    1038:	1e 2d       	mov	r17, r14
    103a:	24 2f       	mov	r18, r20
    103c:	35 2f       	mov	r19, r21
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__muldi3>
    104e:	c2 2e       	mov	r12, r18
    1050:	93 2e       	mov	r9, r19
    1052:	84 2e       	mov	r8, r20
    1054:	75 2e       	mov	r7, r21
    1056:	66 2e       	mov	r6, r22
    1058:	7a 87       	std	Y+10, r23	; 0x0a
    105a:	a8 2e       	mov	r10, r24
    105c:	b9 2e       	mov	r11, r25
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__cmpdi2_s8>
    1070:	5c f4       	brge	.+22     	; 0x1088 <getPressure+0x192>
    1072:	af e7       	ldi	r26, 0x7F	; 127
    1074:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__adddi3_s8>
    1078:	c2 2e       	mov	r12, r18
    107a:	93 2e       	mov	r9, r19
    107c:	84 2e       	mov	r8, r20
    107e:	75 2e       	mov	r7, r21
    1080:	66 2e       	mov	r6, r22
    1082:	7a 87       	std	Y+10, r23	; 0x0a
    1084:	a8 2e       	mov	r10, r24
    1086:	b9 2e       	mov	r11, r25
    1088:	2c 2d       	mov	r18, r12
    108a:	39 2d       	mov	r19, r9
    108c:	48 2d       	mov	r20, r8
    108e:	57 2d       	mov	r21, r7
    1090:	66 2d       	mov	r22, r6
    1092:	7a 85       	ldd	r23, Y+10	; 0x0a
    1094:	8a 2d       	mov	r24, r10
    1096:	9b 2d       	mov	r25, r11
    1098:	07 e0       	ldi	r16, 0x07	; 7
    109a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__ashrdi3>
    109e:	62 2e       	mov	r6, r18
    10a0:	73 2e       	mov	r7, r19
    10a2:	84 2e       	mov	r8, r20
    10a4:	95 2e       	mov	r9, r21
    10a6:	b6 2f       	mov	r27, r22
    10a8:	a7 2f       	mov	r26, r23
    10aa:	f8 2f       	mov	r31, r24
    10ac:	e9 2f       	mov	r30, r25
    10ae:	a0 90 df 20 	lds	r10, 0x20DF	; 0x8020df <C1>
    10b2:	b0 90 e0 20 	lds	r11, 0x20E0	; 0x8020e0 <C1+0x1>
    10b6:	2a 2d       	mov	r18, r10
    10b8:	3b 2d       	mov	r19, r11
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	00 e1       	ldi	r16, 0x10	; 16
    10c8:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__ashldi3>
    10cc:	a2 2e       	mov	r10, r18
    10ce:	b3 2e       	mov	r11, r19
    10d0:	c4 2e       	mov	r12, r20
    10d2:	d5 2e       	mov	r13, r21
    10d4:	e6 2e       	mov	r14, r22
    10d6:	f7 2e       	mov	r15, r23
    10d8:	08 2f       	mov	r16, r24
    10da:	19 2f       	mov	r17, r25
    10dc:	26 2d       	mov	r18, r6
    10de:	37 2d       	mov	r19, r7
    10e0:	48 2d       	mov	r20, r8
    10e2:	59 2d       	mov	r21, r9
    10e4:	6b 2f       	mov	r22, r27
    10e6:	7a 2f       	mov	r23, r26
    10e8:	8f 2f       	mov	r24, r31
    10ea:	9e 2f       	mov	r25, r30
    10ec:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__adddi3>
    10f0:	a2 2c       	mov	r10, r2
    10f2:	b3 2c       	mov	r11, r3
    10f4:	c4 2c       	mov	r12, r4
    10f6:	d5 2c       	mov	r13, r5
    10f8:	e1 2c       	mov	r14, r1
    10fa:	f1 2c       	mov	r15, r1
    10fc:	00 e0       	ldi	r16, 0x00	; 0
    10fe:	10 e0       	ldi	r17, 0x00	; 0
    1100:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__muldi3>
    1104:	72 2e       	mov	r7, r18
    1106:	83 2e       	mov	r8, r19
    1108:	94 2e       	mov	r9, r20
    110a:	a5 2e       	mov	r10, r21
    110c:	b6 2e       	mov	r11, r22
    110e:	c7 2e       	mov	r12, r23
    1110:	58 2e       	mov	r5, r24
    1112:	69 2e       	mov	r6, r25
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__cmpdi2_s8>
    111a:	84 f4       	brge	.+32     	; 0x113c <getPressure+0x246>
    111c:	21 50       	subi	r18, 0x01	; 1
    111e:	31 09       	sbc	r19, r1
    1120:	40 4e       	sbci	r20, 0xE0	; 224
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
    1124:	6f 4f       	sbci	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	72 2e       	mov	r7, r18
    112e:	83 2e       	mov	r8, r19
    1130:	94 2e       	mov	r9, r20
    1132:	a5 2e       	mov	r10, r21
    1134:	b6 2e       	mov	r11, r22
    1136:	c7 2e       	mov	r12, r23
    1138:	58 2e       	mov	r5, r24
    113a:	69 2e       	mov	r6, r25
    113c:	27 2d       	mov	r18, r7
    113e:	38 2d       	mov	r19, r8
    1140:	49 2d       	mov	r20, r9
    1142:	5a 2d       	mov	r21, r10
    1144:	6b 2d       	mov	r22, r11
    1146:	7c 2d       	mov	r23, r12
    1148:	85 2d       	mov	r24, r5
    114a:	96 2d       	mov	r25, r6
    114c:	05 e1       	ldi	r16, 0x15	; 21
    114e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__ashrdi3>
    1152:	62 2e       	mov	r6, r18
    1154:	73 2e       	mov	r7, r19
    1156:	84 2e       	mov	r8, r20
    1158:	5a 87       	std	Y+10, r21	; 0x0a
    115a:	6b 87       	std	Y+11, r22	; 0x0b
    115c:	7c 87       	std	Y+12, r23	; 0x0c
    115e:	8d 87       	std	Y+13, r24	; 0x0d
    1160:	9e 87       	std	Y+14, r25	; 0x0e
    1162:	40 91 ed 20 	lds	r20, 0x20ED	; 0x8020ed <C4>
    1166:	50 91 ee 20 	lds	r21, 0x20EE	; 0x8020ee <C4+0x1>
    116a:	aa 80       	ldd	r10, Y+2	; 0x02
    116c:	bb 80       	ldd	r11, Y+3	; 0x03
    116e:	cc 80       	ldd	r12, Y+4	; 0x04
    1170:	dd 80       	ldd	r13, Y+5	; 0x05
    1172:	ee 80       	ldd	r14, Y+6	; 0x06
    1174:	fe 2c       	mov	r15, r14
    1176:	0e 2d       	mov	r16, r14
    1178:	1e 2d       	mov	r17, r14
    117a:	24 2f       	mov	r18, r20
    117c:	35 2f       	mov	r19, r21
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__muldi3>
    118e:	c2 2e       	mov	r12, r18
    1190:	53 2e       	mov	r5, r19
    1192:	44 2e       	mov	r4, r20
    1194:	35 2e       	mov	r3, r21
    1196:	26 2e       	mov	r2, r22
    1198:	97 2e       	mov	r9, r23
    119a:	a8 2e       	mov	r10, r24
    119c:	b9 2e       	mov	r11, r25
    119e:	a0 e0       	ldi	r26, 0x00	; 0
    11a0:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__cmpdi2_s8>
    11a4:	5c f4       	brge	.+22     	; 0x11bc <getPressure+0x2c6>
    11a6:	af e3       	ldi	r26, 0x3F	; 63
    11a8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__adddi3_s8>
    11ac:	c2 2e       	mov	r12, r18
    11ae:	53 2e       	mov	r5, r19
    11b0:	44 2e       	mov	r4, r20
    11b2:	35 2e       	mov	r3, r21
    11b4:	26 2e       	mov	r2, r22
    11b6:	97 2e       	mov	r9, r23
    11b8:	a8 2e       	mov	r10, r24
    11ba:	b9 2e       	mov	r11, r25
    11bc:	2c 2d       	mov	r18, r12
    11be:	35 2d       	mov	r19, r5
    11c0:	44 2d       	mov	r20, r4
    11c2:	53 2d       	mov	r21, r3
    11c4:	62 2d       	mov	r22, r2
    11c6:	79 2d       	mov	r23, r9
    11c8:	8a 2d       	mov	r24, r10
    11ca:	9b 2d       	mov	r25, r11
    11cc:	06 e0       	ldi	r16, 0x06	; 6
    11ce:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__ashrdi3>
    11d2:	22 2e       	mov	r2, r18
    11d4:	33 2e       	mov	r3, r19
    11d6:	44 2e       	mov	r4, r20
    11d8:	55 2e       	mov	r5, r21
    11da:	b6 2f       	mov	r27, r22
    11dc:	a7 2f       	mov	r26, r23
    11de:	f8 2f       	mov	r31, r24
    11e0:	e9 2f       	mov	r30, r25
    11e2:	a0 90 e3 20 	lds	r10, 0x20E3	; 0x8020e3 <C2>
    11e6:	b0 90 e4 20 	lds	r11, 0x20E4	; 0x8020e4 <C2+0x1>
    11ea:	2a 2d       	mov	r18, r10
    11ec:	3b 2d       	mov	r19, r11
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	01 e1       	ldi	r16, 0x11	; 17
    11fc:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__ashldi3>
    1200:	a2 2e       	mov	r10, r18
    1202:	b3 2e       	mov	r11, r19
    1204:	c4 2e       	mov	r12, r20
    1206:	d5 2e       	mov	r13, r21
    1208:	e6 2e       	mov	r14, r22
    120a:	f7 2e       	mov	r15, r23
    120c:	08 2f       	mov	r16, r24
    120e:	19 2f       	mov	r17, r25
    1210:	22 2d       	mov	r18, r2
    1212:	33 2d       	mov	r19, r3
    1214:	44 2d       	mov	r20, r4
    1216:	55 2d       	mov	r21, r5
    1218:	6b 2f       	mov	r22, r27
    121a:	7a 2f       	mov	r23, r26
    121c:	8f 2f       	mov	r24, r31
    121e:	9e 2f       	mov	r25, r30
    1220:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__adddi3>
    1224:	a2 2e       	mov	r10, r18
    1226:	b3 2e       	mov	r11, r19
    1228:	c4 2e       	mov	r12, r20
    122a:	d5 2e       	mov	r13, r21
    122c:	e6 2e       	mov	r14, r22
    122e:	f7 2e       	mov	r15, r23
    1230:	08 2f       	mov	r16, r24
    1232:	19 2f       	mov	r17, r25
    1234:	26 2d       	mov	r18, r6
    1236:	37 2d       	mov	r19, r7
    1238:	48 2d       	mov	r20, r8
    123a:	5a 85       	ldd	r21, Y+10	; 0x0a
    123c:	6b 85       	ldd	r22, Y+11	; 0x0b
    123e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1240:	8d 85       	ldd	r24, Y+13	; 0x0d
    1242:	9e 85       	ldd	r25, Y+14	; 0x0e
    1244:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__subdi3>
    1248:	72 2e       	mov	r7, r18
    124a:	83 2e       	mov	r8, r19
    124c:	94 2e       	mov	r9, r20
    124e:	a5 2e       	mov	r10, r21
    1250:	b6 2e       	mov	r11, r22
    1252:	c7 2e       	mov	r12, r23
    1254:	58 2e       	mov	r5, r24
    1256:	69 2e       	mov	r6, r25
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__cmpdi2_s8>
    125e:	84 f4       	brge	.+32     	; 0x1280 <getPressure+0x38a>
    1260:	21 50       	subi	r18, 0x01	; 1
    1262:	30 48       	sbci	r19, 0x80	; 128
    1264:	4f 4f       	sbci	r20, 0xFF	; 255
    1266:	5f 4f       	sbci	r21, 0xFF	; 255
    1268:	6f 4f       	sbci	r22, 0xFF	; 255
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	72 2e       	mov	r7, r18
    1272:	83 2e       	mov	r8, r19
    1274:	94 2e       	mov	r9, r20
    1276:	a5 2e       	mov	r10, r21
    1278:	b6 2e       	mov	r11, r22
    127a:	c7 2e       	mov	r12, r23
    127c:	58 2e       	mov	r5, r24
    127e:	69 2e       	mov	r6, r25
    1280:	27 2d       	mov	r18, r7
    1282:	38 2d       	mov	r19, r8
    1284:	49 2d       	mov	r20, r9
    1286:	5a 2d       	mov	r21, r10
    1288:	6b 2d       	mov	r22, r11
    128a:	7c 2d       	mov	r23, r12
    128c:	85 2d       	mov	r24, r5
    128e:	96 2d       	mov	r25, r6
    1290:	0f e0       	ldi	r16, 0x0F	; 15
    1292:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__ashrdi3>
    1296:	62 2f       	mov	r22, r18
    1298:	73 2f       	mov	r23, r19
    129a:	84 2f       	mov	r24, r20
    129c:	95 2f       	mov	r25, r21

	
	return P;
    129e:	2e 96       	adiw	r28, 0x0e	; 14
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	9f 90       	pop	r9
    12ba:	8f 90       	pop	r8
    12bc:	7f 90       	pop	r7
    12be:	6f 90       	pop	r6
    12c0:	5f 90       	pop	r5
    12c2:	4f 90       	pop	r4
    12c4:	3f 90       	pop	r3
    12c6:	2f 90       	pop	r2
    12c8:	08 95       	ret

000012ca <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	08 b6       	in	r0, 0x38	; 56
    12d6:	0f 92       	push	r0
    12d8:	18 be       	out	0x38, r1	; 56
    12da:	09 b6       	in	r0, 0x39	; 57
    12dc:	0f 92       	push	r0
    12de:	19 be       	out	0x39, r1	; 57
    12e0:	0b b6       	in	r0, 0x3b	; 59
    12e2:	0f 92       	push	r0
    12e4:	1b be       	out	0x3b, r1	; 59
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    12fe:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    1302:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    1306:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <adca_callback>
    130a:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <adca_callback+0x1>
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	19 95       	eicall
}
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0b be       	out	0x3b, r0	; 59
    1332:	0f 90       	pop	r0
    1334:	09 be       	out	0x39, r0	; 57
    1336:	0f 90       	pop	r0
    1338:	08 be       	out	0x38, r0	; 56
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	08 b6       	in	r0, 0x38	; 56
    1350:	0f 92       	push	r0
    1352:	18 be       	out	0x38, r1	; 56
    1354:	09 b6       	in	r0, 0x39	; 57
    1356:	0f 92       	push	r0
    1358:	19 be       	out	0x39, r1	; 57
    135a:	0b b6       	in	r0, 0x3b	; 59
    135c:	0f 92       	push	r0
    135e:	1b be       	out	0x3b, r1	; 59
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1378:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    137c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1380:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <adca_callback>
    1384:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <adca_callback+0x1>
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	19 95       	eicall
}
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	09 be       	out	0x39, r0	; 57
    13b0:	0f 90       	pop	r0
    13b2:	08 be       	out	0x38, r0	; 56
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    13be:	1f 92       	push	r1
    13c0:	0f 92       	push	r0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	08 b6       	in	r0, 0x38	; 56
    13ca:	0f 92       	push	r0
    13cc:	18 be       	out	0x38, r1	; 56
    13ce:	09 b6       	in	r0, 0x39	; 57
    13d0:	0f 92       	push	r0
    13d2:	19 be       	out	0x39, r1	; 57
    13d4:	0b b6       	in	r0, 0x3b	; 59
    13d6:	0f 92       	push	r0
    13d8:	1b be       	out	0x3b, r1	; 59
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    13f2:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    13f6:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    13fa:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <adca_callback>
    13fe:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <adca_callback+0x1>
    1402:	64 e0       	ldi	r22, 0x04	; 4
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	92 e0       	ldi	r25, 0x02	; 2
    1408:	19 95       	eicall
}
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0b be       	out	0x3b, r0	; 59
    1426:	0f 90       	pop	r0
    1428:	09 be       	out	0x39, r0	; 57
    142a:	0f 90       	pop	r0
    142c:	08 be       	out	0x38, r0	; 56
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	0f 90       	pop	r0
    1434:	1f 90       	pop	r1
    1436:	18 95       	reti

00001438 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1438:	1f 92       	push	r1
    143a:	0f 92       	push	r0
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	0f 92       	push	r0
    1440:	11 24       	eor	r1, r1
    1442:	08 b6       	in	r0, 0x38	; 56
    1444:	0f 92       	push	r0
    1446:	18 be       	out	0x38, r1	; 56
    1448:	09 b6       	in	r0, 0x39	; 57
    144a:	0f 92       	push	r0
    144c:	19 be       	out	0x39, r1	; 57
    144e:	0b b6       	in	r0, 0x3b	; 59
    1450:	0f 92       	push	r0
    1452:	1b be       	out	0x3b, r1	; 59
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    146c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1470:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    1474:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <adca_callback>
    1478:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <adca_callback+0x1>
    147c:	68 e0       	ldi	r22, 0x08	; 8
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	19 95       	eicall
}
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0b be       	out	0x3b, r0	; 59
    14a0:	0f 90       	pop	r0
    14a2:	09 be       	out	0x39, r0	; 57
    14a4:	0f 90       	pop	r0
    14a6:	08 be       	out	0x38, r0	; 56
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	08 b6       	in	r0, 0x38	; 56
    14be:	0f 92       	push	r0
    14c0:	18 be       	out	0x38, r1	; 56
    14c2:	09 b6       	in	r0, 0x39	; 57
    14c4:	0f 92       	push	r0
    14c6:	19 be       	out	0x39, r1	; 57
    14c8:	0b b6       	in	r0, 0x3b	; 59
    14ca:	0f 92       	push	r0
    14cc:	1b be       	out	0x3b, r1	; 59
    14ce:	2f 93       	push	r18
    14d0:	3f 93       	push	r19
    14d2:	4f 93       	push	r20
    14d4:	5f 93       	push	r21
    14d6:	6f 93       	push	r22
    14d8:	7f 93       	push	r23
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	af 93       	push	r26
    14e0:	bf 93       	push	r27
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    14e6:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    14ea:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    14ee:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adcb_callback>
    14f2:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adcb_callback+0x1>
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	80 e4       	ldi	r24, 0x40	; 64
    14fa:	92 e0       	ldi	r25, 0x02	; 2
    14fc:	19 95       	eicall
}
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0b be       	out	0x3b, r0	; 59
    151a:	0f 90       	pop	r0
    151c:	09 be       	out	0x39, r0	; 57
    151e:	0f 90       	pop	r0
    1520:	08 be       	out	0x38, r0	; 56
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	08 b6       	in	r0, 0x38	; 56
    1538:	0f 92       	push	r0
    153a:	18 be       	out	0x38, r1	; 56
    153c:	09 b6       	in	r0, 0x39	; 57
    153e:	0f 92       	push	r0
    1540:	19 be       	out	0x39, r1	; 57
    1542:	0b b6       	in	r0, 0x3b	; 59
    1544:	0f 92       	push	r0
    1546:	1b be       	out	0x3b, r1	; 59
    1548:	2f 93       	push	r18
    154a:	3f 93       	push	r19
    154c:	4f 93       	push	r20
    154e:	5f 93       	push	r21
    1550:	6f 93       	push	r22
    1552:	7f 93       	push	r23
    1554:	8f 93       	push	r24
    1556:	9f 93       	push	r25
    1558:	af 93       	push	r26
    155a:	bf 93       	push	r27
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1560:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    1564:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1568:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adcb_callback>
    156c:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adcb_callback+0x1>
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	80 e4       	ldi	r24, 0x40	; 64
    1574:	92 e0       	ldi	r25, 0x02	; 2
    1576:	19 95       	eicall
}
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0b be       	out	0x3b, r0	; 59
    1594:	0f 90       	pop	r0
    1596:	09 be       	out	0x39, r0	; 57
    1598:	0f 90       	pop	r0
    159a:	08 be       	out	0x38, r0	; 56
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	08 b6       	in	r0, 0x38	; 56
    15b2:	0f 92       	push	r0
    15b4:	18 be       	out	0x38, r1	; 56
    15b6:	09 b6       	in	r0, 0x39	; 57
    15b8:	0f 92       	push	r0
    15ba:	19 be       	out	0x39, r1	; 57
    15bc:	0b b6       	in	r0, 0x3b	; 59
    15be:	0f 92       	push	r0
    15c0:	1b be       	out	0x3b, r1	; 59
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    15da:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    15de:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    15e2:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adcb_callback>
    15e6:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adcb_callback+0x1>
    15ea:	64 e0       	ldi	r22, 0x04	; 4
    15ec:	80 e4       	ldi	r24, 0x40	; 64
    15ee:	92 e0       	ldi	r25, 0x02	; 2
    15f0:	19 95       	eicall
}
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	9f 91       	pop	r25
    15fc:	8f 91       	pop	r24
    15fe:	7f 91       	pop	r23
    1600:	6f 91       	pop	r22
    1602:	5f 91       	pop	r21
    1604:	4f 91       	pop	r20
    1606:	3f 91       	pop	r19
    1608:	2f 91       	pop	r18
    160a:	0f 90       	pop	r0
    160c:	0b be       	out	0x3b, r0	; 59
    160e:	0f 90       	pop	r0
    1610:	09 be       	out	0x39, r0	; 57
    1612:	0f 90       	pop	r0
    1614:	08 be       	out	0x38, r0	; 56
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0
    161c:	1f 90       	pop	r1
    161e:	18 95       	reti

00001620 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	08 b6       	in	r0, 0x38	; 56
    162c:	0f 92       	push	r0
    162e:	18 be       	out	0x38, r1	; 56
    1630:	09 b6       	in	r0, 0x39	; 57
    1632:	0f 92       	push	r0
    1634:	19 be       	out	0x39, r1	; 57
    1636:	0b b6       	in	r0, 0x3b	; 59
    1638:	0f 92       	push	r0
    163a:	1b be       	out	0x3b, r1	; 59
    163c:	2f 93       	push	r18
    163e:	3f 93       	push	r19
    1640:	4f 93       	push	r20
    1642:	5f 93       	push	r21
    1644:	6f 93       	push	r22
    1646:	7f 93       	push	r23
    1648:	8f 93       	push	r24
    164a:	9f 93       	push	r25
    164c:	af 93       	push	r26
    164e:	bf 93       	push	r27
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1654:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1658:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    165c:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <adcb_callback>
    1660:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <adcb_callback+0x1>
    1664:	68 e0       	ldi	r22, 0x08	; 8
    1666:	80 e4       	ldi	r24, 0x40	; 64
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	19 95       	eicall
}
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	7f 91       	pop	r23
    167a:	6f 91       	pop	r22
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0b be       	out	0x3b, r0	; 59
    1688:	0f 90       	pop	r0
    168a:	09 be       	out	0x39, r0	; 57
    168c:	0f 90       	pop	r0
    168e:	08 be       	out	0x38, r0	; 56
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	1f 92       	push	r1
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	8c 01       	movw	r16, r24
    16b4:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    16b6:	81 15       	cp	r24, r1
    16b8:	22 e0       	ldi	r18, 0x02	; 2
    16ba:	92 07       	cpc	r25, r18
    16bc:	81 f4       	brne	.+32     	; 0x16de <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    16be:	61 e2       	ldi	r22, 0x21	; 33
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	0e 94 89 17 	call	0x2f12	; 0x2f12 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    16c8:	c8 2e       	mov	r12, r24
    16ca:	d1 2c       	mov	r13, r1
    16cc:	60 e2       	ldi	r22, 0x20	; 32
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	0e 94 89 17 	call	0x2f12	; 0x2f12 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    16d6:	dc 2c       	mov	r13, r12
    16d8:	cc 24       	eor	r12, r12
    16da:	c8 2a       	or	r12, r24
    16dc:	12 c0       	rjmp	.+36     	; 0x1702 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    16de:	80 34       	cpi	r24, 0x40	; 64
    16e0:	92 40       	sbci	r25, 0x02	; 2
    16e2:	e1 f5       	brne	.+120    	; 0x175c <adc_write_configuration+0xc2>
    16e4:	65 e2       	ldi	r22, 0x25	; 37
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	0e 94 89 17 	call	0x2f12	; 0x2f12 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    16ee:	c8 2e       	mov	r12, r24
    16f0:	d1 2c       	mov	r13, r1
    16f2:	64 e2       	ldi	r22, 0x24	; 36
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    16fc:	dc 2c       	mov	r13, r12
    16fe:	cc 24       	eor	r12, r12
    1700:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1702:	8f b7       	in	r24, 0x3f	; 63
    1704:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1706:	f8 94       	cli
	return flags;
    1708:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    170a:	c8 01       	movw	r24, r16
    170c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1710:	f8 01       	movw	r30, r16
    1712:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	90 83       	st	Z, r25
	adc->CAL = cal;
    1718:	c4 86       	std	Z+12, r12	; 0x0c
    171a:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    171c:	f7 01       	movw	r30, r14
    171e:	25 81       	ldd	r18, Z+5	; 0x05
    1720:	36 81       	ldd	r19, Z+6	; 0x06
    1722:	f8 01       	movw	r30, r16
    1724:	20 8f       	std	Z+24, r18	; 0x18
    1726:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1728:	f7 01       	movw	r30, r14
    172a:	92 81       	ldd	r25, Z+2	; 0x02
    172c:	f8 01       	movw	r30, r16
    172e:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1730:	f7 01       	movw	r30, r14
    1732:	94 81       	ldd	r25, Z+4	; 0x04
    1734:	f8 01       	movw	r30, r16
    1736:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1738:	f7 01       	movw	r30, r14
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	f8 01       	movw	r30, r16
    173e:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1740:	f7 01       	movw	r30, r14
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	f8 01       	movw	r30, r16
    1746:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	f7 01       	movw	r30, r14
    174c:	90 81       	ld	r25, Z
    174e:	89 2b       	or	r24, r25
    1750:	f8 01       	movw	r30, r16
    1752:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    1754:	c8 01       	movw	r24, r16
    1756:	0e 94 0d 02 	call	0x41a	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    175a:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    175c:	0f 90       	pop	r0
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	08 95       	ret

00001772 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	1f 92       	push	r1
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	8c 01       	movw	r16, r24
    1788:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    178a:	8f b7       	in	r24, 0x3f	; 63
    178c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    178e:	f8 94       	cli
	return flags;
    1790:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1792:	c8 01       	movw	r24, r16
    1794:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1798:	f8 01       	movw	r30, r16
    179a:	80 81       	ld	r24, Z
    179c:	80 7c       	andi	r24, 0xC0	; 192
    179e:	f7 01       	movw	r30, r14
    17a0:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    17a2:	f8 01       	movw	r30, r16
    17a4:	80 8d       	ldd	r24, Z+24	; 0x18
    17a6:	91 8d       	ldd	r25, Z+25	; 0x19
    17a8:	f7 01       	movw	r30, r14
    17aa:	85 83       	std	Z+5, r24	; 0x05
    17ac:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    17ae:	f8 01       	movw	r30, r16
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	f7 01       	movw	r30, r14
    17b4:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    17b6:	f8 01       	movw	r30, r16
    17b8:	84 81       	ldd	r24, Z+4	; 0x04
    17ba:	f7 01       	movw	r30, r14
    17bc:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    17be:	f8 01       	movw	r30, r16
    17c0:	83 81       	ldd	r24, Z+3	; 0x03
    17c2:	f7 01       	movw	r30, r14
    17c4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    17c6:	f8 01       	movw	r30, r16
    17c8:	81 81       	ldd	r24, Z+1	; 0x01
    17ca:	f7 01       	movw	r30, r14
    17cc:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    17ce:	c8 01       	movw	r24, r16
    17d0:	0e 94 0d 02 	call	0x41a	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17d4:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    17d6:	0f 90       	pop	r0
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	08 95       	ret

000017e8 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	1f 92       	push	r1
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	6c 01       	movw	r12, r24
    1804:	b6 2e       	mov	r11, r22
    1806:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1808:	86 2f       	mov	r24, r22
    180a:	83 70       	andi	r24, 0x03	; 3
    180c:	29 f4       	brne	.+10     	; 0x1818 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    180e:	96 2f       	mov	r25, r22
    1810:	96 95       	lsr	r25
    1812:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	02 c0       	rjmp	.+4      	; 0x181c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1818:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    181a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    181c:	90 ff       	sbrs	r25, 0
		index++;
    181e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1820:	86 01       	movw	r16, r12
    1822:	00 5e       	subi	r16, 0xE0	; 224
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	98 e0       	ldi	r25, 0x08	; 8
    1828:	89 9f       	mul	r24, r25
    182a:	00 0d       	add	r16, r0
    182c:	11 1d       	adc	r17, r1
    182e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1830:	8f b7       	in	r24, 0x3f	; 63
    1832:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1834:	f8 94       	cli
	return flags;
    1836:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1838:	c6 01       	movw	r24, r12
    183a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    183e:	f7 01       	movw	r30, r14
    1840:	80 81       	ld	r24, Z
    1842:	f8 01       	movw	r30, r16
    1844:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1846:	f7 01       	movw	r30, r14
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	f8 01       	movw	r30, r16
    184c:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    184e:	f7 01       	movw	r30, r14
    1850:	81 81       	ldd	r24, Z+1	; 0x01
    1852:	f8 01       	movw	r30, r16
    1854:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1856:	b0 fe       	sbrs	r11, 0
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <adcch_write_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    185a:	f7 01       	movw	r30, r14
    185c:	83 81       	ldd	r24, Z+3	; 0x03
    185e:	f8 01       	movw	r30, r16
    1860:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1862:	c6 01       	movw	r24, r12
    1864:	0e 94 0d 02 	call	0x41a	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1868:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	bf 90       	pop	r11
    187e:	af 90       	pop	r10
    1880:	08 95       	ret

00001882 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1882:	af 92       	push	r10
    1884:	bf 92       	push	r11
    1886:	cf 92       	push	r12
    1888:	df 92       	push	r13
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	1f 92       	push	r1
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	6c 01       	movw	r12, r24
    189e:	b6 2e       	mov	r11, r22
    18a0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    18a2:	86 2f       	mov	r24, r22
    18a4:	83 70       	andi	r24, 0x03	; 3
    18a6:	29 f4       	brne	.+10     	; 0x18b2 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    18a8:	96 2f       	mov	r25, r22
    18aa:	96 95       	lsr	r25
    18ac:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    18b2:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    18b4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    18b6:	90 ff       	sbrs	r25, 0
		index++;
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    18ba:	86 01       	movw	r16, r12
    18bc:	00 5e       	subi	r16, 0xE0	; 224
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	98 e0       	ldi	r25, 0x08	; 8
    18c2:	89 9f       	mul	r24, r25
    18c4:	00 0d       	add	r16, r0
    18c6:	11 1d       	adc	r17, r1
    18c8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18ca:	8f b7       	in	r24, 0x3f	; 63
    18cc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    18ce:	f8 94       	cli
	return flags;
    18d0:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    18d2:	c6 01       	movw	r24, r12
    18d4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    18d8:	f8 01       	movw	r30, r16
    18da:	80 81       	ld	r24, Z
    18dc:	f7 01       	movw	r30, r14
    18de:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    18e0:	f8 01       	movw	r30, r16
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	f7 01       	movw	r30, r14
    18e6:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    18e8:	f8 01       	movw	r30, r16
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	f7 01       	movw	r30, r14
    18ee:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    18f0:	b0 fe       	sbrs	r11, 0
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <adcch_read_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    18f4:	f8 01       	movw	r30, r16
    18f6:	86 81       	ldd	r24, Z+6	; 0x06
    18f8:	f7 01       	movw	r30, r14
    18fa:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    18fc:	c6 01       	movw	r24, r12
    18fe:	0e 94 0d 02 	call	0x41a	; 0x41a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1902:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1904:	0f 90       	pop	r0
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	df 90       	pop	r13
    1914:	cf 90       	pop	r12
    1916:	bf 90       	pop	r11
    1918:	af 90       	pop	r10
    191a:	08 95       	ret

0000191c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    191c:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    191e:	80 91 fd 20 	lds	r24, 0x20FD	; 0x8020fd <stdio_base>
    1922:	90 91 fe 20 	lds	r25, 0x20FE	; 0x8020fe <stdio_base+0x1>
    1926:	e0 91 fb 20 	lds	r30, 0x20FB	; 0x8020fb <ptr_put>
    192a:	f0 91 fc 20 	lds	r31, 0x20FC	; 0x8020fc <ptr_put+0x1>
    192e:	19 95       	eicall
    1930:	99 23       	and	r25, r25
    1932:	1c f0       	brlt	.+6      	; 0x193a <_write+0x1e>
		return -1;
	}
	return 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    193e:	08 95       	ret

00001940 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
    1940:	fc 01       	movw	r30, r24
    1942:	db 01       	movw	r26, r22
    1944:	46 0f       	add	r20, r22
    1946:	57 1f       	adc	r21, r23
	while (len--) {
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
    194a:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    194c:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    194e:	92 81       	ldd	r25, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
    1950:	99 23       	and	r25, r25
    1952:	ec f7       	brge	.-6      	; 0x194e <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
    1954:	a4 17       	cp	r26, r20
    1956:	b5 07       	cpc	r27, r21
    1958:	c1 f7       	brne	.-16     	; 0x194a <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	08 95       	ret

0000195e <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
    195e:	fc 01       	movw	r30, r24
    1960:	db 01       	movw	r26, r22
	while (len--) {
    1962:	41 15       	cp	r20, r1
    1964:	51 05       	cpc	r21, r1
    1966:	61 f0       	breq	.+24     	; 0x1980 <spi_read_packet+0x22>
    1968:	46 0f       	add	r20, r22
    196a:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    196c:	2f ef       	ldi	r18, 0xFF	; 255
    196e:	23 83       	std	Z+3, r18	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    1970:	92 81       	ldd	r25, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
    1972:	99 23       	and	r25, r25
    1974:	ec f7       	brge	.-6      	; 0x1970 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
    1976:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
    1978:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
    197a:	4a 17       	cp	r20, r26
    197c:	5b 07       	cpc	r21, r27
    197e:	b9 f7       	brne	.-18     	; 0x196e <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	08 95       	ret

00001984 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    1984:	fb 01       	movw	r30, r22
    1986:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1988:	e8 2f       	mov	r30, r24
    198a:	e6 95       	lsr	r30
    198c:	e6 95       	lsr	r30
    198e:	e6 95       	lsr	r30
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	e4 9f       	mul	r30, r20
    1994:	f0 01       	movw	r30, r0
    1996:	11 24       	eor	r1, r1
    1998:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    199a:	87 70       	andi	r24, 0x07	; 7
    199c:	21 e0       	ldi	r18, 0x01	; 1
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	a9 01       	movw	r20, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <spi_select_device+0x24>
    19a4:	44 0f       	add	r20, r20
    19a6:	55 1f       	adc	r21, r21
    19a8:	8a 95       	dec	r24
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    19ac:	46 83       	std	Z+6, r20	; 0x06
    19ae:	08 95       	ret

000019b0 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    19b0:	fb 01       	movw	r30, r22
    19b2:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    19b4:	e8 2f       	mov	r30, r24
    19b6:	e6 95       	lsr	r30
    19b8:	e6 95       	lsr	r30
    19ba:	e6 95       	lsr	r30
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	e4 9f       	mul	r30, r20
    19c0:	f0 01       	movw	r30, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    19c6:	87 70       	andi	r24, 0x07	; 7
    19c8:	21 e0       	ldi	r18, 0x01	; 1
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <spi_deselect_device+0x24>
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    19d8:	45 83       	std	Z+5, r20	; 0x05
    19da:	08 95       	ret

000019dc <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	1f 92       	push	r1
    19e2:	1f 92       	push	r1
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    19ee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    19f2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    19f6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    19fa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    19fe:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1a02:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a06:	8f b7       	in	r24, 0x3f	; 63
    1a08:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1a0a:	f8 94       	cli
	return flags;
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1a0e:	e0 e5       	ldi	r30, 0x50	; 80
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	82 60       	ori	r24, 0x02	; 2
    1a16:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a18:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1a1a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1a1c:	81 ff       	sbrs	r24, 1
    1a1e:	fd cf       	rjmp	.-6      	; 0x1a1a <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	80 e4       	ldi	r24, 0x40	; 64
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 93 17 	call	0x2f26	; 0x2f26 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a2a:	8f b7       	in	r24, 0x3f	; 63
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1a2e:	f8 94       	cli
	return flags;
    1a30:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1a32:	e0 e5       	ldi	r30, 0x50	; 80
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	8e 7f       	andi	r24, 0xFE	; 254
    1a3a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a3c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	1f 92       	push	r1
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a52:	9f b7       	in	r25, 0x3f	; 63
    1a54:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1a56:	f8 94       	cli
	return flags;
    1a58:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1a5a:	e8 2f       	mov	r30, r24
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	e0 59       	subi	r30, 0x90	; 144
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 95       	com	r22
    1a64:	80 81       	ld	r24, Z
    1a66:	68 23       	and	r22, r24
    1a68:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a6a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1a6c:	0f 90       	pop	r0
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	1f 92       	push	r1
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a7e:	9f b7       	in	r25, 0x3f	; 63
    1a80:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1a82:	f8 94       	cli
	return flags;
    1a84:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1a86:	e8 2f       	mov	r30, r24
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	e0 59       	subi	r30, 0x90	; 144
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	68 2b       	or	r22, r24
    1a92:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a94:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1a96:	0f 90       	pop	r0
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	0f 92       	push	r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	08 b6       	in	r0, 0x38	; 56
    1aaa:	0f 92       	push	r0
    1aac:	18 be       	out	0x38, r1	; 56
    1aae:	0b b6       	in	r0, 0x3b	; 59
    1ab0:	0f 92       	push	r0
    1ab2:	1b be       	out	0x3b, r1	; 59
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	ef 93       	push	r30
    1aba:	ff 93       	push	r31
	rtc_data.counter_high++;
    1abc:	e5 e0       	ldi	r30, 0x05	; 5
    1abe:	f1 e2       	ldi	r31, 0x21	; 33
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	80 83       	st	Z, r24
    1ac8:	91 83       	std	Z+1, r25	; 0x01
}
    1aca:	ff 91       	pop	r31
    1acc:	ef 91       	pop	r30
    1ace:	9f 91       	pop	r25
    1ad0:	8f 91       	pop	r24
    1ad2:	0f 90       	pop	r0
    1ad4:	0b be       	out	0x3b, r0	; 59
    1ad6:	0f 90       	pop	r0
    1ad8:	08 be       	out	0x38, r0	; 56
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	0f 90       	pop	r0
    1ae0:	1f 90       	pop	r1
    1ae2:	18 95       	reti

00001ae4 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	08 b6       	in	r0, 0x38	; 56
    1af0:	0f 92       	push	r0
    1af2:	18 be       	out	0x38, r1	; 56
    1af4:	09 b6       	in	r0, 0x39	; 57
    1af6:	0f 92       	push	r0
    1af8:	19 be       	out	0x39, r1	; 57
    1afa:	0b b6       	in	r0, 0x3b	; 59
    1afc:	0f 92       	push	r0
    1afe:	1b be       	out	0x3b, r1	; 59
    1b00:	cf 92       	push	r12
    1b02:	df 92       	push	r13
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	2f 93       	push	r18
    1b0e:	3f 93       	push	r19
    1b10:	4f 93       	push	r20
    1b12:	5f 93       	push	r21
    1b14:	6f 93       	push	r22
    1b16:	7f 93       	push	r23
    1b18:	8f 93       	push	r24
    1b1a:	9f 93       	push	r25
    1b1c:	af 93       	push	r26
    1b1e:	bf 93       	push	r27
    1b20:	ef 93       	push	r30
    1b22:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    1b24:	e5 e0       	ldi	r30, 0x05	; 5
    1b26:	f1 e2       	ldi	r31, 0x21	; 33
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	22 81       	ldd	r18, Z+2	; 0x02
    1b2e:	33 81       	ldd	r19, Z+3	; 0x03
    1b30:	82 17       	cp	r24, r18
    1b32:	93 07       	cpc	r25, r19
    1b34:	f0 f1       	brcs	.+124    	; 0x1bb2 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    1b36:	21 e0       	ldi	r18, 0x01	; 1
    1b38:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
    1b3c:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <rtc_data+0x6>
    1b40:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <rtc_data+0x7>
    1b44:	30 97       	sbiw	r30, 0x00	; 0
    1b46:	a9 f1       	breq	.+106    	; 0x1bb2 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    1b48:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1b4c:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	dc 01       	movw	r26, r24
    1b56:	99 27       	eor	r25, r25
    1b58:	88 27       	eor	r24, r24
    1b5a:	ab 01       	movw	r20, r22
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	8c 01       	movw	r16, r24
    1b62:	9d 01       	movw	r18, r26
    1b64:	04 2b       	or	r16, r20
    1b66:	15 2b       	or	r17, r21
    1b68:	26 2b       	or	r18, r22
    1b6a:	37 2b       	or	r19, r23
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    1b70:	a5 e0       	ldi	r26, 0x05	; 5
    1b72:	b1 e2       	ldi	r27, 0x21	; 33
    1b74:	12 96       	adiw	r26, 0x02	; 2
    1b76:	0d 91       	ld	r16, X+
    1b78:	1c 91       	ld	r17, X
    1b7a:	13 97       	sbiw	r26, 0x03	; 3
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	98 01       	movw	r18, r16
    1b82:	11 27       	eor	r17, r17
    1b84:	00 27       	eor	r16, r16
    1b86:	14 96       	adiw	r26, 0x04	; 4
    1b88:	cd 90       	ld	r12, X+
    1b8a:	dc 90       	ld	r13, X
    1b8c:	15 97       	sbiw	r26, 0x05	; 5
    1b8e:	e1 2c       	mov	r14, r1
    1b90:	f1 2c       	mov	r15, r1
    1b92:	0c 29       	or	r16, r12
    1b94:	1d 29       	or	r17, r13
    1b96:	2e 29       	or	r18, r14
    1b98:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    1b9a:	06 17       	cp	r16, r22
    1b9c:	17 07       	cpc	r17, r23
    1b9e:	28 07       	cpc	r18, r24
    1ba0:	39 07       	cpc	r19, r25
    1ba2:	30 f0       	brcs	.+12     	; 0x1bb0 <__vector_11+0xcc>
				count = alarm + 1;
    1ba4:	c9 01       	movw	r24, r18
    1ba6:	b8 01       	movw	r22, r16
    1ba8:	6f 5f       	subi	r22, 0xFF	; 255
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	8f 4f       	sbci	r24, 0xFF	; 255
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    1bb0:	19 95       	eicall
		}
	}
}
    1bb2:	ff 91       	pop	r31
    1bb4:	ef 91       	pop	r30
    1bb6:	bf 91       	pop	r27
    1bb8:	af 91       	pop	r26
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	7f 91       	pop	r23
    1bc0:	6f 91       	pop	r22
    1bc2:	5f 91       	pop	r21
    1bc4:	4f 91       	pop	r20
    1bc6:	3f 91       	pop	r19
    1bc8:	2f 91       	pop	r18
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	0f 90       	pop	r0
    1bd8:	0b be       	out	0x3b, r0	; 59
    1bda:	0f 90       	pop	r0
    1bdc:	09 be       	out	0x39, r0	; 57
    1bde:	0f 90       	pop	r0
    1be0:	08 be       	out	0x38, r0	; 56
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	08 b6       	in	r0, 0x38	; 56
    1bf8:	0f 92       	push	r0
    1bfa:	18 be       	out	0x38, r1	; 56
    1bfc:	09 b6       	in	r0, 0x39	; 57
    1bfe:	0f 92       	push	r0
    1c00:	19 be       	out	0x39, r1	; 57
    1c02:	0b b6       	in	r0, 0x3b	; 59
    1c04:	0f 92       	push	r0
    1c06:	1b be       	out	0x3b, r1	; 59
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <tc_tcc0_ovf_callback>
    1c24:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <tc_tcc0_ovf_callback+0x1>
    1c28:	30 97       	sbiw	r30, 0x00	; 0
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <__vector_14+0x42>
    1c2c:	19 95       	eicall
    1c2e:	ff 91       	pop	r31
    1c30:	ef 91       	pop	r30
    1c32:	bf 91       	pop	r27
    1c34:	af 91       	pop	r26
    1c36:	9f 91       	pop	r25
    1c38:	8f 91       	pop	r24
    1c3a:	7f 91       	pop	r23
    1c3c:	6f 91       	pop	r22
    1c3e:	5f 91       	pop	r21
    1c40:	4f 91       	pop	r20
    1c42:	3f 91       	pop	r19
    1c44:	2f 91       	pop	r18
    1c46:	0f 90       	pop	r0
    1c48:	0b be       	out	0x3b, r0	; 59
    1c4a:	0f 90       	pop	r0
    1c4c:	09 be       	out	0x39, r0	; 57
    1c4e:	0f 90       	pop	r0
    1c50:	08 be       	out	0x38, r0	; 56
    1c52:	0f 90       	pop	r0
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	0f 90       	pop	r0
    1c58:	1f 90       	pop	r1
    1c5a:	18 95       	reti

00001c5c <__vector_15>:
    1c5c:	1f 92       	push	r1
    1c5e:	0f 92       	push	r0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	08 b6       	in	r0, 0x38	; 56
    1c68:	0f 92       	push	r0
    1c6a:	18 be       	out	0x38, r1	; 56
    1c6c:	09 b6       	in	r0, 0x39	; 57
    1c6e:	0f 92       	push	r0
    1c70:	19 be       	out	0x39, r1	; 57
    1c72:	0b b6       	in	r0, 0x3b	; 59
    1c74:	0f 92       	push	r0
    1c76:	1b be       	out	0x3b, r1	; 59
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
    1c90:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <tc_tcc0_err_callback>
    1c94:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <tc_tcc0_err_callback+0x1>
    1c98:	30 97       	sbiw	r30, 0x00	; 0
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <__vector_15+0x42>
    1c9c:	19 95       	eicall
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0b be       	out	0x3b, r0	; 59
    1cba:	0f 90       	pop	r0
    1cbc:	09 be       	out	0x39, r0	; 57
    1cbe:	0f 90       	pop	r0
    1cc0:	08 be       	out	0x38, r0	; 56
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	0f 90       	pop	r0
    1cc8:	1f 90       	pop	r1
    1cca:	18 95       	reti

00001ccc <__vector_16>:
    1ccc:	1f 92       	push	r1
    1cce:	0f 92       	push	r0
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	0f 92       	push	r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	08 b6       	in	r0, 0x38	; 56
    1cd8:	0f 92       	push	r0
    1cda:	18 be       	out	0x38, r1	; 56
    1cdc:	09 b6       	in	r0, 0x39	; 57
    1cde:	0f 92       	push	r0
    1ce0:	19 be       	out	0x39, r1	; 57
    1ce2:	0b b6       	in	r0, 0x3b	; 59
    1ce4:	0f 92       	push	r0
    1ce6:	1b be       	out	0x3b, r1	; 59
    1ce8:	2f 93       	push	r18
    1cea:	3f 93       	push	r19
    1cec:	4f 93       	push	r20
    1cee:	5f 93       	push	r21
    1cf0:	6f 93       	push	r22
    1cf2:	7f 93       	push	r23
    1cf4:	8f 93       	push	r24
    1cf6:	9f 93       	push	r25
    1cf8:	af 93       	push	r26
    1cfa:	bf 93       	push	r27
    1cfc:	ef 93       	push	r30
    1cfe:	ff 93       	push	r31
    1d00:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <tc_tcc0_cca_callback>
    1d04:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <tc_tcc0_cca_callback+0x1>
    1d08:	30 97       	sbiw	r30, 0x00	; 0
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <__vector_16+0x42>
    1d0c:	19 95       	eicall
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	0b be       	out	0x3b, r0	; 59
    1d2a:	0f 90       	pop	r0
    1d2c:	09 be       	out	0x39, r0	; 57
    1d2e:	0f 90       	pop	r0
    1d30:	08 be       	out	0x38, r0	; 56
    1d32:	0f 90       	pop	r0
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	0f 90       	pop	r0
    1d38:	1f 90       	pop	r1
    1d3a:	18 95       	reti

00001d3c <__vector_17>:
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	0f 92       	push	r0
    1d44:	11 24       	eor	r1, r1
    1d46:	08 b6       	in	r0, 0x38	; 56
    1d48:	0f 92       	push	r0
    1d4a:	18 be       	out	0x38, r1	; 56
    1d4c:	09 b6       	in	r0, 0x39	; 57
    1d4e:	0f 92       	push	r0
    1d50:	19 be       	out	0x39, r1	; 57
    1d52:	0b b6       	in	r0, 0x3b	; 59
    1d54:	0f 92       	push	r0
    1d56:	1b be       	out	0x3b, r1	; 59
    1d58:	2f 93       	push	r18
    1d5a:	3f 93       	push	r19
    1d5c:	4f 93       	push	r20
    1d5e:	5f 93       	push	r21
    1d60:	6f 93       	push	r22
    1d62:	7f 93       	push	r23
    1d64:	8f 93       	push	r24
    1d66:	9f 93       	push	r25
    1d68:	af 93       	push	r26
    1d6a:	bf 93       	push	r27
    1d6c:	ef 93       	push	r30
    1d6e:	ff 93       	push	r31
    1d70:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <tc_tcc0_ccb_callback>
    1d74:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <tc_tcc0_ccb_callback+0x1>
    1d78:	30 97       	sbiw	r30, 0x00	; 0
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <__vector_17+0x42>
    1d7c:	19 95       	eicall
    1d7e:	ff 91       	pop	r31
    1d80:	ef 91       	pop	r30
    1d82:	bf 91       	pop	r27
    1d84:	af 91       	pop	r26
    1d86:	9f 91       	pop	r25
    1d88:	8f 91       	pop	r24
    1d8a:	7f 91       	pop	r23
    1d8c:	6f 91       	pop	r22
    1d8e:	5f 91       	pop	r21
    1d90:	4f 91       	pop	r20
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0b be       	out	0x3b, r0	; 59
    1d9a:	0f 90       	pop	r0
    1d9c:	09 be       	out	0x39, r0	; 57
    1d9e:	0f 90       	pop	r0
    1da0:	08 be       	out	0x38, r0	; 56
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <__vector_18>:
    1dac:	1f 92       	push	r1
    1dae:	0f 92       	push	r0
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	0f 92       	push	r0
    1db4:	11 24       	eor	r1, r1
    1db6:	08 b6       	in	r0, 0x38	; 56
    1db8:	0f 92       	push	r0
    1dba:	18 be       	out	0x38, r1	; 56
    1dbc:	09 b6       	in	r0, 0x39	; 57
    1dbe:	0f 92       	push	r0
    1dc0:	19 be       	out	0x39, r1	; 57
    1dc2:	0b b6       	in	r0, 0x3b	; 59
    1dc4:	0f 92       	push	r0
    1dc6:	1b be       	out	0x3b, r1	; 59
    1dc8:	2f 93       	push	r18
    1dca:	3f 93       	push	r19
    1dcc:	4f 93       	push	r20
    1dce:	5f 93       	push	r21
    1dd0:	6f 93       	push	r22
    1dd2:	7f 93       	push	r23
    1dd4:	8f 93       	push	r24
    1dd6:	9f 93       	push	r25
    1dd8:	af 93       	push	r26
    1dda:	bf 93       	push	r27
    1ddc:	ef 93       	push	r30
    1dde:	ff 93       	push	r31
    1de0:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tcc0_ccc_callback>
    1de4:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tcc0_ccc_callback+0x1>
    1de8:	30 97       	sbiw	r30, 0x00	; 0
    1dea:	09 f0       	breq	.+2      	; 0x1dee <__vector_18+0x42>
    1dec:	19 95       	eicall
    1dee:	ff 91       	pop	r31
    1df0:	ef 91       	pop	r30
    1df2:	bf 91       	pop	r27
    1df4:	af 91       	pop	r26
    1df6:	9f 91       	pop	r25
    1df8:	8f 91       	pop	r24
    1dfa:	7f 91       	pop	r23
    1dfc:	6f 91       	pop	r22
    1dfe:	5f 91       	pop	r21
    1e00:	4f 91       	pop	r20
    1e02:	3f 91       	pop	r19
    1e04:	2f 91       	pop	r18
    1e06:	0f 90       	pop	r0
    1e08:	0b be       	out	0x3b, r0	; 59
    1e0a:	0f 90       	pop	r0
    1e0c:	09 be       	out	0x39, r0	; 57
    1e0e:	0f 90       	pop	r0
    1e10:	08 be       	out	0x38, r0	; 56
    1e12:	0f 90       	pop	r0
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	0f 90       	pop	r0
    1e18:	1f 90       	pop	r1
    1e1a:	18 95       	reti

00001e1c <__vector_19>:
    1e1c:	1f 92       	push	r1
    1e1e:	0f 92       	push	r0
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	0f 92       	push	r0
    1e24:	11 24       	eor	r1, r1
    1e26:	08 b6       	in	r0, 0x38	; 56
    1e28:	0f 92       	push	r0
    1e2a:	18 be       	out	0x38, r1	; 56
    1e2c:	09 b6       	in	r0, 0x39	; 57
    1e2e:	0f 92       	push	r0
    1e30:	19 be       	out	0x39, r1	; 57
    1e32:	0b b6       	in	r0, 0x3b	; 59
    1e34:	0f 92       	push	r0
    1e36:	1b be       	out	0x3b, r1	; 59
    1e38:	2f 93       	push	r18
    1e3a:	3f 93       	push	r19
    1e3c:	4f 93       	push	r20
    1e3e:	5f 93       	push	r21
    1e40:	6f 93       	push	r22
    1e42:	7f 93       	push	r23
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	af 93       	push	r26
    1e4a:	bf 93       	push	r27
    1e4c:	ef 93       	push	r30
    1e4e:	ff 93       	push	r31
    1e50:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tcc0_ccd_callback>
    1e54:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tcc0_ccd_callback+0x1>
    1e58:	30 97       	sbiw	r30, 0x00	; 0
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <__vector_19+0x42>
    1e5c:	19 95       	eicall
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	bf 91       	pop	r27
    1e64:	af 91       	pop	r26
    1e66:	9f 91       	pop	r25
    1e68:	8f 91       	pop	r24
    1e6a:	7f 91       	pop	r23
    1e6c:	6f 91       	pop	r22
    1e6e:	5f 91       	pop	r21
    1e70:	4f 91       	pop	r20
    1e72:	3f 91       	pop	r19
    1e74:	2f 91       	pop	r18
    1e76:	0f 90       	pop	r0
    1e78:	0b be       	out	0x3b, r0	; 59
    1e7a:	0f 90       	pop	r0
    1e7c:	09 be       	out	0x39, r0	; 57
    1e7e:	0f 90       	pop	r0
    1e80:	08 be       	out	0x38, r0	; 56
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <__vector_20>:
    1e8c:	1f 92       	push	r1
    1e8e:	0f 92       	push	r0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	0f 92       	push	r0
    1e94:	11 24       	eor	r1, r1
    1e96:	08 b6       	in	r0, 0x38	; 56
    1e98:	0f 92       	push	r0
    1e9a:	18 be       	out	0x38, r1	; 56
    1e9c:	09 b6       	in	r0, 0x39	; 57
    1e9e:	0f 92       	push	r0
    1ea0:	19 be       	out	0x39, r1	; 57
    1ea2:	0b b6       	in	r0, 0x3b	; 59
    1ea4:	0f 92       	push	r0
    1ea6:	1b be       	out	0x3b, r1	; 59
    1ea8:	2f 93       	push	r18
    1eaa:	3f 93       	push	r19
    1eac:	4f 93       	push	r20
    1eae:	5f 93       	push	r21
    1eb0:	6f 93       	push	r22
    1eb2:	7f 93       	push	r23
    1eb4:	8f 93       	push	r24
    1eb6:	9f 93       	push	r25
    1eb8:	af 93       	push	r26
    1eba:	bf 93       	push	r27
    1ebc:	ef 93       	push	r30
    1ebe:	ff 93       	push	r31
    1ec0:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcc1_ovf_callback>
    1ec4:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcc1_ovf_callback+0x1>
    1ec8:	30 97       	sbiw	r30, 0x00	; 0
    1eca:	09 f0       	breq	.+2      	; 0x1ece <__vector_20+0x42>
    1ecc:	19 95       	eicall
    1ece:	ff 91       	pop	r31
    1ed0:	ef 91       	pop	r30
    1ed2:	bf 91       	pop	r27
    1ed4:	af 91       	pop	r26
    1ed6:	9f 91       	pop	r25
    1ed8:	8f 91       	pop	r24
    1eda:	7f 91       	pop	r23
    1edc:	6f 91       	pop	r22
    1ede:	5f 91       	pop	r21
    1ee0:	4f 91       	pop	r20
    1ee2:	3f 91       	pop	r19
    1ee4:	2f 91       	pop	r18
    1ee6:	0f 90       	pop	r0
    1ee8:	0b be       	out	0x3b, r0	; 59
    1eea:	0f 90       	pop	r0
    1eec:	09 be       	out	0x39, r0	; 57
    1eee:	0f 90       	pop	r0
    1ef0:	08 be       	out	0x38, r0	; 56
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	0f 90       	pop	r0
    1ef8:	1f 90       	pop	r1
    1efa:	18 95       	reti

00001efc <__vector_21>:
    1efc:	1f 92       	push	r1
    1efe:	0f 92       	push	r0
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	0f 92       	push	r0
    1f04:	11 24       	eor	r1, r1
    1f06:	08 b6       	in	r0, 0x38	; 56
    1f08:	0f 92       	push	r0
    1f0a:	18 be       	out	0x38, r1	; 56
    1f0c:	09 b6       	in	r0, 0x39	; 57
    1f0e:	0f 92       	push	r0
    1f10:	19 be       	out	0x39, r1	; 57
    1f12:	0b b6       	in	r0, 0x3b	; 59
    1f14:	0f 92       	push	r0
    1f16:	1b be       	out	0x3b, r1	; 59
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcc1_err_callback>
    1f34:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcc1_err_callback+0x1>
    1f38:	30 97       	sbiw	r30, 0x00	; 0
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <__vector_21+0x42>
    1f3c:	19 95       	eicall
    1f3e:	ff 91       	pop	r31
    1f40:	ef 91       	pop	r30
    1f42:	bf 91       	pop	r27
    1f44:	af 91       	pop	r26
    1f46:	9f 91       	pop	r25
    1f48:	8f 91       	pop	r24
    1f4a:	7f 91       	pop	r23
    1f4c:	6f 91       	pop	r22
    1f4e:	5f 91       	pop	r21
    1f50:	4f 91       	pop	r20
    1f52:	3f 91       	pop	r19
    1f54:	2f 91       	pop	r18
    1f56:	0f 90       	pop	r0
    1f58:	0b be       	out	0x3b, r0	; 59
    1f5a:	0f 90       	pop	r0
    1f5c:	09 be       	out	0x39, r0	; 57
    1f5e:	0f 90       	pop	r0
    1f60:	08 be       	out	0x38, r0	; 56
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <__vector_22>:
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	08 b6       	in	r0, 0x38	; 56
    1f78:	0f 92       	push	r0
    1f7a:	18 be       	out	0x38, r1	; 56
    1f7c:	09 b6       	in	r0, 0x39	; 57
    1f7e:	0f 92       	push	r0
    1f80:	19 be       	out	0x39, r1	; 57
    1f82:	0b b6       	in	r0, 0x3b	; 59
    1f84:	0f 92       	push	r0
    1f86:	1b be       	out	0x3b, r1	; 59
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    1fa0:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcc1_cca_callback>
    1fa4:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcc1_cca_callback+0x1>
    1fa8:	30 97       	sbiw	r30, 0x00	; 0
    1faa:	09 f0       	breq	.+2      	; 0x1fae <__vector_22+0x42>
    1fac:	19 95       	eicall
    1fae:	ff 91       	pop	r31
    1fb0:	ef 91       	pop	r30
    1fb2:	bf 91       	pop	r27
    1fb4:	af 91       	pop	r26
    1fb6:	9f 91       	pop	r25
    1fb8:	8f 91       	pop	r24
    1fba:	7f 91       	pop	r23
    1fbc:	6f 91       	pop	r22
    1fbe:	5f 91       	pop	r21
    1fc0:	4f 91       	pop	r20
    1fc2:	3f 91       	pop	r19
    1fc4:	2f 91       	pop	r18
    1fc6:	0f 90       	pop	r0
    1fc8:	0b be       	out	0x3b, r0	; 59
    1fca:	0f 90       	pop	r0
    1fcc:	09 be       	out	0x39, r0	; 57
    1fce:	0f 90       	pop	r0
    1fd0:	08 be       	out	0x38, r0	; 56
    1fd2:	0f 90       	pop	r0
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	0f 90       	pop	r0
    1fd8:	1f 90       	pop	r1
    1fda:	18 95       	reti

00001fdc <__vector_23>:
    1fdc:	1f 92       	push	r1
    1fde:	0f 92       	push	r0
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	0f 92       	push	r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	08 b6       	in	r0, 0x38	; 56
    1fe8:	0f 92       	push	r0
    1fea:	18 be       	out	0x38, r1	; 56
    1fec:	09 b6       	in	r0, 0x39	; 57
    1fee:	0f 92       	push	r0
    1ff0:	19 be       	out	0x39, r1	; 57
    1ff2:	0b b6       	in	r0, 0x3b	; 59
    1ff4:	0f 92       	push	r0
    1ff6:	1b be       	out	0x3b, r1	; 59
    1ff8:	2f 93       	push	r18
    1ffa:	3f 93       	push	r19
    1ffc:	4f 93       	push	r20
    1ffe:	5f 93       	push	r21
    2000:	6f 93       	push	r22
    2002:	7f 93       	push	r23
    2004:	8f 93       	push	r24
    2006:	9f 93       	push	r25
    2008:	af 93       	push	r26
    200a:	bf 93       	push	r27
    200c:	ef 93       	push	r30
    200e:	ff 93       	push	r31
    2010:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcc1_ccb_callback>
    2014:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcc1_ccb_callback+0x1>
    2018:	30 97       	sbiw	r30, 0x00	; 0
    201a:	09 f0       	breq	.+2      	; 0x201e <__vector_23+0x42>
    201c:	19 95       	eicall
    201e:	ff 91       	pop	r31
    2020:	ef 91       	pop	r30
    2022:	bf 91       	pop	r27
    2024:	af 91       	pop	r26
    2026:	9f 91       	pop	r25
    2028:	8f 91       	pop	r24
    202a:	7f 91       	pop	r23
    202c:	6f 91       	pop	r22
    202e:	5f 91       	pop	r21
    2030:	4f 91       	pop	r20
    2032:	3f 91       	pop	r19
    2034:	2f 91       	pop	r18
    2036:	0f 90       	pop	r0
    2038:	0b be       	out	0x3b, r0	; 59
    203a:	0f 90       	pop	r0
    203c:	09 be       	out	0x39, r0	; 57
    203e:	0f 90       	pop	r0
    2040:	08 be       	out	0x38, r0	; 56
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	0f 90       	pop	r0
    2048:	1f 90       	pop	r1
    204a:	18 95       	reti

0000204c <__vector_77>:
    204c:	1f 92       	push	r1
    204e:	0f 92       	push	r0
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	0f 92       	push	r0
    2054:	11 24       	eor	r1, r1
    2056:	08 b6       	in	r0, 0x38	; 56
    2058:	0f 92       	push	r0
    205a:	18 be       	out	0x38, r1	; 56
    205c:	09 b6       	in	r0, 0x39	; 57
    205e:	0f 92       	push	r0
    2060:	19 be       	out	0x39, r1	; 57
    2062:	0b b6       	in	r0, 0x3b	; 59
    2064:	0f 92       	push	r0
    2066:	1b be       	out	0x3b, r1	; 59
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31
    2080:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcd0_ovf_callback>
    2084:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcd0_ovf_callback+0x1>
    2088:	30 97       	sbiw	r30, 0x00	; 0
    208a:	09 f0       	breq	.+2      	; 0x208e <__vector_77+0x42>
    208c:	19 95       	eicall
    208e:	ff 91       	pop	r31
    2090:	ef 91       	pop	r30
    2092:	bf 91       	pop	r27
    2094:	af 91       	pop	r26
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	7f 91       	pop	r23
    209c:	6f 91       	pop	r22
    209e:	5f 91       	pop	r21
    20a0:	4f 91       	pop	r20
    20a2:	3f 91       	pop	r19
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0b be       	out	0x3b, r0	; 59
    20aa:	0f 90       	pop	r0
    20ac:	09 be       	out	0x39, r0	; 57
    20ae:	0f 90       	pop	r0
    20b0:	08 be       	out	0x38, r0	; 56
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti

000020bc <__vector_78>:
    20bc:	1f 92       	push	r1
    20be:	0f 92       	push	r0
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	08 b6       	in	r0, 0x38	; 56
    20c8:	0f 92       	push	r0
    20ca:	18 be       	out	0x38, r1	; 56
    20cc:	09 b6       	in	r0, 0x39	; 57
    20ce:	0f 92       	push	r0
    20d0:	19 be       	out	0x39, r1	; 57
    20d2:	0b b6       	in	r0, 0x3b	; 59
    20d4:	0f 92       	push	r0
    20d6:	1b be       	out	0x3b, r1	; 59
    20d8:	2f 93       	push	r18
    20da:	3f 93       	push	r19
    20dc:	4f 93       	push	r20
    20de:	5f 93       	push	r21
    20e0:	6f 93       	push	r22
    20e2:	7f 93       	push	r23
    20e4:	8f 93       	push	r24
    20e6:	9f 93       	push	r25
    20e8:	af 93       	push	r26
    20ea:	bf 93       	push	r27
    20ec:	ef 93       	push	r30
    20ee:	ff 93       	push	r31
    20f0:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcd0_err_callback>
    20f4:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcd0_err_callback+0x1>
    20f8:	30 97       	sbiw	r30, 0x00	; 0
    20fa:	09 f0       	breq	.+2      	; 0x20fe <__vector_78+0x42>
    20fc:	19 95       	eicall
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0b be       	out	0x3b, r0	; 59
    211a:	0f 90       	pop	r0
    211c:	09 be       	out	0x39, r0	; 57
    211e:	0f 90       	pop	r0
    2120:	08 be       	out	0x38, r0	; 56
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	0f 90       	pop	r0
    2128:	1f 90       	pop	r1
    212a:	18 95       	reti

0000212c <__vector_79>:
    212c:	1f 92       	push	r1
    212e:	0f 92       	push	r0
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	0f 92       	push	r0
    2134:	11 24       	eor	r1, r1
    2136:	08 b6       	in	r0, 0x38	; 56
    2138:	0f 92       	push	r0
    213a:	18 be       	out	0x38, r1	; 56
    213c:	09 b6       	in	r0, 0x39	; 57
    213e:	0f 92       	push	r0
    2140:	19 be       	out	0x39, r1	; 57
    2142:	0b b6       	in	r0, 0x3b	; 59
    2144:	0f 92       	push	r0
    2146:	1b be       	out	0x3b, r1	; 59
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	4f 93       	push	r20
    214e:	5f 93       	push	r21
    2150:	6f 93       	push	r22
    2152:	7f 93       	push	r23
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	af 93       	push	r26
    215a:	bf 93       	push	r27
    215c:	ef 93       	push	r30
    215e:	ff 93       	push	r31
    2160:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcd0_cca_callback>
    2164:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcd0_cca_callback+0x1>
    2168:	30 97       	sbiw	r30, 0x00	; 0
    216a:	09 f0       	breq	.+2      	; 0x216e <__vector_79+0x42>
    216c:	19 95       	eicall
    216e:	ff 91       	pop	r31
    2170:	ef 91       	pop	r30
    2172:	bf 91       	pop	r27
    2174:	af 91       	pop	r26
    2176:	9f 91       	pop	r25
    2178:	8f 91       	pop	r24
    217a:	7f 91       	pop	r23
    217c:	6f 91       	pop	r22
    217e:	5f 91       	pop	r21
    2180:	4f 91       	pop	r20
    2182:	3f 91       	pop	r19
    2184:	2f 91       	pop	r18
    2186:	0f 90       	pop	r0
    2188:	0b be       	out	0x3b, r0	; 59
    218a:	0f 90       	pop	r0
    218c:	09 be       	out	0x39, r0	; 57
    218e:	0f 90       	pop	r0
    2190:	08 be       	out	0x38, r0	; 56
    2192:	0f 90       	pop	r0
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	0f 90       	pop	r0
    2198:	1f 90       	pop	r1
    219a:	18 95       	reti

0000219c <__vector_80>:
    219c:	1f 92       	push	r1
    219e:	0f 92       	push	r0
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	0f 92       	push	r0
    21a4:	11 24       	eor	r1, r1
    21a6:	08 b6       	in	r0, 0x38	; 56
    21a8:	0f 92       	push	r0
    21aa:	18 be       	out	0x38, r1	; 56
    21ac:	09 b6       	in	r0, 0x39	; 57
    21ae:	0f 92       	push	r0
    21b0:	19 be       	out	0x39, r1	; 57
    21b2:	0b b6       	in	r0, 0x3b	; 59
    21b4:	0f 92       	push	r0
    21b6:	1b be       	out	0x3b, r1	; 59
    21b8:	2f 93       	push	r18
    21ba:	3f 93       	push	r19
    21bc:	4f 93       	push	r20
    21be:	5f 93       	push	r21
    21c0:	6f 93       	push	r22
    21c2:	7f 93       	push	r23
    21c4:	8f 93       	push	r24
    21c6:	9f 93       	push	r25
    21c8:	af 93       	push	r26
    21ca:	bf 93       	push	r27
    21cc:	ef 93       	push	r30
    21ce:	ff 93       	push	r31
    21d0:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcd0_ccb_callback>
    21d4:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcd0_ccb_callback+0x1>
    21d8:	30 97       	sbiw	r30, 0x00	; 0
    21da:	09 f0       	breq	.+2      	; 0x21de <__vector_80+0x42>
    21dc:	19 95       	eicall
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	bf 91       	pop	r27
    21e4:	af 91       	pop	r26
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	7f 91       	pop	r23
    21ec:	6f 91       	pop	r22
    21ee:	5f 91       	pop	r21
    21f0:	4f 91       	pop	r20
    21f2:	3f 91       	pop	r19
    21f4:	2f 91       	pop	r18
    21f6:	0f 90       	pop	r0
    21f8:	0b be       	out	0x3b, r0	; 59
    21fa:	0f 90       	pop	r0
    21fc:	09 be       	out	0x39, r0	; 57
    21fe:	0f 90       	pop	r0
    2200:	08 be       	out	0x38, r0	; 56
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	0f 90       	pop	r0
    2208:	1f 90       	pop	r1
    220a:	18 95       	reti

0000220c <__vector_81>:
    220c:	1f 92       	push	r1
    220e:	0f 92       	push	r0
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	0f 92       	push	r0
    2214:	11 24       	eor	r1, r1
    2216:	08 b6       	in	r0, 0x38	; 56
    2218:	0f 92       	push	r0
    221a:	18 be       	out	0x38, r1	; 56
    221c:	09 b6       	in	r0, 0x39	; 57
    221e:	0f 92       	push	r0
    2220:	19 be       	out	0x39, r1	; 57
    2222:	0b b6       	in	r0, 0x3b	; 59
    2224:	0f 92       	push	r0
    2226:	1b be       	out	0x3b, r1	; 59
    2228:	2f 93       	push	r18
    222a:	3f 93       	push	r19
    222c:	4f 93       	push	r20
    222e:	5f 93       	push	r21
    2230:	6f 93       	push	r22
    2232:	7f 93       	push	r23
    2234:	8f 93       	push	r24
    2236:	9f 93       	push	r25
    2238:	af 93       	push	r26
    223a:	bf 93       	push	r27
    223c:	ef 93       	push	r30
    223e:	ff 93       	push	r31
    2240:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcd0_ccc_callback>
    2244:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcd0_ccc_callback+0x1>
    2248:	30 97       	sbiw	r30, 0x00	; 0
    224a:	09 f0       	breq	.+2      	; 0x224e <__vector_81+0x42>
    224c:	19 95       	eicall
    224e:	ff 91       	pop	r31
    2250:	ef 91       	pop	r30
    2252:	bf 91       	pop	r27
    2254:	af 91       	pop	r26
    2256:	9f 91       	pop	r25
    2258:	8f 91       	pop	r24
    225a:	7f 91       	pop	r23
    225c:	6f 91       	pop	r22
    225e:	5f 91       	pop	r21
    2260:	4f 91       	pop	r20
    2262:	3f 91       	pop	r19
    2264:	2f 91       	pop	r18
    2266:	0f 90       	pop	r0
    2268:	0b be       	out	0x3b, r0	; 59
    226a:	0f 90       	pop	r0
    226c:	09 be       	out	0x39, r0	; 57
    226e:	0f 90       	pop	r0
    2270:	08 be       	out	0x38, r0	; 56
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <__vector_82>:
    227c:	1f 92       	push	r1
    227e:	0f 92       	push	r0
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	0f 92       	push	r0
    2284:	11 24       	eor	r1, r1
    2286:	08 b6       	in	r0, 0x38	; 56
    2288:	0f 92       	push	r0
    228a:	18 be       	out	0x38, r1	; 56
    228c:	09 b6       	in	r0, 0x39	; 57
    228e:	0f 92       	push	r0
    2290:	19 be       	out	0x39, r1	; 57
    2292:	0b b6       	in	r0, 0x3b	; 59
    2294:	0f 92       	push	r0
    2296:	1b be       	out	0x3b, r1	; 59
    2298:	2f 93       	push	r18
    229a:	3f 93       	push	r19
    229c:	4f 93       	push	r20
    229e:	5f 93       	push	r21
    22a0:	6f 93       	push	r22
    22a2:	7f 93       	push	r23
    22a4:	8f 93       	push	r24
    22a6:	9f 93       	push	r25
    22a8:	af 93       	push	r26
    22aa:	bf 93       	push	r27
    22ac:	ef 93       	push	r30
    22ae:	ff 93       	push	r31
    22b0:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcd0_ccd_callback>
    22b4:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcd0_ccd_callback+0x1>
    22b8:	30 97       	sbiw	r30, 0x00	; 0
    22ba:	09 f0       	breq	.+2      	; 0x22be <__vector_82+0x42>
    22bc:	19 95       	eicall
    22be:	ff 91       	pop	r31
    22c0:	ef 91       	pop	r30
    22c2:	bf 91       	pop	r27
    22c4:	af 91       	pop	r26
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	7f 91       	pop	r23
    22cc:	6f 91       	pop	r22
    22ce:	5f 91       	pop	r21
    22d0:	4f 91       	pop	r20
    22d2:	3f 91       	pop	r19
    22d4:	2f 91       	pop	r18
    22d6:	0f 90       	pop	r0
    22d8:	0b be       	out	0x3b, r0	; 59
    22da:	0f 90       	pop	r0
    22dc:	09 be       	out	0x39, r0	; 57
    22de:	0f 90       	pop	r0
    22e0:	08 be       	out	0x38, r0	; 56
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	0f 90       	pop	r0
    22e8:	1f 90       	pop	r1
    22ea:	18 95       	reti

000022ec <__vector_83>:
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	08 b6       	in	r0, 0x38	; 56
    22f8:	0f 92       	push	r0
    22fa:	18 be       	out	0x38, r1	; 56
    22fc:	09 b6       	in	r0, 0x39	; 57
    22fe:	0f 92       	push	r0
    2300:	19 be       	out	0x39, r1	; 57
    2302:	0b b6       	in	r0, 0x3b	; 59
    2304:	0f 92       	push	r0
    2306:	1b be       	out	0x3b, r1	; 59
    2308:	2f 93       	push	r18
    230a:	3f 93       	push	r19
    230c:	4f 93       	push	r20
    230e:	5f 93       	push	r21
    2310:	6f 93       	push	r22
    2312:	7f 93       	push	r23
    2314:	8f 93       	push	r24
    2316:	9f 93       	push	r25
    2318:	af 93       	push	r26
    231a:	bf 93       	push	r27
    231c:	ef 93       	push	r30
    231e:	ff 93       	push	r31
    2320:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcd1_ovf_callback>
    2324:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcd1_ovf_callback+0x1>
    2328:	30 97       	sbiw	r30, 0x00	; 0
    232a:	09 f0       	breq	.+2      	; 0x232e <__vector_83+0x42>
    232c:	19 95       	eicall
    232e:	ff 91       	pop	r31
    2330:	ef 91       	pop	r30
    2332:	bf 91       	pop	r27
    2334:	af 91       	pop	r26
    2336:	9f 91       	pop	r25
    2338:	8f 91       	pop	r24
    233a:	7f 91       	pop	r23
    233c:	6f 91       	pop	r22
    233e:	5f 91       	pop	r21
    2340:	4f 91       	pop	r20
    2342:	3f 91       	pop	r19
    2344:	2f 91       	pop	r18
    2346:	0f 90       	pop	r0
    2348:	0b be       	out	0x3b, r0	; 59
    234a:	0f 90       	pop	r0
    234c:	09 be       	out	0x39, r0	; 57
    234e:	0f 90       	pop	r0
    2350:	08 be       	out	0x38, r0	; 56
    2352:	0f 90       	pop	r0
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	0f 90       	pop	r0
    2358:	1f 90       	pop	r1
    235a:	18 95       	reti

0000235c <__vector_84>:
    235c:	1f 92       	push	r1
    235e:	0f 92       	push	r0
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	0f 92       	push	r0
    2364:	11 24       	eor	r1, r1
    2366:	08 b6       	in	r0, 0x38	; 56
    2368:	0f 92       	push	r0
    236a:	18 be       	out	0x38, r1	; 56
    236c:	09 b6       	in	r0, 0x39	; 57
    236e:	0f 92       	push	r0
    2370:	19 be       	out	0x39, r1	; 57
    2372:	0b b6       	in	r0, 0x3b	; 59
    2374:	0f 92       	push	r0
    2376:	1b be       	out	0x3b, r1	; 59
    2378:	2f 93       	push	r18
    237a:	3f 93       	push	r19
    237c:	4f 93       	push	r20
    237e:	5f 93       	push	r21
    2380:	6f 93       	push	r22
    2382:	7f 93       	push	r23
    2384:	8f 93       	push	r24
    2386:	9f 93       	push	r25
    2388:	af 93       	push	r26
    238a:	bf 93       	push	r27
    238c:	ef 93       	push	r30
    238e:	ff 93       	push	r31
    2390:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tcd1_err_callback>
    2394:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tcd1_err_callback+0x1>
    2398:	30 97       	sbiw	r30, 0x00	; 0
    239a:	09 f0       	breq	.+2      	; 0x239e <__vector_84+0x42>
    239c:	19 95       	eicall
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	7f 91       	pop	r23
    23ac:	6f 91       	pop	r22
    23ae:	5f 91       	pop	r21
    23b0:	4f 91       	pop	r20
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0b be       	out	0x3b, r0	; 59
    23ba:	0f 90       	pop	r0
    23bc:	09 be       	out	0x39, r0	; 57
    23be:	0f 90       	pop	r0
    23c0:	08 be       	out	0x38, r0	; 56
    23c2:	0f 90       	pop	r0
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	0f 90       	pop	r0
    23c8:	1f 90       	pop	r1
    23ca:	18 95       	reti

000023cc <__vector_85>:
    23cc:	1f 92       	push	r1
    23ce:	0f 92       	push	r0
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	0f 92       	push	r0
    23d4:	11 24       	eor	r1, r1
    23d6:	08 b6       	in	r0, 0x38	; 56
    23d8:	0f 92       	push	r0
    23da:	18 be       	out	0x38, r1	; 56
    23dc:	09 b6       	in	r0, 0x39	; 57
    23de:	0f 92       	push	r0
    23e0:	19 be       	out	0x39, r1	; 57
    23e2:	0b b6       	in	r0, 0x3b	; 59
    23e4:	0f 92       	push	r0
    23e6:	1b be       	out	0x3b, r1	; 59
    23e8:	2f 93       	push	r18
    23ea:	3f 93       	push	r19
    23ec:	4f 93       	push	r20
    23ee:	5f 93       	push	r21
    23f0:	6f 93       	push	r22
    23f2:	7f 93       	push	r23
    23f4:	8f 93       	push	r24
    23f6:	9f 93       	push	r25
    23f8:	af 93       	push	r26
    23fa:	bf 93       	push	r27
    23fc:	ef 93       	push	r30
    23fe:	ff 93       	push	r31
    2400:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tcd1_cca_callback>
    2404:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tcd1_cca_callback+0x1>
    2408:	30 97       	sbiw	r30, 0x00	; 0
    240a:	09 f0       	breq	.+2      	; 0x240e <__vector_85+0x42>
    240c:	19 95       	eicall
    240e:	ff 91       	pop	r31
    2410:	ef 91       	pop	r30
    2412:	bf 91       	pop	r27
    2414:	af 91       	pop	r26
    2416:	9f 91       	pop	r25
    2418:	8f 91       	pop	r24
    241a:	7f 91       	pop	r23
    241c:	6f 91       	pop	r22
    241e:	5f 91       	pop	r21
    2420:	4f 91       	pop	r20
    2422:	3f 91       	pop	r19
    2424:	2f 91       	pop	r18
    2426:	0f 90       	pop	r0
    2428:	0b be       	out	0x3b, r0	; 59
    242a:	0f 90       	pop	r0
    242c:	09 be       	out	0x39, r0	; 57
    242e:	0f 90       	pop	r0
    2430:	08 be       	out	0x38, r0	; 56
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <__vector_86>:
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	08 b6       	in	r0, 0x38	; 56
    2448:	0f 92       	push	r0
    244a:	18 be       	out	0x38, r1	; 56
    244c:	09 b6       	in	r0, 0x39	; 57
    244e:	0f 92       	push	r0
    2450:	19 be       	out	0x39, r1	; 57
    2452:	0b b6       	in	r0, 0x3b	; 59
    2454:	0f 92       	push	r0
    2456:	1b be       	out	0x3b, r1	; 59
    2458:	2f 93       	push	r18
    245a:	3f 93       	push	r19
    245c:	4f 93       	push	r20
    245e:	5f 93       	push	r21
    2460:	6f 93       	push	r22
    2462:	7f 93       	push	r23
    2464:	8f 93       	push	r24
    2466:	9f 93       	push	r25
    2468:	af 93       	push	r26
    246a:	bf 93       	push	r27
    246c:	ef 93       	push	r30
    246e:	ff 93       	push	r31
    2470:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tcd1_ccb_callback>
    2474:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tcd1_ccb_callback+0x1>
    2478:	30 97       	sbiw	r30, 0x00	; 0
    247a:	09 f0       	breq	.+2      	; 0x247e <__vector_86+0x42>
    247c:	19 95       	eicall
    247e:	ff 91       	pop	r31
    2480:	ef 91       	pop	r30
    2482:	bf 91       	pop	r27
    2484:	af 91       	pop	r26
    2486:	9f 91       	pop	r25
    2488:	8f 91       	pop	r24
    248a:	7f 91       	pop	r23
    248c:	6f 91       	pop	r22
    248e:	5f 91       	pop	r21
    2490:	4f 91       	pop	r20
    2492:	3f 91       	pop	r19
    2494:	2f 91       	pop	r18
    2496:	0f 90       	pop	r0
    2498:	0b be       	out	0x3b, r0	; 59
    249a:	0f 90       	pop	r0
    249c:	09 be       	out	0x39, r0	; 57
    249e:	0f 90       	pop	r0
    24a0:	08 be       	out	0x38, r0	; 56
    24a2:	0f 90       	pop	r0
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	0f 90       	pop	r0
    24a8:	1f 90       	pop	r1
    24aa:	18 95       	reti

000024ac <__vector_47>:
    24ac:	1f 92       	push	r1
    24ae:	0f 92       	push	r0
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	0f 92       	push	r0
    24b4:	11 24       	eor	r1, r1
    24b6:	08 b6       	in	r0, 0x38	; 56
    24b8:	0f 92       	push	r0
    24ba:	18 be       	out	0x38, r1	; 56
    24bc:	09 b6       	in	r0, 0x39	; 57
    24be:	0f 92       	push	r0
    24c0:	19 be       	out	0x39, r1	; 57
    24c2:	0b b6       	in	r0, 0x3b	; 59
    24c4:	0f 92       	push	r0
    24c6:	1b be       	out	0x3b, r1	; 59
    24c8:	2f 93       	push	r18
    24ca:	3f 93       	push	r19
    24cc:	4f 93       	push	r20
    24ce:	5f 93       	push	r21
    24d0:	6f 93       	push	r22
    24d2:	7f 93       	push	r23
    24d4:	8f 93       	push	r24
    24d6:	9f 93       	push	r25
    24d8:	af 93       	push	r26
    24da:	bf 93       	push	r27
    24dc:	ef 93       	push	r30
    24de:	ff 93       	push	r31
    24e0:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tce0_ovf_callback>
    24e4:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tce0_ovf_callback+0x1>
    24e8:	30 97       	sbiw	r30, 0x00	; 0
    24ea:	09 f0       	breq	.+2      	; 0x24ee <__vector_47+0x42>
    24ec:	19 95       	eicall
    24ee:	ff 91       	pop	r31
    24f0:	ef 91       	pop	r30
    24f2:	bf 91       	pop	r27
    24f4:	af 91       	pop	r26
    24f6:	9f 91       	pop	r25
    24f8:	8f 91       	pop	r24
    24fa:	7f 91       	pop	r23
    24fc:	6f 91       	pop	r22
    24fe:	5f 91       	pop	r21
    2500:	4f 91       	pop	r20
    2502:	3f 91       	pop	r19
    2504:	2f 91       	pop	r18
    2506:	0f 90       	pop	r0
    2508:	0b be       	out	0x3b, r0	; 59
    250a:	0f 90       	pop	r0
    250c:	09 be       	out	0x39, r0	; 57
    250e:	0f 90       	pop	r0
    2510:	08 be       	out	0x38, r0	; 56
    2512:	0f 90       	pop	r0
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	0f 90       	pop	r0
    2518:	1f 90       	pop	r1
    251a:	18 95       	reti

0000251c <__vector_48>:
    251c:	1f 92       	push	r1
    251e:	0f 92       	push	r0
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	0f 92       	push	r0
    2524:	11 24       	eor	r1, r1
    2526:	08 b6       	in	r0, 0x38	; 56
    2528:	0f 92       	push	r0
    252a:	18 be       	out	0x38, r1	; 56
    252c:	09 b6       	in	r0, 0x39	; 57
    252e:	0f 92       	push	r0
    2530:	19 be       	out	0x39, r1	; 57
    2532:	0b b6       	in	r0, 0x3b	; 59
    2534:	0f 92       	push	r0
    2536:	1b be       	out	0x3b, r1	; 59
    2538:	2f 93       	push	r18
    253a:	3f 93       	push	r19
    253c:	4f 93       	push	r20
    253e:	5f 93       	push	r21
    2540:	6f 93       	push	r22
    2542:	7f 93       	push	r23
    2544:	8f 93       	push	r24
    2546:	9f 93       	push	r25
    2548:	af 93       	push	r26
    254a:	bf 93       	push	r27
    254c:	ef 93       	push	r30
    254e:	ff 93       	push	r31
    2550:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tce0_err_callback>
    2554:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tce0_err_callback+0x1>
    2558:	30 97       	sbiw	r30, 0x00	; 0
    255a:	09 f0       	breq	.+2      	; 0x255e <__vector_48+0x42>
    255c:	19 95       	eicall
    255e:	ff 91       	pop	r31
    2560:	ef 91       	pop	r30
    2562:	bf 91       	pop	r27
    2564:	af 91       	pop	r26
    2566:	9f 91       	pop	r25
    2568:	8f 91       	pop	r24
    256a:	7f 91       	pop	r23
    256c:	6f 91       	pop	r22
    256e:	5f 91       	pop	r21
    2570:	4f 91       	pop	r20
    2572:	3f 91       	pop	r19
    2574:	2f 91       	pop	r18
    2576:	0f 90       	pop	r0
    2578:	0b be       	out	0x3b, r0	; 59
    257a:	0f 90       	pop	r0
    257c:	09 be       	out	0x39, r0	; 57
    257e:	0f 90       	pop	r0
    2580:	08 be       	out	0x38, r0	; 56
    2582:	0f 90       	pop	r0
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	0f 90       	pop	r0
    2588:	1f 90       	pop	r1
    258a:	18 95       	reti

0000258c <__vector_49>:
    258c:	1f 92       	push	r1
    258e:	0f 92       	push	r0
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	0f 92       	push	r0
    2594:	11 24       	eor	r1, r1
    2596:	08 b6       	in	r0, 0x38	; 56
    2598:	0f 92       	push	r0
    259a:	18 be       	out	0x38, r1	; 56
    259c:	09 b6       	in	r0, 0x39	; 57
    259e:	0f 92       	push	r0
    25a0:	19 be       	out	0x39, r1	; 57
    25a2:	0b b6       	in	r0, 0x3b	; 59
    25a4:	0f 92       	push	r0
    25a6:	1b be       	out	0x3b, r1	; 59
    25a8:	2f 93       	push	r18
    25aa:	3f 93       	push	r19
    25ac:	4f 93       	push	r20
    25ae:	5f 93       	push	r21
    25b0:	6f 93       	push	r22
    25b2:	7f 93       	push	r23
    25b4:	8f 93       	push	r24
    25b6:	9f 93       	push	r25
    25b8:	af 93       	push	r26
    25ba:	bf 93       	push	r27
    25bc:	ef 93       	push	r30
    25be:	ff 93       	push	r31
    25c0:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tce0_cca_callback>
    25c4:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tce0_cca_callback+0x1>
    25c8:	30 97       	sbiw	r30, 0x00	; 0
    25ca:	09 f0       	breq	.+2      	; 0x25ce <__vector_49+0x42>
    25cc:	19 95       	eicall
    25ce:	ff 91       	pop	r31
    25d0:	ef 91       	pop	r30
    25d2:	bf 91       	pop	r27
    25d4:	af 91       	pop	r26
    25d6:	9f 91       	pop	r25
    25d8:	8f 91       	pop	r24
    25da:	7f 91       	pop	r23
    25dc:	6f 91       	pop	r22
    25de:	5f 91       	pop	r21
    25e0:	4f 91       	pop	r20
    25e2:	3f 91       	pop	r19
    25e4:	2f 91       	pop	r18
    25e6:	0f 90       	pop	r0
    25e8:	0b be       	out	0x3b, r0	; 59
    25ea:	0f 90       	pop	r0
    25ec:	09 be       	out	0x39, r0	; 57
    25ee:	0f 90       	pop	r0
    25f0:	08 be       	out	0x38, r0	; 56
    25f2:	0f 90       	pop	r0
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	0f 90       	pop	r0
    25f8:	1f 90       	pop	r1
    25fa:	18 95       	reti

000025fc <__vector_50>:
    25fc:	1f 92       	push	r1
    25fe:	0f 92       	push	r0
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	0f 92       	push	r0
    2604:	11 24       	eor	r1, r1
    2606:	08 b6       	in	r0, 0x38	; 56
    2608:	0f 92       	push	r0
    260a:	18 be       	out	0x38, r1	; 56
    260c:	09 b6       	in	r0, 0x39	; 57
    260e:	0f 92       	push	r0
    2610:	19 be       	out	0x39, r1	; 57
    2612:	0b b6       	in	r0, 0x3b	; 59
    2614:	0f 92       	push	r0
    2616:	1b be       	out	0x3b, r1	; 59
    2618:	2f 93       	push	r18
    261a:	3f 93       	push	r19
    261c:	4f 93       	push	r20
    261e:	5f 93       	push	r21
    2620:	6f 93       	push	r22
    2622:	7f 93       	push	r23
    2624:	8f 93       	push	r24
    2626:	9f 93       	push	r25
    2628:	af 93       	push	r26
    262a:	bf 93       	push	r27
    262c:	ef 93       	push	r30
    262e:	ff 93       	push	r31
    2630:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tce0_ccb_callback>
    2634:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tce0_ccb_callback+0x1>
    2638:	30 97       	sbiw	r30, 0x00	; 0
    263a:	09 f0       	breq	.+2      	; 0x263e <__vector_50+0x42>
    263c:	19 95       	eicall
    263e:	ff 91       	pop	r31
    2640:	ef 91       	pop	r30
    2642:	bf 91       	pop	r27
    2644:	af 91       	pop	r26
    2646:	9f 91       	pop	r25
    2648:	8f 91       	pop	r24
    264a:	7f 91       	pop	r23
    264c:	6f 91       	pop	r22
    264e:	5f 91       	pop	r21
    2650:	4f 91       	pop	r20
    2652:	3f 91       	pop	r19
    2654:	2f 91       	pop	r18
    2656:	0f 90       	pop	r0
    2658:	0b be       	out	0x3b, r0	; 59
    265a:	0f 90       	pop	r0
    265c:	09 be       	out	0x39, r0	; 57
    265e:	0f 90       	pop	r0
    2660:	08 be       	out	0x38, r0	; 56
    2662:	0f 90       	pop	r0
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	0f 90       	pop	r0
    2668:	1f 90       	pop	r1
    266a:	18 95       	reti

0000266c <__vector_51>:
    266c:	1f 92       	push	r1
    266e:	0f 92       	push	r0
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	0f 92       	push	r0
    2674:	11 24       	eor	r1, r1
    2676:	08 b6       	in	r0, 0x38	; 56
    2678:	0f 92       	push	r0
    267a:	18 be       	out	0x38, r1	; 56
    267c:	09 b6       	in	r0, 0x39	; 57
    267e:	0f 92       	push	r0
    2680:	19 be       	out	0x39, r1	; 57
    2682:	0b b6       	in	r0, 0x3b	; 59
    2684:	0f 92       	push	r0
    2686:	1b be       	out	0x3b, r1	; 59
    2688:	2f 93       	push	r18
    268a:	3f 93       	push	r19
    268c:	4f 93       	push	r20
    268e:	5f 93       	push	r21
    2690:	6f 93       	push	r22
    2692:	7f 93       	push	r23
    2694:	8f 93       	push	r24
    2696:	9f 93       	push	r25
    2698:	af 93       	push	r26
    269a:	bf 93       	push	r27
    269c:	ef 93       	push	r30
    269e:	ff 93       	push	r31
    26a0:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tce0_ccc_callback>
    26a4:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tce0_ccc_callback+0x1>
    26a8:	30 97       	sbiw	r30, 0x00	; 0
    26aa:	09 f0       	breq	.+2      	; 0x26ae <__vector_51+0x42>
    26ac:	19 95       	eicall
    26ae:	ff 91       	pop	r31
    26b0:	ef 91       	pop	r30
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	9f 91       	pop	r25
    26b8:	8f 91       	pop	r24
    26ba:	7f 91       	pop	r23
    26bc:	6f 91       	pop	r22
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	0f 90       	pop	r0
    26c8:	0b be       	out	0x3b, r0	; 59
    26ca:	0f 90       	pop	r0
    26cc:	09 be       	out	0x39, r0	; 57
    26ce:	0f 90       	pop	r0
    26d0:	08 be       	out	0x38, r0	; 56
    26d2:	0f 90       	pop	r0
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	0f 90       	pop	r0
    26d8:	1f 90       	pop	r1
    26da:	18 95       	reti

000026dc <__vector_52>:
    26dc:	1f 92       	push	r1
    26de:	0f 92       	push	r0
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	0f 92       	push	r0
    26e4:	11 24       	eor	r1, r1
    26e6:	08 b6       	in	r0, 0x38	; 56
    26e8:	0f 92       	push	r0
    26ea:	18 be       	out	0x38, r1	; 56
    26ec:	09 b6       	in	r0, 0x39	; 57
    26ee:	0f 92       	push	r0
    26f0:	19 be       	out	0x39, r1	; 57
    26f2:	0b b6       	in	r0, 0x3b	; 59
    26f4:	0f 92       	push	r0
    26f6:	1b be       	out	0x3b, r1	; 59
    26f8:	2f 93       	push	r18
    26fa:	3f 93       	push	r19
    26fc:	4f 93       	push	r20
    26fe:	5f 93       	push	r21
    2700:	6f 93       	push	r22
    2702:	7f 93       	push	r23
    2704:	8f 93       	push	r24
    2706:	9f 93       	push	r25
    2708:	af 93       	push	r26
    270a:	bf 93       	push	r27
    270c:	ef 93       	push	r30
    270e:	ff 93       	push	r31
    2710:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tce0_ccd_callback>
    2714:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tce0_ccd_callback+0x1>
    2718:	30 97       	sbiw	r30, 0x00	; 0
    271a:	09 f0       	breq	.+2      	; 0x271e <__vector_52+0x42>
    271c:	19 95       	eicall
    271e:	ff 91       	pop	r31
    2720:	ef 91       	pop	r30
    2722:	bf 91       	pop	r27
    2724:	af 91       	pop	r26
    2726:	9f 91       	pop	r25
    2728:	8f 91       	pop	r24
    272a:	7f 91       	pop	r23
    272c:	6f 91       	pop	r22
    272e:	5f 91       	pop	r21
    2730:	4f 91       	pop	r20
    2732:	3f 91       	pop	r19
    2734:	2f 91       	pop	r18
    2736:	0f 90       	pop	r0
    2738:	0b be       	out	0x3b, r0	; 59
    273a:	0f 90       	pop	r0
    273c:	09 be       	out	0x39, r0	; 57
    273e:	0f 90       	pop	r0
    2740:	08 be       	out	0x38, r0	; 56
    2742:	0f 90       	pop	r0
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	0f 90       	pop	r0
    2748:	1f 90       	pop	r1
    274a:	18 95       	reti

0000274c <__vector_53>:
    274c:	1f 92       	push	r1
    274e:	0f 92       	push	r0
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	0f 92       	push	r0
    2754:	11 24       	eor	r1, r1
    2756:	08 b6       	in	r0, 0x38	; 56
    2758:	0f 92       	push	r0
    275a:	18 be       	out	0x38, r1	; 56
    275c:	09 b6       	in	r0, 0x39	; 57
    275e:	0f 92       	push	r0
    2760:	19 be       	out	0x39, r1	; 57
    2762:	0b b6       	in	r0, 0x3b	; 59
    2764:	0f 92       	push	r0
    2766:	1b be       	out	0x3b, r1	; 59
    2768:	2f 93       	push	r18
    276a:	3f 93       	push	r19
    276c:	4f 93       	push	r20
    276e:	5f 93       	push	r21
    2770:	6f 93       	push	r22
    2772:	7f 93       	push	r23
    2774:	8f 93       	push	r24
    2776:	9f 93       	push	r25
    2778:	af 93       	push	r26
    277a:	bf 93       	push	r27
    277c:	ef 93       	push	r30
    277e:	ff 93       	push	r31
    2780:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tce1_ovf_callback>
    2784:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tce1_ovf_callback+0x1>
    2788:	30 97       	sbiw	r30, 0x00	; 0
    278a:	09 f0       	breq	.+2      	; 0x278e <__vector_53+0x42>
    278c:	19 95       	eicall
    278e:	ff 91       	pop	r31
    2790:	ef 91       	pop	r30
    2792:	bf 91       	pop	r27
    2794:	af 91       	pop	r26
    2796:	9f 91       	pop	r25
    2798:	8f 91       	pop	r24
    279a:	7f 91       	pop	r23
    279c:	6f 91       	pop	r22
    279e:	5f 91       	pop	r21
    27a0:	4f 91       	pop	r20
    27a2:	3f 91       	pop	r19
    27a4:	2f 91       	pop	r18
    27a6:	0f 90       	pop	r0
    27a8:	0b be       	out	0x3b, r0	; 59
    27aa:	0f 90       	pop	r0
    27ac:	09 be       	out	0x39, r0	; 57
    27ae:	0f 90       	pop	r0
    27b0:	08 be       	out	0x38, r0	; 56
    27b2:	0f 90       	pop	r0
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	0f 90       	pop	r0
    27b8:	1f 90       	pop	r1
    27ba:	18 95       	reti

000027bc <__vector_54>:
    27bc:	1f 92       	push	r1
    27be:	0f 92       	push	r0
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	0f 92       	push	r0
    27c4:	11 24       	eor	r1, r1
    27c6:	08 b6       	in	r0, 0x38	; 56
    27c8:	0f 92       	push	r0
    27ca:	18 be       	out	0x38, r1	; 56
    27cc:	09 b6       	in	r0, 0x39	; 57
    27ce:	0f 92       	push	r0
    27d0:	19 be       	out	0x39, r1	; 57
    27d2:	0b b6       	in	r0, 0x3b	; 59
    27d4:	0f 92       	push	r0
    27d6:	1b be       	out	0x3b, r1	; 59
    27d8:	2f 93       	push	r18
    27da:	3f 93       	push	r19
    27dc:	4f 93       	push	r20
    27de:	5f 93       	push	r21
    27e0:	6f 93       	push	r22
    27e2:	7f 93       	push	r23
    27e4:	8f 93       	push	r24
    27e6:	9f 93       	push	r25
    27e8:	af 93       	push	r26
    27ea:	bf 93       	push	r27
    27ec:	ef 93       	push	r30
    27ee:	ff 93       	push	r31
    27f0:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tce1_err_callback>
    27f4:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tce1_err_callback+0x1>
    27f8:	30 97       	sbiw	r30, 0x00	; 0
    27fa:	09 f0       	breq	.+2      	; 0x27fe <__vector_54+0x42>
    27fc:	19 95       	eicall
    27fe:	ff 91       	pop	r31
    2800:	ef 91       	pop	r30
    2802:	bf 91       	pop	r27
    2804:	af 91       	pop	r26
    2806:	9f 91       	pop	r25
    2808:	8f 91       	pop	r24
    280a:	7f 91       	pop	r23
    280c:	6f 91       	pop	r22
    280e:	5f 91       	pop	r21
    2810:	4f 91       	pop	r20
    2812:	3f 91       	pop	r19
    2814:	2f 91       	pop	r18
    2816:	0f 90       	pop	r0
    2818:	0b be       	out	0x3b, r0	; 59
    281a:	0f 90       	pop	r0
    281c:	09 be       	out	0x39, r0	; 57
    281e:	0f 90       	pop	r0
    2820:	08 be       	out	0x38, r0	; 56
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0
    2828:	1f 90       	pop	r1
    282a:	18 95       	reti

0000282c <__vector_55>:
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	08 b6       	in	r0, 0x38	; 56
    2838:	0f 92       	push	r0
    283a:	18 be       	out	0x38, r1	; 56
    283c:	09 b6       	in	r0, 0x39	; 57
    283e:	0f 92       	push	r0
    2840:	19 be       	out	0x39, r1	; 57
    2842:	0b b6       	in	r0, 0x3b	; 59
    2844:	0f 92       	push	r0
    2846:	1b be       	out	0x3b, r1	; 59
    2848:	2f 93       	push	r18
    284a:	3f 93       	push	r19
    284c:	4f 93       	push	r20
    284e:	5f 93       	push	r21
    2850:	6f 93       	push	r22
    2852:	7f 93       	push	r23
    2854:	8f 93       	push	r24
    2856:	9f 93       	push	r25
    2858:	af 93       	push	r26
    285a:	bf 93       	push	r27
    285c:	ef 93       	push	r30
    285e:	ff 93       	push	r31
    2860:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tce1_cca_callback>
    2864:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tce1_cca_callback+0x1>
    2868:	30 97       	sbiw	r30, 0x00	; 0
    286a:	09 f0       	breq	.+2      	; 0x286e <__vector_55+0x42>
    286c:	19 95       	eicall
    286e:	ff 91       	pop	r31
    2870:	ef 91       	pop	r30
    2872:	bf 91       	pop	r27
    2874:	af 91       	pop	r26
    2876:	9f 91       	pop	r25
    2878:	8f 91       	pop	r24
    287a:	7f 91       	pop	r23
    287c:	6f 91       	pop	r22
    287e:	5f 91       	pop	r21
    2880:	4f 91       	pop	r20
    2882:	3f 91       	pop	r19
    2884:	2f 91       	pop	r18
    2886:	0f 90       	pop	r0
    2888:	0b be       	out	0x3b, r0	; 59
    288a:	0f 90       	pop	r0
    288c:	09 be       	out	0x39, r0	; 57
    288e:	0f 90       	pop	r0
    2890:	08 be       	out	0x38, r0	; 56
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	0f 90       	pop	r0
    2898:	1f 90       	pop	r1
    289a:	18 95       	reti

0000289c <__vector_56>:
    289c:	1f 92       	push	r1
    289e:	0f 92       	push	r0
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	0f 92       	push	r0
    28a4:	11 24       	eor	r1, r1
    28a6:	08 b6       	in	r0, 0x38	; 56
    28a8:	0f 92       	push	r0
    28aa:	18 be       	out	0x38, r1	; 56
    28ac:	09 b6       	in	r0, 0x39	; 57
    28ae:	0f 92       	push	r0
    28b0:	19 be       	out	0x39, r1	; 57
    28b2:	0b b6       	in	r0, 0x3b	; 59
    28b4:	0f 92       	push	r0
    28b6:	1b be       	out	0x3b, r1	; 59
    28b8:	2f 93       	push	r18
    28ba:	3f 93       	push	r19
    28bc:	4f 93       	push	r20
    28be:	5f 93       	push	r21
    28c0:	6f 93       	push	r22
    28c2:	7f 93       	push	r23
    28c4:	8f 93       	push	r24
    28c6:	9f 93       	push	r25
    28c8:	af 93       	push	r26
    28ca:	bf 93       	push	r27
    28cc:	ef 93       	push	r30
    28ce:	ff 93       	push	r31
    28d0:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tce1_ccb_callback>
    28d4:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tce1_ccb_callback+0x1>
    28d8:	30 97       	sbiw	r30, 0x00	; 0
    28da:	09 f0       	breq	.+2      	; 0x28de <__vector_56+0x42>
    28dc:	19 95       	eicall
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	7f 91       	pop	r23
    28ec:	6f 91       	pop	r22
    28ee:	5f 91       	pop	r21
    28f0:	4f 91       	pop	r20
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0b be       	out	0x3b, r0	; 59
    28fa:	0f 90       	pop	r0
    28fc:	09 be       	out	0x39, r0	; 57
    28fe:	0f 90       	pop	r0
    2900:	08 be       	out	0x38, r0	; 56
    2902:	0f 90       	pop	r0
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	0f 90       	pop	r0
    2908:	1f 90       	pop	r1
    290a:	18 95       	reti

0000290c <__vector_108>:
    290c:	1f 92       	push	r1
    290e:	0f 92       	push	r0
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	0f 92       	push	r0
    2914:	11 24       	eor	r1, r1
    2916:	08 b6       	in	r0, 0x38	; 56
    2918:	0f 92       	push	r0
    291a:	18 be       	out	0x38, r1	; 56
    291c:	09 b6       	in	r0, 0x39	; 57
    291e:	0f 92       	push	r0
    2920:	19 be       	out	0x39, r1	; 57
    2922:	0b b6       	in	r0, 0x3b	; 59
    2924:	0f 92       	push	r0
    2926:	1b be       	out	0x3b, r1	; 59
    2928:	2f 93       	push	r18
    292a:	3f 93       	push	r19
    292c:	4f 93       	push	r20
    292e:	5f 93       	push	r21
    2930:	6f 93       	push	r22
    2932:	7f 93       	push	r23
    2934:	8f 93       	push	r24
    2936:	9f 93       	push	r25
    2938:	af 93       	push	r26
    293a:	bf 93       	push	r27
    293c:	ef 93       	push	r30
    293e:	ff 93       	push	r31
    2940:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tcf0_ovf_callback>
    2944:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tcf0_ovf_callback+0x1>
    2948:	30 97       	sbiw	r30, 0x00	; 0
    294a:	09 f0       	breq	.+2      	; 0x294e <__vector_108+0x42>
    294c:	19 95       	eicall
    294e:	ff 91       	pop	r31
    2950:	ef 91       	pop	r30
    2952:	bf 91       	pop	r27
    2954:	af 91       	pop	r26
    2956:	9f 91       	pop	r25
    2958:	8f 91       	pop	r24
    295a:	7f 91       	pop	r23
    295c:	6f 91       	pop	r22
    295e:	5f 91       	pop	r21
    2960:	4f 91       	pop	r20
    2962:	3f 91       	pop	r19
    2964:	2f 91       	pop	r18
    2966:	0f 90       	pop	r0
    2968:	0b be       	out	0x3b, r0	; 59
    296a:	0f 90       	pop	r0
    296c:	09 be       	out	0x39, r0	; 57
    296e:	0f 90       	pop	r0
    2970:	08 be       	out	0x38, r0	; 56
    2972:	0f 90       	pop	r0
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	0f 90       	pop	r0
    2978:	1f 90       	pop	r1
    297a:	18 95       	reti

0000297c <__vector_109>:
    297c:	1f 92       	push	r1
    297e:	0f 92       	push	r0
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	0f 92       	push	r0
    2984:	11 24       	eor	r1, r1
    2986:	08 b6       	in	r0, 0x38	; 56
    2988:	0f 92       	push	r0
    298a:	18 be       	out	0x38, r1	; 56
    298c:	09 b6       	in	r0, 0x39	; 57
    298e:	0f 92       	push	r0
    2990:	19 be       	out	0x39, r1	; 57
    2992:	0b b6       	in	r0, 0x3b	; 59
    2994:	0f 92       	push	r0
    2996:	1b be       	out	0x3b, r1	; 59
    2998:	2f 93       	push	r18
    299a:	3f 93       	push	r19
    299c:	4f 93       	push	r20
    299e:	5f 93       	push	r21
    29a0:	6f 93       	push	r22
    29a2:	7f 93       	push	r23
    29a4:	8f 93       	push	r24
    29a6:	9f 93       	push	r25
    29a8:	af 93       	push	r26
    29aa:	bf 93       	push	r27
    29ac:	ef 93       	push	r30
    29ae:	ff 93       	push	r31
    29b0:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tcf0_err_callback>
    29b4:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tcf0_err_callback+0x1>
    29b8:	30 97       	sbiw	r30, 0x00	; 0
    29ba:	09 f0       	breq	.+2      	; 0x29be <__vector_109+0x42>
    29bc:	19 95       	eicall
    29be:	ff 91       	pop	r31
    29c0:	ef 91       	pop	r30
    29c2:	bf 91       	pop	r27
    29c4:	af 91       	pop	r26
    29c6:	9f 91       	pop	r25
    29c8:	8f 91       	pop	r24
    29ca:	7f 91       	pop	r23
    29cc:	6f 91       	pop	r22
    29ce:	5f 91       	pop	r21
    29d0:	4f 91       	pop	r20
    29d2:	3f 91       	pop	r19
    29d4:	2f 91       	pop	r18
    29d6:	0f 90       	pop	r0
    29d8:	0b be       	out	0x3b, r0	; 59
    29da:	0f 90       	pop	r0
    29dc:	09 be       	out	0x39, r0	; 57
    29de:	0f 90       	pop	r0
    29e0:	08 be       	out	0x38, r0	; 56
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	0f 90       	pop	r0
    29e8:	1f 90       	pop	r1
    29ea:	18 95       	reti

000029ec <__vector_110>:
    29ec:	1f 92       	push	r1
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	08 b6       	in	r0, 0x38	; 56
    29f8:	0f 92       	push	r0
    29fa:	18 be       	out	0x38, r1	; 56
    29fc:	09 b6       	in	r0, 0x39	; 57
    29fe:	0f 92       	push	r0
    2a00:	19 be       	out	0x39, r1	; 57
    2a02:	0b b6       	in	r0, 0x3b	; 59
    2a04:	0f 92       	push	r0
    2a06:	1b be       	out	0x3b, r1	; 59
    2a08:	2f 93       	push	r18
    2a0a:	3f 93       	push	r19
    2a0c:	4f 93       	push	r20
    2a0e:	5f 93       	push	r21
    2a10:	6f 93       	push	r22
    2a12:	7f 93       	push	r23
    2a14:	8f 93       	push	r24
    2a16:	9f 93       	push	r25
    2a18:	af 93       	push	r26
    2a1a:	bf 93       	push	r27
    2a1c:	ef 93       	push	r30
    2a1e:	ff 93       	push	r31
    2a20:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tcf0_cca_callback>
    2a24:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tcf0_cca_callback+0x1>
    2a28:	30 97       	sbiw	r30, 0x00	; 0
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <__vector_110+0x42>
    2a2c:	19 95       	eicall
    2a2e:	ff 91       	pop	r31
    2a30:	ef 91       	pop	r30
    2a32:	bf 91       	pop	r27
    2a34:	af 91       	pop	r26
    2a36:	9f 91       	pop	r25
    2a38:	8f 91       	pop	r24
    2a3a:	7f 91       	pop	r23
    2a3c:	6f 91       	pop	r22
    2a3e:	5f 91       	pop	r21
    2a40:	4f 91       	pop	r20
    2a42:	3f 91       	pop	r19
    2a44:	2f 91       	pop	r18
    2a46:	0f 90       	pop	r0
    2a48:	0b be       	out	0x3b, r0	; 59
    2a4a:	0f 90       	pop	r0
    2a4c:	09 be       	out	0x39, r0	; 57
    2a4e:	0f 90       	pop	r0
    2a50:	08 be       	out	0x38, r0	; 56
    2a52:	0f 90       	pop	r0
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	0f 90       	pop	r0
    2a58:	1f 90       	pop	r1
    2a5a:	18 95       	reti

00002a5c <__vector_111>:
    2a5c:	1f 92       	push	r1
    2a5e:	0f 92       	push	r0
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	0f 92       	push	r0
    2a64:	11 24       	eor	r1, r1
    2a66:	08 b6       	in	r0, 0x38	; 56
    2a68:	0f 92       	push	r0
    2a6a:	18 be       	out	0x38, r1	; 56
    2a6c:	09 b6       	in	r0, 0x39	; 57
    2a6e:	0f 92       	push	r0
    2a70:	19 be       	out	0x39, r1	; 57
    2a72:	0b b6       	in	r0, 0x3b	; 59
    2a74:	0f 92       	push	r0
    2a76:	1b be       	out	0x3b, r1	; 59
    2a78:	2f 93       	push	r18
    2a7a:	3f 93       	push	r19
    2a7c:	4f 93       	push	r20
    2a7e:	5f 93       	push	r21
    2a80:	6f 93       	push	r22
    2a82:	7f 93       	push	r23
    2a84:	8f 93       	push	r24
    2a86:	9f 93       	push	r25
    2a88:	af 93       	push	r26
    2a8a:	bf 93       	push	r27
    2a8c:	ef 93       	push	r30
    2a8e:	ff 93       	push	r31
    2a90:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tcf0_ccb_callback>
    2a94:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tcf0_ccb_callback+0x1>
    2a98:	30 97       	sbiw	r30, 0x00	; 0
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <__vector_111+0x42>
    2a9c:	19 95       	eicall
    2a9e:	ff 91       	pop	r31
    2aa0:	ef 91       	pop	r30
    2aa2:	bf 91       	pop	r27
    2aa4:	af 91       	pop	r26
    2aa6:	9f 91       	pop	r25
    2aa8:	8f 91       	pop	r24
    2aaa:	7f 91       	pop	r23
    2aac:	6f 91       	pop	r22
    2aae:	5f 91       	pop	r21
    2ab0:	4f 91       	pop	r20
    2ab2:	3f 91       	pop	r19
    2ab4:	2f 91       	pop	r18
    2ab6:	0f 90       	pop	r0
    2ab8:	0b be       	out	0x3b, r0	; 59
    2aba:	0f 90       	pop	r0
    2abc:	09 be       	out	0x39, r0	; 57
    2abe:	0f 90       	pop	r0
    2ac0:	08 be       	out	0x38, r0	; 56
    2ac2:	0f 90       	pop	r0
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	0f 90       	pop	r0
    2ac8:	1f 90       	pop	r1
    2aca:	18 95       	reti

00002acc <__vector_112>:
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	08 b6       	in	r0, 0x38	; 56
    2ad8:	0f 92       	push	r0
    2ada:	18 be       	out	0x38, r1	; 56
    2adc:	09 b6       	in	r0, 0x39	; 57
    2ade:	0f 92       	push	r0
    2ae0:	19 be       	out	0x39, r1	; 57
    2ae2:	0b b6       	in	r0, 0x3b	; 59
    2ae4:	0f 92       	push	r0
    2ae6:	1b be       	out	0x3b, r1	; 59
    2ae8:	2f 93       	push	r18
    2aea:	3f 93       	push	r19
    2aec:	4f 93       	push	r20
    2aee:	5f 93       	push	r21
    2af0:	6f 93       	push	r22
    2af2:	7f 93       	push	r23
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
    2b00:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tcf0_ccc_callback>
    2b04:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tcf0_ccc_callback+0x1>
    2b08:	30 97       	sbiw	r30, 0x00	; 0
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <__vector_112+0x42>
    2b0c:	19 95       	eicall
    2b0e:	ff 91       	pop	r31
    2b10:	ef 91       	pop	r30
    2b12:	bf 91       	pop	r27
    2b14:	af 91       	pop	r26
    2b16:	9f 91       	pop	r25
    2b18:	8f 91       	pop	r24
    2b1a:	7f 91       	pop	r23
    2b1c:	6f 91       	pop	r22
    2b1e:	5f 91       	pop	r21
    2b20:	4f 91       	pop	r20
    2b22:	3f 91       	pop	r19
    2b24:	2f 91       	pop	r18
    2b26:	0f 90       	pop	r0
    2b28:	0b be       	out	0x3b, r0	; 59
    2b2a:	0f 90       	pop	r0
    2b2c:	09 be       	out	0x39, r0	; 57
    2b2e:	0f 90       	pop	r0
    2b30:	08 be       	out	0x38, r0	; 56
    2b32:	0f 90       	pop	r0
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	0f 90       	pop	r0
    2b38:	1f 90       	pop	r1
    2b3a:	18 95       	reti

00002b3c <__vector_113>:
    2b3c:	1f 92       	push	r1
    2b3e:	0f 92       	push	r0
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	0f 92       	push	r0
    2b44:	11 24       	eor	r1, r1
    2b46:	08 b6       	in	r0, 0x38	; 56
    2b48:	0f 92       	push	r0
    2b4a:	18 be       	out	0x38, r1	; 56
    2b4c:	09 b6       	in	r0, 0x39	; 57
    2b4e:	0f 92       	push	r0
    2b50:	19 be       	out	0x39, r1	; 57
    2b52:	0b b6       	in	r0, 0x3b	; 59
    2b54:	0f 92       	push	r0
    2b56:	1b be       	out	0x3b, r1	; 59
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
    2b70:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tcf0_ccd_callback>
    2b74:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tcf0_ccd_callback+0x1>
    2b78:	30 97       	sbiw	r30, 0x00	; 0
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <__vector_113+0x42>
    2b7c:	19 95       	eicall
    2b7e:	ff 91       	pop	r31
    2b80:	ef 91       	pop	r30
    2b82:	bf 91       	pop	r27
    2b84:	af 91       	pop	r26
    2b86:	9f 91       	pop	r25
    2b88:	8f 91       	pop	r24
    2b8a:	7f 91       	pop	r23
    2b8c:	6f 91       	pop	r22
    2b8e:	5f 91       	pop	r21
    2b90:	4f 91       	pop	r20
    2b92:	3f 91       	pop	r19
    2b94:	2f 91       	pop	r18
    2b96:	0f 90       	pop	r0
    2b98:	0b be       	out	0x3b, r0	; 59
    2b9a:	0f 90       	pop	r0
    2b9c:	09 be       	out	0x39, r0	; 57
    2b9e:	0f 90       	pop	r0
    2ba0:	08 be       	out	0x38, r0	; 56
    2ba2:	0f 90       	pop	r0
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	0f 90       	pop	r0
    2ba8:	1f 90       	pop	r1
    2baa:	18 95       	reti

00002bac <__vector_114>:
    2bac:	1f 92       	push	r1
    2bae:	0f 92       	push	r0
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	0f 92       	push	r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	08 b6       	in	r0, 0x38	; 56
    2bb8:	0f 92       	push	r0
    2bba:	18 be       	out	0x38, r1	; 56
    2bbc:	09 b6       	in	r0, 0x39	; 57
    2bbe:	0f 92       	push	r0
    2bc0:	19 be       	out	0x39, r1	; 57
    2bc2:	0b b6       	in	r0, 0x3b	; 59
    2bc4:	0f 92       	push	r0
    2bc6:	1b be       	out	0x3b, r1	; 59
    2bc8:	2f 93       	push	r18
    2bca:	3f 93       	push	r19
    2bcc:	4f 93       	push	r20
    2bce:	5f 93       	push	r21
    2bd0:	6f 93       	push	r22
    2bd2:	7f 93       	push	r23
    2bd4:	8f 93       	push	r24
    2bd6:	9f 93       	push	r25
    2bd8:	af 93       	push	r26
    2bda:	bf 93       	push	r27
    2bdc:	ef 93       	push	r30
    2bde:	ff 93       	push	r31
    2be0:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tcf1_ovf_callback>
    2be4:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tcf1_ovf_callback+0x1>
    2be8:	30 97       	sbiw	r30, 0x00	; 0
    2bea:	09 f0       	breq	.+2      	; 0x2bee <__vector_114+0x42>
    2bec:	19 95       	eicall
    2bee:	ff 91       	pop	r31
    2bf0:	ef 91       	pop	r30
    2bf2:	bf 91       	pop	r27
    2bf4:	af 91       	pop	r26
    2bf6:	9f 91       	pop	r25
    2bf8:	8f 91       	pop	r24
    2bfa:	7f 91       	pop	r23
    2bfc:	6f 91       	pop	r22
    2bfe:	5f 91       	pop	r21
    2c00:	4f 91       	pop	r20
    2c02:	3f 91       	pop	r19
    2c04:	2f 91       	pop	r18
    2c06:	0f 90       	pop	r0
    2c08:	0b be       	out	0x3b, r0	; 59
    2c0a:	0f 90       	pop	r0
    2c0c:	09 be       	out	0x39, r0	; 57
    2c0e:	0f 90       	pop	r0
    2c10:	08 be       	out	0x38, r0	; 56
    2c12:	0f 90       	pop	r0
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	0f 90       	pop	r0
    2c18:	1f 90       	pop	r1
    2c1a:	18 95       	reti

00002c1c <__vector_115>:
    2c1c:	1f 92       	push	r1
    2c1e:	0f 92       	push	r0
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	0f 92       	push	r0
    2c24:	11 24       	eor	r1, r1
    2c26:	08 b6       	in	r0, 0x38	; 56
    2c28:	0f 92       	push	r0
    2c2a:	18 be       	out	0x38, r1	; 56
    2c2c:	09 b6       	in	r0, 0x39	; 57
    2c2e:	0f 92       	push	r0
    2c30:	19 be       	out	0x39, r1	; 57
    2c32:	0b b6       	in	r0, 0x3b	; 59
    2c34:	0f 92       	push	r0
    2c36:	1b be       	out	0x3b, r1	; 59
    2c38:	2f 93       	push	r18
    2c3a:	3f 93       	push	r19
    2c3c:	4f 93       	push	r20
    2c3e:	5f 93       	push	r21
    2c40:	6f 93       	push	r22
    2c42:	7f 93       	push	r23
    2c44:	8f 93       	push	r24
    2c46:	9f 93       	push	r25
    2c48:	af 93       	push	r26
    2c4a:	bf 93       	push	r27
    2c4c:	ef 93       	push	r30
    2c4e:	ff 93       	push	r31
    2c50:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <tc_tcf1_err_callback>
    2c54:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <tc_tcf1_err_callback+0x1>
    2c58:	30 97       	sbiw	r30, 0x00	; 0
    2c5a:	09 f0       	breq	.+2      	; 0x2c5e <__vector_115+0x42>
    2c5c:	19 95       	eicall
    2c5e:	ff 91       	pop	r31
    2c60:	ef 91       	pop	r30
    2c62:	bf 91       	pop	r27
    2c64:	af 91       	pop	r26
    2c66:	9f 91       	pop	r25
    2c68:	8f 91       	pop	r24
    2c6a:	7f 91       	pop	r23
    2c6c:	6f 91       	pop	r22
    2c6e:	5f 91       	pop	r21
    2c70:	4f 91       	pop	r20
    2c72:	3f 91       	pop	r19
    2c74:	2f 91       	pop	r18
    2c76:	0f 90       	pop	r0
    2c78:	0b be       	out	0x3b, r0	; 59
    2c7a:	0f 90       	pop	r0
    2c7c:	09 be       	out	0x39, r0	; 57
    2c7e:	0f 90       	pop	r0
    2c80:	08 be       	out	0x38, r0	; 56
    2c82:	0f 90       	pop	r0
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	0f 90       	pop	r0
    2c88:	1f 90       	pop	r1
    2c8a:	18 95       	reti

00002c8c <__vector_116>:
    2c8c:	1f 92       	push	r1
    2c8e:	0f 92       	push	r0
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	0f 92       	push	r0
    2c94:	11 24       	eor	r1, r1
    2c96:	08 b6       	in	r0, 0x38	; 56
    2c98:	0f 92       	push	r0
    2c9a:	18 be       	out	0x38, r1	; 56
    2c9c:	09 b6       	in	r0, 0x39	; 57
    2c9e:	0f 92       	push	r0
    2ca0:	19 be       	out	0x39, r1	; 57
    2ca2:	0b b6       	in	r0, 0x3b	; 59
    2ca4:	0f 92       	push	r0
    2ca6:	1b be       	out	0x3b, r1	; 59
    2ca8:	2f 93       	push	r18
    2caa:	3f 93       	push	r19
    2cac:	4f 93       	push	r20
    2cae:	5f 93       	push	r21
    2cb0:	6f 93       	push	r22
    2cb2:	7f 93       	push	r23
    2cb4:	8f 93       	push	r24
    2cb6:	9f 93       	push	r25
    2cb8:	af 93       	push	r26
    2cba:	bf 93       	push	r27
    2cbc:	ef 93       	push	r30
    2cbe:	ff 93       	push	r31
    2cc0:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <tc_tcf1_cca_callback>
    2cc4:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <tc_tcf1_cca_callback+0x1>
    2cc8:	30 97       	sbiw	r30, 0x00	; 0
    2cca:	09 f0       	breq	.+2      	; 0x2cce <__vector_116+0x42>
    2ccc:	19 95       	eicall
    2cce:	ff 91       	pop	r31
    2cd0:	ef 91       	pop	r30
    2cd2:	bf 91       	pop	r27
    2cd4:	af 91       	pop	r26
    2cd6:	9f 91       	pop	r25
    2cd8:	8f 91       	pop	r24
    2cda:	7f 91       	pop	r23
    2cdc:	6f 91       	pop	r22
    2cde:	5f 91       	pop	r21
    2ce0:	4f 91       	pop	r20
    2ce2:	3f 91       	pop	r19
    2ce4:	2f 91       	pop	r18
    2ce6:	0f 90       	pop	r0
    2ce8:	0b be       	out	0x3b, r0	; 59
    2cea:	0f 90       	pop	r0
    2cec:	09 be       	out	0x39, r0	; 57
    2cee:	0f 90       	pop	r0
    2cf0:	08 be       	out	0x38, r0	; 56
    2cf2:	0f 90       	pop	r0
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	0f 90       	pop	r0
    2cf8:	1f 90       	pop	r1
    2cfa:	18 95       	reti

00002cfc <__vector_117>:
    2cfc:	1f 92       	push	r1
    2cfe:	0f 92       	push	r0
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	0f 92       	push	r0
    2d04:	11 24       	eor	r1, r1
    2d06:	08 b6       	in	r0, 0x38	; 56
    2d08:	0f 92       	push	r0
    2d0a:	18 be       	out	0x38, r1	; 56
    2d0c:	09 b6       	in	r0, 0x39	; 57
    2d0e:	0f 92       	push	r0
    2d10:	19 be       	out	0x39, r1	; 57
    2d12:	0b b6       	in	r0, 0x3b	; 59
    2d14:	0f 92       	push	r0
    2d16:	1b be       	out	0x3b, r1	; 59
    2d18:	2f 93       	push	r18
    2d1a:	3f 93       	push	r19
    2d1c:	4f 93       	push	r20
    2d1e:	5f 93       	push	r21
    2d20:	6f 93       	push	r22
    2d22:	7f 93       	push	r23
    2d24:	8f 93       	push	r24
    2d26:	9f 93       	push	r25
    2d28:	af 93       	push	r26
    2d2a:	bf 93       	push	r27
    2d2c:	ef 93       	push	r30
    2d2e:	ff 93       	push	r31
    2d30:	e0 91 89 20 	lds	r30, 0x2089	; 0x802089 <tc_tcf1_ccb_callback>
    2d34:	f0 91 8a 20 	lds	r31, 0x208A	; 0x80208a <tc_tcf1_ccb_callback+0x1>
    2d38:	30 97       	sbiw	r30, 0x00	; 0
    2d3a:	09 f0       	breq	.+2      	; 0x2d3e <__vector_117+0x42>
    2d3c:	19 95       	eicall
    2d3e:	ff 91       	pop	r31
    2d40:	ef 91       	pop	r30
    2d42:	bf 91       	pop	r27
    2d44:	af 91       	pop	r26
    2d46:	9f 91       	pop	r25
    2d48:	8f 91       	pop	r24
    2d4a:	7f 91       	pop	r23
    2d4c:	6f 91       	pop	r22
    2d4e:	5f 91       	pop	r21
    2d50:	4f 91       	pop	r20
    2d52:	3f 91       	pop	r19
    2d54:	2f 91       	pop	r18
    2d56:	0f 90       	pop	r0
    2d58:	0b be       	out	0x3b, r0	; 59
    2d5a:	0f 90       	pop	r0
    2d5c:	09 be       	out	0x39, r0	; 57
    2d5e:	0f 90       	pop	r0
    2d60:	08 be       	out	0x38, r0	; 56
    2d62:	0f 90       	pop	r0
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	0f 90       	pop	r0
    2d68:	1f 90       	pop	r1
    2d6a:	18 95       	reti

00002d6c <tc_enable>:
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	1f 92       	push	r1
    2d74:	1f 92       	push	r1
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	2f b7       	in	r18, 0x3f	; 63
    2d7c:	2a 83       	std	Y+2, r18	; 0x02
    2d7e:	f8 94       	cli
    2d80:	1a 81       	ldd	r17, Y+2	; 0x02
    2d82:	28 2f       	mov	r18, r24
    2d84:	39 2f       	mov	r19, r25
    2d86:	21 15       	cp	r18, r1
    2d88:	88 e0       	ldi	r24, 0x08	; 8
    2d8a:	38 07       	cpc	r19, r24
    2d8c:	49 f4       	brne	.+18     	; 0x2da0 <tc_enable+0x34>
    2d8e:	61 e0       	ldi	r22, 0x01	; 1
    2d90:	83 e0       	ldi	r24, 0x03	; 3
    2d92:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2d96:	64 e0       	ldi	r22, 0x04	; 4
    2d98:	83 e0       	ldi	r24, 0x03	; 3
    2d9a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2d9e:	5c c0       	rjmp	.+184    	; 0x2e58 <tc_enable+0xec>
    2da0:	20 34       	cpi	r18, 0x40	; 64
    2da2:	88 e0       	ldi	r24, 0x08	; 8
    2da4:	38 07       	cpc	r19, r24
    2da6:	49 f4       	brne	.+18     	; 0x2dba <tc_enable+0x4e>
    2da8:	62 e0       	ldi	r22, 0x02	; 2
    2daa:	83 e0       	ldi	r24, 0x03	; 3
    2dac:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2db0:	64 e0       	ldi	r22, 0x04	; 4
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2db8:	4f c0       	rjmp	.+158    	; 0x2e58 <tc_enable+0xec>
    2dba:	21 15       	cp	r18, r1
    2dbc:	89 e0       	ldi	r24, 0x09	; 9
    2dbe:	38 07       	cpc	r19, r24
    2dc0:	49 f4       	brne	.+18     	; 0x2dd4 <tc_enable+0x68>
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	84 e0       	ldi	r24, 0x04	; 4
    2dc6:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2dca:	64 e0       	ldi	r22, 0x04	; 4
    2dcc:	84 e0       	ldi	r24, 0x04	; 4
    2dce:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2dd2:	42 c0       	rjmp	.+132    	; 0x2e58 <tc_enable+0xec>
    2dd4:	20 34       	cpi	r18, 0x40	; 64
    2dd6:	89 e0       	ldi	r24, 0x09	; 9
    2dd8:	38 07       	cpc	r19, r24
    2dda:	49 f4       	brne	.+18     	; 0x2dee <tc_enable+0x82>
    2ddc:	62 e0       	ldi	r22, 0x02	; 2
    2dde:	84 e0       	ldi	r24, 0x04	; 4
    2de0:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2de4:	64 e0       	ldi	r22, 0x04	; 4
    2de6:	84 e0       	ldi	r24, 0x04	; 4
    2de8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2dec:	35 c0       	rjmp	.+106    	; 0x2e58 <tc_enable+0xec>
    2dee:	21 15       	cp	r18, r1
    2df0:	8a e0       	ldi	r24, 0x0A	; 10
    2df2:	38 07       	cpc	r19, r24
    2df4:	49 f4       	brne	.+18     	; 0x2e08 <tc_enable+0x9c>
    2df6:	61 e0       	ldi	r22, 0x01	; 1
    2df8:	85 e0       	ldi	r24, 0x05	; 5
    2dfa:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2dfe:	64 e0       	ldi	r22, 0x04	; 4
    2e00:	85 e0       	ldi	r24, 0x05	; 5
    2e02:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2e06:	28 c0       	rjmp	.+80     	; 0x2e58 <tc_enable+0xec>
    2e08:	20 34       	cpi	r18, 0x40	; 64
    2e0a:	8a e0       	ldi	r24, 0x0A	; 10
    2e0c:	38 07       	cpc	r19, r24
    2e0e:	49 f4       	brne	.+18     	; 0x2e22 <tc_enable+0xb6>
    2e10:	62 e0       	ldi	r22, 0x02	; 2
    2e12:	85 e0       	ldi	r24, 0x05	; 5
    2e14:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2e18:	64 e0       	ldi	r22, 0x04	; 4
    2e1a:	85 e0       	ldi	r24, 0x05	; 5
    2e1c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2e20:	1b c0       	rjmp	.+54     	; 0x2e58 <tc_enable+0xec>
    2e22:	21 15       	cp	r18, r1
    2e24:	8b e0       	ldi	r24, 0x0B	; 11
    2e26:	38 07       	cpc	r19, r24
    2e28:	49 f4       	brne	.+18     	; 0x2e3c <tc_enable+0xd0>
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	86 e0       	ldi	r24, 0x06	; 6
    2e2e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2e32:	64 e0       	ldi	r22, 0x04	; 4
    2e34:	86 e0       	ldi	r24, 0x06	; 6
    2e36:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2e3a:	0e c0       	rjmp	.+28     	; 0x2e58 <tc_enable+0xec>
    2e3c:	20 34       	cpi	r18, 0x40	; 64
    2e3e:	3b 40       	sbci	r19, 0x0B	; 11
    2e40:	49 f4       	brne	.+18     	; 0x2e54 <tc_enable+0xe8>
    2e42:	62 e0       	ldi	r22, 0x02	; 2
    2e44:	86 e0       	ldi	r24, 0x06	; 6
    2e46:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2e4a:	64 e0       	ldi	r22, 0x04	; 4
    2e4c:	86 e0       	ldi	r24, 0x06	; 6
    2e4e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <tc_enable+0xec>
    2e54:	1f bf       	out	0x3f, r17	; 63
    2e56:	10 c0       	rjmp	.+32     	; 0x2e78 <tc_enable+0x10c>
    2e58:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <sleepmgr_locks+0x1>
    2e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <tc_enable+0xf6>
    2e60:	ff cf       	rjmp	.-2      	; 0x2e60 <tc_enable+0xf4>
    2e62:	8f b7       	in	r24, 0x3f	; 63
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	f8 94       	cli
    2e68:	99 81       	ldd	r25, Y+1	; 0x01
    2e6a:	ef ef       	ldi	r30, 0xFF	; 255
    2e6c:	f0 e2       	ldi	r31, 0x20	; 32
    2e6e:	81 81       	ldd	r24, Z+1	; 0x01
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	81 83       	std	Z+1, r24	; 0x01
    2e74:	9f bf       	out	0x3f, r25	; 63
    2e76:	1f bf       	out	0x3f, r17	; 63
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	08 95       	ret

00002e84 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2e84:	81 15       	cp	r24, r1
    2e86:	28 e0       	ldi	r18, 0x08	; 8
    2e88:	92 07       	cpc	r25, r18
    2e8a:	29 f4       	brne	.+10     	; 0x2e96 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    2e8c:	60 93 d7 20 	sts	0x20D7, r22	; 0x8020d7 <tc_tcc0_ovf_callback>
    2e90:	70 93 d8 20 	sts	0x20D8, r23	; 0x8020d8 <tc_tcc0_ovf_callback+0x1>
    2e94:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    2e96:	80 34       	cpi	r24, 0x40	; 64
    2e98:	28 e0       	ldi	r18, 0x08	; 8
    2e9a:	92 07       	cpc	r25, r18
    2e9c:	29 f4       	brne	.+10     	; 0x2ea8 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    2e9e:	60 93 cb 20 	sts	0x20CB, r22	; 0x8020cb <tc_tcc1_ovf_callback>
    2ea2:	70 93 cc 20 	sts	0x20CC, r23	; 0x8020cc <tc_tcc1_ovf_callback+0x1>
    2ea6:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2ea8:	81 15       	cp	r24, r1
    2eaa:	29 e0       	ldi	r18, 0x09	; 9
    2eac:	92 07       	cpc	r25, r18
    2eae:	29 f4       	brne	.+10     	; 0x2eba <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    2eb0:	60 93 c3 20 	sts	0x20C3, r22	; 0x8020c3 <tc_tcd0_ovf_callback>
    2eb4:	70 93 c4 20 	sts	0x20C4, r23	; 0x8020c4 <tc_tcd0_ovf_callback+0x1>
    2eb8:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2eba:	80 34       	cpi	r24, 0x40	; 64
    2ebc:	29 e0       	ldi	r18, 0x09	; 9
    2ebe:	92 07       	cpc	r25, r18
    2ec0:	29 f4       	brne	.+10     	; 0x2ecc <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    2ec2:	60 93 b7 20 	sts	0x20B7, r22	; 0x8020b7 <tc_tcd1_ovf_callback>
    2ec6:	70 93 b8 20 	sts	0x20B8, r23	; 0x8020b8 <tc_tcd1_ovf_callback+0x1>
    2eca:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2ecc:	81 15       	cp	r24, r1
    2ece:	2a e0       	ldi	r18, 0x0A	; 10
    2ed0:	92 07       	cpc	r25, r18
    2ed2:	29 f4       	brne	.+10     	; 0x2ede <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    2ed4:	60 93 af 20 	sts	0x20AF, r22	; 0x8020af <tc_tce0_ovf_callback>
    2ed8:	70 93 b0 20 	sts	0x20B0, r23	; 0x8020b0 <tc_tce0_ovf_callback+0x1>
    2edc:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2ede:	80 34       	cpi	r24, 0x40	; 64
    2ee0:	2a e0       	ldi	r18, 0x0A	; 10
    2ee2:	92 07       	cpc	r25, r18
    2ee4:	29 f4       	brne	.+10     	; 0x2ef0 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    2ee6:	60 93 a3 20 	sts	0x20A3, r22	; 0x8020a3 <tc_tce1_ovf_callback>
    2eea:	70 93 a4 20 	sts	0x20A4, r23	; 0x8020a4 <tc_tce1_ovf_callback+0x1>
    2eee:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2ef0:	81 15       	cp	r24, r1
    2ef2:	2b e0       	ldi	r18, 0x0B	; 11
    2ef4:	92 07       	cpc	r25, r18
    2ef6:	29 f4       	brne	.+10     	; 0x2f02 <tc_set_overflow_interrupt_callback+0x7e>
		tc_tcf0_ovf_callback = callback;
    2ef8:	60 93 9b 20 	sts	0x209B, r22	; 0x80209b <tc_tcf0_ovf_callback>
    2efc:	70 93 9c 20 	sts	0x209C, r23	; 0x80209c <tc_tcf0_ovf_callback+0x1>
    2f00:	08 95       	ret
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    2f02:	80 34       	cpi	r24, 0x40	; 64
    2f04:	9b 40       	sbci	r25, 0x0B	; 11
    2f06:	21 f4       	brne	.+8      	; 0x2f10 <tc_set_overflow_interrupt_callback+0x8c>
		tc_tcf1_ovf_callback = callback;
    2f08:	60 93 8f 20 	sts	0x208F, r22	; 0x80208f <tc_tcf1_ovf_callback>
    2f0c:	70 93 90 20 	sts	0x2090, r23	; 0x802090 <tc_tcf1_ovf_callback+0x1>
    2f10:	08 95       	ret

00002f12 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2f12:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2f16:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2f18:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2f1a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2f1e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2f20:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2f24:	08 95       	ret

00002f26 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2f26:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2f28:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2f2a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2f2c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2f2e:	60 83       	st	Z, r22
	ret                             // Return to caller
    2f30:	08 95       	ret

00002f32 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2f3c:	c6 2f       	mov	r28, r22
    2f3e:	d0 e0       	ldi	r29, 0x00	; 0
    2f40:	de 01       	movw	r26, r28
    2f42:	02 2e       	mov	r0, r18
    2f44:	02 c0       	rjmp	.+4      	; 0x2f4a <ioport_configure_port_pin+0x18>
    2f46:	b5 95       	asr	r27
    2f48:	a7 95       	ror	r26
    2f4a:	0a 94       	dec	r0
    2f4c:	e2 f7       	brpl	.-8      	; 0x2f46 <ioport_configure_port_pin+0x14>
    2f4e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2f50:	50 8b       	std	Z+16, r21	; 0x10
    2f52:	2f 5f       	subi	r18, 0xFF	; 255
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2f58:	28 30       	cpi	r18, 0x08	; 8
    2f5a:	31 05       	cpc	r19, r1
    2f5c:	89 f7       	brne	.-30     	; 0x2f40 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2f5e:	40 ff       	sbrs	r20, 0
    2f60:	0a c0       	rjmp	.+20     	; 0x2f76 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2f62:	41 ff       	sbrs	r20, 1
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2f66:	fc 01       	movw	r30, r24
    2f68:	65 83       	std	Z+5, r22	; 0x05
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2f70:	fc 01       	movw	r30, r24
    2f72:	61 83       	std	Z+1, r22	; 0x01
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2f76:	fc 01       	movw	r30, r24
    2f78:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	08 95       	ret

00002f80 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2f80:	43 e0       	ldi	r20, 0x03	; 3
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	68 e0       	ldi	r22, 0x08	; 8
    2f86:	80 ec       	ldi	r24, 0xC0	; 192
    2f88:	97 e0       	ldi	r25, 0x07	; 7
    2f8a:	d3 df       	rcall	.-90     	; 0x2f32 <ioport_configure_port_pin>
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	58 e1       	ldi	r21, 0x18	; 24
    2f90:	64 e0       	ldi	r22, 0x04	; 4
    2f92:	80 ec       	ldi	r24, 0xC0	; 192
    2f94:	97 e0       	ldi	r25, 0x07	; 7
    2f96:	cd cf       	rjmp	.-102    	; 0x2f32 <ioport_configure_port_pin>
    2f98:	08 95       	ret

00002f9a <__portable_avr_delay_cycles>:
	tc_write_clock_source(settings.TC, TC_CLKSEL_DIV1024_gc);//sets the prescaler which divides the main clock of 32MG by 1024 which means our clock will count at 31250Hz
}
void TC_period_shift(TCdef settings)
{
	tc_write_period(settings.TC, settings.period);//sets the number that the timer counter counts to before the interupt is triggered
}
    2f9a:	04 c0       	rjmp	.+8      	; 0x2fa4 <__portable_avr_delay_cycles+0xa>
    2f9c:	61 50       	subi	r22, 0x01	; 1
    2f9e:	71 09       	sbc	r23, r1
    2fa0:	81 09       	sbc	r24, r1
    2fa2:	91 09       	sbc	r25, r1
    2fa4:	61 15       	cp	r22, r1
    2fa6:	71 05       	cpc	r23, r1
    2fa8:	81 05       	cpc	r24, r1
    2faa:	91 05       	cpc	r25, r1
    2fac:	b9 f7       	brne	.-18     	; 0x2f9c <__portable_avr_delay_cycles+0x2>
    2fae:	08 95       	ret

00002fb0 <example_handle>:
    2fb0:	e0 ec       	ldi	r30, 0xC0	; 192
    2fb2:	f7 e0       	ldi	r31, 0x07	; 7
    2fb4:	94 81       	ldd	r25, Z+4	; 0x04
    2fb6:	88 e0       	ldi	r24, 0x08	; 8
    2fb8:	89 27       	eor	r24, r25
    2fba:	84 83       	std	Z+4, r24	; 0x04
    2fbc:	08 95       	ret

00002fbe <TCInit>:
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	28 97       	sbiw	r28, 0x08	; 8
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	29 83       	std	Y+1, r18	; 0x01
    2fd2:	3a 83       	std	Y+2, r19	; 0x02
    2fd4:	4b 83       	std	Y+3, r20	; 0x03
    2fd6:	5c 83       	std	Y+4, r21	; 0x04
    2fd8:	6d 83       	std	Y+5, r22	; 0x05
    2fda:	7e 83       	std	Y+6, r23	; 0x06
    2fdc:	8f 83       	std	Y+7, r24	; 0x07
    2fde:	98 87       	std	Y+8, r25	; 0x08
    2fe0:	0b 81       	ldd	r16, Y+3	; 0x03
    2fe2:	1c 81       	ldd	r17, Y+4	; 0x04
    2fe4:	87 e0       	ldi	r24, 0x07	; 7
    2fe6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2fea:	c8 01       	movw	r24, r16
    2fec:	bf de       	rcall	.-642    	; 0x2d6c <tc_enable>
    2fee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff0:	78 85       	ldd	r23, Y+8	; 0x08
    2ff2:	c8 01       	movw	r24, r16
    2ff4:	47 df       	rcall	.-370    	; 0x2e84 <tc_set_overflow_interrupt_callback>
    2ff6:	f8 01       	movw	r30, r16
    2ff8:	81 81       	ldd	r24, Z+1	; 0x01
    2ffa:	88 7f       	andi	r24, 0xF8	; 248
    2ffc:	81 83       	std	Z+1, r24	; 0x01
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	86 a3       	std	Z+38, r24	; 0x26
    3004:	97 a3       	std	Z+39, r25	; 0x27
    3006:	86 81       	ldd	r24, Z+6	; 0x06
    3008:	8c 7f       	andi	r24, 0xFC	; 252
    300a:	86 83       	std	Z+6, r24	; 0x06
    300c:	86 81       	ldd	r24, Z+6	; 0x06
    300e:	81 60       	ori	r24, 0x01	; 1
    3010:	86 83       	std	Z+6, r24	; 0x06
    3012:	78 94       	sei
    3014:	80 81       	ld	r24, Z
    3016:	80 7f       	andi	r24, 0xF0	; 240
    3018:	87 60       	ori	r24, 0x07	; 7
    301a:	80 83       	st	Z, r24
    301c:	28 96       	adiw	r28, 0x08	; 8
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	1f 91       	pop	r17
    3028:	0f 91       	pop	r16
    302a:	08 95       	ret

0000302c <exampleTC>:
void exampleTC(void)//testing the timer counter code by blinking led on microchip at 1Hz
{
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	28 97       	sbiw	r28, 0x08	; 8
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	de bf       	out	0x3e, r29	; 62
	PORTQ.DIR|=0x08;
    303a:	e0 ec       	ldi	r30, 0xC0	; 192
    303c:	f7 e0       	ldi	r31, 0x07	; 7
    303e:	80 81       	ld	r24, Z
    3040:	88 60       	ori	r24, 0x08	; 8
    3042:	80 83       	st	Z, r24
	TCdef examplestruct={
    3044:	88 e0       	ldi	r24, 0x08	; 8
    3046:	ef e0       	ldi	r30, 0x0F	; 15
    3048:	f0 e2       	ldi	r31, 0x20	; 32
    304a:	de 01       	movw	r26, r28
    304c:	11 96       	adiw	r26, 0x01	; 1
    304e:	01 90       	ld	r0, Z+
    3050:	0d 92       	st	X+, r0
    3052:	8a 95       	dec	r24
    3054:	e1 f7       	brne	.-8      	; 0x304e <exampleTC+0x22>
		.port=&PORTE,
		.TC=&TCE0,
		.period=31250,
		.FunHandle=example_handle
	};
	TCInit(examplestruct);
    3056:	29 81       	ldd	r18, Y+1	; 0x01
    3058:	3a 81       	ldd	r19, Y+2	; 0x02
    305a:	4b 81       	ldd	r20, Y+3	; 0x03
    305c:	5c 81       	ldd	r21, Y+4	; 0x04
    305e:	6d 81       	ldd	r22, Y+5	; 0x05
    3060:	7e 81       	ldd	r23, Y+6	; 0x06
    3062:	8f 81       	ldd	r24, Y+7	; 0x07
    3064:	98 85       	ldd	r25, Y+8	; 0x08
    3066:	ab df       	rcall	.-170    	; 0x2fbe <TCInit>
	delay_s(5);
    3068:	6c ea       	ldi	r22, 0xAC	; 172
    306a:	76 ee       	ldi	r23, 0xE6	; 230
    306c:	86 e9       	ldi	r24, 0x96	; 150
    306e:	91 e0       	ldi	r25, 0x01	; 1
    3070:	94 df       	rcall	.-216    	; 0x2f9a <__portable_avr_delay_cycles>
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    3072:	89 e0       	ldi	r24, 0x09	; 9
    3074:	9d e3       	ldi	r25, 0x3D	; 61
    3076:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
    307a:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
	examplestruct.period=31250/2;
	TC_period_shift(examplestruct);
}
    307e:	28 96       	adiw	r28, 0x08	; 8
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	08 95       	ret

0000308a <usart_serial_getchar>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	eb 01       	movw	r28, r22
    3090:	0e 94 e5 03 	call	0x7ca	; 0x7ca <usart_getchar>
    3094:	88 83       	st	Y, r24
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	08 95       	ret

0000309c <usart_serial_putchar>:
    309c:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <usart_putchar>
    30a0:	08 95       	ret

000030a2 <uart_terminal_init>:

void uart_terminal_init()
{
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	27 97       	sbiw	r28, 0x07	; 7
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    30b0:	60 e1       	ldi	r22, 0x10	; 16
    30b2:	85 e0       	ldi	r24, 0x05	; 5
    30b4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    30b8:	e0 e8       	ldi	r30, 0x80	; 128
    30ba:	f6 e0       	ldi	r31, 0x06	; 6
    30bc:	80 81       	ld	r24, Z
    30be:	88 60       	ori	r24, 0x08	; 8
    30c0:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    30c2:	80 ea       	ldi	r24, 0xA0	; 160
    30c4:	9a e0       	ldi	r25, 0x0A	; 10
    30c6:	80 93 fd 20 	sts	0x20FD, r24	; 0x8020fd <stdio_base>
    30ca:	90 93 fe 20 	sts	0x20FE, r25	; 0x8020fe <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    30ce:	8e e4       	ldi	r24, 0x4E	; 78
    30d0:	98 e1       	ldi	r25, 0x18	; 24
    30d2:	80 93 fb 20 	sts	0x20FB, r24	; 0x8020fb <ptr_put>
    30d6:	90 93 fc 20 	sts	0x20FC, r25	; 0x8020fc <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    30da:	85 e4       	ldi	r24, 0x45	; 69
    30dc:	98 e1       	ldi	r25, 0x18	; 24
    30de:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <ptr_get>
    30e2:	90 93 da 20 	sts	0x20DA, r25	; 0x8020da <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    30e6:	e8 e0       	ldi	r30, 0x08	; 8
    30e8:	f0 e2       	ldi	r31, 0x20	; 32
    30ea:	84 81       	ldd	r24, Z+4	; 0x04
    30ec:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    30ee:	85 81       	ldd	r24, Z+5	; 0x05
    30f0:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    30f2:	86 81       	ldd	r24, Z+6	; 0x06
    30f4:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	a2 81       	ldd	r26, Z+2	; 0x02
    30fc:	b3 81       	ldd	r27, Z+3	; 0x03
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	ab 83       	std	Y+3, r26	; 0x03
    3104:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    3106:	60 e1       	ldi	r22, 0x10	; 16
    3108:	85 e0       	ldi	r24, 0x05	; 5
    310a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    310e:	be 01       	movw	r22, r28
    3110:	6f 5f       	subi	r22, 0xFF	; 255
    3112:	7f 4f       	sbci	r23, 0xFF	; 255
    3114:	80 ea       	ldi	r24, 0xA0	; 160
    3116:	9a e0       	ldi	r25, 0x0A	; 10
    3118:	0e 94 fe 04 	call	0x9fc	; 0x9fc <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    311c:	63 ed       	ldi	r22, 0xD3	; 211
    311e:	71 e0       	ldi	r23, 0x01	; 1
    3120:	8e e8       	ldi	r24, 0x8E	; 142
    3122:	9c e0       	ldi	r25, 0x0C	; 12
    3124:	bf d7       	rcall	.+3966   	; 0x40a4 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat Valkyrie Initializing...\n");
    3126:	80 e4       	ldi	r24, 0x40	; 64
    3128:	90 e2       	ldi	r25, 0x20	; 32
    312a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <puts>
		printf("UART Initialized\n");
    312e:	85 e6       	ldi	r24, 0x65	; 101
    3130:	90 e2       	ldi	r25, 0x20	; 32
    3132:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <puts>
	}
    3136:	27 96       	adiw	r28, 0x07	; 7
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <main>:


#include "def.h"
int main (void)
{
	board_init();
    3142:	1e df       	rcall	.-452    	; 0x2f80 <board_init>
	sysclk_init();
    3144:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <sysclk_init>
	uart_terminal_init();
    3148:	ac df       	rcall	.-168    	; 0x30a2 <uart_terminal_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    314a:	e0 ea       	ldi	r30, 0xA0	; 160
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	87 e0       	ldi	r24, 0x07	; 7
    3150:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	80 68       	ori	r24, 0x80	; 128
    3156:	82 83       	std	Z+2, r24	; 0x02
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	cpu_irq_enable();
    3158:	78 94       	sei
	
	printf("u Gay");
    315a:	86 e7       	ldi	r24, 0x76	; 118
    315c:	90 e2       	ldi	r25, 0x20	; 32
    315e:	9f 93       	push	r25
    3160:	8f 93       	push	r24
    3162:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <printf>
	
	spi_init_pins();
    3166:	0e 94 5e 07 	call	0xebc	; 0xebc <spi_init_pins>
	thermistor_init();
    316a:	0e 94 ed 06 	call	0xdda	; 0xdda <thermistor_init>
	exampleTC();
    316e:	5e df       	rcall	.-324    	; 0x302c <exampleTC>
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    3174:	c0 ec       	ldi	r28, 0xC0	; 192
    3176:	d7 e0       	ldi	r29, 0x07	; 7
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3178:	18 e0       	ldi	r17, 0x08	; 8

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    317a:	88 85       	ldd	r24, Y+8	; 0x08
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    317c:	82 fd       	sbrc	r24, 2
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <main+0x42>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3180:	1e 83       	std	Y+6, r17	; 0x06
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <main+0x44>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3184:	1d 83       	std	Y+5, r17	; 0x05
		} else {
			/* No, so turn LED off. */
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		}
		
		long pressure = getPressure();
    3186:	0e 94 7b 07 	call	0xef6	; 0xef6 <getPressure>
		int tempura = getTemperature();
    318a:	0e 94 f7 06 	call	0xdee	; 0xdee <getTemperature>
	}
    318e:	f5 cf       	rjmp	.-22     	; 0x317a <main+0x38>

00003190 <__subsf3>:
    3190:	50 58       	subi	r21, 0x80	; 128

00003192 <__addsf3>:
    3192:	bb 27       	eor	r27, r27
    3194:	aa 27       	eor	r26, r26
    3196:	0e d0       	rcall	.+28     	; 0x31b4 <__addsf3x>
    3198:	1c c1       	rjmp	.+568    	; 0x33d2 <__fp_round>
    319a:	0d d1       	rcall	.+538    	; 0x33b6 <__fp_pscA>
    319c:	30 f0       	brcs	.+12     	; 0x31aa <__addsf3+0x18>
    319e:	12 d1       	rcall	.+548    	; 0x33c4 <__fp_pscB>
    31a0:	20 f0       	brcs	.+8      	; 0x31aa <__addsf3+0x18>
    31a2:	31 f4       	brne	.+12     	; 0x31b0 <__addsf3+0x1e>
    31a4:	9f 3f       	cpi	r25, 0xFF	; 255
    31a6:	11 f4       	brne	.+4      	; 0x31ac <__addsf3+0x1a>
    31a8:	1e f4       	brtc	.+6      	; 0x31b0 <__addsf3+0x1e>
    31aa:	02 c1       	rjmp	.+516    	; 0x33b0 <__fp_nan>
    31ac:	0e f4       	brtc	.+2      	; 0x31b0 <__addsf3+0x1e>
    31ae:	e0 95       	com	r30
    31b0:	e7 fb       	bst	r30, 7
    31b2:	f8 c0       	rjmp	.+496    	; 0x33a4 <__fp_inf>

000031b4 <__addsf3x>:
    31b4:	e9 2f       	mov	r30, r25
    31b6:	1e d1       	rcall	.+572    	; 0x33f4 <__fp_split3>
    31b8:	80 f3       	brcs	.-32     	; 0x319a <__addsf3+0x8>
    31ba:	ba 17       	cp	r27, r26
    31bc:	62 07       	cpc	r22, r18
    31be:	73 07       	cpc	r23, r19
    31c0:	84 07       	cpc	r24, r20
    31c2:	95 07       	cpc	r25, r21
    31c4:	18 f0       	brcs	.+6      	; 0x31cc <__addsf3x+0x18>
    31c6:	71 f4       	brne	.+28     	; 0x31e4 <__addsf3x+0x30>
    31c8:	9e f5       	brtc	.+102    	; 0x3230 <__addsf3x+0x7c>
    31ca:	36 c1       	rjmp	.+620    	; 0x3438 <__fp_zero>
    31cc:	0e f4       	brtc	.+2      	; 0x31d0 <__addsf3x+0x1c>
    31ce:	e0 95       	com	r30
    31d0:	0b 2e       	mov	r0, r27
    31d2:	ba 2f       	mov	r27, r26
    31d4:	a0 2d       	mov	r26, r0
    31d6:	0b 01       	movw	r0, r22
    31d8:	b9 01       	movw	r22, r18
    31da:	90 01       	movw	r18, r0
    31dc:	0c 01       	movw	r0, r24
    31de:	ca 01       	movw	r24, r20
    31e0:	a0 01       	movw	r20, r0
    31e2:	11 24       	eor	r1, r1
    31e4:	ff 27       	eor	r31, r31
    31e6:	59 1b       	sub	r21, r25
    31e8:	99 f0       	breq	.+38     	; 0x3210 <__addsf3x+0x5c>
    31ea:	59 3f       	cpi	r21, 0xF9	; 249
    31ec:	50 f4       	brcc	.+20     	; 0x3202 <__addsf3x+0x4e>
    31ee:	50 3e       	cpi	r21, 0xE0	; 224
    31f0:	68 f1       	brcs	.+90     	; 0x324c <__addsf3x+0x98>
    31f2:	1a 16       	cp	r1, r26
    31f4:	f0 40       	sbci	r31, 0x00	; 0
    31f6:	a2 2f       	mov	r26, r18
    31f8:	23 2f       	mov	r18, r19
    31fa:	34 2f       	mov	r19, r20
    31fc:	44 27       	eor	r20, r20
    31fe:	58 5f       	subi	r21, 0xF8	; 248
    3200:	f3 cf       	rjmp	.-26     	; 0x31e8 <__addsf3x+0x34>
    3202:	46 95       	lsr	r20
    3204:	37 95       	ror	r19
    3206:	27 95       	ror	r18
    3208:	a7 95       	ror	r26
    320a:	f0 40       	sbci	r31, 0x00	; 0
    320c:	53 95       	inc	r21
    320e:	c9 f7       	brne	.-14     	; 0x3202 <__addsf3x+0x4e>
    3210:	7e f4       	brtc	.+30     	; 0x3230 <__addsf3x+0x7c>
    3212:	1f 16       	cp	r1, r31
    3214:	ba 0b       	sbc	r27, r26
    3216:	62 0b       	sbc	r22, r18
    3218:	73 0b       	sbc	r23, r19
    321a:	84 0b       	sbc	r24, r20
    321c:	ba f0       	brmi	.+46     	; 0x324c <__addsf3x+0x98>
    321e:	91 50       	subi	r25, 0x01	; 1
    3220:	a1 f0       	breq	.+40     	; 0x324a <__addsf3x+0x96>
    3222:	ff 0f       	add	r31, r31
    3224:	bb 1f       	adc	r27, r27
    3226:	66 1f       	adc	r22, r22
    3228:	77 1f       	adc	r23, r23
    322a:	88 1f       	adc	r24, r24
    322c:	c2 f7       	brpl	.-16     	; 0x321e <__addsf3x+0x6a>
    322e:	0e c0       	rjmp	.+28     	; 0x324c <__addsf3x+0x98>
    3230:	ba 0f       	add	r27, r26
    3232:	62 1f       	adc	r22, r18
    3234:	73 1f       	adc	r23, r19
    3236:	84 1f       	adc	r24, r20
    3238:	48 f4       	brcc	.+18     	; 0x324c <__addsf3x+0x98>
    323a:	87 95       	ror	r24
    323c:	77 95       	ror	r23
    323e:	67 95       	ror	r22
    3240:	b7 95       	ror	r27
    3242:	f7 95       	ror	r31
    3244:	9e 3f       	cpi	r25, 0xFE	; 254
    3246:	08 f0       	brcs	.+2      	; 0x324a <__addsf3x+0x96>
    3248:	b3 cf       	rjmp	.-154    	; 0x31b0 <__addsf3+0x1e>
    324a:	93 95       	inc	r25
    324c:	88 0f       	add	r24, r24
    324e:	08 f0       	brcs	.+2      	; 0x3252 <__addsf3x+0x9e>
    3250:	99 27       	eor	r25, r25
    3252:	ee 0f       	add	r30, r30
    3254:	97 95       	ror	r25
    3256:	87 95       	ror	r24
    3258:	08 95       	ret

0000325a <__divsf3>:
    325a:	0c d0       	rcall	.+24     	; 0x3274 <__divsf3x>
    325c:	ba c0       	rjmp	.+372    	; 0x33d2 <__fp_round>
    325e:	b2 d0       	rcall	.+356    	; 0x33c4 <__fp_pscB>
    3260:	40 f0       	brcs	.+16     	; 0x3272 <__divsf3+0x18>
    3262:	a9 d0       	rcall	.+338    	; 0x33b6 <__fp_pscA>
    3264:	30 f0       	brcs	.+12     	; 0x3272 <__divsf3+0x18>
    3266:	21 f4       	brne	.+8      	; 0x3270 <__divsf3+0x16>
    3268:	5f 3f       	cpi	r21, 0xFF	; 255
    326a:	19 f0       	breq	.+6      	; 0x3272 <__divsf3+0x18>
    326c:	9b c0       	rjmp	.+310    	; 0x33a4 <__fp_inf>
    326e:	51 11       	cpse	r21, r1
    3270:	e4 c0       	rjmp	.+456    	; 0x343a <__fp_szero>
    3272:	9e c0       	rjmp	.+316    	; 0x33b0 <__fp_nan>

00003274 <__divsf3x>:
    3274:	bf d0       	rcall	.+382    	; 0x33f4 <__fp_split3>
    3276:	98 f3       	brcs	.-26     	; 0x325e <__divsf3+0x4>

00003278 <__divsf3_pse>:
    3278:	99 23       	and	r25, r25
    327a:	c9 f3       	breq	.-14     	; 0x326e <__divsf3+0x14>
    327c:	55 23       	and	r21, r21
    327e:	b1 f3       	breq	.-20     	; 0x326c <__divsf3+0x12>
    3280:	95 1b       	sub	r25, r21
    3282:	55 0b       	sbc	r21, r21
    3284:	bb 27       	eor	r27, r27
    3286:	aa 27       	eor	r26, r26
    3288:	62 17       	cp	r22, r18
    328a:	73 07       	cpc	r23, r19
    328c:	84 07       	cpc	r24, r20
    328e:	38 f0       	brcs	.+14     	; 0x329e <__divsf3_pse+0x26>
    3290:	9f 5f       	subi	r25, 0xFF	; 255
    3292:	5f 4f       	sbci	r21, 0xFF	; 255
    3294:	22 0f       	add	r18, r18
    3296:	33 1f       	adc	r19, r19
    3298:	44 1f       	adc	r20, r20
    329a:	aa 1f       	adc	r26, r26
    329c:	a9 f3       	breq	.-22     	; 0x3288 <__divsf3_pse+0x10>
    329e:	33 d0       	rcall	.+102    	; 0x3306 <__divsf3_pse+0x8e>
    32a0:	0e 2e       	mov	r0, r30
    32a2:	3a f0       	brmi	.+14     	; 0x32b2 <__divsf3_pse+0x3a>
    32a4:	e0 e8       	ldi	r30, 0x80	; 128
    32a6:	30 d0       	rcall	.+96     	; 0x3308 <__divsf3_pse+0x90>
    32a8:	91 50       	subi	r25, 0x01	; 1
    32aa:	50 40       	sbci	r21, 0x00	; 0
    32ac:	e6 95       	lsr	r30
    32ae:	00 1c       	adc	r0, r0
    32b0:	ca f7       	brpl	.-14     	; 0x32a4 <__divsf3_pse+0x2c>
    32b2:	29 d0       	rcall	.+82     	; 0x3306 <__divsf3_pse+0x8e>
    32b4:	fe 2f       	mov	r31, r30
    32b6:	27 d0       	rcall	.+78     	; 0x3306 <__divsf3_pse+0x8e>
    32b8:	66 0f       	add	r22, r22
    32ba:	77 1f       	adc	r23, r23
    32bc:	88 1f       	adc	r24, r24
    32be:	bb 1f       	adc	r27, r27
    32c0:	26 17       	cp	r18, r22
    32c2:	37 07       	cpc	r19, r23
    32c4:	48 07       	cpc	r20, r24
    32c6:	ab 07       	cpc	r26, r27
    32c8:	b0 e8       	ldi	r27, 0x80	; 128
    32ca:	09 f0       	breq	.+2      	; 0x32ce <__divsf3_pse+0x56>
    32cc:	bb 0b       	sbc	r27, r27
    32ce:	80 2d       	mov	r24, r0
    32d0:	bf 01       	movw	r22, r30
    32d2:	ff 27       	eor	r31, r31
    32d4:	93 58       	subi	r25, 0x83	; 131
    32d6:	5f 4f       	sbci	r21, 0xFF	; 255
    32d8:	2a f0       	brmi	.+10     	; 0x32e4 <__divsf3_pse+0x6c>
    32da:	9e 3f       	cpi	r25, 0xFE	; 254
    32dc:	51 05       	cpc	r21, r1
    32de:	68 f0       	brcs	.+26     	; 0x32fa <__divsf3_pse+0x82>
    32e0:	61 c0       	rjmp	.+194    	; 0x33a4 <__fp_inf>
    32e2:	ab c0       	rjmp	.+342    	; 0x343a <__fp_szero>
    32e4:	5f 3f       	cpi	r21, 0xFF	; 255
    32e6:	ec f3       	brlt	.-6      	; 0x32e2 <__divsf3_pse+0x6a>
    32e8:	98 3e       	cpi	r25, 0xE8	; 232
    32ea:	dc f3       	brlt	.-10     	; 0x32e2 <__divsf3_pse+0x6a>
    32ec:	86 95       	lsr	r24
    32ee:	77 95       	ror	r23
    32f0:	67 95       	ror	r22
    32f2:	b7 95       	ror	r27
    32f4:	f7 95       	ror	r31
    32f6:	9f 5f       	subi	r25, 0xFF	; 255
    32f8:	c9 f7       	brne	.-14     	; 0x32ec <__divsf3_pse+0x74>
    32fa:	88 0f       	add	r24, r24
    32fc:	91 1d       	adc	r25, r1
    32fe:	96 95       	lsr	r25
    3300:	87 95       	ror	r24
    3302:	97 f9       	bld	r25, 7
    3304:	08 95       	ret
    3306:	e1 e0       	ldi	r30, 0x01	; 1
    3308:	66 0f       	add	r22, r22
    330a:	77 1f       	adc	r23, r23
    330c:	88 1f       	adc	r24, r24
    330e:	bb 1f       	adc	r27, r27
    3310:	62 17       	cp	r22, r18
    3312:	73 07       	cpc	r23, r19
    3314:	84 07       	cpc	r24, r20
    3316:	ba 07       	cpc	r27, r26
    3318:	20 f0       	brcs	.+8      	; 0x3322 <__divsf3_pse+0xaa>
    331a:	62 1b       	sub	r22, r18
    331c:	73 0b       	sbc	r23, r19
    331e:	84 0b       	sbc	r24, r20
    3320:	ba 0b       	sbc	r27, r26
    3322:	ee 1f       	adc	r30, r30
    3324:	88 f7       	brcc	.-30     	; 0x3308 <__divsf3_pse+0x90>
    3326:	e0 95       	com	r30
    3328:	08 95       	ret

0000332a <__floatunsisf>:
    332a:	e8 94       	clt
    332c:	09 c0       	rjmp	.+18     	; 0x3340 <__floatsisf+0x12>

0000332e <__floatsisf>:
    332e:	97 fb       	bst	r25, 7
    3330:	3e f4       	brtc	.+14     	; 0x3340 <__floatsisf+0x12>
    3332:	90 95       	com	r25
    3334:	80 95       	com	r24
    3336:	70 95       	com	r23
    3338:	61 95       	neg	r22
    333a:	7f 4f       	sbci	r23, 0xFF	; 255
    333c:	8f 4f       	sbci	r24, 0xFF	; 255
    333e:	9f 4f       	sbci	r25, 0xFF	; 255
    3340:	99 23       	and	r25, r25
    3342:	a9 f0       	breq	.+42     	; 0x336e <__floatsisf+0x40>
    3344:	f9 2f       	mov	r31, r25
    3346:	96 e9       	ldi	r25, 0x96	; 150
    3348:	bb 27       	eor	r27, r27
    334a:	93 95       	inc	r25
    334c:	f6 95       	lsr	r31
    334e:	87 95       	ror	r24
    3350:	77 95       	ror	r23
    3352:	67 95       	ror	r22
    3354:	b7 95       	ror	r27
    3356:	f1 11       	cpse	r31, r1
    3358:	f8 cf       	rjmp	.-16     	; 0x334a <__floatsisf+0x1c>
    335a:	fa f4       	brpl	.+62     	; 0x339a <__floatsisf+0x6c>
    335c:	bb 0f       	add	r27, r27
    335e:	11 f4       	brne	.+4      	; 0x3364 <__floatsisf+0x36>
    3360:	60 ff       	sbrs	r22, 0
    3362:	1b c0       	rjmp	.+54     	; 0x339a <__floatsisf+0x6c>
    3364:	6f 5f       	subi	r22, 0xFF	; 255
    3366:	7f 4f       	sbci	r23, 0xFF	; 255
    3368:	8f 4f       	sbci	r24, 0xFF	; 255
    336a:	9f 4f       	sbci	r25, 0xFF	; 255
    336c:	16 c0       	rjmp	.+44     	; 0x339a <__floatsisf+0x6c>
    336e:	88 23       	and	r24, r24
    3370:	11 f0       	breq	.+4      	; 0x3376 <__floatsisf+0x48>
    3372:	96 e9       	ldi	r25, 0x96	; 150
    3374:	11 c0       	rjmp	.+34     	; 0x3398 <__floatsisf+0x6a>
    3376:	77 23       	and	r23, r23
    3378:	21 f0       	breq	.+8      	; 0x3382 <__floatsisf+0x54>
    337a:	9e e8       	ldi	r25, 0x8E	; 142
    337c:	87 2f       	mov	r24, r23
    337e:	76 2f       	mov	r23, r22
    3380:	05 c0       	rjmp	.+10     	; 0x338c <__floatsisf+0x5e>
    3382:	66 23       	and	r22, r22
    3384:	71 f0       	breq	.+28     	; 0x33a2 <__floatsisf+0x74>
    3386:	96 e8       	ldi	r25, 0x86	; 134
    3388:	86 2f       	mov	r24, r22
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	2a f0       	brmi	.+10     	; 0x339a <__floatsisf+0x6c>
    3390:	9a 95       	dec	r25
    3392:	66 0f       	add	r22, r22
    3394:	77 1f       	adc	r23, r23
    3396:	88 1f       	adc	r24, r24
    3398:	da f7       	brpl	.-10     	; 0x3390 <__floatsisf+0x62>
    339a:	88 0f       	add	r24, r24
    339c:	96 95       	lsr	r25
    339e:	87 95       	ror	r24
    33a0:	97 f9       	bld	r25, 7
    33a2:	08 95       	ret

000033a4 <__fp_inf>:
    33a4:	97 f9       	bld	r25, 7
    33a6:	9f 67       	ori	r25, 0x7F	; 127
    33a8:	80 e8       	ldi	r24, 0x80	; 128
    33aa:	70 e0       	ldi	r23, 0x00	; 0
    33ac:	60 e0       	ldi	r22, 0x00	; 0
    33ae:	08 95       	ret

000033b0 <__fp_nan>:
    33b0:	9f ef       	ldi	r25, 0xFF	; 255
    33b2:	80 ec       	ldi	r24, 0xC0	; 192
    33b4:	08 95       	ret

000033b6 <__fp_pscA>:
    33b6:	00 24       	eor	r0, r0
    33b8:	0a 94       	dec	r0
    33ba:	16 16       	cp	r1, r22
    33bc:	17 06       	cpc	r1, r23
    33be:	18 06       	cpc	r1, r24
    33c0:	09 06       	cpc	r0, r25
    33c2:	08 95       	ret

000033c4 <__fp_pscB>:
    33c4:	00 24       	eor	r0, r0
    33c6:	0a 94       	dec	r0
    33c8:	12 16       	cp	r1, r18
    33ca:	13 06       	cpc	r1, r19
    33cc:	14 06       	cpc	r1, r20
    33ce:	05 06       	cpc	r0, r21
    33d0:	08 95       	ret

000033d2 <__fp_round>:
    33d2:	09 2e       	mov	r0, r25
    33d4:	03 94       	inc	r0
    33d6:	00 0c       	add	r0, r0
    33d8:	11 f4       	brne	.+4      	; 0x33de <__fp_round+0xc>
    33da:	88 23       	and	r24, r24
    33dc:	52 f0       	brmi	.+20     	; 0x33f2 <__fp_round+0x20>
    33de:	bb 0f       	add	r27, r27
    33e0:	40 f4       	brcc	.+16     	; 0x33f2 <__fp_round+0x20>
    33e2:	bf 2b       	or	r27, r31
    33e4:	11 f4       	brne	.+4      	; 0x33ea <__fp_round+0x18>
    33e6:	60 ff       	sbrs	r22, 0
    33e8:	04 c0       	rjmp	.+8      	; 0x33f2 <__fp_round+0x20>
    33ea:	6f 5f       	subi	r22, 0xFF	; 255
    33ec:	7f 4f       	sbci	r23, 0xFF	; 255
    33ee:	8f 4f       	sbci	r24, 0xFF	; 255
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	08 95       	ret

000033f4 <__fp_split3>:
    33f4:	57 fd       	sbrc	r21, 7
    33f6:	90 58       	subi	r25, 0x80	; 128
    33f8:	44 0f       	add	r20, r20
    33fa:	55 1f       	adc	r21, r21
    33fc:	59 f0       	breq	.+22     	; 0x3414 <__fp_splitA+0x10>
    33fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3400:	71 f0       	breq	.+28     	; 0x341e <__fp_splitA+0x1a>
    3402:	47 95       	ror	r20

00003404 <__fp_splitA>:
    3404:	88 0f       	add	r24, r24
    3406:	97 fb       	bst	r25, 7
    3408:	99 1f       	adc	r25, r25
    340a:	61 f0       	breq	.+24     	; 0x3424 <__fp_splitA+0x20>
    340c:	9f 3f       	cpi	r25, 0xFF	; 255
    340e:	79 f0       	breq	.+30     	; 0x342e <__fp_splitA+0x2a>
    3410:	87 95       	ror	r24
    3412:	08 95       	ret
    3414:	12 16       	cp	r1, r18
    3416:	13 06       	cpc	r1, r19
    3418:	14 06       	cpc	r1, r20
    341a:	55 1f       	adc	r21, r21
    341c:	f2 cf       	rjmp	.-28     	; 0x3402 <__fp_split3+0xe>
    341e:	46 95       	lsr	r20
    3420:	f1 df       	rcall	.-30     	; 0x3404 <__fp_splitA>
    3422:	08 c0       	rjmp	.+16     	; 0x3434 <__fp_splitA+0x30>
    3424:	16 16       	cp	r1, r22
    3426:	17 06       	cpc	r1, r23
    3428:	18 06       	cpc	r1, r24
    342a:	99 1f       	adc	r25, r25
    342c:	f1 cf       	rjmp	.-30     	; 0x3410 <__fp_splitA+0xc>
    342e:	86 95       	lsr	r24
    3430:	71 05       	cpc	r23, r1
    3432:	61 05       	cpc	r22, r1
    3434:	08 94       	sec
    3436:	08 95       	ret

00003438 <__fp_zero>:
    3438:	e8 94       	clt

0000343a <__fp_szero>:
    343a:	bb 27       	eor	r27, r27
    343c:	66 27       	eor	r22, r22
    343e:	77 27       	eor	r23, r23
    3440:	cb 01       	movw	r24, r22
    3442:	97 f9       	bld	r25, 7
    3444:	08 95       	ret
    3446:	0e f0       	brts	.+2      	; 0x344a <__fp_szero+0x10>
    3448:	a6 c0       	rjmp	.+332    	; 0x3596 <__fp_mpack>
    344a:	b2 cf       	rjmp	.-156    	; 0x33b0 <__fp_nan>
    344c:	68 94       	set
    344e:	aa cf       	rjmp	.-172    	; 0x33a4 <__fp_inf>

00003450 <log>:
    3450:	d9 df       	rcall	.-78     	; 0x3404 <__fp_splitA>
    3452:	c8 f3       	brcs	.-14     	; 0x3446 <__fp_szero+0xc>
    3454:	99 23       	and	r25, r25
    3456:	d1 f3       	breq	.-12     	; 0x344c <__fp_szero+0x12>
    3458:	c6 f3       	brts	.-16     	; 0x344a <__fp_szero+0x10>
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	1f 93       	push	r17
    3460:	0f 93       	push	r16
    3462:	ff 92       	push	r15
    3464:	c9 2f       	mov	r28, r25
    3466:	dd 27       	eor	r29, r29
    3468:	88 23       	and	r24, r24
    346a:	2a f0       	brmi	.+10     	; 0x3476 <log+0x26>
    346c:	21 97       	sbiw	r28, 0x01	; 1
    346e:	66 0f       	add	r22, r22
    3470:	77 1f       	adc	r23, r23
    3472:	88 1f       	adc	r24, r24
    3474:	da f7       	brpl	.-10     	; 0x346c <log+0x1c>
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e8       	ldi	r20, 0x80	; 128
    347c:	5f eb       	ldi	r21, 0xBF	; 191
    347e:	9f e3       	ldi	r25, 0x3F	; 63
    3480:	88 39       	cpi	r24, 0x98	; 152
    3482:	20 f0       	brcs	.+8      	; 0x348c <log+0x3c>
    3484:	80 3e       	cpi	r24, 0xE0	; 224
    3486:	30 f0       	brcs	.+12     	; 0x3494 <log+0x44>
    3488:	21 96       	adiw	r28, 0x01	; 1
    348a:	8f 77       	andi	r24, 0x7F	; 127
    348c:	82 de       	rcall	.-764    	; 0x3192 <__addsf3>
    348e:	ec ef       	ldi	r30, 0xFC	; 252
    3490:	f1 e0       	ldi	r31, 0x01	; 1
    3492:	03 c0       	rjmp	.+6      	; 0x349a <log+0x4a>
    3494:	7e de       	rcall	.-772    	; 0x3192 <__addsf3>
    3496:	e9 e2       	ldi	r30, 0x29	; 41
    3498:	f2 e0       	ldi	r31, 0x02	; 2
    349a:	8b d0       	rcall	.+278    	; 0x35b2 <__fp_powser>
    349c:	8b 01       	movw	r16, r22
    349e:	be 01       	movw	r22, r28
    34a0:	ec 01       	movw	r28, r24
    34a2:	fb 2e       	mov	r15, r27
    34a4:	6f 57       	subi	r22, 0x7F	; 127
    34a6:	71 09       	sbc	r23, r1
    34a8:	75 95       	asr	r23
    34aa:	77 1f       	adc	r23, r23
    34ac:	88 0b       	sbc	r24, r24
    34ae:	99 0b       	sbc	r25, r25
    34b0:	3e df       	rcall	.-388    	; 0x332e <__floatsisf>
    34b2:	28 e1       	ldi	r18, 0x18	; 24
    34b4:	32 e7       	ldi	r19, 0x72	; 114
    34b6:	41 e3       	ldi	r20, 0x31	; 49
    34b8:	5f e3       	ldi	r21, 0x3F	; 63
    34ba:	16 d0       	rcall	.+44     	; 0x34e8 <__mulsf3x>
    34bc:	af 2d       	mov	r26, r15
    34be:	98 01       	movw	r18, r16
    34c0:	ae 01       	movw	r20, r28
    34c2:	ff 90       	pop	r15
    34c4:	0f 91       	pop	r16
    34c6:	1f 91       	pop	r17
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	73 de       	rcall	.-794    	; 0x31b4 <__addsf3x>
    34ce:	81 cf       	rjmp	.-254    	; 0x33d2 <__fp_round>

000034d0 <__mulsf3>:
    34d0:	0b d0       	rcall	.+22     	; 0x34e8 <__mulsf3x>
    34d2:	7f cf       	rjmp	.-258    	; 0x33d2 <__fp_round>
    34d4:	70 df       	rcall	.-288    	; 0x33b6 <__fp_pscA>
    34d6:	28 f0       	brcs	.+10     	; 0x34e2 <__mulsf3+0x12>
    34d8:	75 df       	rcall	.-278    	; 0x33c4 <__fp_pscB>
    34da:	18 f0       	brcs	.+6      	; 0x34e2 <__mulsf3+0x12>
    34dc:	95 23       	and	r25, r21
    34de:	09 f0       	breq	.+2      	; 0x34e2 <__mulsf3+0x12>
    34e0:	61 cf       	rjmp	.-318    	; 0x33a4 <__fp_inf>
    34e2:	66 cf       	rjmp	.-308    	; 0x33b0 <__fp_nan>
    34e4:	11 24       	eor	r1, r1
    34e6:	a9 cf       	rjmp	.-174    	; 0x343a <__fp_szero>

000034e8 <__mulsf3x>:
    34e8:	85 df       	rcall	.-246    	; 0x33f4 <__fp_split3>
    34ea:	a0 f3       	brcs	.-24     	; 0x34d4 <__mulsf3+0x4>

000034ec <__mulsf3_pse>:
    34ec:	95 9f       	mul	r25, r21
    34ee:	d1 f3       	breq	.-12     	; 0x34e4 <__mulsf3+0x14>
    34f0:	95 0f       	add	r25, r21
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	55 1f       	adc	r21, r21
    34f6:	62 9f       	mul	r22, r18
    34f8:	f0 01       	movw	r30, r0
    34fa:	72 9f       	mul	r23, r18
    34fc:	bb 27       	eor	r27, r27
    34fe:	f0 0d       	add	r31, r0
    3500:	b1 1d       	adc	r27, r1
    3502:	63 9f       	mul	r22, r19
    3504:	aa 27       	eor	r26, r26
    3506:	f0 0d       	add	r31, r0
    3508:	b1 1d       	adc	r27, r1
    350a:	aa 1f       	adc	r26, r26
    350c:	64 9f       	mul	r22, r20
    350e:	66 27       	eor	r22, r22
    3510:	b0 0d       	add	r27, r0
    3512:	a1 1d       	adc	r26, r1
    3514:	66 1f       	adc	r22, r22
    3516:	82 9f       	mul	r24, r18
    3518:	22 27       	eor	r18, r18
    351a:	b0 0d       	add	r27, r0
    351c:	a1 1d       	adc	r26, r1
    351e:	62 1f       	adc	r22, r18
    3520:	73 9f       	mul	r23, r19
    3522:	b0 0d       	add	r27, r0
    3524:	a1 1d       	adc	r26, r1
    3526:	62 1f       	adc	r22, r18
    3528:	83 9f       	mul	r24, r19
    352a:	a0 0d       	add	r26, r0
    352c:	61 1d       	adc	r22, r1
    352e:	22 1f       	adc	r18, r18
    3530:	74 9f       	mul	r23, r20
    3532:	33 27       	eor	r19, r19
    3534:	a0 0d       	add	r26, r0
    3536:	61 1d       	adc	r22, r1
    3538:	23 1f       	adc	r18, r19
    353a:	84 9f       	mul	r24, r20
    353c:	60 0d       	add	r22, r0
    353e:	21 1d       	adc	r18, r1
    3540:	82 2f       	mov	r24, r18
    3542:	76 2f       	mov	r23, r22
    3544:	6a 2f       	mov	r22, r26
    3546:	11 24       	eor	r1, r1
    3548:	9f 57       	subi	r25, 0x7F	; 127
    354a:	50 40       	sbci	r21, 0x00	; 0
    354c:	8a f0       	brmi	.+34     	; 0x3570 <__mulsf3_pse+0x84>
    354e:	e1 f0       	breq	.+56     	; 0x3588 <__mulsf3_pse+0x9c>
    3550:	88 23       	and	r24, r24
    3552:	4a f0       	brmi	.+18     	; 0x3566 <__mulsf3_pse+0x7a>
    3554:	ee 0f       	add	r30, r30
    3556:	ff 1f       	adc	r31, r31
    3558:	bb 1f       	adc	r27, r27
    355a:	66 1f       	adc	r22, r22
    355c:	77 1f       	adc	r23, r23
    355e:	88 1f       	adc	r24, r24
    3560:	91 50       	subi	r25, 0x01	; 1
    3562:	50 40       	sbci	r21, 0x00	; 0
    3564:	a9 f7       	brne	.-22     	; 0x3550 <__mulsf3_pse+0x64>
    3566:	9e 3f       	cpi	r25, 0xFE	; 254
    3568:	51 05       	cpc	r21, r1
    356a:	70 f0       	brcs	.+28     	; 0x3588 <__mulsf3_pse+0x9c>
    356c:	1b cf       	rjmp	.-458    	; 0x33a4 <__fp_inf>
    356e:	65 cf       	rjmp	.-310    	; 0x343a <__fp_szero>
    3570:	5f 3f       	cpi	r21, 0xFF	; 255
    3572:	ec f3       	brlt	.-6      	; 0x356e <__mulsf3_pse+0x82>
    3574:	98 3e       	cpi	r25, 0xE8	; 232
    3576:	dc f3       	brlt	.-10     	; 0x356e <__mulsf3_pse+0x82>
    3578:	86 95       	lsr	r24
    357a:	77 95       	ror	r23
    357c:	67 95       	ror	r22
    357e:	b7 95       	ror	r27
    3580:	f7 95       	ror	r31
    3582:	e7 95       	ror	r30
    3584:	9f 5f       	subi	r25, 0xFF	; 255
    3586:	c1 f7       	brne	.-16     	; 0x3578 <__mulsf3_pse+0x8c>
    3588:	fe 2b       	or	r31, r30
    358a:	88 0f       	add	r24, r24
    358c:	91 1d       	adc	r25, r1
    358e:	96 95       	lsr	r25
    3590:	87 95       	ror	r24
    3592:	97 f9       	bld	r25, 7
    3594:	08 95       	ret

00003596 <__fp_mpack>:
    3596:	9f 3f       	cpi	r25, 0xFF	; 255
    3598:	31 f0       	breq	.+12     	; 0x35a6 <__fp_mpack_finite+0xc>

0000359a <__fp_mpack_finite>:
    359a:	91 50       	subi	r25, 0x01	; 1
    359c:	20 f4       	brcc	.+8      	; 0x35a6 <__fp_mpack_finite+0xc>
    359e:	87 95       	ror	r24
    35a0:	77 95       	ror	r23
    35a2:	67 95       	ror	r22
    35a4:	b7 95       	ror	r27
    35a6:	88 0f       	add	r24, r24
    35a8:	91 1d       	adc	r25, r1
    35aa:	96 95       	lsr	r25
    35ac:	87 95       	ror	r24
    35ae:	97 f9       	bld	r25, 7
    35b0:	08 95       	ret

000035b2 <__fp_powser>:
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	1f 93       	push	r17
    35b8:	0f 93       	push	r16
    35ba:	ff 92       	push	r15
    35bc:	ef 92       	push	r14
    35be:	df 92       	push	r13
    35c0:	7b 01       	movw	r14, r22
    35c2:	8c 01       	movw	r16, r24
    35c4:	68 94       	set
    35c6:	05 c0       	rjmp	.+10     	; 0x35d2 <__fp_powser+0x20>
    35c8:	da 2e       	mov	r13, r26
    35ca:	ef 01       	movw	r28, r30
    35cc:	8d df       	rcall	.-230    	; 0x34e8 <__mulsf3x>
    35ce:	fe 01       	movw	r30, r28
    35d0:	e8 94       	clt
    35d2:	a5 91       	lpm	r26, Z+
    35d4:	25 91       	lpm	r18, Z+
    35d6:	35 91       	lpm	r19, Z+
    35d8:	45 91       	lpm	r20, Z+
    35da:	55 91       	lpm	r21, Z+
    35dc:	ae f3       	brts	.-22     	; 0x35c8 <__fp_powser+0x16>
    35de:	ef 01       	movw	r28, r30
    35e0:	e9 dd       	rcall	.-1070   	; 0x31b4 <__addsf3x>
    35e2:	fe 01       	movw	r30, r28
    35e4:	97 01       	movw	r18, r14
    35e6:	a8 01       	movw	r20, r16
    35e8:	da 94       	dec	r13
    35ea:	79 f7       	brne	.-34     	; 0x35ca <__fp_powser+0x18>
    35ec:	df 90       	pop	r13
    35ee:	ef 90       	pop	r14
    35f0:	ff 90       	pop	r15
    35f2:	0f 91       	pop	r16
    35f4:	1f 91       	pop	r17
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <vfprintf>:
    35fc:	2f 92       	push	r2
    35fe:	3f 92       	push	r3
    3600:	4f 92       	push	r4
    3602:	5f 92       	push	r5
    3604:	6f 92       	push	r6
    3606:	7f 92       	push	r7
    3608:	8f 92       	push	r8
    360a:	9f 92       	push	r9
    360c:	af 92       	push	r10
    360e:	bf 92       	push	r11
    3610:	cf 92       	push	r12
    3612:	df 92       	push	r13
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	60 97       	sbiw	r28, 0x10	; 16
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	7c 01       	movw	r14, r24
    362c:	1b 01       	movw	r2, r22
    362e:	6a 01       	movw	r12, r20
    3630:	fc 01       	movw	r30, r24
    3632:	16 82       	std	Z+6, r1	; 0x06
    3634:	17 82       	std	Z+7, r1	; 0x07
    3636:	83 81       	ldd	r24, Z+3	; 0x03
    3638:	81 ff       	sbrs	r24, 1
    363a:	2a c3       	rjmp	.+1620   	; 0x3c90 <vfprintf+0x694>
    363c:	9e 01       	movw	r18, r28
    363e:	2f 5f       	subi	r18, 0xFF	; 255
    3640:	3f 4f       	sbci	r19, 0xFF	; 255
    3642:	39 01       	movw	r6, r18
    3644:	f7 01       	movw	r30, r14
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	f1 01       	movw	r30, r2
    364a:	93 fd       	sbrc	r25, 3
    364c:	85 91       	lpm	r24, Z+
    364e:	93 ff       	sbrs	r25, 3
    3650:	81 91       	ld	r24, Z+
    3652:	1f 01       	movw	r2, r30
    3654:	88 23       	and	r24, r24
    3656:	09 f4       	brne	.+2      	; 0x365a <vfprintf+0x5e>
    3658:	17 c3       	rjmp	.+1582   	; 0x3c88 <vfprintf+0x68c>
    365a:	85 32       	cpi	r24, 0x25	; 37
    365c:	39 f4       	brne	.+14     	; 0x366c <vfprintf+0x70>
    365e:	93 fd       	sbrc	r25, 3
    3660:	85 91       	lpm	r24, Z+
    3662:	93 ff       	sbrs	r25, 3
    3664:	81 91       	ld	r24, Z+
    3666:	1f 01       	movw	r2, r30
    3668:	85 32       	cpi	r24, 0x25	; 37
    366a:	31 f4       	brne	.+12     	; 0x3678 <vfprintf+0x7c>
    366c:	b7 01       	movw	r22, r14
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	63 d5       	rcall	.+2758   	; 0x4138 <fputc>
    3672:	56 01       	movw	r10, r12
    3674:	65 01       	movw	r12, r10
    3676:	e6 cf       	rjmp	.-52     	; 0x3644 <vfprintf+0x48>
    3678:	10 e0       	ldi	r17, 0x00	; 0
    367a:	51 2c       	mov	r5, r1
    367c:	91 2c       	mov	r9, r1
    367e:	ff e1       	ldi	r31, 0x1F	; 31
    3680:	f9 15       	cp	r31, r9
    3682:	d8 f0       	brcs	.+54     	; 0x36ba <vfprintf+0xbe>
    3684:	8b 32       	cpi	r24, 0x2B	; 43
    3686:	79 f0       	breq	.+30     	; 0x36a6 <vfprintf+0xaa>
    3688:	38 f4       	brcc	.+14     	; 0x3698 <vfprintf+0x9c>
    368a:	80 32       	cpi	r24, 0x20	; 32
    368c:	79 f0       	breq	.+30     	; 0x36ac <vfprintf+0xb0>
    368e:	83 32       	cpi	r24, 0x23	; 35
    3690:	a1 f4       	brne	.+40     	; 0x36ba <vfprintf+0xbe>
    3692:	f9 2d       	mov	r31, r9
    3694:	f0 61       	ori	r31, 0x10	; 16
    3696:	2e c0       	rjmp	.+92     	; 0x36f4 <vfprintf+0xf8>
    3698:	8d 32       	cpi	r24, 0x2D	; 45
    369a:	61 f0       	breq	.+24     	; 0x36b4 <vfprintf+0xb8>
    369c:	80 33       	cpi	r24, 0x30	; 48
    369e:	69 f4       	brne	.+26     	; 0x36ba <vfprintf+0xbe>
    36a0:	29 2d       	mov	r18, r9
    36a2:	21 60       	ori	r18, 0x01	; 1
    36a4:	2d c0       	rjmp	.+90     	; 0x3700 <vfprintf+0x104>
    36a6:	39 2d       	mov	r19, r9
    36a8:	32 60       	ori	r19, 0x02	; 2
    36aa:	93 2e       	mov	r9, r19
    36ac:	89 2d       	mov	r24, r9
    36ae:	84 60       	ori	r24, 0x04	; 4
    36b0:	98 2e       	mov	r9, r24
    36b2:	2a c0       	rjmp	.+84     	; 0x3708 <vfprintf+0x10c>
    36b4:	e9 2d       	mov	r30, r9
    36b6:	e8 60       	ori	r30, 0x08	; 8
    36b8:	15 c0       	rjmp	.+42     	; 0x36e4 <vfprintf+0xe8>
    36ba:	97 fc       	sbrc	r9, 7
    36bc:	2d c0       	rjmp	.+90     	; 0x3718 <vfprintf+0x11c>
    36be:	20 ed       	ldi	r18, 0xD0	; 208
    36c0:	28 0f       	add	r18, r24
    36c2:	2a 30       	cpi	r18, 0x0A	; 10
    36c4:	88 f4       	brcc	.+34     	; 0x36e8 <vfprintf+0xec>
    36c6:	96 fe       	sbrs	r9, 6
    36c8:	06 c0       	rjmp	.+12     	; 0x36d6 <vfprintf+0xda>
    36ca:	3a e0       	ldi	r19, 0x0A	; 10
    36cc:	13 9f       	mul	r17, r19
    36ce:	20 0d       	add	r18, r0
    36d0:	11 24       	eor	r1, r1
    36d2:	12 2f       	mov	r17, r18
    36d4:	19 c0       	rjmp	.+50     	; 0x3708 <vfprintf+0x10c>
    36d6:	8a e0       	ldi	r24, 0x0A	; 10
    36d8:	58 9e       	mul	r5, r24
    36da:	20 0d       	add	r18, r0
    36dc:	11 24       	eor	r1, r1
    36de:	52 2e       	mov	r5, r18
    36e0:	e9 2d       	mov	r30, r9
    36e2:	e0 62       	ori	r30, 0x20	; 32
    36e4:	9e 2e       	mov	r9, r30
    36e6:	10 c0       	rjmp	.+32     	; 0x3708 <vfprintf+0x10c>
    36e8:	8e 32       	cpi	r24, 0x2E	; 46
    36ea:	31 f4       	brne	.+12     	; 0x36f8 <vfprintf+0xfc>
    36ec:	96 fc       	sbrc	r9, 6
    36ee:	cc c2       	rjmp	.+1432   	; 0x3c88 <vfprintf+0x68c>
    36f0:	f9 2d       	mov	r31, r9
    36f2:	f0 64       	ori	r31, 0x40	; 64
    36f4:	9f 2e       	mov	r9, r31
    36f6:	08 c0       	rjmp	.+16     	; 0x3708 <vfprintf+0x10c>
    36f8:	8c 36       	cpi	r24, 0x6C	; 108
    36fa:	21 f4       	brne	.+8      	; 0x3704 <vfprintf+0x108>
    36fc:	29 2d       	mov	r18, r9
    36fe:	20 68       	ori	r18, 0x80	; 128
    3700:	92 2e       	mov	r9, r18
    3702:	02 c0       	rjmp	.+4      	; 0x3708 <vfprintf+0x10c>
    3704:	88 36       	cpi	r24, 0x68	; 104
    3706:	41 f4       	brne	.+16     	; 0x3718 <vfprintf+0x11c>
    3708:	f1 01       	movw	r30, r2
    370a:	93 fd       	sbrc	r25, 3
    370c:	85 91       	lpm	r24, Z+
    370e:	93 ff       	sbrs	r25, 3
    3710:	81 91       	ld	r24, Z+
    3712:	1f 01       	movw	r2, r30
    3714:	81 11       	cpse	r24, r1
    3716:	b3 cf       	rjmp	.-154    	; 0x367e <vfprintf+0x82>
    3718:	9b eb       	ldi	r25, 0xBB	; 187
    371a:	98 0f       	add	r25, r24
    371c:	93 30       	cpi	r25, 0x03	; 3
    371e:	20 f4       	brcc	.+8      	; 0x3728 <vfprintf+0x12c>
    3720:	99 2d       	mov	r25, r9
    3722:	90 61       	ori	r25, 0x10	; 16
    3724:	80 5e       	subi	r24, 0xE0	; 224
    3726:	07 c0       	rjmp	.+14     	; 0x3736 <vfprintf+0x13a>
    3728:	9b e9       	ldi	r25, 0x9B	; 155
    372a:	98 0f       	add	r25, r24
    372c:	93 30       	cpi	r25, 0x03	; 3
    372e:	08 f0       	brcs	.+2      	; 0x3732 <vfprintf+0x136>
    3730:	59 c1       	rjmp	.+690    	; 0x39e4 <vfprintf+0x3e8>
    3732:	99 2d       	mov	r25, r9
    3734:	9f 7e       	andi	r25, 0xEF	; 239
    3736:	96 ff       	sbrs	r25, 6
    3738:	16 e0       	ldi	r17, 0x06	; 6
    373a:	9f 73       	andi	r25, 0x3F	; 63
    373c:	99 2e       	mov	r9, r25
    373e:	85 36       	cpi	r24, 0x65	; 101
    3740:	19 f4       	brne	.+6      	; 0x3748 <vfprintf+0x14c>
    3742:	90 64       	ori	r25, 0x40	; 64
    3744:	99 2e       	mov	r9, r25
    3746:	08 c0       	rjmp	.+16     	; 0x3758 <vfprintf+0x15c>
    3748:	86 36       	cpi	r24, 0x66	; 102
    374a:	21 f4       	brne	.+8      	; 0x3754 <vfprintf+0x158>
    374c:	39 2f       	mov	r19, r25
    374e:	30 68       	ori	r19, 0x80	; 128
    3750:	93 2e       	mov	r9, r19
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <vfprintf+0x15c>
    3754:	11 11       	cpse	r17, r1
    3756:	11 50       	subi	r17, 0x01	; 1
    3758:	97 fe       	sbrs	r9, 7
    375a:	07 c0       	rjmp	.+14     	; 0x376a <vfprintf+0x16e>
    375c:	1c 33       	cpi	r17, 0x3C	; 60
    375e:	50 f4       	brcc	.+20     	; 0x3774 <vfprintf+0x178>
    3760:	44 24       	eor	r4, r4
    3762:	43 94       	inc	r4
    3764:	41 0e       	add	r4, r17
    3766:	27 e0       	ldi	r18, 0x07	; 7
    3768:	0b c0       	rjmp	.+22     	; 0x3780 <vfprintf+0x184>
    376a:	18 30       	cpi	r17, 0x08	; 8
    376c:	38 f0       	brcs	.+14     	; 0x377c <vfprintf+0x180>
    376e:	27 e0       	ldi	r18, 0x07	; 7
    3770:	17 e0       	ldi	r17, 0x07	; 7
    3772:	05 c0       	rjmp	.+10     	; 0x377e <vfprintf+0x182>
    3774:	27 e0       	ldi	r18, 0x07	; 7
    3776:	9c e3       	ldi	r25, 0x3C	; 60
    3778:	49 2e       	mov	r4, r25
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <vfprintf+0x184>
    377c:	21 2f       	mov	r18, r17
    377e:	41 2c       	mov	r4, r1
    3780:	56 01       	movw	r10, r12
    3782:	84 e0       	ldi	r24, 0x04	; 4
    3784:	a8 0e       	add	r10, r24
    3786:	b1 1c       	adc	r11, r1
    3788:	f6 01       	movw	r30, r12
    378a:	60 81       	ld	r22, Z
    378c:	71 81       	ldd	r23, Z+1	; 0x01
    378e:	82 81       	ldd	r24, Z+2	; 0x02
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	04 2d       	mov	r16, r4
    3794:	a3 01       	movw	r20, r6
    3796:	98 d3       	rcall	.+1840   	; 0x3ec8 <__ftoa_engine>
    3798:	6c 01       	movw	r12, r24
    379a:	f9 81       	ldd	r31, Y+1	; 0x01
    379c:	fc 87       	std	Y+12, r31	; 0x0c
    379e:	f0 ff       	sbrs	r31, 0
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <vfprintf+0x1aa>
    37a2:	f3 ff       	sbrs	r31, 3
    37a4:	06 c0       	rjmp	.+12     	; 0x37b2 <vfprintf+0x1b6>
    37a6:	91 fc       	sbrc	r9, 1
    37a8:	06 c0       	rjmp	.+12     	; 0x37b6 <vfprintf+0x1ba>
    37aa:	92 fe       	sbrs	r9, 2
    37ac:	06 c0       	rjmp	.+12     	; 0x37ba <vfprintf+0x1be>
    37ae:	00 e2       	ldi	r16, 0x20	; 32
    37b0:	05 c0       	rjmp	.+10     	; 0x37bc <vfprintf+0x1c0>
    37b2:	0d e2       	ldi	r16, 0x2D	; 45
    37b4:	03 c0       	rjmp	.+6      	; 0x37bc <vfprintf+0x1c0>
    37b6:	0b e2       	ldi	r16, 0x2B	; 43
    37b8:	01 c0       	rjmp	.+2      	; 0x37bc <vfprintf+0x1c0>
    37ba:	00 e0       	ldi	r16, 0x00	; 0
    37bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    37be:	8c 70       	andi	r24, 0x0C	; 12
    37c0:	19 f0       	breq	.+6      	; 0x37c8 <vfprintf+0x1cc>
    37c2:	01 11       	cpse	r16, r1
    37c4:	43 c2       	rjmp	.+1158   	; 0x3c4c <vfprintf+0x650>
    37c6:	80 c2       	rjmp	.+1280   	; 0x3cc8 <vfprintf+0x6cc>
    37c8:	97 fe       	sbrs	r9, 7
    37ca:	10 c0       	rjmp	.+32     	; 0x37ec <vfprintf+0x1f0>
    37cc:	4c 0c       	add	r4, r12
    37ce:	fc 85       	ldd	r31, Y+12	; 0x0c
    37d0:	f4 ff       	sbrs	r31, 4
    37d2:	04 c0       	rjmp	.+8      	; 0x37dc <vfprintf+0x1e0>
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	81 33       	cpi	r24, 0x31	; 49
    37d8:	09 f4       	brne	.+2      	; 0x37dc <vfprintf+0x1e0>
    37da:	4a 94       	dec	r4
    37dc:	14 14       	cp	r1, r4
    37de:	74 f5       	brge	.+92     	; 0x383c <vfprintf+0x240>
    37e0:	28 e0       	ldi	r18, 0x08	; 8
    37e2:	24 15       	cp	r18, r4
    37e4:	78 f5       	brcc	.+94     	; 0x3844 <vfprintf+0x248>
    37e6:	88 e0       	ldi	r24, 0x08	; 8
    37e8:	48 2e       	mov	r4, r24
    37ea:	2c c0       	rjmp	.+88     	; 0x3844 <vfprintf+0x248>
    37ec:	96 fc       	sbrc	r9, 6
    37ee:	2a c0       	rjmp	.+84     	; 0x3844 <vfprintf+0x248>
    37f0:	81 2f       	mov	r24, r17
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	8c 15       	cp	r24, r12
    37f6:	9d 05       	cpc	r25, r13
    37f8:	9c f0       	brlt	.+38     	; 0x3820 <vfprintf+0x224>
    37fa:	3c ef       	ldi	r19, 0xFC	; 252
    37fc:	c3 16       	cp	r12, r19
    37fe:	3f ef       	ldi	r19, 0xFF	; 255
    3800:	d3 06       	cpc	r13, r19
    3802:	74 f0       	brlt	.+28     	; 0x3820 <vfprintf+0x224>
    3804:	89 2d       	mov	r24, r9
    3806:	80 68       	ori	r24, 0x80	; 128
    3808:	98 2e       	mov	r9, r24
    380a:	0a c0       	rjmp	.+20     	; 0x3820 <vfprintf+0x224>
    380c:	e2 e0       	ldi	r30, 0x02	; 2
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	ec 0f       	add	r30, r28
    3812:	fd 1f       	adc	r31, r29
    3814:	e1 0f       	add	r30, r17
    3816:	f1 1d       	adc	r31, r1
    3818:	80 81       	ld	r24, Z
    381a:	80 33       	cpi	r24, 0x30	; 48
    381c:	19 f4       	brne	.+6      	; 0x3824 <vfprintf+0x228>
    381e:	11 50       	subi	r17, 0x01	; 1
    3820:	11 11       	cpse	r17, r1
    3822:	f4 cf       	rjmp	.-24     	; 0x380c <vfprintf+0x210>
    3824:	97 fe       	sbrs	r9, 7
    3826:	0e c0       	rjmp	.+28     	; 0x3844 <vfprintf+0x248>
    3828:	44 24       	eor	r4, r4
    382a:	43 94       	inc	r4
    382c:	41 0e       	add	r4, r17
    382e:	81 2f       	mov	r24, r17
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	c8 16       	cp	r12, r24
    3834:	d9 06       	cpc	r13, r25
    3836:	2c f4       	brge	.+10     	; 0x3842 <vfprintf+0x246>
    3838:	1c 19       	sub	r17, r12
    383a:	04 c0       	rjmp	.+8      	; 0x3844 <vfprintf+0x248>
    383c:	44 24       	eor	r4, r4
    383e:	43 94       	inc	r4
    3840:	01 c0       	rjmp	.+2      	; 0x3844 <vfprintf+0x248>
    3842:	10 e0       	ldi	r17, 0x00	; 0
    3844:	97 fe       	sbrs	r9, 7
    3846:	06 c0       	rjmp	.+12     	; 0x3854 <vfprintf+0x258>
    3848:	1c 14       	cp	r1, r12
    384a:	1d 04       	cpc	r1, r13
    384c:	34 f4       	brge	.+12     	; 0x385a <vfprintf+0x25e>
    384e:	c6 01       	movw	r24, r12
    3850:	01 96       	adiw	r24, 0x01	; 1
    3852:	05 c0       	rjmp	.+10     	; 0x385e <vfprintf+0x262>
    3854:	85 e0       	ldi	r24, 0x05	; 5
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	02 c0       	rjmp	.+4      	; 0x385e <vfprintf+0x262>
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	01 11       	cpse	r16, r1
    3860:	01 96       	adiw	r24, 0x01	; 1
    3862:	11 23       	and	r17, r17
    3864:	31 f0       	breq	.+12     	; 0x3872 <vfprintf+0x276>
    3866:	21 2f       	mov	r18, r17
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	2f 5f       	subi	r18, 0xFF	; 255
    386c:	3f 4f       	sbci	r19, 0xFF	; 255
    386e:	82 0f       	add	r24, r18
    3870:	93 1f       	adc	r25, r19
    3872:	25 2d       	mov	r18, r5
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	82 17       	cp	r24, r18
    3878:	93 07       	cpc	r25, r19
    387a:	14 f4       	brge	.+4      	; 0x3880 <vfprintf+0x284>
    387c:	58 1a       	sub	r5, r24
    387e:	01 c0       	rjmp	.+2      	; 0x3882 <vfprintf+0x286>
    3880:	51 2c       	mov	r5, r1
    3882:	89 2d       	mov	r24, r9
    3884:	89 70       	andi	r24, 0x09	; 9
    3886:	41 f4       	brne	.+16     	; 0x3898 <vfprintf+0x29c>
    3888:	55 20       	and	r5, r5
    388a:	31 f0       	breq	.+12     	; 0x3898 <vfprintf+0x29c>
    388c:	b7 01       	movw	r22, r14
    388e:	80 e2       	ldi	r24, 0x20	; 32
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	52 d4       	rcall	.+2212   	; 0x4138 <fputc>
    3894:	5a 94       	dec	r5
    3896:	f8 cf       	rjmp	.-16     	; 0x3888 <vfprintf+0x28c>
    3898:	00 23       	and	r16, r16
    389a:	21 f0       	breq	.+8      	; 0x38a4 <vfprintf+0x2a8>
    389c:	b7 01       	movw	r22, r14
    389e:	80 2f       	mov	r24, r16
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	4a d4       	rcall	.+2196   	; 0x4138 <fputc>
    38a4:	93 fc       	sbrc	r9, 3
    38a6:	08 c0       	rjmp	.+16     	; 0x38b8 <vfprintf+0x2bc>
    38a8:	55 20       	and	r5, r5
    38aa:	31 f0       	breq	.+12     	; 0x38b8 <vfprintf+0x2bc>
    38ac:	b7 01       	movw	r22, r14
    38ae:	80 e3       	ldi	r24, 0x30	; 48
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	42 d4       	rcall	.+2180   	; 0x4138 <fputc>
    38b4:	5a 94       	dec	r5
    38b6:	f8 cf       	rjmp	.-16     	; 0x38a8 <vfprintf+0x2ac>
    38b8:	97 fe       	sbrs	r9, 7
    38ba:	4a c0       	rjmp	.+148    	; 0x3950 <vfprintf+0x354>
    38bc:	46 01       	movw	r8, r12
    38be:	d7 fe       	sbrs	r13, 7
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <vfprintf+0x2ca>
    38c2:	81 2c       	mov	r8, r1
    38c4:	91 2c       	mov	r9, r1
    38c6:	c6 01       	movw	r24, r12
    38c8:	88 19       	sub	r24, r8
    38ca:	99 09       	sbc	r25, r9
    38cc:	f3 01       	movw	r30, r6
    38ce:	e8 0f       	add	r30, r24
    38d0:	f9 1f       	adc	r31, r25
    38d2:	ed 87       	std	Y+13, r30	; 0x0d
    38d4:	fe 87       	std	Y+14, r31	; 0x0e
    38d6:	96 01       	movw	r18, r12
    38d8:	24 19       	sub	r18, r4
    38da:	31 09       	sbc	r19, r1
    38dc:	2f 87       	std	Y+15, r18	; 0x0f
    38de:	38 8b       	std	Y+16, r19	; 0x10
    38e0:	01 2f       	mov	r16, r17
    38e2:	10 e0       	ldi	r17, 0x00	; 0
    38e4:	11 95       	neg	r17
    38e6:	01 95       	neg	r16
    38e8:	11 09       	sbc	r17, r1
    38ea:	3f ef       	ldi	r19, 0xFF	; 255
    38ec:	83 16       	cp	r8, r19
    38ee:	93 06       	cpc	r9, r19
    38f0:	21 f4       	brne	.+8      	; 0x38fa <vfprintf+0x2fe>
    38f2:	b7 01       	movw	r22, r14
    38f4:	8e e2       	ldi	r24, 0x2E	; 46
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	1f d4       	rcall	.+2110   	; 0x4138 <fputc>
    38fa:	c8 14       	cp	r12, r8
    38fc:	d9 04       	cpc	r13, r9
    38fe:	4c f0       	brlt	.+18     	; 0x3912 <vfprintf+0x316>
    3900:	8f 85       	ldd	r24, Y+15	; 0x0f
    3902:	98 89       	ldd	r25, Y+16	; 0x10
    3904:	88 15       	cp	r24, r8
    3906:	99 05       	cpc	r25, r9
    3908:	24 f4       	brge	.+8      	; 0x3912 <vfprintf+0x316>
    390a:	ed 85       	ldd	r30, Y+13	; 0x0d
    390c:	fe 85       	ldd	r31, Y+14	; 0x0e
    390e:	81 81       	ldd	r24, Z+1	; 0x01
    3910:	01 c0       	rjmp	.+2      	; 0x3914 <vfprintf+0x318>
    3912:	80 e3       	ldi	r24, 0x30	; 48
    3914:	f1 e0       	ldi	r31, 0x01	; 1
    3916:	8f 1a       	sub	r8, r31
    3918:	91 08       	sbc	r9, r1
    391a:	2d 85       	ldd	r18, Y+13	; 0x0d
    391c:	3e 85       	ldd	r19, Y+14	; 0x0e
    391e:	2f 5f       	subi	r18, 0xFF	; 255
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	2d 87       	std	Y+13, r18	; 0x0d
    3924:	3e 87       	std	Y+14, r19	; 0x0e
    3926:	80 16       	cp	r8, r16
    3928:	91 06       	cpc	r9, r17
    392a:	24 f0       	brlt	.+8      	; 0x3934 <vfprintf+0x338>
    392c:	b7 01       	movw	r22, r14
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	03 d4       	rcall	.+2054   	; 0x4138 <fputc>
    3932:	db cf       	rjmp	.-74     	; 0x38ea <vfprintf+0x2ee>
    3934:	c8 14       	cp	r12, r8
    3936:	d9 04       	cpc	r13, r9
    3938:	41 f4       	brne	.+16     	; 0x394a <vfprintf+0x34e>
    393a:	9a 81       	ldd	r25, Y+2	; 0x02
    393c:	96 33       	cpi	r25, 0x36	; 54
    393e:	20 f4       	brcc	.+8      	; 0x3948 <vfprintf+0x34c>
    3940:	95 33       	cpi	r25, 0x35	; 53
    3942:	19 f4       	brne	.+6      	; 0x394a <vfprintf+0x34e>
    3944:	3c 85       	ldd	r19, Y+12	; 0x0c
    3946:	34 ff       	sbrs	r19, 4
    3948:	81 e3       	ldi	r24, 0x31	; 49
    394a:	b7 01       	movw	r22, r14
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	48 c0       	rjmp	.+144    	; 0x39e0 <vfprintf+0x3e4>
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	81 33       	cpi	r24, 0x31	; 49
    3954:	19 f0       	breq	.+6      	; 0x395c <vfprintf+0x360>
    3956:	9c 85       	ldd	r25, Y+12	; 0x0c
    3958:	9f 7e       	andi	r25, 0xEF	; 239
    395a:	9c 87       	std	Y+12, r25	; 0x0c
    395c:	b7 01       	movw	r22, r14
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	eb d3       	rcall	.+2006   	; 0x4138 <fputc>
    3962:	11 11       	cpse	r17, r1
    3964:	05 c0       	rjmp	.+10     	; 0x3970 <vfprintf+0x374>
    3966:	94 fc       	sbrc	r9, 4
    3968:	16 c0       	rjmp	.+44     	; 0x3996 <vfprintf+0x39a>
    396a:	85 e6       	ldi	r24, 0x65	; 101
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	15 c0       	rjmp	.+42     	; 0x399a <vfprintf+0x39e>
    3970:	b7 01       	movw	r22, r14
    3972:	8e e2       	ldi	r24, 0x2E	; 46
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	e0 d3       	rcall	.+1984   	; 0x4138 <fputc>
    3978:	1e 5f       	subi	r17, 0xFE	; 254
    397a:	82 e0       	ldi	r24, 0x02	; 2
    397c:	01 e0       	ldi	r16, 0x01	; 1
    397e:	08 0f       	add	r16, r24
    3980:	f3 01       	movw	r30, r6
    3982:	e8 0f       	add	r30, r24
    3984:	f1 1d       	adc	r31, r1
    3986:	80 81       	ld	r24, Z
    3988:	b7 01       	movw	r22, r14
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	d5 d3       	rcall	.+1962   	; 0x4138 <fputc>
    398e:	80 2f       	mov	r24, r16
    3990:	01 13       	cpse	r16, r17
    3992:	f4 cf       	rjmp	.-24     	; 0x397c <vfprintf+0x380>
    3994:	e8 cf       	rjmp	.-48     	; 0x3966 <vfprintf+0x36a>
    3996:	85 e4       	ldi	r24, 0x45	; 69
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	b7 01       	movw	r22, r14
    399c:	cd d3       	rcall	.+1946   	; 0x4138 <fputc>
    399e:	d7 fc       	sbrc	r13, 7
    39a0:	06 c0       	rjmp	.+12     	; 0x39ae <vfprintf+0x3b2>
    39a2:	c1 14       	cp	r12, r1
    39a4:	d1 04       	cpc	r13, r1
    39a6:	41 f4       	brne	.+16     	; 0x39b8 <vfprintf+0x3bc>
    39a8:	ec 85       	ldd	r30, Y+12	; 0x0c
    39aa:	e4 ff       	sbrs	r30, 4
    39ac:	05 c0       	rjmp	.+10     	; 0x39b8 <vfprintf+0x3bc>
    39ae:	d1 94       	neg	r13
    39b0:	c1 94       	neg	r12
    39b2:	d1 08       	sbc	r13, r1
    39b4:	8d e2       	ldi	r24, 0x2D	; 45
    39b6:	01 c0       	rjmp	.+2      	; 0x39ba <vfprintf+0x3be>
    39b8:	8b e2       	ldi	r24, 0x2B	; 43
    39ba:	b7 01       	movw	r22, r14
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	bc d3       	rcall	.+1912   	; 0x4138 <fputc>
    39c0:	80 e3       	ldi	r24, 0x30	; 48
    39c2:	2a e0       	ldi	r18, 0x0A	; 10
    39c4:	c2 16       	cp	r12, r18
    39c6:	d1 04       	cpc	r13, r1
    39c8:	2c f0       	brlt	.+10     	; 0x39d4 <vfprintf+0x3d8>
    39ca:	8f 5f       	subi	r24, 0xFF	; 255
    39cc:	fa e0       	ldi	r31, 0x0A	; 10
    39ce:	cf 1a       	sub	r12, r31
    39d0:	d1 08       	sbc	r13, r1
    39d2:	f7 cf       	rjmp	.-18     	; 0x39c2 <vfprintf+0x3c6>
    39d4:	b7 01       	movw	r22, r14
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	af d3       	rcall	.+1886   	; 0x4138 <fputc>
    39da:	b7 01       	movw	r22, r14
    39dc:	c6 01       	movw	r24, r12
    39de:	c0 96       	adiw	r24, 0x30	; 48
    39e0:	ab d3       	rcall	.+1878   	; 0x4138 <fputc>
    39e2:	49 c1       	rjmp	.+658    	; 0x3c76 <vfprintf+0x67a>
    39e4:	83 36       	cpi	r24, 0x63	; 99
    39e6:	31 f0       	breq	.+12     	; 0x39f4 <vfprintf+0x3f8>
    39e8:	83 37       	cpi	r24, 0x73	; 115
    39ea:	79 f0       	breq	.+30     	; 0x3a0a <vfprintf+0x40e>
    39ec:	83 35       	cpi	r24, 0x53	; 83
    39ee:	09 f0       	breq	.+2      	; 0x39f2 <vfprintf+0x3f6>
    39f0:	52 c0       	rjmp	.+164    	; 0x3a96 <vfprintf+0x49a>
    39f2:	1f c0       	rjmp	.+62     	; 0x3a32 <vfprintf+0x436>
    39f4:	56 01       	movw	r10, r12
    39f6:	32 e0       	ldi	r19, 0x02	; 2
    39f8:	a3 0e       	add	r10, r19
    39fa:	b1 1c       	adc	r11, r1
    39fc:	f6 01       	movw	r30, r12
    39fe:	80 81       	ld	r24, Z
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	01 e0       	ldi	r16, 0x01	; 1
    3a04:	10 e0       	ldi	r17, 0x00	; 0
    3a06:	63 01       	movw	r12, r6
    3a08:	11 c0       	rjmp	.+34     	; 0x3a2c <vfprintf+0x430>
    3a0a:	56 01       	movw	r10, r12
    3a0c:	f2 e0       	ldi	r31, 0x02	; 2
    3a0e:	af 0e       	add	r10, r31
    3a10:	b1 1c       	adc	r11, r1
    3a12:	f6 01       	movw	r30, r12
    3a14:	c0 80       	ld	r12, Z
    3a16:	d1 80       	ldd	r13, Z+1	; 0x01
    3a18:	96 fe       	sbrs	r9, 6
    3a1a:	03 c0       	rjmp	.+6      	; 0x3a22 <vfprintf+0x426>
    3a1c:	61 2f       	mov	r22, r17
    3a1e:	70 e0       	ldi	r23, 0x00	; 0
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <vfprintf+0x42a>
    3a22:	6f ef       	ldi	r22, 0xFF	; 255
    3a24:	7f ef       	ldi	r23, 0xFF	; 255
    3a26:	c6 01       	movw	r24, r12
    3a28:	32 d3       	rcall	.+1636   	; 0x408e <strnlen>
    3a2a:	8c 01       	movw	r16, r24
    3a2c:	f9 2d       	mov	r31, r9
    3a2e:	ff 77       	andi	r31, 0x7F	; 127
    3a30:	13 c0       	rjmp	.+38     	; 0x3a58 <vfprintf+0x45c>
    3a32:	56 01       	movw	r10, r12
    3a34:	22 e0       	ldi	r18, 0x02	; 2
    3a36:	a2 0e       	add	r10, r18
    3a38:	b1 1c       	adc	r11, r1
    3a3a:	f6 01       	movw	r30, r12
    3a3c:	c0 80       	ld	r12, Z
    3a3e:	d1 80       	ldd	r13, Z+1	; 0x01
    3a40:	96 fe       	sbrs	r9, 6
    3a42:	03 c0       	rjmp	.+6      	; 0x3a4a <vfprintf+0x44e>
    3a44:	61 2f       	mov	r22, r17
    3a46:	70 e0       	ldi	r23, 0x00	; 0
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <vfprintf+0x452>
    3a4a:	6f ef       	ldi	r22, 0xFF	; 255
    3a4c:	7f ef       	ldi	r23, 0xFF	; 255
    3a4e:	c6 01       	movw	r24, r12
    3a50:	13 d3       	rcall	.+1574   	; 0x4078 <strnlen_P>
    3a52:	8c 01       	movw	r16, r24
    3a54:	f9 2d       	mov	r31, r9
    3a56:	f0 68       	ori	r31, 0x80	; 128
    3a58:	9f 2e       	mov	r9, r31
    3a5a:	f3 fd       	sbrc	r31, 3
    3a5c:	18 c0       	rjmp	.+48     	; 0x3a8e <vfprintf+0x492>
    3a5e:	85 2d       	mov	r24, r5
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	08 17       	cp	r16, r24
    3a64:	19 07       	cpc	r17, r25
    3a66:	98 f4       	brcc	.+38     	; 0x3a8e <vfprintf+0x492>
    3a68:	b7 01       	movw	r22, r14
    3a6a:	80 e2       	ldi	r24, 0x20	; 32
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	64 d3       	rcall	.+1736   	; 0x4138 <fputc>
    3a70:	5a 94       	dec	r5
    3a72:	f5 cf       	rjmp	.-22     	; 0x3a5e <vfprintf+0x462>
    3a74:	f6 01       	movw	r30, r12
    3a76:	97 fc       	sbrc	r9, 7
    3a78:	85 91       	lpm	r24, Z+
    3a7a:	97 fe       	sbrs	r9, 7
    3a7c:	81 91       	ld	r24, Z+
    3a7e:	6f 01       	movw	r12, r30
    3a80:	b7 01       	movw	r22, r14
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	59 d3       	rcall	.+1714   	; 0x4138 <fputc>
    3a86:	51 10       	cpse	r5, r1
    3a88:	5a 94       	dec	r5
    3a8a:	01 50       	subi	r16, 0x01	; 1
    3a8c:	11 09       	sbc	r17, r1
    3a8e:	01 15       	cp	r16, r1
    3a90:	11 05       	cpc	r17, r1
    3a92:	81 f7       	brne	.-32     	; 0x3a74 <vfprintf+0x478>
    3a94:	f0 c0       	rjmp	.+480    	; 0x3c76 <vfprintf+0x67a>
    3a96:	84 36       	cpi	r24, 0x64	; 100
    3a98:	11 f0       	breq	.+4      	; 0x3a9e <vfprintf+0x4a2>
    3a9a:	89 36       	cpi	r24, 0x69	; 105
    3a9c:	59 f5       	brne	.+86     	; 0x3af4 <vfprintf+0x4f8>
    3a9e:	56 01       	movw	r10, r12
    3aa0:	97 fe       	sbrs	r9, 7
    3aa2:	09 c0       	rjmp	.+18     	; 0x3ab6 <vfprintf+0x4ba>
    3aa4:	24 e0       	ldi	r18, 0x04	; 4
    3aa6:	a2 0e       	add	r10, r18
    3aa8:	b1 1c       	adc	r11, r1
    3aaa:	f6 01       	movw	r30, r12
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	82 81       	ldd	r24, Z+2	; 0x02
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	0a c0       	rjmp	.+20     	; 0x3aca <vfprintf+0x4ce>
    3ab6:	f2 e0       	ldi	r31, 0x02	; 2
    3ab8:	af 0e       	add	r10, r31
    3aba:	b1 1c       	adc	r11, r1
    3abc:	f6 01       	movw	r30, r12
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	07 2e       	mov	r0, r23
    3ac4:	00 0c       	add	r0, r0
    3ac6:	88 0b       	sbc	r24, r24
    3ac8:	99 0b       	sbc	r25, r25
    3aca:	f9 2d       	mov	r31, r9
    3acc:	ff 76       	andi	r31, 0x6F	; 111
    3ace:	9f 2e       	mov	r9, r31
    3ad0:	97 ff       	sbrs	r25, 7
    3ad2:	09 c0       	rjmp	.+18     	; 0x3ae6 <vfprintf+0x4ea>
    3ad4:	90 95       	com	r25
    3ad6:	80 95       	com	r24
    3ad8:	70 95       	com	r23
    3ada:	61 95       	neg	r22
    3adc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ade:	8f 4f       	sbci	r24, 0xFF	; 255
    3ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae2:	f0 68       	ori	r31, 0x80	; 128
    3ae4:	9f 2e       	mov	r9, r31
    3ae6:	2a e0       	ldi	r18, 0x0A	; 10
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	a3 01       	movw	r20, r6
    3aec:	a4 d3       	rcall	.+1864   	; 0x4236 <__ultoa_invert>
    3aee:	c8 2e       	mov	r12, r24
    3af0:	c6 18       	sub	r12, r6
    3af2:	3e c0       	rjmp	.+124    	; 0x3b70 <vfprintf+0x574>
    3af4:	09 2d       	mov	r16, r9
    3af6:	85 37       	cpi	r24, 0x75	; 117
    3af8:	21 f4       	brne	.+8      	; 0x3b02 <vfprintf+0x506>
    3afa:	0f 7e       	andi	r16, 0xEF	; 239
    3afc:	2a e0       	ldi	r18, 0x0A	; 10
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	1d c0       	rjmp	.+58     	; 0x3b3c <vfprintf+0x540>
    3b02:	09 7f       	andi	r16, 0xF9	; 249
    3b04:	8f 36       	cpi	r24, 0x6F	; 111
    3b06:	91 f0       	breq	.+36     	; 0x3b2c <vfprintf+0x530>
    3b08:	18 f4       	brcc	.+6      	; 0x3b10 <vfprintf+0x514>
    3b0a:	88 35       	cpi	r24, 0x58	; 88
    3b0c:	59 f0       	breq	.+22     	; 0x3b24 <vfprintf+0x528>
    3b0e:	bc c0       	rjmp	.+376    	; 0x3c88 <vfprintf+0x68c>
    3b10:	80 37       	cpi	r24, 0x70	; 112
    3b12:	19 f0       	breq	.+6      	; 0x3b1a <vfprintf+0x51e>
    3b14:	88 37       	cpi	r24, 0x78	; 120
    3b16:	11 f0       	breq	.+4      	; 0x3b1c <vfprintf+0x520>
    3b18:	b7 c0       	rjmp	.+366    	; 0x3c88 <vfprintf+0x68c>
    3b1a:	00 61       	ori	r16, 0x10	; 16
    3b1c:	04 ff       	sbrs	r16, 4
    3b1e:	09 c0       	rjmp	.+18     	; 0x3b32 <vfprintf+0x536>
    3b20:	04 60       	ori	r16, 0x04	; 4
    3b22:	07 c0       	rjmp	.+14     	; 0x3b32 <vfprintf+0x536>
    3b24:	94 fe       	sbrs	r9, 4
    3b26:	08 c0       	rjmp	.+16     	; 0x3b38 <vfprintf+0x53c>
    3b28:	06 60       	ori	r16, 0x06	; 6
    3b2a:	06 c0       	rjmp	.+12     	; 0x3b38 <vfprintf+0x53c>
    3b2c:	28 e0       	ldi	r18, 0x08	; 8
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	05 c0       	rjmp	.+10     	; 0x3b3c <vfprintf+0x540>
    3b32:	20 e1       	ldi	r18, 0x10	; 16
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	02 c0       	rjmp	.+4      	; 0x3b3c <vfprintf+0x540>
    3b38:	20 e1       	ldi	r18, 0x10	; 16
    3b3a:	32 e0       	ldi	r19, 0x02	; 2
    3b3c:	56 01       	movw	r10, r12
    3b3e:	07 ff       	sbrs	r16, 7
    3b40:	09 c0       	rjmp	.+18     	; 0x3b54 <vfprintf+0x558>
    3b42:	84 e0       	ldi	r24, 0x04	; 4
    3b44:	a8 0e       	add	r10, r24
    3b46:	b1 1c       	adc	r11, r1
    3b48:	f6 01       	movw	r30, r12
    3b4a:	60 81       	ld	r22, Z
    3b4c:	71 81       	ldd	r23, Z+1	; 0x01
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	93 81       	ldd	r25, Z+3	; 0x03
    3b52:	08 c0       	rjmp	.+16     	; 0x3b64 <vfprintf+0x568>
    3b54:	f2 e0       	ldi	r31, 0x02	; 2
    3b56:	af 0e       	add	r10, r31
    3b58:	b1 1c       	adc	r11, r1
    3b5a:	f6 01       	movw	r30, r12
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	a3 01       	movw	r20, r6
    3b66:	67 d3       	rcall	.+1742   	; 0x4236 <__ultoa_invert>
    3b68:	c8 2e       	mov	r12, r24
    3b6a:	c6 18       	sub	r12, r6
    3b6c:	0f 77       	andi	r16, 0x7F	; 127
    3b6e:	90 2e       	mov	r9, r16
    3b70:	96 fe       	sbrs	r9, 6
    3b72:	0b c0       	rjmp	.+22     	; 0x3b8a <vfprintf+0x58e>
    3b74:	09 2d       	mov	r16, r9
    3b76:	0e 7f       	andi	r16, 0xFE	; 254
    3b78:	c1 16       	cp	r12, r17
    3b7a:	50 f4       	brcc	.+20     	; 0x3b90 <vfprintf+0x594>
    3b7c:	94 fe       	sbrs	r9, 4
    3b7e:	0a c0       	rjmp	.+20     	; 0x3b94 <vfprintf+0x598>
    3b80:	92 fc       	sbrc	r9, 2
    3b82:	08 c0       	rjmp	.+16     	; 0x3b94 <vfprintf+0x598>
    3b84:	09 2d       	mov	r16, r9
    3b86:	0e 7e       	andi	r16, 0xEE	; 238
    3b88:	05 c0       	rjmp	.+10     	; 0x3b94 <vfprintf+0x598>
    3b8a:	dc 2c       	mov	r13, r12
    3b8c:	09 2d       	mov	r16, r9
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <vfprintf+0x59a>
    3b90:	dc 2c       	mov	r13, r12
    3b92:	01 c0       	rjmp	.+2      	; 0x3b96 <vfprintf+0x59a>
    3b94:	d1 2e       	mov	r13, r17
    3b96:	04 ff       	sbrs	r16, 4
    3b98:	0d c0       	rjmp	.+26     	; 0x3bb4 <vfprintf+0x5b8>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ec 0d       	add	r30, r12
    3b9e:	f1 1d       	adc	r31, r1
    3ba0:	80 81       	ld	r24, Z
    3ba2:	80 33       	cpi	r24, 0x30	; 48
    3ba4:	11 f4       	brne	.+4      	; 0x3baa <vfprintf+0x5ae>
    3ba6:	09 7e       	andi	r16, 0xE9	; 233
    3ba8:	09 c0       	rjmp	.+18     	; 0x3bbc <vfprintf+0x5c0>
    3baa:	02 ff       	sbrs	r16, 2
    3bac:	06 c0       	rjmp	.+12     	; 0x3bba <vfprintf+0x5be>
    3bae:	d3 94       	inc	r13
    3bb0:	d3 94       	inc	r13
    3bb2:	04 c0       	rjmp	.+8      	; 0x3bbc <vfprintf+0x5c0>
    3bb4:	80 2f       	mov	r24, r16
    3bb6:	86 78       	andi	r24, 0x86	; 134
    3bb8:	09 f0       	breq	.+2      	; 0x3bbc <vfprintf+0x5c0>
    3bba:	d3 94       	inc	r13
    3bbc:	03 fd       	sbrc	r16, 3
    3bbe:	10 c0       	rjmp	.+32     	; 0x3be0 <vfprintf+0x5e4>
    3bc0:	00 ff       	sbrs	r16, 0
    3bc2:	06 c0       	rjmp	.+12     	; 0x3bd0 <vfprintf+0x5d4>
    3bc4:	1c 2d       	mov	r17, r12
    3bc6:	d5 14       	cp	r13, r5
    3bc8:	78 f4       	brcc	.+30     	; 0x3be8 <vfprintf+0x5ec>
    3bca:	15 0d       	add	r17, r5
    3bcc:	1d 19       	sub	r17, r13
    3bce:	0c c0       	rjmp	.+24     	; 0x3be8 <vfprintf+0x5ec>
    3bd0:	d5 14       	cp	r13, r5
    3bd2:	50 f4       	brcc	.+20     	; 0x3be8 <vfprintf+0x5ec>
    3bd4:	b7 01       	movw	r22, r14
    3bd6:	80 e2       	ldi	r24, 0x20	; 32
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	ae d2       	rcall	.+1372   	; 0x4138 <fputc>
    3bdc:	d3 94       	inc	r13
    3bde:	f8 cf       	rjmp	.-16     	; 0x3bd0 <vfprintf+0x5d4>
    3be0:	d5 14       	cp	r13, r5
    3be2:	10 f4       	brcc	.+4      	; 0x3be8 <vfprintf+0x5ec>
    3be4:	5d 18       	sub	r5, r13
    3be6:	01 c0       	rjmp	.+2      	; 0x3bea <vfprintf+0x5ee>
    3be8:	51 2c       	mov	r5, r1
    3bea:	04 ff       	sbrs	r16, 4
    3bec:	0f c0       	rjmp	.+30     	; 0x3c0c <vfprintf+0x610>
    3bee:	b7 01       	movw	r22, r14
    3bf0:	80 e3       	ldi	r24, 0x30	; 48
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a1 d2       	rcall	.+1346   	; 0x4138 <fputc>
    3bf6:	02 ff       	sbrs	r16, 2
    3bf8:	16 c0       	rjmp	.+44     	; 0x3c26 <vfprintf+0x62a>
    3bfa:	01 fd       	sbrc	r16, 1
    3bfc:	03 c0       	rjmp	.+6      	; 0x3c04 <vfprintf+0x608>
    3bfe:	88 e7       	ldi	r24, 0x78	; 120
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <vfprintf+0x60c>
    3c04:	88 e5       	ldi	r24, 0x58	; 88
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	b7 01       	movw	r22, r14
    3c0a:	0c c0       	rjmp	.+24     	; 0x3c24 <vfprintf+0x628>
    3c0c:	80 2f       	mov	r24, r16
    3c0e:	86 78       	andi	r24, 0x86	; 134
    3c10:	51 f0       	breq	.+20     	; 0x3c26 <vfprintf+0x62a>
    3c12:	01 ff       	sbrs	r16, 1
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <vfprintf+0x61e>
    3c16:	8b e2       	ldi	r24, 0x2B	; 43
    3c18:	01 c0       	rjmp	.+2      	; 0x3c1c <vfprintf+0x620>
    3c1a:	80 e2       	ldi	r24, 0x20	; 32
    3c1c:	07 fd       	sbrc	r16, 7
    3c1e:	8d e2       	ldi	r24, 0x2D	; 45
    3c20:	b7 01       	movw	r22, r14
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	89 d2       	rcall	.+1298   	; 0x4138 <fputc>
    3c26:	c1 16       	cp	r12, r17
    3c28:	30 f4       	brcc	.+12     	; 0x3c36 <vfprintf+0x63a>
    3c2a:	b7 01       	movw	r22, r14
    3c2c:	80 e3       	ldi	r24, 0x30	; 48
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	83 d2       	rcall	.+1286   	; 0x4138 <fputc>
    3c32:	11 50       	subi	r17, 0x01	; 1
    3c34:	f8 cf       	rjmp	.-16     	; 0x3c26 <vfprintf+0x62a>
    3c36:	ca 94       	dec	r12
    3c38:	f3 01       	movw	r30, r6
    3c3a:	ec 0d       	add	r30, r12
    3c3c:	f1 1d       	adc	r31, r1
    3c3e:	80 81       	ld	r24, Z
    3c40:	b7 01       	movw	r22, r14
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	79 d2       	rcall	.+1266   	; 0x4138 <fputc>
    3c46:	c1 10       	cpse	r12, r1
    3c48:	f6 cf       	rjmp	.-20     	; 0x3c36 <vfprintf+0x63a>
    3c4a:	15 c0       	rjmp	.+42     	; 0x3c76 <vfprintf+0x67a>
    3c4c:	f4 e0       	ldi	r31, 0x04	; 4
    3c4e:	f5 15       	cp	r31, r5
    3c50:	50 f5       	brcc	.+84     	; 0x3ca6 <vfprintf+0x6aa>
    3c52:	84 e0       	ldi	r24, 0x04	; 4
    3c54:	58 1a       	sub	r5, r24
    3c56:	93 fe       	sbrs	r9, 3
    3c58:	1e c0       	rjmp	.+60     	; 0x3c96 <vfprintf+0x69a>
    3c5a:	01 11       	cpse	r16, r1
    3c5c:	25 c0       	rjmp	.+74     	; 0x3ca8 <vfprintf+0x6ac>
    3c5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c60:	23 ff       	sbrs	r18, 3
    3c62:	27 c0       	rjmp	.+78     	; 0x3cb2 <vfprintf+0x6b6>
    3c64:	06 e5       	ldi	r16, 0x56	; 86
    3c66:	12 e0       	ldi	r17, 0x02	; 2
    3c68:	39 2d       	mov	r19, r9
    3c6a:	30 71       	andi	r19, 0x10	; 16
    3c6c:	93 2e       	mov	r9, r19
    3c6e:	f8 01       	movw	r30, r16
    3c70:	84 91       	lpm	r24, Z
    3c72:	81 11       	cpse	r24, r1
    3c74:	21 c0       	rjmp	.+66     	; 0x3cb8 <vfprintf+0x6bc>
    3c76:	55 20       	and	r5, r5
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <vfprintf+0x680>
    3c7a:	fc cc       	rjmp	.-1544   	; 0x3674 <vfprintf+0x78>
    3c7c:	b7 01       	movw	r22, r14
    3c7e:	80 e2       	ldi	r24, 0x20	; 32
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	5a d2       	rcall	.+1204   	; 0x4138 <fputc>
    3c84:	5a 94       	dec	r5
    3c86:	f7 cf       	rjmp	.-18     	; 0x3c76 <vfprintf+0x67a>
    3c88:	f7 01       	movw	r30, r14
    3c8a:	86 81       	ldd	r24, Z+6	; 0x06
    3c8c:	97 81       	ldd	r25, Z+7	; 0x07
    3c8e:	23 c0       	rjmp	.+70     	; 0x3cd6 <vfprintf+0x6da>
    3c90:	8f ef       	ldi	r24, 0xFF	; 255
    3c92:	9f ef       	ldi	r25, 0xFF	; 255
    3c94:	20 c0       	rjmp	.+64     	; 0x3cd6 <vfprintf+0x6da>
    3c96:	b7 01       	movw	r22, r14
    3c98:	80 e2       	ldi	r24, 0x20	; 32
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	4d d2       	rcall	.+1178   	; 0x4138 <fputc>
    3c9e:	5a 94       	dec	r5
    3ca0:	51 10       	cpse	r5, r1
    3ca2:	f9 cf       	rjmp	.-14     	; 0x3c96 <vfprintf+0x69a>
    3ca4:	da cf       	rjmp	.-76     	; 0x3c5a <vfprintf+0x65e>
    3ca6:	51 2c       	mov	r5, r1
    3ca8:	b7 01       	movw	r22, r14
    3caa:	80 2f       	mov	r24, r16
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	44 d2       	rcall	.+1160   	; 0x4138 <fputc>
    3cb0:	d6 cf       	rjmp	.-84     	; 0x3c5e <vfprintf+0x662>
    3cb2:	0a e5       	ldi	r16, 0x5A	; 90
    3cb4:	12 e0       	ldi	r17, 0x02	; 2
    3cb6:	d8 cf       	rjmp	.-80     	; 0x3c68 <vfprintf+0x66c>
    3cb8:	91 10       	cpse	r9, r1
    3cba:	80 52       	subi	r24, 0x20	; 32
    3cbc:	b7 01       	movw	r22, r14
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	3b d2       	rcall	.+1142   	; 0x4138 <fputc>
    3cc2:	0f 5f       	subi	r16, 0xFF	; 255
    3cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc6:	d3 cf       	rjmp	.-90     	; 0x3c6e <vfprintf+0x672>
    3cc8:	23 e0       	ldi	r18, 0x03	; 3
    3cca:	25 15       	cp	r18, r5
    3ccc:	10 f4       	brcc	.+4      	; 0x3cd2 <vfprintf+0x6d6>
    3cce:	83 e0       	ldi	r24, 0x03	; 3
    3cd0:	c1 cf       	rjmp	.-126    	; 0x3c54 <vfprintf+0x658>
    3cd2:	51 2c       	mov	r5, r1
    3cd4:	c4 cf       	rjmp	.-120    	; 0x3c5e <vfprintf+0x662>
    3cd6:	60 96       	adiw	r28, 0x10	; 16
    3cd8:	cd bf       	out	0x3d, r28	; 61
    3cda:	de bf       	out	0x3e, r29	; 62
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	1f 91       	pop	r17
    3ce2:	0f 91       	pop	r16
    3ce4:	ff 90       	pop	r15
    3ce6:	ef 90       	pop	r14
    3ce8:	df 90       	pop	r13
    3cea:	cf 90       	pop	r12
    3cec:	bf 90       	pop	r11
    3cee:	af 90       	pop	r10
    3cf0:	9f 90       	pop	r9
    3cf2:	8f 90       	pop	r8
    3cf4:	7f 90       	pop	r7
    3cf6:	6f 90       	pop	r6
    3cf8:	5f 90       	pop	r5
    3cfa:	4f 90       	pop	r4
    3cfc:	3f 90       	pop	r3
    3cfe:	2f 90       	pop	r2
    3d00:	08 95       	ret

00003d02 <__udivmodsi4>:
    3d02:	a1 e2       	ldi	r26, 0x21	; 33
    3d04:	1a 2e       	mov	r1, r26
    3d06:	aa 1b       	sub	r26, r26
    3d08:	bb 1b       	sub	r27, r27
    3d0a:	fd 01       	movw	r30, r26
    3d0c:	0d c0       	rjmp	.+26     	; 0x3d28 <__udivmodsi4_ep>

00003d0e <__udivmodsi4_loop>:
    3d0e:	aa 1f       	adc	r26, r26
    3d10:	bb 1f       	adc	r27, r27
    3d12:	ee 1f       	adc	r30, r30
    3d14:	ff 1f       	adc	r31, r31
    3d16:	a2 17       	cp	r26, r18
    3d18:	b3 07       	cpc	r27, r19
    3d1a:	e4 07       	cpc	r30, r20
    3d1c:	f5 07       	cpc	r31, r21
    3d1e:	20 f0       	brcs	.+8      	; 0x3d28 <__udivmodsi4_ep>
    3d20:	a2 1b       	sub	r26, r18
    3d22:	b3 0b       	sbc	r27, r19
    3d24:	e4 0b       	sbc	r30, r20
    3d26:	f5 0b       	sbc	r31, r21

00003d28 <__udivmodsi4_ep>:
    3d28:	66 1f       	adc	r22, r22
    3d2a:	77 1f       	adc	r23, r23
    3d2c:	88 1f       	adc	r24, r24
    3d2e:	99 1f       	adc	r25, r25
    3d30:	1a 94       	dec	r1
    3d32:	69 f7       	brne	.-38     	; 0x3d0e <__udivmodsi4_loop>
    3d34:	60 95       	com	r22
    3d36:	70 95       	com	r23
    3d38:	80 95       	com	r24
    3d3a:	90 95       	com	r25
    3d3c:	9b 01       	movw	r18, r22
    3d3e:	ac 01       	movw	r20, r24
    3d40:	bd 01       	movw	r22, r26
    3d42:	cf 01       	movw	r24, r30
    3d44:	08 95       	ret

00003d46 <__umulhisi3>:
    3d46:	a2 9f       	mul	r26, r18
    3d48:	b0 01       	movw	r22, r0
    3d4a:	b3 9f       	mul	r27, r19
    3d4c:	c0 01       	movw	r24, r0
    3d4e:	a3 9f       	mul	r26, r19
    3d50:	70 0d       	add	r23, r0
    3d52:	81 1d       	adc	r24, r1
    3d54:	11 24       	eor	r1, r1
    3d56:	91 1d       	adc	r25, r1
    3d58:	b2 9f       	mul	r27, r18
    3d5a:	70 0d       	add	r23, r0
    3d5c:	81 1d       	adc	r24, r1
    3d5e:	11 24       	eor	r1, r1
    3d60:	91 1d       	adc	r25, r1
    3d62:	08 95       	ret

00003d64 <__muldi3>:
    3d64:	df 93       	push	r29
    3d66:	cf 93       	push	r28
    3d68:	1f 93       	push	r17
    3d6a:	0f 93       	push	r16
    3d6c:	9a 9d       	mul	r25, r10
    3d6e:	f0 2d       	mov	r31, r0
    3d70:	21 9f       	mul	r18, r17
    3d72:	f0 0d       	add	r31, r0
    3d74:	8b 9d       	mul	r24, r11
    3d76:	f0 0d       	add	r31, r0
    3d78:	8a 9d       	mul	r24, r10
    3d7a:	e0 2d       	mov	r30, r0
    3d7c:	f1 0d       	add	r31, r1
    3d7e:	03 9f       	mul	r16, r19
    3d80:	f0 0d       	add	r31, r0
    3d82:	02 9f       	mul	r16, r18
    3d84:	e0 0d       	add	r30, r0
    3d86:	f1 1d       	adc	r31, r1
    3d88:	4e 9d       	mul	r20, r14
    3d8a:	e0 0d       	add	r30, r0
    3d8c:	f1 1d       	adc	r31, r1
    3d8e:	5e 9d       	mul	r21, r14
    3d90:	f0 0d       	add	r31, r0
    3d92:	4f 9d       	mul	r20, r15
    3d94:	f0 0d       	add	r31, r0
    3d96:	7f 93       	push	r23
    3d98:	6f 93       	push	r22
    3d9a:	bf 92       	push	r11
    3d9c:	af 92       	push	r10
    3d9e:	5f 93       	push	r21
    3da0:	4f 93       	push	r20
    3da2:	d5 01       	movw	r26, r10
    3da4:	d0 df       	rcall	.-96     	; 0x3d46 <__umulhisi3>
    3da6:	8b 01       	movw	r16, r22
    3da8:	ac 01       	movw	r20, r24
    3daa:	d7 01       	movw	r26, r14
    3dac:	cc df       	rcall	.-104    	; 0x3d46 <__umulhisi3>
    3dae:	eb 01       	movw	r28, r22
    3db0:	e8 0f       	add	r30, r24
    3db2:	f9 1f       	adc	r31, r25
    3db4:	d6 01       	movw	r26, r12
    3db6:	1f d0       	rcall	.+62     	; 0x3df6 <__muldi3_6>
    3db8:	2f 91       	pop	r18
    3dba:	3f 91       	pop	r19
    3dbc:	d6 01       	movw	r26, r12
    3dbe:	c3 df       	rcall	.-122    	; 0x3d46 <__umulhisi3>
    3dc0:	c6 0f       	add	r28, r22
    3dc2:	d7 1f       	adc	r29, r23
    3dc4:	e8 1f       	adc	r30, r24
    3dc6:	f9 1f       	adc	r31, r25
    3dc8:	af 91       	pop	r26
    3dca:	bf 91       	pop	r27
    3dcc:	14 d0       	rcall	.+40     	; 0x3df6 <__muldi3_6>
    3dce:	2f 91       	pop	r18
    3dd0:	3f 91       	pop	r19
    3dd2:	b9 df       	rcall	.-142    	; 0x3d46 <__umulhisi3>
    3dd4:	c6 0f       	add	r28, r22
    3dd6:	d7 1f       	adc	r29, r23
    3dd8:	e8 1f       	adc	r30, r24
    3dda:	f9 1f       	adc	r31, r25
    3ddc:	d6 01       	movw	r26, r12
    3dde:	b3 df       	rcall	.-154    	; 0x3d46 <__umulhisi3>
    3de0:	e6 0f       	add	r30, r22
    3de2:	f7 1f       	adc	r31, r23
    3de4:	98 01       	movw	r18, r16
    3de6:	be 01       	movw	r22, r28
    3de8:	cf 01       	movw	r24, r30
    3dea:	11 24       	eor	r1, r1
    3dec:	0f 91       	pop	r16
    3dee:	1f 91       	pop	r17
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	08 95       	ret

00003df6 <__muldi3_6>:
    3df6:	a7 df       	rcall	.-178    	; 0x3d46 <__umulhisi3>
    3df8:	46 0f       	add	r20, r22
    3dfa:	57 1f       	adc	r21, r23
    3dfc:	c8 1f       	adc	r28, r24
    3dfe:	d9 1f       	adc	r29, r25
    3e00:	08 f4       	brcc	.+2      	; 0x3e04 <__muldi3_6+0xe>
    3e02:	31 96       	adiw	r30, 0x01	; 1
    3e04:	08 95       	ret

00003e06 <__ashldi3>:
    3e06:	0f 93       	push	r16
    3e08:	08 30       	cpi	r16, 0x08	; 8
    3e0a:	90 f0       	brcs	.+36     	; 0x3e30 <__ashldi3+0x2a>
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	87 2f       	mov	r24, r23
    3e10:	76 2f       	mov	r23, r22
    3e12:	65 2f       	mov	r22, r21
    3e14:	54 2f       	mov	r21, r20
    3e16:	43 2f       	mov	r20, r19
    3e18:	32 2f       	mov	r19, r18
    3e1a:	22 27       	eor	r18, r18
    3e1c:	08 50       	subi	r16, 0x08	; 8
    3e1e:	f4 cf       	rjmp	.-24     	; 0x3e08 <__ashldi3+0x2>
    3e20:	22 0f       	add	r18, r18
    3e22:	33 1f       	adc	r19, r19
    3e24:	44 1f       	adc	r20, r20
    3e26:	55 1f       	adc	r21, r21
    3e28:	66 1f       	adc	r22, r22
    3e2a:	77 1f       	adc	r23, r23
    3e2c:	88 1f       	adc	r24, r24
    3e2e:	99 1f       	adc	r25, r25
    3e30:	0a 95       	dec	r16
    3e32:	b2 f7       	brpl	.-20     	; 0x3e20 <__ashldi3+0x1a>
    3e34:	0f 91       	pop	r16
    3e36:	08 95       	ret

00003e38 <__ashrdi3>:
    3e38:	97 fb       	bst	r25, 7
    3e3a:	10 f8       	bld	r1, 0

00003e3c <__lshrdi3>:
    3e3c:	16 94       	lsr	r1
    3e3e:	00 08       	sbc	r0, r0
    3e40:	0f 93       	push	r16
    3e42:	08 30       	cpi	r16, 0x08	; 8
    3e44:	98 f0       	brcs	.+38     	; 0x3e6c <__lshrdi3+0x30>
    3e46:	08 50       	subi	r16, 0x08	; 8
    3e48:	23 2f       	mov	r18, r19
    3e4a:	34 2f       	mov	r19, r20
    3e4c:	45 2f       	mov	r20, r21
    3e4e:	56 2f       	mov	r21, r22
    3e50:	67 2f       	mov	r22, r23
    3e52:	78 2f       	mov	r23, r24
    3e54:	89 2f       	mov	r24, r25
    3e56:	90 2d       	mov	r25, r0
    3e58:	f4 cf       	rjmp	.-24     	; 0x3e42 <__lshrdi3+0x6>
    3e5a:	05 94       	asr	r0
    3e5c:	97 95       	ror	r25
    3e5e:	87 95       	ror	r24
    3e60:	77 95       	ror	r23
    3e62:	67 95       	ror	r22
    3e64:	57 95       	ror	r21
    3e66:	47 95       	ror	r20
    3e68:	37 95       	ror	r19
    3e6a:	27 95       	ror	r18
    3e6c:	0a 95       	dec	r16
    3e6e:	aa f7       	brpl	.-22     	; 0x3e5a <__lshrdi3+0x1e>
    3e70:	0f 91       	pop	r16
    3e72:	08 95       	ret

00003e74 <__adddi3>:
    3e74:	2a 0d       	add	r18, r10
    3e76:	3b 1d       	adc	r19, r11
    3e78:	4c 1d       	adc	r20, r12
    3e7a:	5d 1d       	adc	r21, r13
    3e7c:	6e 1d       	adc	r22, r14
    3e7e:	7f 1d       	adc	r23, r15
    3e80:	80 1f       	adc	r24, r16
    3e82:	91 1f       	adc	r25, r17
    3e84:	08 95       	ret

00003e86 <__adddi3_s8>:
    3e86:	00 24       	eor	r0, r0
    3e88:	a7 fd       	sbrc	r26, 7
    3e8a:	00 94       	com	r0
    3e8c:	2a 0f       	add	r18, r26
    3e8e:	30 1d       	adc	r19, r0
    3e90:	40 1d       	adc	r20, r0
    3e92:	50 1d       	adc	r21, r0
    3e94:	60 1d       	adc	r22, r0
    3e96:	70 1d       	adc	r23, r0
    3e98:	80 1d       	adc	r24, r0
    3e9a:	90 1d       	adc	r25, r0
    3e9c:	08 95       	ret

00003e9e <__subdi3>:
    3e9e:	2a 19       	sub	r18, r10
    3ea0:	3b 09       	sbc	r19, r11
    3ea2:	4c 09       	sbc	r20, r12
    3ea4:	5d 09       	sbc	r21, r13
    3ea6:	6e 09       	sbc	r22, r14
    3ea8:	7f 09       	sbc	r23, r15
    3eaa:	80 0b       	sbc	r24, r16
    3eac:	91 0b       	sbc	r25, r17
    3eae:	08 95       	ret

00003eb0 <__cmpdi2_s8>:
    3eb0:	00 24       	eor	r0, r0
    3eb2:	a7 fd       	sbrc	r26, 7
    3eb4:	00 94       	com	r0
    3eb6:	2a 17       	cp	r18, r26
    3eb8:	30 05       	cpc	r19, r0
    3eba:	40 05       	cpc	r20, r0
    3ebc:	50 05       	cpc	r21, r0
    3ebe:	60 05       	cpc	r22, r0
    3ec0:	70 05       	cpc	r23, r0
    3ec2:	80 05       	cpc	r24, r0
    3ec4:	90 05       	cpc	r25, r0
    3ec6:	08 95       	ret

00003ec8 <__ftoa_engine>:
    3ec8:	28 30       	cpi	r18, 0x08	; 8
    3eca:	08 f0       	brcs	.+2      	; 0x3ece <__ftoa_engine+0x6>
    3ecc:	27 e0       	ldi	r18, 0x07	; 7
    3ece:	33 27       	eor	r19, r19
    3ed0:	da 01       	movw	r26, r20
    3ed2:	99 0f       	add	r25, r25
    3ed4:	31 1d       	adc	r19, r1
    3ed6:	87 fd       	sbrc	r24, 7
    3ed8:	91 60       	ori	r25, 0x01	; 1
    3eda:	00 96       	adiw	r24, 0x00	; 0
    3edc:	61 05       	cpc	r22, r1
    3ede:	71 05       	cpc	r23, r1
    3ee0:	39 f4       	brne	.+14     	; 0x3ef0 <__ftoa_engine+0x28>
    3ee2:	32 60       	ori	r19, 0x02	; 2
    3ee4:	2e 5f       	subi	r18, 0xFE	; 254
    3ee6:	3d 93       	st	X+, r19
    3ee8:	30 e3       	ldi	r19, 0x30	; 48
    3eea:	2a 95       	dec	r18
    3eec:	e1 f7       	brne	.-8      	; 0x3ee6 <__ftoa_engine+0x1e>
    3eee:	08 95       	ret
    3ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ef2:	30 f0       	brcs	.+12     	; 0x3f00 <__ftoa_engine+0x38>
    3ef4:	80 38       	cpi	r24, 0x80	; 128
    3ef6:	71 05       	cpc	r23, r1
    3ef8:	61 05       	cpc	r22, r1
    3efa:	09 f0       	breq	.+2      	; 0x3efe <__ftoa_engine+0x36>
    3efc:	3c 5f       	subi	r19, 0xFC	; 252
    3efe:	3c 5f       	subi	r19, 0xFC	; 252
    3f00:	3d 93       	st	X+, r19
    3f02:	91 30       	cpi	r25, 0x01	; 1
    3f04:	08 f0       	brcs	.+2      	; 0x3f08 <__ftoa_engine+0x40>
    3f06:	80 68       	ori	r24, 0x80	; 128
    3f08:	91 1d       	adc	r25, r1
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	1f 93       	push	r17
    3f10:	0f 93       	push	r16
    3f12:	ff 92       	push	r15
    3f14:	ef 92       	push	r14
    3f16:	19 2f       	mov	r17, r25
    3f18:	98 7f       	andi	r25, 0xF8	; 248
    3f1a:	96 95       	lsr	r25
    3f1c:	e9 2f       	mov	r30, r25
    3f1e:	96 95       	lsr	r25
    3f20:	96 95       	lsr	r25
    3f22:	e9 0f       	add	r30, r25
    3f24:	ff 27       	eor	r31, r31
    3f26:	e8 54       	subi	r30, 0x48	; 72
    3f28:	fd 4f       	sbci	r31, 0xFD	; 253
    3f2a:	99 27       	eor	r25, r25
    3f2c:	33 27       	eor	r19, r19
    3f2e:	ee 24       	eor	r14, r14
    3f30:	ff 24       	eor	r15, r15
    3f32:	a7 01       	movw	r20, r14
    3f34:	e7 01       	movw	r28, r14
    3f36:	05 90       	lpm	r0, Z+
    3f38:	08 94       	sec
    3f3a:	07 94       	ror	r0
    3f3c:	28 f4       	brcc	.+10     	; 0x3f48 <__ftoa_engine+0x80>
    3f3e:	36 0f       	add	r19, r22
    3f40:	e7 1e       	adc	r14, r23
    3f42:	f8 1e       	adc	r15, r24
    3f44:	49 1f       	adc	r20, r25
    3f46:	51 1d       	adc	r21, r1
    3f48:	66 0f       	add	r22, r22
    3f4a:	77 1f       	adc	r23, r23
    3f4c:	88 1f       	adc	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	06 94       	lsr	r0
    3f52:	a1 f7       	brne	.-24     	; 0x3f3c <__ftoa_engine+0x74>
    3f54:	05 90       	lpm	r0, Z+
    3f56:	07 94       	ror	r0
    3f58:	28 f4       	brcc	.+10     	; 0x3f64 <__ftoa_engine+0x9c>
    3f5a:	e7 0e       	add	r14, r23
    3f5c:	f8 1e       	adc	r15, r24
    3f5e:	49 1f       	adc	r20, r25
    3f60:	56 1f       	adc	r21, r22
    3f62:	c1 1d       	adc	r28, r1
    3f64:	77 0f       	add	r23, r23
    3f66:	88 1f       	adc	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	66 1f       	adc	r22, r22
    3f6c:	06 94       	lsr	r0
    3f6e:	a1 f7       	brne	.-24     	; 0x3f58 <__ftoa_engine+0x90>
    3f70:	05 90       	lpm	r0, Z+
    3f72:	07 94       	ror	r0
    3f74:	28 f4       	brcc	.+10     	; 0x3f80 <__ftoa_engine+0xb8>
    3f76:	f8 0e       	add	r15, r24
    3f78:	49 1f       	adc	r20, r25
    3f7a:	56 1f       	adc	r21, r22
    3f7c:	c7 1f       	adc	r28, r23
    3f7e:	d1 1d       	adc	r29, r1
    3f80:	88 0f       	add	r24, r24
    3f82:	99 1f       	adc	r25, r25
    3f84:	66 1f       	adc	r22, r22
    3f86:	77 1f       	adc	r23, r23
    3f88:	06 94       	lsr	r0
    3f8a:	a1 f7       	brne	.-24     	; 0x3f74 <__ftoa_engine+0xac>
    3f8c:	05 90       	lpm	r0, Z+
    3f8e:	07 94       	ror	r0
    3f90:	20 f4       	brcc	.+8      	; 0x3f9a <__ftoa_engine+0xd2>
    3f92:	49 0f       	add	r20, r25
    3f94:	56 1f       	adc	r21, r22
    3f96:	c7 1f       	adc	r28, r23
    3f98:	d8 1f       	adc	r29, r24
    3f9a:	99 0f       	add	r25, r25
    3f9c:	66 1f       	adc	r22, r22
    3f9e:	77 1f       	adc	r23, r23
    3fa0:	88 1f       	adc	r24, r24
    3fa2:	06 94       	lsr	r0
    3fa4:	a9 f7       	brne	.-22     	; 0x3f90 <__ftoa_engine+0xc8>
    3fa6:	84 91       	lpm	r24, Z
    3fa8:	10 95       	com	r17
    3faa:	17 70       	andi	r17, 0x07	; 7
    3fac:	41 f0       	breq	.+16     	; 0x3fbe <__ftoa_engine+0xf6>
    3fae:	d6 95       	lsr	r29
    3fb0:	c7 95       	ror	r28
    3fb2:	57 95       	ror	r21
    3fb4:	47 95       	ror	r20
    3fb6:	f7 94       	ror	r15
    3fb8:	e7 94       	ror	r14
    3fba:	1a 95       	dec	r17
    3fbc:	c1 f7       	brne	.-16     	; 0x3fae <__ftoa_engine+0xe6>
    3fbe:	ee e5       	ldi	r30, 0x5E	; 94
    3fc0:	f2 e0       	ldi	r31, 0x02	; 2
    3fc2:	68 94       	set
    3fc4:	15 90       	lpm	r1, Z+
    3fc6:	15 91       	lpm	r17, Z+
    3fc8:	35 91       	lpm	r19, Z+
    3fca:	65 91       	lpm	r22, Z+
    3fcc:	95 91       	lpm	r25, Z+
    3fce:	05 90       	lpm	r0, Z+
    3fd0:	7f e2       	ldi	r23, 0x2F	; 47
    3fd2:	73 95       	inc	r23
    3fd4:	e1 18       	sub	r14, r1
    3fd6:	f1 0a       	sbc	r15, r17
    3fd8:	43 0b       	sbc	r20, r19
    3fda:	56 0b       	sbc	r21, r22
    3fdc:	c9 0b       	sbc	r28, r25
    3fde:	d0 09       	sbc	r29, r0
    3fe0:	c0 f7       	brcc	.-16     	; 0x3fd2 <__ftoa_engine+0x10a>
    3fe2:	e1 0c       	add	r14, r1
    3fe4:	f1 1e       	adc	r15, r17
    3fe6:	43 1f       	adc	r20, r19
    3fe8:	56 1f       	adc	r21, r22
    3fea:	c9 1f       	adc	r28, r25
    3fec:	d0 1d       	adc	r29, r0
    3fee:	7e f4       	brtc	.+30     	; 0x400e <__stack+0xf>
    3ff0:	70 33       	cpi	r23, 0x30	; 48
    3ff2:	11 f4       	brne	.+4      	; 0x3ff8 <__ftoa_engine+0x130>
    3ff4:	8a 95       	dec	r24
    3ff6:	e6 cf       	rjmp	.-52     	; 0x3fc4 <__ftoa_engine+0xfc>
    3ff8:	e8 94       	clt
    3ffa:	01 50       	subi	r16, 0x01	; 1
    3ffc:	30 f0       	brcs	.+12     	; 0x400a <__stack+0xb>
    3ffe:	08 0f       	add	r16, r24
    4000:	0a f4       	brpl	.+2      	; 0x4004 <__stack+0x5>
    4002:	00 27       	eor	r16, r16
    4004:	02 17       	cp	r16, r18
    4006:	08 f4       	brcc	.+2      	; 0x400a <__stack+0xb>
    4008:	20 2f       	mov	r18, r16
    400a:	23 95       	inc	r18
    400c:	02 2f       	mov	r16, r18
    400e:	7a 33       	cpi	r23, 0x3A	; 58
    4010:	28 f0       	brcs	.+10     	; 0x401c <__stack+0x1d>
    4012:	79 e3       	ldi	r23, 0x39	; 57
    4014:	7d 93       	st	X+, r23
    4016:	2a 95       	dec	r18
    4018:	e9 f7       	brne	.-6      	; 0x4014 <__stack+0x15>
    401a:	10 c0       	rjmp	.+32     	; 0x403c <__stack+0x3d>
    401c:	7d 93       	st	X+, r23
    401e:	2a 95       	dec	r18
    4020:	89 f6       	brne	.-94     	; 0x3fc4 <__ftoa_engine+0xfc>
    4022:	06 94       	lsr	r0
    4024:	97 95       	ror	r25
    4026:	67 95       	ror	r22
    4028:	37 95       	ror	r19
    402a:	17 95       	ror	r17
    402c:	17 94       	ror	r1
    402e:	e1 18       	sub	r14, r1
    4030:	f1 0a       	sbc	r15, r17
    4032:	43 0b       	sbc	r20, r19
    4034:	56 0b       	sbc	r21, r22
    4036:	c9 0b       	sbc	r28, r25
    4038:	d0 09       	sbc	r29, r0
    403a:	98 f0       	brcs	.+38     	; 0x4062 <__stack+0x63>
    403c:	23 95       	inc	r18
    403e:	7e 91       	ld	r23, -X
    4040:	73 95       	inc	r23
    4042:	7a 33       	cpi	r23, 0x3A	; 58
    4044:	08 f0       	brcs	.+2      	; 0x4048 <__stack+0x49>
    4046:	70 e3       	ldi	r23, 0x30	; 48
    4048:	7c 93       	st	X, r23
    404a:	20 13       	cpse	r18, r16
    404c:	b8 f7       	brcc	.-18     	; 0x403c <__stack+0x3d>
    404e:	7e 91       	ld	r23, -X
    4050:	70 61       	ori	r23, 0x10	; 16
    4052:	7d 93       	st	X+, r23
    4054:	30 f0       	brcs	.+12     	; 0x4062 <__stack+0x63>
    4056:	83 95       	inc	r24
    4058:	71 e3       	ldi	r23, 0x31	; 49
    405a:	7d 93       	st	X+, r23
    405c:	70 e3       	ldi	r23, 0x30	; 48
    405e:	2a 95       	dec	r18
    4060:	e1 f7       	brne	.-8      	; 0x405a <__stack+0x5b>
    4062:	11 24       	eor	r1, r1
    4064:	ef 90       	pop	r14
    4066:	ff 90       	pop	r15
    4068:	0f 91       	pop	r16
    406a:	1f 91       	pop	r17
    406c:	cf 91       	pop	r28
    406e:	df 91       	pop	r29
    4070:	99 27       	eor	r25, r25
    4072:	87 fd       	sbrc	r24, 7
    4074:	90 95       	com	r25
    4076:	08 95       	ret

00004078 <strnlen_P>:
    4078:	fc 01       	movw	r30, r24
    407a:	05 90       	lpm	r0, Z+
    407c:	61 50       	subi	r22, 0x01	; 1
    407e:	70 40       	sbci	r23, 0x00	; 0
    4080:	01 10       	cpse	r0, r1
    4082:	d8 f7       	brcc	.-10     	; 0x407a <strnlen_P+0x2>
    4084:	80 95       	com	r24
    4086:	90 95       	com	r25
    4088:	8e 0f       	add	r24, r30
    408a:	9f 1f       	adc	r25, r31
    408c:	08 95       	ret

0000408e <strnlen>:
    408e:	fc 01       	movw	r30, r24
    4090:	61 50       	subi	r22, 0x01	; 1
    4092:	70 40       	sbci	r23, 0x00	; 0
    4094:	01 90       	ld	r0, Z+
    4096:	01 10       	cpse	r0, r1
    4098:	d8 f7       	brcc	.-10     	; 0x4090 <strnlen+0x2>
    409a:	80 95       	com	r24
    409c:	90 95       	com	r25
    409e:	8e 0f       	add	r24, r30
    40a0:	9f 1f       	adc	r25, r31
    40a2:	08 95       	ret

000040a4 <fdevopen>:
    40a4:	0f 93       	push	r16
    40a6:	1f 93       	push	r17
    40a8:	cf 93       	push	r28
    40aa:	df 93       	push	r29
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	31 f4       	brne	.+12     	; 0x40bc <fdevopen+0x18>
    40b0:	61 15       	cp	r22, r1
    40b2:	71 05       	cpc	r23, r1
    40b4:	19 f4       	brne	.+6      	; 0x40bc <fdevopen+0x18>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	39 c0       	rjmp	.+114    	; 0x412e <fdevopen+0x8a>
    40bc:	8b 01       	movw	r16, r22
    40be:	ec 01       	movw	r28, r24
    40c0:	6e e0       	ldi	r22, 0x0E	; 14
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	14 d1       	rcall	.+552    	; 0x42f2 <calloc>
    40ca:	fc 01       	movw	r30, r24
    40cc:	89 2b       	or	r24, r25
    40ce:	99 f3       	breq	.-26     	; 0x40b6 <fdevopen+0x12>
    40d0:	80 e8       	ldi	r24, 0x80	; 128
    40d2:	83 83       	std	Z+3, r24	; 0x03
    40d4:	01 15       	cp	r16, r1
    40d6:	11 05       	cpc	r17, r1
    40d8:	71 f0       	breq	.+28     	; 0x40f6 <fdevopen+0x52>
    40da:	02 87       	std	Z+10, r16	; 0x0a
    40dc:	13 87       	std	Z+11, r17	; 0x0b
    40de:	81 e8       	ldi	r24, 0x81	; 129
    40e0:	83 83       	std	Z+3, r24	; 0x03
    40e2:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <__iob>
    40e6:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <__iob+0x1>
    40ea:	89 2b       	or	r24, r25
    40ec:	21 f4       	brne	.+8      	; 0x40f6 <fdevopen+0x52>
    40ee:	e0 93 0d 21 	sts	0x210D, r30	; 0x80210d <__iob>
    40f2:	f0 93 0e 21 	sts	0x210E, r31	; 0x80210e <__iob+0x1>
    40f6:	20 97       	sbiw	r28, 0x00	; 0
    40f8:	c9 f0       	breq	.+50     	; 0x412c <fdevopen+0x88>
    40fa:	c0 87       	std	Z+8, r28	; 0x08
    40fc:	d1 87       	std	Z+9, r29	; 0x09
    40fe:	83 81       	ldd	r24, Z+3	; 0x03
    4100:	82 60       	ori	r24, 0x02	; 2
    4102:	83 83       	std	Z+3, r24	; 0x03
    4104:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <__iob+0x2>
    4108:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <__iob+0x3>
    410c:	89 2b       	or	r24, r25
    410e:	71 f4       	brne	.+28     	; 0x412c <fdevopen+0x88>
    4110:	e0 93 0f 21 	sts	0x210F, r30	; 0x80210f <__iob+0x2>
    4114:	f0 93 10 21 	sts	0x2110, r31	; 0x802110 <__iob+0x3>
    4118:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <__iob+0x4>
    411c:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <__iob+0x5>
    4120:	89 2b       	or	r24, r25
    4122:	21 f4       	brne	.+8      	; 0x412c <fdevopen+0x88>
    4124:	e0 93 11 21 	sts	0x2111, r30	; 0x802111 <__iob+0x4>
    4128:	f0 93 12 21 	sts	0x2112, r31	; 0x802112 <__iob+0x5>
    412c:	cf 01       	movw	r24, r30
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	1f 91       	pop	r17
    4134:	0f 91       	pop	r16
    4136:	08 95       	ret

00004138 <fputc>:
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
    4140:	fb 01       	movw	r30, r22
    4142:	23 81       	ldd	r18, Z+3	; 0x03
    4144:	21 fd       	sbrc	r18, 1
    4146:	03 c0       	rjmp	.+6      	; 0x414e <fputc+0x16>
    4148:	8f ef       	ldi	r24, 0xFF	; 255
    414a:	9f ef       	ldi	r25, 0xFF	; 255
    414c:	2c c0       	rjmp	.+88     	; 0x41a6 <fputc+0x6e>
    414e:	22 ff       	sbrs	r18, 2
    4150:	16 c0       	rjmp	.+44     	; 0x417e <fputc+0x46>
    4152:	46 81       	ldd	r20, Z+6	; 0x06
    4154:	57 81       	ldd	r21, Z+7	; 0x07
    4156:	24 81       	ldd	r18, Z+4	; 0x04
    4158:	35 81       	ldd	r19, Z+5	; 0x05
    415a:	42 17       	cp	r20, r18
    415c:	53 07       	cpc	r21, r19
    415e:	44 f4       	brge	.+16     	; 0x4170 <fputc+0x38>
    4160:	a0 81       	ld	r26, Z
    4162:	b1 81       	ldd	r27, Z+1	; 0x01
    4164:	9d 01       	movw	r18, r26
    4166:	2f 5f       	subi	r18, 0xFF	; 255
    4168:	3f 4f       	sbci	r19, 0xFF	; 255
    416a:	20 83       	st	Z, r18
    416c:	31 83       	std	Z+1, r19	; 0x01
    416e:	8c 93       	st	X, r24
    4170:	26 81       	ldd	r18, Z+6	; 0x06
    4172:	37 81       	ldd	r19, Z+7	; 0x07
    4174:	2f 5f       	subi	r18, 0xFF	; 255
    4176:	3f 4f       	sbci	r19, 0xFF	; 255
    4178:	26 83       	std	Z+6, r18	; 0x06
    417a:	37 83       	std	Z+7, r19	; 0x07
    417c:	14 c0       	rjmp	.+40     	; 0x41a6 <fputc+0x6e>
    417e:	8b 01       	movw	r16, r22
    4180:	ec 01       	movw	r28, r24
    4182:	fb 01       	movw	r30, r22
    4184:	00 84       	ldd	r0, Z+8	; 0x08
    4186:	f1 85       	ldd	r31, Z+9	; 0x09
    4188:	e0 2d       	mov	r30, r0
    418a:	19 95       	eicall
    418c:	89 2b       	or	r24, r25
    418e:	e1 f6       	brne	.-72     	; 0x4148 <fputc+0x10>
    4190:	d8 01       	movw	r26, r16
    4192:	16 96       	adiw	r26, 0x06	; 6
    4194:	8d 91       	ld	r24, X+
    4196:	9c 91       	ld	r25, X
    4198:	17 97       	sbiw	r26, 0x07	; 7
    419a:	01 96       	adiw	r24, 0x01	; 1
    419c:	16 96       	adiw	r26, 0x06	; 6
    419e:	8d 93       	st	X+, r24
    41a0:	9c 93       	st	X, r25
    41a2:	17 97       	sbiw	r26, 0x07	; 7
    41a4:	ce 01       	movw	r24, r28
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	08 95       	ret

000041b0 <printf>:
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
    41b8:	ae 01       	movw	r20, r28
    41ba:	4a 5f       	subi	r20, 0xFA	; 250
    41bc:	5f 4f       	sbci	r21, 0xFF	; 255
    41be:	fa 01       	movw	r30, r20
    41c0:	61 91       	ld	r22, Z+
    41c2:	71 91       	ld	r23, Z+
    41c4:	af 01       	movw	r20, r30
    41c6:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <__iob+0x2>
    41ca:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <__iob+0x3>
    41ce:	16 da       	rcall	.-3028   	; 0x35fc <vfprintf>
    41d0:	df 91       	pop	r29
    41d2:	cf 91       	pop	r28
    41d4:	08 95       	ret

000041d6 <puts>:
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	e0 91 0f 21 	lds	r30, 0x210F	; 0x80210f <__iob+0x2>
    41e2:	f0 91 10 21 	lds	r31, 0x2110	; 0x802110 <__iob+0x3>
    41e6:	23 81       	ldd	r18, Z+3	; 0x03
    41e8:	21 ff       	sbrs	r18, 1
    41ea:	1b c0       	rjmp	.+54     	; 0x4222 <puts+0x4c>
    41ec:	8c 01       	movw	r16, r24
    41ee:	d0 e0       	ldi	r29, 0x00	; 0
    41f0:	c0 e0       	ldi	r28, 0x00	; 0
    41f2:	f8 01       	movw	r30, r16
    41f4:	81 91       	ld	r24, Z+
    41f6:	8f 01       	movw	r16, r30
    41f8:	60 91 0f 21 	lds	r22, 0x210F	; 0x80210f <__iob+0x2>
    41fc:	70 91 10 21 	lds	r23, 0x2110	; 0x802110 <__iob+0x3>
    4200:	db 01       	movw	r26, r22
    4202:	18 96       	adiw	r26, 0x08	; 8
    4204:	ed 91       	ld	r30, X+
    4206:	fc 91       	ld	r31, X
    4208:	19 97       	sbiw	r26, 0x09	; 9
    420a:	88 23       	and	r24, r24
    420c:	31 f0       	breq	.+12     	; 0x421a <puts+0x44>
    420e:	19 95       	eicall
    4210:	89 2b       	or	r24, r25
    4212:	79 f3       	breq	.-34     	; 0x41f2 <puts+0x1c>
    4214:	df ef       	ldi	r29, 0xFF	; 255
    4216:	cf ef       	ldi	r28, 0xFF	; 255
    4218:	ec cf       	rjmp	.-40     	; 0x41f2 <puts+0x1c>
    421a:	8a e0       	ldi	r24, 0x0A	; 10
    421c:	19 95       	eicall
    421e:	89 2b       	or	r24, r25
    4220:	19 f0       	breq	.+6      	; 0x4228 <puts+0x52>
    4222:	8f ef       	ldi	r24, 0xFF	; 255
    4224:	9f ef       	ldi	r25, 0xFF	; 255
    4226:	02 c0       	rjmp	.+4      	; 0x422c <puts+0x56>
    4228:	8d 2f       	mov	r24, r29
    422a:	9c 2f       	mov	r25, r28
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	1f 91       	pop	r17
    4232:	0f 91       	pop	r16
    4234:	08 95       	ret

00004236 <__ultoa_invert>:
    4236:	fa 01       	movw	r30, r20
    4238:	aa 27       	eor	r26, r26
    423a:	28 30       	cpi	r18, 0x08	; 8
    423c:	51 f1       	breq	.+84     	; 0x4292 <__ultoa_invert+0x5c>
    423e:	20 31       	cpi	r18, 0x10	; 16
    4240:	81 f1       	breq	.+96     	; 0x42a2 <__ultoa_invert+0x6c>
    4242:	e8 94       	clt
    4244:	6f 93       	push	r22
    4246:	6e 7f       	andi	r22, 0xFE	; 254
    4248:	6e 5f       	subi	r22, 0xFE	; 254
    424a:	7f 4f       	sbci	r23, 0xFF	; 255
    424c:	8f 4f       	sbci	r24, 0xFF	; 255
    424e:	9f 4f       	sbci	r25, 0xFF	; 255
    4250:	af 4f       	sbci	r26, 0xFF	; 255
    4252:	b1 e0       	ldi	r27, 0x01	; 1
    4254:	3e d0       	rcall	.+124    	; 0x42d2 <__ultoa_invert+0x9c>
    4256:	b4 e0       	ldi	r27, 0x04	; 4
    4258:	3c d0       	rcall	.+120    	; 0x42d2 <__ultoa_invert+0x9c>
    425a:	67 0f       	add	r22, r23
    425c:	78 1f       	adc	r23, r24
    425e:	89 1f       	adc	r24, r25
    4260:	9a 1f       	adc	r25, r26
    4262:	a1 1d       	adc	r26, r1
    4264:	68 0f       	add	r22, r24
    4266:	79 1f       	adc	r23, r25
    4268:	8a 1f       	adc	r24, r26
    426a:	91 1d       	adc	r25, r1
    426c:	a1 1d       	adc	r26, r1
    426e:	6a 0f       	add	r22, r26
    4270:	71 1d       	adc	r23, r1
    4272:	81 1d       	adc	r24, r1
    4274:	91 1d       	adc	r25, r1
    4276:	a1 1d       	adc	r26, r1
    4278:	20 d0       	rcall	.+64     	; 0x42ba <__ultoa_invert+0x84>
    427a:	09 f4       	brne	.+2      	; 0x427e <__ultoa_invert+0x48>
    427c:	68 94       	set
    427e:	3f 91       	pop	r19
    4280:	2a e0       	ldi	r18, 0x0A	; 10
    4282:	26 9f       	mul	r18, r22
    4284:	11 24       	eor	r1, r1
    4286:	30 19       	sub	r19, r0
    4288:	30 5d       	subi	r19, 0xD0	; 208
    428a:	31 93       	st	Z+, r19
    428c:	de f6       	brtc	.-74     	; 0x4244 <__ultoa_invert+0xe>
    428e:	cf 01       	movw	r24, r30
    4290:	08 95       	ret
    4292:	46 2f       	mov	r20, r22
    4294:	47 70       	andi	r20, 0x07	; 7
    4296:	40 5d       	subi	r20, 0xD0	; 208
    4298:	41 93       	st	Z+, r20
    429a:	b3 e0       	ldi	r27, 0x03	; 3
    429c:	0f d0       	rcall	.+30     	; 0x42bc <__ultoa_invert+0x86>
    429e:	c9 f7       	brne	.-14     	; 0x4292 <__ultoa_invert+0x5c>
    42a0:	f6 cf       	rjmp	.-20     	; 0x428e <__ultoa_invert+0x58>
    42a2:	46 2f       	mov	r20, r22
    42a4:	4f 70       	andi	r20, 0x0F	; 15
    42a6:	40 5d       	subi	r20, 0xD0	; 208
    42a8:	4a 33       	cpi	r20, 0x3A	; 58
    42aa:	18 f0       	brcs	.+6      	; 0x42b2 <__ultoa_invert+0x7c>
    42ac:	49 5d       	subi	r20, 0xD9	; 217
    42ae:	31 fd       	sbrc	r19, 1
    42b0:	40 52       	subi	r20, 0x20	; 32
    42b2:	41 93       	st	Z+, r20
    42b4:	02 d0       	rcall	.+4      	; 0x42ba <__ultoa_invert+0x84>
    42b6:	a9 f7       	brne	.-22     	; 0x42a2 <__ultoa_invert+0x6c>
    42b8:	ea cf       	rjmp	.-44     	; 0x428e <__ultoa_invert+0x58>
    42ba:	b4 e0       	ldi	r27, 0x04	; 4
    42bc:	a6 95       	lsr	r26
    42be:	97 95       	ror	r25
    42c0:	87 95       	ror	r24
    42c2:	77 95       	ror	r23
    42c4:	67 95       	ror	r22
    42c6:	ba 95       	dec	r27
    42c8:	c9 f7       	brne	.-14     	; 0x42bc <__ultoa_invert+0x86>
    42ca:	00 97       	sbiw	r24, 0x00	; 0
    42cc:	61 05       	cpc	r22, r1
    42ce:	71 05       	cpc	r23, r1
    42d0:	08 95       	ret
    42d2:	9b 01       	movw	r18, r22
    42d4:	ac 01       	movw	r20, r24
    42d6:	0a 2e       	mov	r0, r26
    42d8:	06 94       	lsr	r0
    42da:	57 95       	ror	r21
    42dc:	47 95       	ror	r20
    42de:	37 95       	ror	r19
    42e0:	27 95       	ror	r18
    42e2:	ba 95       	dec	r27
    42e4:	c9 f7       	brne	.-14     	; 0x42d8 <__ultoa_invert+0xa2>
    42e6:	62 0f       	add	r22, r18
    42e8:	73 1f       	adc	r23, r19
    42ea:	84 1f       	adc	r24, r20
    42ec:	95 1f       	adc	r25, r21
    42ee:	a0 1d       	adc	r26, r0
    42f0:	08 95       	ret

000042f2 <calloc>:
    42f2:	0f 93       	push	r16
    42f4:	1f 93       	push	r17
    42f6:	cf 93       	push	r28
    42f8:	df 93       	push	r29
    42fa:	86 9f       	mul	r24, r22
    42fc:	80 01       	movw	r16, r0
    42fe:	87 9f       	mul	r24, r23
    4300:	10 0d       	add	r17, r0
    4302:	96 9f       	mul	r25, r22
    4304:	10 0d       	add	r17, r0
    4306:	11 24       	eor	r1, r1
    4308:	c8 01       	movw	r24, r16
    430a:	0d d0       	rcall	.+26     	; 0x4326 <malloc>
    430c:	ec 01       	movw	r28, r24
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	21 f0       	breq	.+8      	; 0x431a <calloc+0x28>
    4312:	a8 01       	movw	r20, r16
    4314:	60 e0       	ldi	r22, 0x00	; 0
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	27 d1       	rcall	.+590    	; 0x4568 <memset>
    431a:	ce 01       	movw	r24, r28
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	08 95       	ret

00004326 <malloc>:
    4326:	0f 93       	push	r16
    4328:	1f 93       	push	r17
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	82 30       	cpi	r24, 0x02	; 2
    4330:	91 05       	cpc	r25, r1
    4332:	10 f4       	brcc	.+4      	; 0x4338 <malloc+0x12>
    4334:	82 e0       	ldi	r24, 0x02	; 2
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	e0 91 15 21 	lds	r30, 0x2115	; 0x802115 <__flp>
    433c:	f0 91 16 21 	lds	r31, 0x2116	; 0x802116 <__flp+0x1>
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	a0 e0       	ldi	r26, 0x00	; 0
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	30 97       	sbiw	r30, 0x00	; 0
    434a:	19 f1       	breq	.+70     	; 0x4392 <malloc+0x6c>
    434c:	40 81       	ld	r20, Z
    434e:	51 81       	ldd	r21, Z+1	; 0x01
    4350:	02 81       	ldd	r16, Z+2	; 0x02
    4352:	13 81       	ldd	r17, Z+3	; 0x03
    4354:	48 17       	cp	r20, r24
    4356:	59 07       	cpc	r21, r25
    4358:	c8 f0       	brcs	.+50     	; 0x438c <malloc+0x66>
    435a:	84 17       	cp	r24, r20
    435c:	95 07       	cpc	r25, r21
    435e:	69 f4       	brne	.+26     	; 0x437a <malloc+0x54>
    4360:	10 97       	sbiw	r26, 0x00	; 0
    4362:	31 f0       	breq	.+12     	; 0x4370 <malloc+0x4a>
    4364:	12 96       	adiw	r26, 0x02	; 2
    4366:	0c 93       	st	X, r16
    4368:	12 97       	sbiw	r26, 0x02	; 2
    436a:	13 96       	adiw	r26, 0x03	; 3
    436c:	1c 93       	st	X, r17
    436e:	27 c0       	rjmp	.+78     	; 0x43be <malloc+0x98>
    4370:	00 93 15 21 	sts	0x2115, r16	; 0x802115 <__flp>
    4374:	10 93 16 21 	sts	0x2116, r17	; 0x802116 <__flp+0x1>
    4378:	22 c0       	rjmp	.+68     	; 0x43be <malloc+0x98>
    437a:	21 15       	cp	r18, r1
    437c:	31 05       	cpc	r19, r1
    437e:	19 f0       	breq	.+6      	; 0x4386 <malloc+0x60>
    4380:	42 17       	cp	r20, r18
    4382:	53 07       	cpc	r21, r19
    4384:	18 f4       	brcc	.+6      	; 0x438c <malloc+0x66>
    4386:	9a 01       	movw	r18, r20
    4388:	bd 01       	movw	r22, r26
    438a:	ef 01       	movw	r28, r30
    438c:	df 01       	movw	r26, r30
    438e:	f8 01       	movw	r30, r16
    4390:	db cf       	rjmp	.-74     	; 0x4348 <malloc+0x22>
    4392:	21 15       	cp	r18, r1
    4394:	31 05       	cpc	r19, r1
    4396:	f9 f0       	breq	.+62     	; 0x43d6 <malloc+0xb0>
    4398:	28 1b       	sub	r18, r24
    439a:	39 0b       	sbc	r19, r25
    439c:	24 30       	cpi	r18, 0x04	; 4
    439e:	31 05       	cpc	r19, r1
    43a0:	80 f4       	brcc	.+32     	; 0x43c2 <malloc+0x9c>
    43a2:	8a 81       	ldd	r24, Y+2	; 0x02
    43a4:	9b 81       	ldd	r25, Y+3	; 0x03
    43a6:	61 15       	cp	r22, r1
    43a8:	71 05       	cpc	r23, r1
    43aa:	21 f0       	breq	.+8      	; 0x43b4 <malloc+0x8e>
    43ac:	fb 01       	movw	r30, r22
    43ae:	82 83       	std	Z+2, r24	; 0x02
    43b0:	93 83       	std	Z+3, r25	; 0x03
    43b2:	04 c0       	rjmp	.+8      	; 0x43bc <malloc+0x96>
    43b4:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <__flp>
    43b8:	90 93 16 21 	sts	0x2116, r25	; 0x802116 <__flp+0x1>
    43bc:	fe 01       	movw	r30, r28
    43be:	32 96       	adiw	r30, 0x02	; 2
    43c0:	44 c0       	rjmp	.+136    	; 0x444a <malloc+0x124>
    43c2:	fe 01       	movw	r30, r28
    43c4:	e2 0f       	add	r30, r18
    43c6:	f3 1f       	adc	r31, r19
    43c8:	81 93       	st	Z+, r24
    43ca:	91 93       	st	Z+, r25
    43cc:	22 50       	subi	r18, 0x02	; 2
    43ce:	31 09       	sbc	r19, r1
    43d0:	28 83       	st	Y, r18
    43d2:	39 83       	std	Y+1, r19	; 0x01
    43d4:	3a c0       	rjmp	.+116    	; 0x444a <malloc+0x124>
    43d6:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <__brkval>
    43da:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <__brkval+0x1>
    43de:	23 2b       	or	r18, r19
    43e0:	41 f4       	brne	.+16     	; 0x43f2 <malloc+0xcc>
    43e2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    43e6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    43ea:	20 93 13 21 	sts	0x2113, r18	; 0x802113 <__brkval>
    43ee:	30 93 14 21 	sts	0x2114, r19	; 0x802114 <__brkval+0x1>
    43f2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    43f6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    43fa:	21 15       	cp	r18, r1
    43fc:	31 05       	cpc	r19, r1
    43fe:	41 f4       	brne	.+16     	; 0x4410 <malloc+0xea>
    4400:	2d b7       	in	r18, 0x3d	; 61
    4402:	3e b7       	in	r19, 0x3e	; 62
    4404:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4408:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    440c:	24 1b       	sub	r18, r20
    440e:	35 0b       	sbc	r19, r21
    4410:	e0 91 13 21 	lds	r30, 0x2113	; 0x802113 <__brkval>
    4414:	f0 91 14 21 	lds	r31, 0x2114	; 0x802114 <__brkval+0x1>
    4418:	e2 17       	cp	r30, r18
    441a:	f3 07       	cpc	r31, r19
    441c:	a0 f4       	brcc	.+40     	; 0x4446 <malloc+0x120>
    441e:	2e 1b       	sub	r18, r30
    4420:	3f 0b       	sbc	r19, r31
    4422:	28 17       	cp	r18, r24
    4424:	39 07       	cpc	r19, r25
    4426:	78 f0       	brcs	.+30     	; 0x4446 <malloc+0x120>
    4428:	ac 01       	movw	r20, r24
    442a:	4e 5f       	subi	r20, 0xFE	; 254
    442c:	5f 4f       	sbci	r21, 0xFF	; 255
    442e:	24 17       	cp	r18, r20
    4430:	35 07       	cpc	r19, r21
    4432:	48 f0       	brcs	.+18     	; 0x4446 <malloc+0x120>
    4434:	4e 0f       	add	r20, r30
    4436:	5f 1f       	adc	r21, r31
    4438:	40 93 13 21 	sts	0x2113, r20	; 0x802113 <__brkval>
    443c:	50 93 14 21 	sts	0x2114, r21	; 0x802114 <__brkval+0x1>
    4440:	81 93       	st	Z+, r24
    4442:	91 93       	st	Z+, r25
    4444:	02 c0       	rjmp	.+4      	; 0x444a <malloc+0x124>
    4446:	e0 e0       	ldi	r30, 0x00	; 0
    4448:	f0 e0       	ldi	r31, 0x00	; 0
    444a:	cf 01       	movw	r24, r30
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	1f 91       	pop	r17
    4452:	0f 91       	pop	r16
    4454:	08 95       	ret

00004456 <free>:
    4456:	cf 93       	push	r28
    4458:	df 93       	push	r29
    445a:	00 97       	sbiw	r24, 0x00	; 0
    445c:	09 f4       	brne	.+2      	; 0x4460 <free+0xa>
    445e:	81 c0       	rjmp	.+258    	; 0x4562 <free+0x10c>
    4460:	fc 01       	movw	r30, r24
    4462:	32 97       	sbiw	r30, 0x02	; 2
    4464:	12 82       	std	Z+2, r1	; 0x02
    4466:	13 82       	std	Z+3, r1	; 0x03
    4468:	a0 91 15 21 	lds	r26, 0x2115	; 0x802115 <__flp>
    446c:	b0 91 16 21 	lds	r27, 0x2116	; 0x802116 <__flp+0x1>
    4470:	10 97       	sbiw	r26, 0x00	; 0
    4472:	81 f4       	brne	.+32     	; 0x4494 <free+0x3e>
    4474:	20 81       	ld	r18, Z
    4476:	31 81       	ldd	r19, Z+1	; 0x01
    4478:	82 0f       	add	r24, r18
    447a:	93 1f       	adc	r25, r19
    447c:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <__brkval>
    4480:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <__brkval+0x1>
    4484:	28 17       	cp	r18, r24
    4486:	39 07       	cpc	r19, r25
    4488:	51 f5       	brne	.+84     	; 0x44de <free+0x88>
    448a:	e0 93 13 21 	sts	0x2113, r30	; 0x802113 <__brkval>
    448e:	f0 93 14 21 	sts	0x2114, r31	; 0x802114 <__brkval+0x1>
    4492:	67 c0       	rjmp	.+206    	; 0x4562 <free+0x10c>
    4494:	ed 01       	movw	r28, r26
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	30 e0       	ldi	r19, 0x00	; 0
    449a:	ce 17       	cp	r28, r30
    449c:	df 07       	cpc	r29, r31
    449e:	40 f4       	brcc	.+16     	; 0x44b0 <free+0x5a>
    44a0:	4a 81       	ldd	r20, Y+2	; 0x02
    44a2:	5b 81       	ldd	r21, Y+3	; 0x03
    44a4:	9e 01       	movw	r18, r28
    44a6:	41 15       	cp	r20, r1
    44a8:	51 05       	cpc	r21, r1
    44aa:	f1 f0       	breq	.+60     	; 0x44e8 <free+0x92>
    44ac:	ea 01       	movw	r28, r20
    44ae:	f5 cf       	rjmp	.-22     	; 0x449a <free+0x44>
    44b0:	c2 83       	std	Z+2, r28	; 0x02
    44b2:	d3 83       	std	Z+3, r29	; 0x03
    44b4:	40 81       	ld	r20, Z
    44b6:	51 81       	ldd	r21, Z+1	; 0x01
    44b8:	84 0f       	add	r24, r20
    44ba:	95 1f       	adc	r25, r21
    44bc:	c8 17       	cp	r28, r24
    44be:	d9 07       	cpc	r29, r25
    44c0:	59 f4       	brne	.+22     	; 0x44d8 <free+0x82>
    44c2:	88 81       	ld	r24, Y
    44c4:	99 81       	ldd	r25, Y+1	; 0x01
    44c6:	84 0f       	add	r24, r20
    44c8:	95 1f       	adc	r25, r21
    44ca:	02 96       	adiw	r24, 0x02	; 2
    44cc:	80 83       	st	Z, r24
    44ce:	91 83       	std	Z+1, r25	; 0x01
    44d0:	8a 81       	ldd	r24, Y+2	; 0x02
    44d2:	9b 81       	ldd	r25, Y+3	; 0x03
    44d4:	82 83       	std	Z+2, r24	; 0x02
    44d6:	93 83       	std	Z+3, r25	; 0x03
    44d8:	21 15       	cp	r18, r1
    44da:	31 05       	cpc	r19, r1
    44dc:	29 f4       	brne	.+10     	; 0x44e8 <free+0x92>
    44de:	e0 93 15 21 	sts	0x2115, r30	; 0x802115 <__flp>
    44e2:	f0 93 16 21 	sts	0x2116, r31	; 0x802116 <__flp+0x1>
    44e6:	3d c0       	rjmp	.+122    	; 0x4562 <free+0x10c>
    44e8:	e9 01       	movw	r28, r18
    44ea:	ea 83       	std	Y+2, r30	; 0x02
    44ec:	fb 83       	std	Y+3, r31	; 0x03
    44ee:	49 91       	ld	r20, Y+
    44f0:	59 91       	ld	r21, Y+
    44f2:	c4 0f       	add	r28, r20
    44f4:	d5 1f       	adc	r29, r21
    44f6:	ec 17       	cp	r30, r28
    44f8:	fd 07       	cpc	r31, r29
    44fa:	61 f4       	brne	.+24     	; 0x4514 <free+0xbe>
    44fc:	80 81       	ld	r24, Z
    44fe:	91 81       	ldd	r25, Z+1	; 0x01
    4500:	84 0f       	add	r24, r20
    4502:	95 1f       	adc	r25, r21
    4504:	02 96       	adiw	r24, 0x02	; 2
    4506:	e9 01       	movw	r28, r18
    4508:	88 83       	st	Y, r24
    450a:	99 83       	std	Y+1, r25	; 0x01
    450c:	82 81       	ldd	r24, Z+2	; 0x02
    450e:	93 81       	ldd	r25, Z+3	; 0x03
    4510:	8a 83       	std	Y+2, r24	; 0x02
    4512:	9b 83       	std	Y+3, r25	; 0x03
    4514:	e0 e0       	ldi	r30, 0x00	; 0
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	12 96       	adiw	r26, 0x02	; 2
    451a:	8d 91       	ld	r24, X+
    451c:	9c 91       	ld	r25, X
    451e:	13 97       	sbiw	r26, 0x03	; 3
    4520:	00 97       	sbiw	r24, 0x00	; 0
    4522:	19 f0       	breq	.+6      	; 0x452a <free+0xd4>
    4524:	fd 01       	movw	r30, r26
    4526:	dc 01       	movw	r26, r24
    4528:	f7 cf       	rjmp	.-18     	; 0x4518 <free+0xc2>
    452a:	8d 91       	ld	r24, X+
    452c:	9c 91       	ld	r25, X
    452e:	11 97       	sbiw	r26, 0x01	; 1
    4530:	9d 01       	movw	r18, r26
    4532:	2e 5f       	subi	r18, 0xFE	; 254
    4534:	3f 4f       	sbci	r19, 0xFF	; 255
    4536:	82 0f       	add	r24, r18
    4538:	93 1f       	adc	r25, r19
    453a:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <__brkval>
    453e:	30 91 14 21 	lds	r19, 0x2114	; 0x802114 <__brkval+0x1>
    4542:	28 17       	cp	r18, r24
    4544:	39 07       	cpc	r19, r25
    4546:	69 f4       	brne	.+26     	; 0x4562 <free+0x10c>
    4548:	30 97       	sbiw	r30, 0x00	; 0
    454a:	29 f4       	brne	.+10     	; 0x4556 <free+0x100>
    454c:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <__flp>
    4550:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <__flp+0x1>
    4554:	02 c0       	rjmp	.+4      	; 0x455a <free+0x104>
    4556:	12 82       	std	Z+2, r1	; 0x02
    4558:	13 82       	std	Z+3, r1	; 0x03
    455a:	a0 93 13 21 	sts	0x2113, r26	; 0x802113 <__brkval>
    455e:	b0 93 14 21 	sts	0x2114, r27	; 0x802114 <__brkval+0x1>
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	08 95       	ret

00004568 <memset>:
    4568:	dc 01       	movw	r26, r24
    456a:	01 c0       	rjmp	.+2      	; 0x456e <memset+0x6>
    456c:	6d 93       	st	X+, r22
    456e:	41 50       	subi	r20, 0x01	; 1
    4570:	50 40       	sbci	r21, 0x00	; 0
    4572:	e0 f7       	brcc	.-8      	; 0x456c <memset+0x4>
    4574:	08 95       	ret

00004576 <_exit>:
    4576:	f8 94       	cli

00004578 <__stop_program>:
    4578:	ff cf       	rjmp	.-2      	; 0x4578 <__stop_program>
