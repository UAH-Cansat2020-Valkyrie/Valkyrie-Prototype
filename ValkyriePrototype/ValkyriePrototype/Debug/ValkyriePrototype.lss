
ValkyriePrototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00001f2a  00001fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  00802008  00802008  00001fc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00002038  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a0fe  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000519e  00000000  00000000  0000c53e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e49  00000000  00000000  000116dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017b4  00000000  00000000  00017528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035167  00000000  00000000  00018cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003feb  00000000  00000000  0004de43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00051e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002813  00000000  00000000  000521be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	a3 c4       	rjmp	.+2374   	; 0x970 <__vector_10>
      2a:	00 00       	nop
      2c:	c4 c4       	rjmp	.+2440   	; 0x9b6 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	a1 c1       	rjmp	.+834    	; 0x378 <__vector_13>
      36:	00 00       	nop
      38:	42 c5       	rjmp	.+2692   	; 0xabe <__vector_14>
      3a:	00 00       	nop
      3c:	78 c5       	rjmp	.+2800   	; 0xb2e <__vector_15>
      3e:	00 00       	nop
      40:	ae c5       	rjmp	.+2908   	; 0xb9e <__vector_16>
      42:	00 00       	nop
      44:	e4 c5       	rjmp	.+3016   	; 0xc0e <__vector_17>
      46:	00 00       	nop
      48:	1a c6       	rjmp	.+3124   	; 0xc7e <__vector_18>
      4a:	00 00       	nop
      4c:	50 c6       	rjmp	.+3232   	; 0xcee <__vector_19>
      4e:	00 00       	nop
      50:	86 c6       	rjmp	.+3340   	; 0xd5e <__vector_20>
      52:	00 00       	nop
      54:	bc c6       	rjmp	.+3448   	; 0xdce <__vector_21>
      56:	00 00       	nop
      58:	f2 c6       	rjmp	.+3556   	; 0xe3e <__vector_22>
      5a:	00 00       	nop
      5c:	28 c7       	rjmp	.+3664   	; 0xeae <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	29 c3       	rjmp	.+1618   	; 0x6f0 <__vector_39>
      9e:	00 00       	nop
      a0:	64 c3       	rjmp	.+1736   	; 0x76a <__vector_40>
      a2:	00 00       	nop
      a4:	9f c3       	rjmp	.+1854   	; 0x7e4 <__vector_41>
      a6:	00 00       	nop
      a8:	da c3       	rjmp	.+1972   	; 0x85e <__vector_42>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c3 c1       	rjmp	.+902    	; 0x440 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_47>
      c0:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_48>
      c4:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_49>
      c8:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_50>
      cc:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_51>
      d0:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_52>
      d4:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_53>
      d8:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_54>
      dc:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_55>
      e0:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f5 c1       	rjmp	.+1002   	; 0x508 <__vector_71>
     11e:	00 00       	nop
     120:	30 c2       	rjmp	.+1120   	; 0x582 <__vector_72>
     122:	00 00       	nop
     124:	6b c2       	rjmp	.+1238   	; 0x5fc <__vector_73>
     126:	00 00       	nop
     128:	a6 c2       	rjmp	.+1356   	; 0x676 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	55 c1       	rjmp	.+682    	; 0x3dc <__vector_76>
     132:	00 00       	nop
     134:	f4 c6       	rjmp	.+3560   	; 0xf1e <__vector_77>
     136:	00 00       	nop
     138:	2a c7       	rjmp	.+3668   	; 0xf8e <__vector_78>
     13a:	00 00       	nop
     13c:	60 c7       	rjmp	.+3776   	; 0xffe <__vector_79>
     13e:	00 00       	nop
     140:	96 c7       	rjmp	.+3884   	; 0x106e <__vector_80>
     142:	00 00       	nop
     144:	cc c7       	rjmp	.+3992   	; 0x10de <__vector_81>
     146:	00 00       	nop
     148:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_82>
     14c:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_83>
     150:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_84>
     154:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_85>
     158:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_86>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7b c1       	rjmp	.+758    	; 0x4a4 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_108>
     1b4:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_109>
     1b8:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_110>
     1bc:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_111>
     1c0:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_112>
     1c4:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_113>
     1c8:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_114>
     1cc:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_115>
     1d0:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_116>
     1d4:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e2       	ldi	r30, 0x2A	; 42
     21c:	ff e1       	ldi	r31, 0x1F	; 31
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a8 30       	cpi	r26, 0x08	; 8
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a8 e0       	ldi	r26, 0x08	; 8
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a5 37       	cpi	r26, 0x75	; 117
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <main>
     244:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     24e:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <__data_end>
     252:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <__data_end+0x1>
     256:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     258:	83 ff       	sbrs	r24, 3
     25a:	08 c0       	rjmp	.+16     	; 0x26c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     25c:	88 60       	ori	r24, 0x08	; 8
     25e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     264:	86 ef       	ldi	r24, 0xF6	; 246
     266:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__data_end+0xa>
     26a:	83 c0       	rjmp	.+262    	; 0x372 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     26c:	98 2f       	mov	r25, r24
     26e:	94 71       	andi	r25, 0x14	; 20
     270:	31 f0       	breq	.+12     	; 0x27e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     276:	8f ef       	ldi	r24, 0xFF	; 255
     278:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__data_end+0xa>
     27c:	7a c0       	rjmp	.+244    	; 0x372 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     27e:	86 ff       	sbrs	r24, 6
     280:	43 c0       	rjmp	.+134    	; 0x308 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     282:	c8 e0       	ldi	r28, 0x08	; 8
     284:	d0 e2       	ldi	r29, 0x20	; 32
     286:	aa 81       	ldd	r26, Y+2	; 0x02
     288:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     28a:	8c 81       	ldd	r24, Y+4	; 0x04
     28c:	9d 81       	ldd	r25, Y+5	; 0x05
     28e:	14 96       	adiw	r26, 0x04	; 4
     290:	2d 91       	ld	r18, X+
     292:	3c 91       	ld	r19, X
     294:	15 97       	sbiw	r26, 0x05	; 5
     296:	82 17       	cp	r24, r18
     298:	93 07       	cpc	r25, r19
     29a:	6c f4       	brge	.+26     	; 0x2b6 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     29c:	9c 01       	movw	r18, r24
     29e:	2f 5f       	subi	r18, 0xFF	; 255
     2a0:	3f 4f       	sbci	r19, 0xFF	; 255
     2a2:	20 93 0c 20 	sts	0x200C, r18	; 0x80200c <__data_end+0x4>
     2a6:	30 93 0d 20 	sts	0x200D, r19	; 0x80200d <__data_end+0x5>
     2aa:	a8 0f       	add	r26, r24
     2ac:	b9 1f       	adc	r27, r25
     2ae:	11 96       	adiw	r26, 0x01	; 1
     2b0:	8c 91       	ld	r24, X
     2b2:	87 83       	std	Z+7, r24	; 0x07
     2b4:	5e c0       	rjmp	.+188    	; 0x372 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     2b6:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end+0x6>
     2ba:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <__data_end+0x7>
     2be:	18 96       	adiw	r26, 0x08	; 8
     2c0:	2d 91       	ld	r18, X+
     2c2:	3c 91       	ld	r19, X
     2c4:	19 97       	sbiw	r26, 0x09	; 9
     2c6:	82 17       	cp	r24, r18
     2c8:	93 07       	cpc	r25, r19
     2ca:	c8 f4       	brcc	.+50     	; 0x2fe <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     2cc:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__data_end+0x8>
     2d0:	22 23       	and	r18, r18
     2d2:	21 f0       	breq	.+8      	; 0x2dc <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     2d4:	86 81       	ldd	r24, Z+6	; 0x06
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	86 83       	std	Z+6, r24	; 0x06
     2da:	4b c0       	rjmp	.+150    	; 0x372 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     2dc:	16 96       	adiw	r26, 0x06	; 6
     2de:	2d 91       	ld	r18, X+
     2e0:	3c 91       	ld	r19, X
     2e2:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     2e4:	ac 01       	movw	r20, r24
     2e6:	4f 5f       	subi	r20, 0xFF	; 255
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <__data_end+0x6>
     2ee:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <__data_end+0x7>
     2f2:	d9 01       	movw	r26, r18
     2f4:	a8 0f       	add	r26, r24
     2f6:	b9 1f       	adc	r27, r25
     2f8:	8c 91       	ld	r24, X
     2fa:	87 83       	std	Z+7, r24	; 0x07
     2fc:	3a c0       	rjmp	.+116    	; 0x372 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     302:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <__data_end+0xa>
     306:	35 c0       	rjmp	.+106    	; 0x372 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     308:	88 23       	and	r24, r24
     30a:	84 f5       	brge	.+96     	; 0x36c <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     30c:	a8 e0       	ldi	r26, 0x08	; 8
     30e:	b0 e2       	ldi	r27, 0x20	; 32
     310:	12 96       	adiw	r26, 0x02	; 2
     312:	cd 91       	ld	r28, X+
     314:	dc 91       	ld	r29, X
     316:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     318:	16 96       	adiw	r26, 0x06	; 6
     31a:	8d 91       	ld	r24, X+
     31c:	9c 91       	ld	r25, X
     31e:	17 97       	sbiw	r26, 0x07	; 7
     320:	28 85       	ldd	r18, Y+8	; 0x08
     322:	39 85       	ldd	r19, Y+9	; 0x09
     324:	82 17       	cp	r24, r18
     326:	93 07       	cpc	r25, r19
     328:	d8 f4       	brcc	.+54     	; 0x360 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     32a:	6e 81       	ldd	r22, Y+6	; 0x06
     32c:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     32e:	9c 01       	movw	r18, r24
     330:	2f 5f       	subi	r18, 0xFF	; 255
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	20 93 0e 20 	sts	0x200E, r18	; 0x80200e <__data_end+0x6>
     338:	30 93 0f 20 	sts	0x200F, r19	; 0x80200f <__data_end+0x7>
     33c:	47 81       	ldd	r20, Z+7	; 0x07
     33e:	db 01       	movw	r26, r22
     340:	a8 0f       	add	r26, r24
     342:	b9 1f       	adc	r27, r25
     344:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     346:	88 85       	ldd	r24, Y+8	; 0x08
     348:	99 85       	ldd	r25, Y+9	; 0x09
     34a:	28 17       	cp	r18, r24
     34c:	39 07       	cpc	r19, r25
     34e:	18 f4       	brcc	.+6      	; 0x356 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	83 83       	std	Z+3, r24	; 0x03
     354:	0e c0       	rjmp	.+28     	; 0x372 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     35a:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <__data_end+0xa>
     35e:	09 c0       	rjmp	.+18     	; 0x372 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     364:	89 ef       	ldi	r24, 0xF9	; 249
     366:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__data_end+0xa>
     36a:	03 c0       	rjmp	.+6      	; 0x372 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     36c:	8b ef       	ldi	r24, 0xFB	; 251
     36e:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__data_end+0xa>
	}
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	08 b6       	in	r0, 0x38	; 56
     384:	0f 92       	push	r0
     386:	18 be       	out	0x38, r1	; 56
     388:	09 b6       	in	r0, 0x39	; 57
     38a:	0f 92       	push	r0
     38c:	19 be       	out	0x39, r1	; 57
     38e:	0b b6       	in	r0, 0x3b	; 59
     390:	0f 92       	push	r0
     392:	1b be       	out	0x3b, r1	; 59
     394:	2f 93       	push	r18
     396:	3f 93       	push	r19
     398:	4f 93       	push	r20
     39a:	5f 93       	push	r21
     39c:	6f 93       	push	r22
     39e:	7f 93       	push	r23
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	af 93       	push	r26
     3a6:	bf 93       	push	r27
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
     3ac:	4e df       	rcall	.-356    	; 0x24a <twim_interrupt_handler>
     3ae:	ff 91       	pop	r31
     3b0:	ef 91       	pop	r30
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	0f 90       	pop	r0
     3c8:	0b be       	out	0x3b, r0	; 59
     3ca:	0f 90       	pop	r0
     3cc:	09 be       	out	0x39, r0	; 57
     3ce:	0f 90       	pop	r0
     3d0:	08 be       	out	0x38, r0	; 56
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	08 b6       	in	r0, 0x38	; 56
     3e8:	0f 92       	push	r0
     3ea:	18 be       	out	0x38, r1	; 56
     3ec:	09 b6       	in	r0, 0x39	; 57
     3ee:	0f 92       	push	r0
     3f0:	19 be       	out	0x39, r1	; 57
     3f2:	0b b6       	in	r0, 0x3b	; 59
     3f4:	0f 92       	push	r0
     3f6:	1b be       	out	0x3b, r1	; 59
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
     410:	1c df       	rcall	.-456    	; 0x24a <twim_interrupt_handler>
     412:	ff 91       	pop	r31
     414:	ef 91       	pop	r30
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	7f 91       	pop	r23
     420:	6f 91       	pop	r22
     422:	5f 91       	pop	r21
     424:	4f 91       	pop	r20
     426:	3f 91       	pop	r19
     428:	2f 91       	pop	r18
     42a:	0f 90       	pop	r0
     42c:	0b be       	out	0x3b, r0	; 59
     42e:	0f 90       	pop	r0
     430:	09 be       	out	0x39, r0	; 57
     432:	0f 90       	pop	r0
     434:	08 be       	out	0x38, r0	; 56
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	08 b6       	in	r0, 0x38	; 56
     44c:	0f 92       	push	r0
     44e:	18 be       	out	0x38, r1	; 56
     450:	09 b6       	in	r0, 0x39	; 57
     452:	0f 92       	push	r0
     454:	19 be       	out	0x39, r1	; 57
     456:	0b b6       	in	r0, 0x3b	; 59
     458:	0f 92       	push	r0
     45a:	1b be       	out	0x3b, r1	; 59
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
     474:	ea de       	rcall	.-556    	; 0x24a <twim_interrupt_handler>
     476:	ff 91       	pop	r31
     478:	ef 91       	pop	r30
     47a:	bf 91       	pop	r27
     47c:	af 91       	pop	r26
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	7f 91       	pop	r23
     484:	6f 91       	pop	r22
     486:	5f 91       	pop	r21
     488:	4f 91       	pop	r20
     48a:	3f 91       	pop	r19
     48c:	2f 91       	pop	r18
     48e:	0f 90       	pop	r0
     490:	0b be       	out	0x3b, r0	; 59
     492:	0f 90       	pop	r0
     494:	09 be       	out	0x39, r0	; 57
     496:	0f 90       	pop	r0
     498:	08 be       	out	0x38, r0	; 56
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	08 b6       	in	r0, 0x38	; 56
     4b0:	0f 92       	push	r0
     4b2:	18 be       	out	0x38, r1	; 56
     4b4:	09 b6       	in	r0, 0x39	; 57
     4b6:	0f 92       	push	r0
     4b8:	19 be       	out	0x39, r1	; 57
     4ba:	0b b6       	in	r0, 0x3b	; 59
     4bc:	0f 92       	push	r0
     4be:	1b be       	out	0x3b, r1	; 59
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
     4d8:	b8 de       	rcall	.-656    	; 0x24a <twim_interrupt_handler>
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0b be       	out	0x3b, r0	; 59
     4f6:	0f 90       	pop	r0
     4f8:	09 be       	out	0x39, r0	; 57
     4fa:	0f 90       	pop	r0
     4fc:	08 be       	out	0x38, r0	; 56
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	08 b6       	in	r0, 0x38	; 56
     514:	0f 92       	push	r0
     516:	18 be       	out	0x38, r1	; 56
     518:	09 b6       	in	r0, 0x39	; 57
     51a:	0f 92       	push	r0
     51c:	19 be       	out	0x39, r1	; 57
     51e:	0b b6       	in	r0, 0x3b	; 59
     520:	0f 92       	push	r0
     522:	1b be       	out	0x3b, r1	; 59
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     53c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     540:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     544:	e0 91 65 20 	lds	r30, 0x2065	; 0x802065 <adca_callback>
     548:	f0 91 66 20 	lds	r31, 0x2066	; 0x802066 <adca_callback+0x1>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	19 95       	eicall
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0b be       	out	0x3b, r0	; 59
     570:	0f 90       	pop	r0
     572:	09 be       	out	0x39, r0	; 57
     574:	0f 90       	pop	r0
     576:	08 be       	out	0x38, r0	; 56
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	08 b6       	in	r0, 0x38	; 56
     58e:	0f 92       	push	r0
     590:	18 be       	out	0x38, r1	; 56
     592:	09 b6       	in	r0, 0x39	; 57
     594:	0f 92       	push	r0
     596:	19 be       	out	0x39, r1	; 57
     598:	0b b6       	in	r0, 0x3b	; 59
     59a:	0f 92       	push	r0
     59c:	1b be       	out	0x3b, r1	; 59
     59e:	2f 93       	push	r18
     5a0:	3f 93       	push	r19
     5a2:	4f 93       	push	r20
     5a4:	5f 93       	push	r21
     5a6:	6f 93       	push	r22
     5a8:	7f 93       	push	r23
     5aa:	8f 93       	push	r24
     5ac:	9f 93       	push	r25
     5ae:	af 93       	push	r26
     5b0:	bf 93       	push	r27
     5b2:	ef 93       	push	r30
     5b4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     5b6:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     5ba:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     5be:	e0 91 65 20 	lds	r30, 0x2065	; 0x802065 <adca_callback>
     5c2:	f0 91 66 20 	lds	r31, 0x2066	; 0x802066 <adca_callback+0x1>
     5c6:	62 e0       	ldi	r22, 0x02	; 2
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	19 95       	eicall
}
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	7f 91       	pop	r23
     5dc:	6f 91       	pop	r22
     5de:	5f 91       	pop	r21
     5e0:	4f 91       	pop	r20
     5e2:	3f 91       	pop	r19
     5e4:	2f 91       	pop	r18
     5e6:	0f 90       	pop	r0
     5e8:	0b be       	out	0x3b, r0	; 59
     5ea:	0f 90       	pop	r0
     5ec:	09 be       	out	0x39, r0	; 57
     5ee:	0f 90       	pop	r0
     5f0:	08 be       	out	0x38, r0	; 56
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

000005fc <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	08 b6       	in	r0, 0x38	; 56
     608:	0f 92       	push	r0
     60a:	18 be       	out	0x38, r1	; 56
     60c:	09 b6       	in	r0, 0x39	; 57
     60e:	0f 92       	push	r0
     610:	19 be       	out	0x39, r1	; 57
     612:	0b b6       	in	r0, 0x3b	; 59
     614:	0f 92       	push	r0
     616:	1b be       	out	0x3b, r1	; 59
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     630:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     634:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     638:	e0 91 65 20 	lds	r30, 0x2065	; 0x802065 <adca_callback>
     63c:	f0 91 66 20 	lds	r31, 0x2066	; 0x802066 <adca_callback+0x1>
     640:	64 e0       	ldi	r22, 0x04	; 4
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	19 95       	eicall
}
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	09 be       	out	0x39, r0	; 57
     668:	0f 90       	pop	r0
     66a:	08 be       	out	0x38, r0	; 56
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	08 b6       	in	r0, 0x38	; 56
     682:	0f 92       	push	r0
     684:	18 be       	out	0x38, r1	; 56
     686:	09 b6       	in	r0, 0x39	; 57
     688:	0f 92       	push	r0
     68a:	19 be       	out	0x39, r1	; 57
     68c:	0b b6       	in	r0, 0x3b	; 59
     68e:	0f 92       	push	r0
     690:	1b be       	out	0x3b, r1	; 59
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     6aa:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     6ae:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     6b2:	e0 91 65 20 	lds	r30, 0x2065	; 0x802065 <adca_callback>
     6b6:	f0 91 66 20 	lds	r31, 0x2066	; 0x802066 <adca_callback+0x1>
     6ba:	68 e0       	ldi	r22, 0x08	; 8
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	19 95       	eicall
}
     6c2:	ff 91       	pop	r31
     6c4:	ef 91       	pop	r30
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	0f 90       	pop	r0
     6dc:	0b be       	out	0x3b, r0	; 59
     6de:	0f 90       	pop	r0
     6e0:	09 be       	out	0x39, r0	; 57
     6e2:	0f 90       	pop	r0
     6e4:	08 be       	out	0x38, r0	; 56
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	08 b6       	in	r0, 0x38	; 56
     6fc:	0f 92       	push	r0
     6fe:	18 be       	out	0x38, r1	; 56
     700:	09 b6       	in	r0, 0x39	; 57
     702:	0f 92       	push	r0
     704:	19 be       	out	0x39, r1	; 57
     706:	0b b6       	in	r0, 0x3b	; 59
     708:	0f 92       	push	r0
     70a:	1b be       	out	0x3b, r1	; 59
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     724:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     728:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     72c:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <adcb_callback>
     730:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <adcb_callback+0x1>
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	80 e4       	ldi	r24, 0x40	; 64
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	19 95       	eicall
}
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	bf 91       	pop	r27
     742:	af 91       	pop	r26
     744:	9f 91       	pop	r25
     746:	8f 91       	pop	r24
     748:	7f 91       	pop	r23
     74a:	6f 91       	pop	r22
     74c:	5f 91       	pop	r21
     74e:	4f 91       	pop	r20
     750:	3f 91       	pop	r19
     752:	2f 91       	pop	r18
     754:	0f 90       	pop	r0
     756:	0b be       	out	0x3b, r0	; 59
     758:	0f 90       	pop	r0
     75a:	09 be       	out	0x39, r0	; 57
     75c:	0f 90       	pop	r0
     75e:	08 be       	out	0x38, r0	; 56
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     76a:	1f 92       	push	r1
     76c:	0f 92       	push	r0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	0f 92       	push	r0
     772:	11 24       	eor	r1, r1
     774:	08 b6       	in	r0, 0x38	; 56
     776:	0f 92       	push	r0
     778:	18 be       	out	0x38, r1	; 56
     77a:	09 b6       	in	r0, 0x39	; 57
     77c:	0f 92       	push	r0
     77e:	19 be       	out	0x39, r1	; 57
     780:	0b b6       	in	r0, 0x3b	; 59
     782:	0f 92       	push	r0
     784:	1b be       	out	0x3b, r1	; 59
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     79e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     7a2:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     7a6:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <adcb_callback>
     7aa:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <adcb_callback+0x1>
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	80 e4       	ldi	r24, 0x40	; 64
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	19 95       	eicall
}
     7b6:	ff 91       	pop	r31
     7b8:	ef 91       	pop	r30
     7ba:	bf 91       	pop	r27
     7bc:	af 91       	pop	r26
     7be:	9f 91       	pop	r25
     7c0:	8f 91       	pop	r24
     7c2:	7f 91       	pop	r23
     7c4:	6f 91       	pop	r22
     7c6:	5f 91       	pop	r21
     7c8:	4f 91       	pop	r20
     7ca:	3f 91       	pop	r19
     7cc:	2f 91       	pop	r18
     7ce:	0f 90       	pop	r0
     7d0:	0b be       	out	0x3b, r0	; 59
     7d2:	0f 90       	pop	r0
     7d4:	09 be       	out	0x39, r0	; 57
     7d6:	0f 90       	pop	r0
     7d8:	08 be       	out	0x38, r0	; 56
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	08 b6       	in	r0, 0x38	; 56
     7f0:	0f 92       	push	r0
     7f2:	18 be       	out	0x38, r1	; 56
     7f4:	09 b6       	in	r0, 0x39	; 57
     7f6:	0f 92       	push	r0
     7f8:	19 be       	out	0x39, r1	; 57
     7fa:	0b b6       	in	r0, 0x3b	; 59
     7fc:	0f 92       	push	r0
     7fe:	1b be       	out	0x3b, r1	; 59
     800:	2f 93       	push	r18
     802:	3f 93       	push	r19
     804:	4f 93       	push	r20
     806:	5f 93       	push	r21
     808:	6f 93       	push	r22
     80a:	7f 93       	push	r23
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	af 93       	push	r26
     812:	bf 93       	push	r27
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     818:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     81c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     820:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <adcb_callback>
     824:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <adcb_callback+0x1>
     828:	64 e0       	ldi	r22, 0x04	; 4
     82a:	80 e4       	ldi	r24, 0x40	; 64
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	19 95       	eicall
}
     830:	ff 91       	pop	r31
     832:	ef 91       	pop	r30
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0b be       	out	0x3b, r0	; 59
     84c:	0f 90       	pop	r0
     84e:	09 be       	out	0x39, r0	; 57
     850:	0f 90       	pop	r0
     852:	08 be       	out	0x38, r0	; 56
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	08 b6       	in	r0, 0x38	; 56
     86a:	0f 92       	push	r0
     86c:	18 be       	out	0x38, r1	; 56
     86e:	09 b6       	in	r0, 0x39	; 57
     870:	0f 92       	push	r0
     872:	19 be       	out	0x39, r1	; 57
     874:	0b b6       	in	r0, 0x3b	; 59
     876:	0f 92       	push	r0
     878:	1b be       	out	0x3b, r1	; 59
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     892:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     896:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     89a:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <adcb_callback>
     89e:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <adcb_callback+0x1>
     8a2:	68 e0       	ldi	r22, 0x08	; 8
     8a4:	80 e4       	ldi	r24, 0x40	; 64
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	19 95       	eicall
}
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	09 be       	out	0x39, r0	; 57
     8ca:	0f 90       	pop	r0
     8cc:	08 be       	out	0x38, r0	; 56
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	1f 92       	push	r1
     8de:	1f 92       	push	r1
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     8ea:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     8ee:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     8f2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     8f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     8fa:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     8fe:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     902:	8f b7       	in	r24, 0x3f	; 63
     904:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     906:	f8 94       	cli
	return flags;
     908:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     90a:	e0 e5       	ldi	r30, 0x50	; 80
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	82 60       	ori	r24, 0x02	; 2
     912:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     914:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     916:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     918:	81 ff       	sbrs	r24, 1
     91a:	fd cf       	rjmp	.-6      	; 0x916 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     926:	8f b7       	in	r24, 0x3f	; 63
     928:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     92a:	f8 94       	cli
	return flags;
     92c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     92e:	e0 e5       	ldi	r30, 0x50	; 80
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	8e 7f       	andi	r24, 0xFE	; 254
     936:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     938:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	1f 92       	push	r1
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     94e:	9f b7       	in	r25, 0x3f	; 63
     950:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     952:	f8 94       	cli
	return flags;
     954:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     956:	e8 2f       	mov	r30, r24
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	e0 59       	subi	r30, 0x90	; 144
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 95       	com	r22
     960:	80 81       	ld	r24, Z
     962:	68 23       	and	r22, r24
     964:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     966:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     968:	0f 90       	pop	r0
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	08 b6       	in	r0, 0x38	; 56
     97c:	0f 92       	push	r0
     97e:	18 be       	out	0x38, r1	; 56
     980:	0b b6       	in	r0, 0x3b	; 59
     982:	0f 92       	push	r0
     984:	1b be       	out	0x3b, r1	; 59
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
	rtc_data.counter_high++;
     98e:	ed e6       	ldi	r30, 0x6D	; 109
     990:	f0 e2       	ldi	r31, 0x20	; 32
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	80 83       	st	Z, r24
     99a:	91 83       	std	Z+1, r25	; 0x01
}
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	0f 90       	pop	r0
     9a6:	0b be       	out	0x3b, r0	; 59
     9a8:	0f 90       	pop	r0
     9aa:	08 be       	out	0x38, r0	; 56
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	08 b6       	in	r0, 0x38	; 56
     9c2:	0f 92       	push	r0
     9c4:	18 be       	out	0x38, r1	; 56
     9c6:	09 b6       	in	r0, 0x39	; 57
     9c8:	0f 92       	push	r0
     9ca:	19 be       	out	0x39, r1	; 57
     9cc:	0b b6       	in	r0, 0x3b	; 59
     9ce:	0f 92       	push	r0
     9d0:	1b be       	out	0x3b, r1	; 59
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	2f 93       	push	r18
     9e0:	3f 93       	push	r19
     9e2:	4f 93       	push	r20
     9e4:	5f 93       	push	r21
     9e6:	6f 93       	push	r22
     9e8:	7f 93       	push	r23
     9ea:	8f 93       	push	r24
     9ec:	9f 93       	push	r25
     9ee:	af 93       	push	r26
     9f0:	bf 93       	push	r27
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     9f6:	ed e6       	ldi	r30, 0x6D	; 109
     9f8:	f0 e2       	ldi	r31, 0x20	; 32
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	22 81       	ldd	r18, Z+2	; 0x02
     a00:	33 81       	ldd	r19, Z+3	; 0x03
     a02:	82 17       	cp	r24, r18
     a04:	93 07       	cpc	r25, r19
     a06:	f0 f1       	brcs	.+124    	; 0xa84 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     a0e:	e0 91 73 20 	lds	r30, 0x2073	; 0x802073 <rtc_data+0x6>
     a12:	f0 91 74 20 	lds	r31, 0x2074	; 0x802074 <rtc_data+0x7>
     a16:	30 97       	sbiw	r30, 0x00	; 0
     a18:	a9 f1       	breq	.+106    	; 0xa84 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     a1a:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     a1e:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	dc 01       	movw	r26, r24
     a28:	99 27       	eor	r25, r25
     a2a:	88 27       	eor	r24, r24
     a2c:	ab 01       	movw	r20, r22
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	8c 01       	movw	r16, r24
     a34:	9d 01       	movw	r18, r26
     a36:	04 2b       	or	r16, r20
     a38:	15 2b       	or	r17, r21
     a3a:	26 2b       	or	r18, r22
     a3c:	37 2b       	or	r19, r23
     a3e:	c9 01       	movw	r24, r18
     a40:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     a42:	ad e6       	ldi	r26, 0x6D	; 109
     a44:	b0 e2       	ldi	r27, 0x20	; 32
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	0d 91       	ld	r16, X+
     a4a:	1c 91       	ld	r17, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	98 01       	movw	r18, r16
     a54:	11 27       	eor	r17, r17
     a56:	00 27       	eor	r16, r16
     a58:	14 96       	adiw	r26, 0x04	; 4
     a5a:	cd 90       	ld	r12, X+
     a5c:	dc 90       	ld	r13, X
     a5e:	15 97       	sbiw	r26, 0x05	; 5
     a60:	e1 2c       	mov	r14, r1
     a62:	f1 2c       	mov	r15, r1
     a64:	0c 29       	or	r16, r12
     a66:	1d 29       	or	r17, r13
     a68:	2e 29       	or	r18, r14
     a6a:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     a6c:	06 17       	cp	r16, r22
     a6e:	17 07       	cpc	r17, r23
     a70:	28 07       	cpc	r18, r24
     a72:	39 07       	cpc	r19, r25
     a74:	30 f0       	brcs	.+12     	; 0xa82 <__vector_11+0xcc>
				count = alarm + 1;
     a76:	c9 01       	movw	r24, r18
     a78:	b8 01       	movw	r22, r16
     a7a:	6f 5f       	subi	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	8f 4f       	sbci	r24, 0xFF	; 255
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     a82:	19 95       	eicall
		}
	}
}
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	0f 90       	pop	r0
     aaa:	0b be       	out	0x3b, r0	; 59
     aac:	0f 90       	pop	r0
     aae:	09 be       	out	0x39, r0	; 57
     ab0:	0f 90       	pop	r0
     ab2:	08 be       	out	0x38, r0	; 56
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	08 b6       	in	r0, 0x38	; 56
     aca:	0f 92       	push	r0
     acc:	18 be       	out	0x38, r1	; 56
     ace:	09 b6       	in	r0, 0x39	; 57
     ad0:	0f 92       	push	r0
     ad2:	19 be       	out	0x39, r1	; 57
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	1b be       	out	0x3b, r1	; 59
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
     af2:	e0 91 61 20 	lds	r30, 0x2061	; 0x802061 <tc_tcc0_ovf_callback>
     af6:	f0 91 62 20 	lds	r31, 0x2062	; 0x802062 <tc_tcc0_ovf_callback+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_14+0x42>
     afe:	19 95       	eicall
     b00:	ff 91       	pop	r31
     b02:	ef 91       	pop	r30
     b04:	bf 91       	pop	r27
     b06:	af 91       	pop	r26
     b08:	9f 91       	pop	r25
     b0a:	8f 91       	pop	r24
     b0c:	7f 91       	pop	r23
     b0e:	6f 91       	pop	r22
     b10:	5f 91       	pop	r21
     b12:	4f 91       	pop	r20
     b14:	3f 91       	pop	r19
     b16:	2f 91       	pop	r18
     b18:	0f 90       	pop	r0
     b1a:	0b be       	out	0x3b, r0	; 59
     b1c:	0f 90       	pop	r0
     b1e:	09 be       	out	0x39, r0	; 57
     b20:	0f 90       	pop	r0
     b22:	08 be       	out	0x38, r0	; 56
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_15>:
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	08 b6       	in	r0, 0x38	; 56
     b3a:	0f 92       	push	r0
     b3c:	18 be       	out	0x38, r1	; 56
     b3e:	09 b6       	in	r0, 0x39	; 57
     b40:	0f 92       	push	r0
     b42:	19 be       	out	0x39, r1	; 57
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	1b be       	out	0x3b, r1	; 59
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
     b62:	e0 91 5f 20 	lds	r30, 0x205F	; 0x80205f <tc_tcc0_err_callback>
     b66:	f0 91 60 20 	lds	r31, 0x2060	; 0x802060 <tc_tcc0_err_callback+0x1>
     b6a:	30 97       	sbiw	r30, 0x00	; 0
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__vector_15+0x42>
     b6e:	19 95       	eicall
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	09 be       	out	0x39, r0	; 57
     b90:	0f 90       	pop	r0
     b92:	08 be       	out	0x38, r0	; 56
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_16>:
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	08 b6       	in	r0, 0x38	; 56
     baa:	0f 92       	push	r0
     bac:	18 be       	out	0x38, r1	; 56
     bae:	09 b6       	in	r0, 0x39	; 57
     bb0:	0f 92       	push	r0
     bb2:	19 be       	out	0x39, r1	; 57
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	1b be       	out	0x3b, r1	; 59
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
     bd2:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <tc_tcc0_cca_callback>
     bd6:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <tc_tcc0_cca_callback+0x1>
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__vector_16+0x42>
     bde:	19 95       	eicall
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0b be       	out	0x3b, r0	; 59
     bfc:	0f 90       	pop	r0
     bfe:	09 be       	out	0x39, r0	; 57
     c00:	0f 90       	pop	r0
     c02:	08 be       	out	0x38, r0	; 56
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_17>:
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	0f 92       	push	r0
     c1c:	18 be       	out	0x38, r1	; 56
     c1e:	09 b6       	in	r0, 0x39	; 57
     c20:	0f 92       	push	r0
     c22:	19 be       	out	0x39, r1	; 57
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	1b be       	out	0x3b, r1	; 59
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
     c42:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <tc_tcc0_ccb_callback>
     c46:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <tc_tcc0_ccb_callback+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_17+0x42>
     c4e:	19 95       	eicall
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	09 be       	out	0x39, r0	; 57
     c70:	0f 90       	pop	r0
     c72:	08 be       	out	0x38, r0	; 56
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_18>:
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	08 b6       	in	r0, 0x38	; 56
     c8a:	0f 92       	push	r0
     c8c:	18 be       	out	0x38, r1	; 56
     c8e:	09 b6       	in	r0, 0x39	; 57
     c90:	0f 92       	push	r0
     c92:	19 be       	out	0x39, r1	; 57
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	1b be       	out	0x3b, r1	; 59
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
     cb2:	e0 91 59 20 	lds	r30, 0x2059	; 0x802059 <tc_tcc0_ccc_callback>
     cb6:	f0 91 5a 20 	lds	r31, 0x205A	; 0x80205a <tc_tcc0_ccc_callback+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_18+0x42>
     cbe:	19 95       	eicall
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_19>:
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	08 b6       	in	r0, 0x38	; 56
     cfa:	0f 92       	push	r0
     cfc:	18 be       	out	0x38, r1	; 56
     cfe:	09 b6       	in	r0, 0x39	; 57
     d00:	0f 92       	push	r0
     d02:	19 be       	out	0x39, r1	; 57
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	1b be       	out	0x3b, r1	; 59
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
     d22:	e0 91 57 20 	lds	r30, 0x2057	; 0x802057 <tc_tcc0_ccd_callback>
     d26:	f0 91 58 20 	lds	r31, 0x2058	; 0x802058 <tc_tcc0_ccd_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_19+0x42>
     d2e:	19 95       	eicall
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	09 be       	out	0x39, r0	; 57
     d50:	0f 90       	pop	r0
     d52:	08 be       	out	0x38, r0	; 56
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_20>:
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	0f 92       	push	r0
     d6c:	18 be       	out	0x38, r1	; 56
     d6e:	09 b6       	in	r0, 0x39	; 57
     d70:	0f 92       	push	r0
     d72:	19 be       	out	0x39, r1	; 57
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	1b be       	out	0x3b, r1	; 59
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	e0 91 55 20 	lds	r30, 0x2055	; 0x802055 <tc_tcc1_ovf_callback>
     d96:	f0 91 56 20 	lds	r31, 0x2056	; 0x802056 <tc_tcc1_ovf_callback+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_20+0x42>
     d9e:	19 95       	eicall
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_21>:
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
     e02:	e0 91 53 20 	lds	r30, 0x2053	; 0x802053 <tc_tcc1_err_callback>
     e06:	f0 91 54 20 	lds	r31, 0x2054	; 0x802054 <tc_tcc1_err_callback+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_21+0x42>
     e0e:	19 95       	eicall
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	09 be       	out	0x39, r0	; 57
     e30:	0f 90       	pop	r0
     e32:	08 be       	out	0x38, r0	; 56
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_22>:
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	08 b6       	in	r0, 0x38	; 56
     e4a:	0f 92       	push	r0
     e4c:	18 be       	out	0x38, r1	; 56
     e4e:	09 b6       	in	r0, 0x39	; 57
     e50:	0f 92       	push	r0
     e52:	19 be       	out	0x39, r1	; 57
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	1b be       	out	0x3b, r1	; 59
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
     e72:	e0 91 51 20 	lds	r30, 0x2051	; 0x802051 <tc_tcc1_cca_callback>
     e76:	f0 91 52 20 	lds	r31, 0x2052	; 0x802052 <tc_tcc1_cca_callback+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_22+0x42>
     e7e:	19 95       	eicall
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	09 be       	out	0x39, r0	; 57
     ea0:	0f 90       	pop	r0
     ea2:	08 be       	out	0x38, r0	; 56
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_23>:
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
     ee2:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <tc_tcc1_ccb_callback>
     ee6:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <tc_tcc1_ccb_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_23+0x42>
     eee:	19 95       	eicall
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_77>:
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <tc_tcd0_ovf_callback>
     f56:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <tc_tcd0_ovf_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_77+0x42>
     f5e:	19 95       	eicall
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_78>:
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
     fc2:	e0 91 4b 20 	lds	r30, 0x204B	; 0x80204b <tc_tcd0_err_callback>
     fc6:	f0 91 4c 20 	lds	r31, 0x204C	; 0x80204c <tc_tcd0_err_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_78+0x42>
     fce:	19 95       	eicall
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_79>:
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	e0 91 49 20 	lds	r30, 0x2049	; 0x802049 <tc_tcd0_cca_callback>
    1036:	f0 91 4a 20 	lds	r31, 0x204A	; 0x80204a <tc_tcd0_cca_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_79+0x42>
    103e:	19 95       	eicall
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_80>:
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    10a2:	e0 91 47 20 	lds	r30, 0x2047	; 0x802047 <tc_tcd0_ccb_callback>
    10a6:	f0 91 48 20 	lds	r31, 0x2048	; 0x802048 <tc_tcd0_ccb_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_80+0x42>
    10ae:	19 95       	eicall
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_81>:
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
    1112:	e0 91 45 20 	lds	r30, 0x2045	; 0x802045 <tc_tcd0_ccc_callback>
    1116:	f0 91 46 20 	lds	r31, 0x2046	; 0x802046 <tc_tcd0_ccc_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_81+0x42>
    111e:	19 95       	eicall
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_82>:
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	e0 91 43 20 	lds	r30, 0x2043	; 0x802043 <tc_tcd0_ccd_callback>
    1186:	f0 91 44 20 	lds	r31, 0x2044	; 0x802044 <tc_tcd0_ccd_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_82+0x42>
    118e:	19 95       	eicall
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_83>:
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	e0 91 41 20 	lds	r30, 0x2041	; 0x802041 <tc_tcd1_ovf_callback>
    11f6:	f0 91 42 20 	lds	r31, 0x2042	; 0x802042 <tc_tcd1_ovf_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_83+0x42>
    11fe:	19 95       	eicall
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_84>:
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
    1262:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <tc_tcd1_err_callback>
    1266:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <tc_tcd1_err_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_84+0x42>
    126e:	19 95       	eicall
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_85>:
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
    12d2:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <tc_tcd1_cca_callback>
    12d6:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <tc_tcd1_cca_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_85+0x42>
    12de:	19 95       	eicall
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_86>:
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	08 b6       	in	r0, 0x38	; 56
    131a:	0f 92       	push	r0
    131c:	18 be       	out	0x38, r1	; 56
    131e:	09 b6       	in	r0, 0x39	; 57
    1320:	0f 92       	push	r0
    1322:	19 be       	out	0x39, r1	; 57
    1324:	0b b6       	in	r0, 0x3b	; 59
    1326:	0f 92       	push	r0
    1328:	1b be       	out	0x3b, r1	; 59
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
    1342:	e0 91 3b 20 	lds	r30, 0x203B	; 0x80203b <tc_tcd1_ccb_callback>
    1346:	f0 91 3c 20 	lds	r31, 0x203C	; 0x80203c <tc_tcd1_ccb_callback+0x1>
    134a:	30 97       	sbiw	r30, 0x00	; 0
    134c:	09 f0       	breq	.+2      	; 0x1350 <__vector_86+0x42>
    134e:	19 95       	eicall
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0b be       	out	0x3b, r0	; 59
    136c:	0f 90       	pop	r0
    136e:	09 be       	out	0x39, r0	; 57
    1370:	0f 90       	pop	r0
    1372:	08 be       	out	0x38, r0	; 56
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_47>:
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	08 b6       	in	r0, 0x38	; 56
    138a:	0f 92       	push	r0
    138c:	18 be       	out	0x38, r1	; 56
    138e:	09 b6       	in	r0, 0x39	; 57
    1390:	0f 92       	push	r0
    1392:	19 be       	out	0x39, r1	; 57
    1394:	0b b6       	in	r0, 0x3b	; 59
    1396:	0f 92       	push	r0
    1398:	1b be       	out	0x3b, r1	; 59
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
    13b2:	e0 91 39 20 	lds	r30, 0x2039	; 0x802039 <tc_tce0_ovf_callback>
    13b6:	f0 91 3a 20 	lds	r31, 0x203A	; 0x80203a <tc_tce0_ovf_callback+0x1>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <__vector_47+0x42>
    13be:	19 95       	eicall
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0b be       	out	0x3b, r0	; 59
    13dc:	0f 90       	pop	r0
    13de:	09 be       	out	0x39, r0	; 57
    13e0:	0f 90       	pop	r0
    13e2:	08 be       	out	0x38, r0	; 56
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_48>:
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	08 b6       	in	r0, 0x38	; 56
    13fa:	0f 92       	push	r0
    13fc:	18 be       	out	0x38, r1	; 56
    13fe:	09 b6       	in	r0, 0x39	; 57
    1400:	0f 92       	push	r0
    1402:	19 be       	out	0x39, r1	; 57
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	1b be       	out	0x3b, r1	; 59
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	e0 91 37 20 	lds	r30, 0x2037	; 0x802037 <tc_tce0_err_callback>
    1426:	f0 91 38 20 	lds	r31, 0x2038	; 0x802038 <tc_tce0_err_callback+0x1>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	09 f0       	breq	.+2      	; 0x1430 <__vector_48+0x42>
    142e:	19 95       	eicall
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0b be       	out	0x3b, r0	; 59
    144c:	0f 90       	pop	r0
    144e:	09 be       	out	0x39, r0	; 57
    1450:	0f 90       	pop	r0
    1452:	08 be       	out	0x38, r0	; 56
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_49>:
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	08 b6       	in	r0, 0x38	; 56
    146a:	0f 92       	push	r0
    146c:	18 be       	out	0x38, r1	; 56
    146e:	09 b6       	in	r0, 0x39	; 57
    1470:	0f 92       	push	r0
    1472:	19 be       	out	0x39, r1	; 57
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	1b be       	out	0x3b, r1	; 59
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	e0 91 35 20 	lds	r30, 0x2035	; 0x802035 <tc_tce0_cca_callback>
    1496:	f0 91 36 20 	lds	r31, 0x2036	; 0x802036 <tc_tce0_cca_callback+0x1>
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_49+0x42>
    149e:	19 95       	eicall
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0b be       	out	0x3b, r0	; 59
    14bc:	0f 90       	pop	r0
    14be:	09 be       	out	0x39, r0	; 57
    14c0:	0f 90       	pop	r0
    14c2:	08 be       	out	0x38, r0	; 56
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <__vector_50>:
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	08 b6       	in	r0, 0x38	; 56
    14da:	0f 92       	push	r0
    14dc:	18 be       	out	0x38, r1	; 56
    14de:	09 b6       	in	r0, 0x39	; 57
    14e0:	0f 92       	push	r0
    14e2:	19 be       	out	0x39, r1	; 57
    14e4:	0b b6       	in	r0, 0x3b	; 59
    14e6:	0f 92       	push	r0
    14e8:	1b be       	out	0x3b, r1	; 59
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
    1502:	e0 91 33 20 	lds	r30, 0x2033	; 0x802033 <tc_tce0_ccb_callback>
    1506:	f0 91 34 20 	lds	r31, 0x2034	; 0x802034 <tc_tce0_ccb_callback+0x1>
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	09 f0       	breq	.+2      	; 0x1510 <__vector_50+0x42>
    150e:	19 95       	eicall
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0b be       	out	0x3b, r0	; 59
    152c:	0f 90       	pop	r0
    152e:	09 be       	out	0x39, r0	; 57
    1530:	0f 90       	pop	r0
    1532:	08 be       	out	0x38, r0	; 56
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_51>:
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	08 b6       	in	r0, 0x38	; 56
    154a:	0f 92       	push	r0
    154c:	18 be       	out	0x38, r1	; 56
    154e:	09 b6       	in	r0, 0x39	; 57
    1550:	0f 92       	push	r0
    1552:	19 be       	out	0x39, r1	; 57
    1554:	0b b6       	in	r0, 0x3b	; 59
    1556:	0f 92       	push	r0
    1558:	1b be       	out	0x3b, r1	; 59
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	e0 91 31 20 	lds	r30, 0x2031	; 0x802031 <tc_tce0_ccc_callback>
    1576:	f0 91 32 20 	lds	r31, 0x2032	; 0x802032 <tc_tce0_ccc_callback+0x1>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <__vector_51+0x42>
    157e:	19 95       	eicall
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	09 be       	out	0x39, r0	; 57
    15a0:	0f 90       	pop	r0
    15a2:	08 be       	out	0x38, r0	; 56
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_52>:
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	08 b6       	in	r0, 0x38	; 56
    15ba:	0f 92       	push	r0
    15bc:	18 be       	out	0x38, r1	; 56
    15be:	09 b6       	in	r0, 0x39	; 57
    15c0:	0f 92       	push	r0
    15c2:	19 be       	out	0x39, r1	; 57
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	1b be       	out	0x3b, r1	; 59
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
    15e2:	e0 91 2f 20 	lds	r30, 0x202F	; 0x80202f <tc_tce0_ccd_callback>
    15e6:	f0 91 30 20 	lds	r31, 0x2030	; 0x802030 <tc_tce0_ccd_callback+0x1>
    15ea:	30 97       	sbiw	r30, 0x00	; 0
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__vector_52+0x42>
    15ee:	19 95       	eicall
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0b be       	out	0x3b, r0	; 59
    160c:	0f 90       	pop	r0
    160e:	09 be       	out	0x39, r0	; 57
    1610:	0f 90       	pop	r0
    1612:	08 be       	out	0x38, r0	; 56
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_53>:
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	08 b6       	in	r0, 0x38	; 56
    162a:	0f 92       	push	r0
    162c:	18 be       	out	0x38, r1	; 56
    162e:	09 b6       	in	r0, 0x39	; 57
    1630:	0f 92       	push	r0
    1632:	19 be       	out	0x39, r1	; 57
    1634:	0b b6       	in	r0, 0x3b	; 59
    1636:	0f 92       	push	r0
    1638:	1b be       	out	0x3b, r1	; 59
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
    1652:	e0 91 2d 20 	lds	r30, 0x202D	; 0x80202d <tc_tce1_ovf_callback>
    1656:	f0 91 2e 20 	lds	r31, 0x202E	; 0x80202e <tc_tce1_ovf_callback+0x1>
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <__vector_53+0x42>
    165e:	19 95       	eicall
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	09 be       	out	0x39, r0	; 57
    1680:	0f 90       	pop	r0
    1682:	08 be       	out	0x38, r0	; 56
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_54>:
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	08 b6       	in	r0, 0x38	; 56
    169a:	0f 92       	push	r0
    169c:	18 be       	out	0x38, r1	; 56
    169e:	09 b6       	in	r0, 0x39	; 57
    16a0:	0f 92       	push	r0
    16a2:	19 be       	out	0x39, r1	; 57
    16a4:	0b b6       	in	r0, 0x3b	; 59
    16a6:	0f 92       	push	r0
    16a8:	1b be       	out	0x3b, r1	; 59
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
    16c2:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <tc_tce1_err_callback>
    16c6:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <tc_tce1_err_callback+0x1>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__vector_54+0x42>
    16ce:	19 95       	eicall
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0b be       	out	0x3b, r0	; 59
    16ec:	0f 90       	pop	r0
    16ee:	09 be       	out	0x39, r0	; 57
    16f0:	0f 90       	pop	r0
    16f2:	08 be       	out	0x38, r0	; 56
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_55>:
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	08 b6       	in	r0, 0x38	; 56
    170a:	0f 92       	push	r0
    170c:	18 be       	out	0x38, r1	; 56
    170e:	09 b6       	in	r0, 0x39	; 57
    1710:	0f 92       	push	r0
    1712:	19 be       	out	0x39, r1	; 57
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	1b be       	out	0x3b, r1	; 59
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <tc_tce1_cca_callback>
    1736:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <tc_tce1_cca_callback+0x1>
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f0       	breq	.+2      	; 0x1740 <__vector_55+0x42>
    173e:	19 95       	eicall
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	09 be       	out	0x39, r0	; 57
    1760:	0f 90       	pop	r0
    1762:	08 be       	out	0x38, r0	; 56
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_56>:
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	08 b6       	in	r0, 0x38	; 56
    177a:	0f 92       	push	r0
    177c:	18 be       	out	0x38, r1	; 56
    177e:	09 b6       	in	r0, 0x39	; 57
    1780:	0f 92       	push	r0
    1782:	19 be       	out	0x39, r1	; 57
    1784:	0b b6       	in	r0, 0x3b	; 59
    1786:	0f 92       	push	r0
    1788:	1b be       	out	0x3b, r1	; 59
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
    17a2:	e0 91 27 20 	lds	r30, 0x2027	; 0x802027 <tc_tce1_ccb_callback>
    17a6:	f0 91 28 20 	lds	r31, 0x2028	; 0x802028 <tc_tce1_ccb_callback+0x1>
    17aa:	30 97       	sbiw	r30, 0x00	; 0
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <__vector_56+0x42>
    17ae:	19 95       	eicall
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	09 be       	out	0x39, r0	; 57
    17d0:	0f 90       	pop	r0
    17d2:	08 be       	out	0x38, r0	; 56
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_108>:
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	08 b6       	in	r0, 0x38	; 56
    17ea:	0f 92       	push	r0
    17ec:	18 be       	out	0x38, r1	; 56
    17ee:	09 b6       	in	r0, 0x39	; 57
    17f0:	0f 92       	push	r0
    17f2:	19 be       	out	0x39, r1	; 57
    17f4:	0b b6       	in	r0, 0x3b	; 59
    17f6:	0f 92       	push	r0
    17f8:	1b be       	out	0x3b, r1	; 59
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
    1812:	e0 91 25 20 	lds	r30, 0x2025	; 0x802025 <tc_tcf0_ovf_callback>
    1816:	f0 91 26 20 	lds	r31, 0x2026	; 0x802026 <tc_tcf0_ovf_callback+0x1>
    181a:	30 97       	sbiw	r30, 0x00	; 0
    181c:	09 f0       	breq	.+2      	; 0x1820 <__vector_108+0x42>
    181e:	19 95       	eicall
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0b be       	out	0x3b, r0	; 59
    183c:	0f 90       	pop	r0
    183e:	09 be       	out	0x39, r0	; 57
    1840:	0f 90       	pop	r0
    1842:	08 be       	out	0x38, r0	; 56
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_109>:
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	08 b6       	in	r0, 0x38	; 56
    185a:	0f 92       	push	r0
    185c:	18 be       	out	0x38, r1	; 56
    185e:	09 b6       	in	r0, 0x39	; 57
    1860:	0f 92       	push	r0
    1862:	19 be       	out	0x39, r1	; 57
    1864:	0b b6       	in	r0, 0x3b	; 59
    1866:	0f 92       	push	r0
    1868:	1b be       	out	0x3b, r1	; 59
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
    1882:	e0 91 23 20 	lds	r30, 0x2023	; 0x802023 <tc_tcf0_err_callback>
    1886:	f0 91 24 20 	lds	r31, 0x2024	; 0x802024 <tc_tcf0_err_callback+0x1>
    188a:	30 97       	sbiw	r30, 0x00	; 0
    188c:	09 f0       	breq	.+2      	; 0x1890 <__vector_109+0x42>
    188e:	19 95       	eicall
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0b be       	out	0x3b, r0	; 59
    18ac:	0f 90       	pop	r0
    18ae:	09 be       	out	0x39, r0	; 57
    18b0:	0f 90       	pop	r0
    18b2:	08 be       	out	0x38, r0	; 56
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_110>:
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	08 b6       	in	r0, 0x38	; 56
    18ca:	0f 92       	push	r0
    18cc:	18 be       	out	0x38, r1	; 56
    18ce:	09 b6       	in	r0, 0x39	; 57
    18d0:	0f 92       	push	r0
    18d2:	19 be       	out	0x39, r1	; 57
    18d4:	0b b6       	in	r0, 0x3b	; 59
    18d6:	0f 92       	push	r0
    18d8:	1b be       	out	0x3b, r1	; 59
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	6f 93       	push	r22
    18e4:	7f 93       	push	r23
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
    18f2:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <tc_tcf0_cca_callback>
    18f6:	f0 91 22 20 	lds	r31, 0x2022	; 0x802022 <tc_tcf0_cca_callback+0x1>
    18fa:	30 97       	sbiw	r30, 0x00	; 0
    18fc:	09 f0       	breq	.+2      	; 0x1900 <__vector_110+0x42>
    18fe:	19 95       	eicall
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0b be       	out	0x3b, r0	; 59
    191c:	0f 90       	pop	r0
    191e:	09 be       	out	0x39, r0	; 57
    1920:	0f 90       	pop	r0
    1922:	08 be       	out	0x38, r0	; 56
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_111>:
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	08 b6       	in	r0, 0x38	; 56
    193a:	0f 92       	push	r0
    193c:	18 be       	out	0x38, r1	; 56
    193e:	09 b6       	in	r0, 0x39	; 57
    1940:	0f 92       	push	r0
    1942:	19 be       	out	0x39, r1	; 57
    1944:	0b b6       	in	r0, 0x3b	; 59
    1946:	0f 92       	push	r0
    1948:	1b be       	out	0x3b, r1	; 59
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
    1962:	e0 91 1f 20 	lds	r30, 0x201F	; 0x80201f <tc_tcf0_ccb_callback>
    1966:	f0 91 20 20 	lds	r31, 0x2020	; 0x802020 <tc_tcf0_ccb_callback+0x1>
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	09 f0       	breq	.+2      	; 0x1970 <__vector_111+0x42>
    196e:	19 95       	eicall
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0b be       	out	0x3b, r0	; 59
    198c:	0f 90       	pop	r0
    198e:	09 be       	out	0x39, r0	; 57
    1990:	0f 90       	pop	r0
    1992:	08 be       	out	0x38, r0	; 56
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_112>:
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	08 b6       	in	r0, 0x38	; 56
    19aa:	0f 92       	push	r0
    19ac:	18 be       	out	0x38, r1	; 56
    19ae:	09 b6       	in	r0, 0x39	; 57
    19b0:	0f 92       	push	r0
    19b2:	19 be       	out	0x39, r1	; 57
    19b4:	0b b6       	in	r0, 0x3b	; 59
    19b6:	0f 92       	push	r0
    19b8:	1b be       	out	0x3b, r1	; 59
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	e0 91 1d 20 	lds	r30, 0x201D	; 0x80201d <tc_tcf0_ccc_callback>
    19d6:	f0 91 1e 20 	lds	r31, 0x201E	; 0x80201e <tc_tcf0_ccc_callback+0x1>
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__vector_112+0x42>
    19de:	19 95       	eicall
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0b be       	out	0x3b, r0	; 59
    19fc:	0f 90       	pop	r0
    19fe:	09 be       	out	0x39, r0	; 57
    1a00:	0f 90       	pop	r0
    1a02:	08 be       	out	0x38, r0	; 56
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_113>:
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	08 b6       	in	r0, 0x38	; 56
    1a1a:	0f 92       	push	r0
    1a1c:	18 be       	out	0x38, r1	; 56
    1a1e:	09 b6       	in	r0, 0x39	; 57
    1a20:	0f 92       	push	r0
    1a22:	19 be       	out	0x39, r1	; 57
    1a24:	0b b6       	in	r0, 0x3b	; 59
    1a26:	0f 92       	push	r0
    1a28:	1b be       	out	0x3b, r1	; 59
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
    1a42:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <tc_tcf0_ccd_callback>
    1a46:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <tc_tcf0_ccd_callback+0x1>
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__vector_113+0x42>
    1a4e:	19 95       	eicall
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	09 be       	out	0x39, r0	; 57
    1a70:	0f 90       	pop	r0
    1a72:	08 be       	out	0x38, r0	; 56
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_114>:
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	08 b6       	in	r0, 0x38	; 56
    1a8a:	0f 92       	push	r0
    1a8c:	18 be       	out	0x38, r1	; 56
    1a8e:	09 b6       	in	r0, 0x39	; 57
    1a90:	0f 92       	push	r0
    1a92:	19 be       	out	0x39, r1	; 57
    1a94:	0b b6       	in	r0, 0x3b	; 59
    1a96:	0f 92       	push	r0
    1a98:	1b be       	out	0x3b, r1	; 59
    1a9a:	2f 93       	push	r18
    1a9c:	3f 93       	push	r19
    1a9e:	4f 93       	push	r20
    1aa0:	5f 93       	push	r21
    1aa2:	6f 93       	push	r22
    1aa4:	7f 93       	push	r23
    1aa6:	8f 93       	push	r24
    1aa8:	9f 93       	push	r25
    1aaa:	af 93       	push	r26
    1aac:	bf 93       	push	r27
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
    1ab2:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <tc_tcf1_ovf_callback>
    1ab6:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <tc_tcf1_ovf_callback+0x1>
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_114+0x42>
    1abe:	19 95       	eicall
    1ac0:	ff 91       	pop	r31
    1ac2:	ef 91       	pop	r30
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0b be       	out	0x3b, r0	; 59
    1adc:	0f 90       	pop	r0
    1ade:	09 be       	out	0x39, r0	; 57
    1ae0:	0f 90       	pop	r0
    1ae2:	08 be       	out	0x38, r0	; 56
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_115>:
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	08 b6       	in	r0, 0x38	; 56
    1afa:	0f 92       	push	r0
    1afc:	18 be       	out	0x38, r1	; 56
    1afe:	09 b6       	in	r0, 0x39	; 57
    1b00:	0f 92       	push	r0
    1b02:	19 be       	out	0x39, r1	; 57
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	1b be       	out	0x3b, r1	; 59
    1b0a:	2f 93       	push	r18
    1b0c:	3f 93       	push	r19
    1b0e:	4f 93       	push	r20
    1b10:	5f 93       	push	r21
    1b12:	6f 93       	push	r22
    1b14:	7f 93       	push	r23
    1b16:	8f 93       	push	r24
    1b18:	9f 93       	push	r25
    1b1a:	af 93       	push	r26
    1b1c:	bf 93       	push	r27
    1b1e:	ef 93       	push	r30
    1b20:	ff 93       	push	r31
    1b22:	e0 91 17 20 	lds	r30, 0x2017	; 0x802017 <tc_tcf1_err_callback>
    1b26:	f0 91 18 20 	lds	r31, 0x2018	; 0x802018 <tc_tcf1_err_callback+0x1>
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <__vector_115+0x42>
    1b2e:	19 95       	eicall
    1b30:	ff 91       	pop	r31
    1b32:	ef 91       	pop	r30
    1b34:	bf 91       	pop	r27
    1b36:	af 91       	pop	r26
    1b38:	9f 91       	pop	r25
    1b3a:	8f 91       	pop	r24
    1b3c:	7f 91       	pop	r23
    1b3e:	6f 91       	pop	r22
    1b40:	5f 91       	pop	r21
    1b42:	4f 91       	pop	r20
    1b44:	3f 91       	pop	r19
    1b46:	2f 91       	pop	r18
    1b48:	0f 90       	pop	r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	0f 90       	pop	r0
    1b4e:	09 be       	out	0x39, r0	; 57
    1b50:	0f 90       	pop	r0
    1b52:	08 be       	out	0x38, r0	; 56
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_116>:
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	08 b6       	in	r0, 0x38	; 56
    1b6a:	0f 92       	push	r0
    1b6c:	18 be       	out	0x38, r1	; 56
    1b6e:	09 b6       	in	r0, 0x39	; 57
    1b70:	0f 92       	push	r0
    1b72:	19 be       	out	0x39, r1	; 57
    1b74:	0b b6       	in	r0, 0x3b	; 59
    1b76:	0f 92       	push	r0
    1b78:	1b be       	out	0x3b, r1	; 59
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
    1b92:	e0 91 15 20 	lds	r30, 0x2015	; 0x802015 <tc_tcf1_cca_callback>
    1b96:	f0 91 16 20 	lds	r31, 0x2016	; 0x802016 <tc_tcf1_cca_callback+0x1>
    1b9a:	30 97       	sbiw	r30, 0x00	; 0
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <__vector_116+0x42>
    1b9e:	19 95       	eicall
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	7f 91       	pop	r23
    1bae:	6f 91       	pop	r22
    1bb0:	5f 91       	pop	r21
    1bb2:	4f 91       	pop	r20
    1bb4:	3f 91       	pop	r19
    1bb6:	2f 91       	pop	r18
    1bb8:	0f 90       	pop	r0
    1bba:	0b be       	out	0x3b, r0	; 59
    1bbc:	0f 90       	pop	r0
    1bbe:	09 be       	out	0x39, r0	; 57
    1bc0:	0f 90       	pop	r0
    1bc2:	08 be       	out	0x38, r0	; 56
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <__vector_117>:
    1bce:	1f 92       	push	r1
    1bd0:	0f 92       	push	r0
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	0f 92       	push	r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	08 b6       	in	r0, 0x38	; 56
    1bda:	0f 92       	push	r0
    1bdc:	18 be       	out	0x38, r1	; 56
    1bde:	09 b6       	in	r0, 0x39	; 57
    1be0:	0f 92       	push	r0
    1be2:	19 be       	out	0x39, r1	; 57
    1be4:	0b b6       	in	r0, 0x3b	; 59
    1be6:	0f 92       	push	r0
    1be8:	1b be       	out	0x3b, r1	; 59
    1bea:	2f 93       	push	r18
    1bec:	3f 93       	push	r19
    1bee:	4f 93       	push	r20
    1bf0:	5f 93       	push	r21
    1bf2:	6f 93       	push	r22
    1bf4:	7f 93       	push	r23
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
    1c02:	e0 91 13 20 	lds	r30, 0x2013	; 0x802013 <tc_tcf1_ccb_callback>
    1c06:	f0 91 14 20 	lds	r31, 0x2014	; 0x802014 <tc_tcf1_ccb_callback+0x1>
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <__vector_117+0x42>
    1c0e:	19 95       	eicall
    1c10:	ff 91       	pop	r31
    1c12:	ef 91       	pop	r30
    1c14:	bf 91       	pop	r27
    1c16:	af 91       	pop	r26
    1c18:	9f 91       	pop	r25
    1c1a:	8f 91       	pop	r24
    1c1c:	7f 91       	pop	r23
    1c1e:	6f 91       	pop	r22
    1c20:	5f 91       	pop	r21
    1c22:	4f 91       	pop	r20
    1c24:	3f 91       	pop	r19
    1c26:	2f 91       	pop	r18
    1c28:	0f 90       	pop	r0
    1c2a:	0b be       	out	0x3b, r0	; 59
    1c2c:	0f 90       	pop	r0
    1c2e:	09 be       	out	0x39, r0	; 57
    1c30:	0f 90       	pop	r0
    1c32:	08 be       	out	0x38, r0	; 56
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti

00001c3e <tc_enable>:
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	1f 92       	push	r1
    1c46:	1f 92       	push	r1
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	2f b7       	in	r18, 0x3f	; 63
    1c4e:	2a 83       	std	Y+2, r18	; 0x02
    1c50:	f8 94       	cli
    1c52:	1a 81       	ldd	r17, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	39 2f       	mov	r19, r25
    1c58:	21 15       	cp	r18, r1
    1c5a:	88 e0       	ldi	r24, 0x08	; 8
    1c5c:	38 07       	cpc	r19, r24
    1c5e:	49 f4       	brne	.+18     	; 0x1c72 <tc_enable+0x34>
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1c68:	64 e0       	ldi	r22, 0x04	; 4
    1c6a:	83 e0       	ldi	r24, 0x03	; 3
    1c6c:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1c70:	5c c0       	rjmp	.+184    	; 0x1d2a <tc_enable+0xec>
    1c72:	20 34       	cpi	r18, 0x40	; 64
    1c74:	88 e0       	ldi	r24, 0x08	; 8
    1c76:	38 07       	cpc	r19, r24
    1c78:	49 f4       	brne	.+18     	; 0x1c8c <tc_enable+0x4e>
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1c82:	64 e0       	ldi	r22, 0x04	; 4
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1c8a:	4f c0       	rjmp	.+158    	; 0x1d2a <tc_enable+0xec>
    1c8c:	21 15       	cp	r18, r1
    1c8e:	89 e0       	ldi	r24, 0x09	; 9
    1c90:	38 07       	cpc	r19, r24
    1c92:	49 f4       	brne	.+18     	; 0x1ca6 <tc_enable+0x68>
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	84 e0       	ldi	r24, 0x04	; 4
    1c98:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1c9c:	64 e0       	ldi	r22, 0x04	; 4
    1c9e:	84 e0       	ldi	r24, 0x04	; 4
    1ca0:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1ca4:	42 c0       	rjmp	.+132    	; 0x1d2a <tc_enable+0xec>
    1ca6:	20 34       	cpi	r18, 0x40	; 64
    1ca8:	89 e0       	ldi	r24, 0x09	; 9
    1caa:	38 07       	cpc	r19, r24
    1cac:	49 f4       	brne	.+18     	; 0x1cc0 <tc_enable+0x82>
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1cb6:	64 e0       	ldi	r22, 0x04	; 4
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1cbe:	35 c0       	rjmp	.+106    	; 0x1d2a <tc_enable+0xec>
    1cc0:	21 15       	cp	r18, r1
    1cc2:	8a e0       	ldi	r24, 0x0A	; 10
    1cc4:	38 07       	cpc	r19, r24
    1cc6:	49 f4       	brne	.+18     	; 0x1cda <tc_enable+0x9c>
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	85 e0       	ldi	r24, 0x05	; 5
    1ccc:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1cd0:	64 e0       	ldi	r22, 0x04	; 4
    1cd2:	85 e0       	ldi	r24, 0x05	; 5
    1cd4:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1cd8:	28 c0       	rjmp	.+80     	; 0x1d2a <tc_enable+0xec>
    1cda:	20 34       	cpi	r18, 0x40	; 64
    1cdc:	8a e0       	ldi	r24, 0x0A	; 10
    1cde:	38 07       	cpc	r19, r24
    1ce0:	49 f4       	brne	.+18     	; 0x1cf4 <tc_enable+0xb6>
    1ce2:	62 e0       	ldi	r22, 0x02	; 2
    1ce4:	85 e0       	ldi	r24, 0x05	; 5
    1ce6:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1cea:	64 e0       	ldi	r22, 0x04	; 4
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1cf2:	1b c0       	rjmp	.+54     	; 0x1d2a <tc_enable+0xec>
    1cf4:	21 15       	cp	r18, r1
    1cf6:	8b e0       	ldi	r24, 0x0B	; 11
    1cf8:	38 07       	cpc	r19, r24
    1cfa:	49 f4       	brne	.+18     	; 0x1d0e <tc_enable+0xd0>
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1d04:	64 e0       	ldi	r22, 0x04	; 4
    1d06:	86 e0       	ldi	r24, 0x06	; 6
    1d08:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1d0c:	0e c0       	rjmp	.+28     	; 0x1d2a <tc_enable+0xec>
    1d0e:	20 34       	cpi	r18, 0x40	; 64
    1d10:	3b 40       	sbci	r19, 0x0B	; 11
    1d12:	49 f4       	brne	.+18     	; 0x1d26 <tc_enable+0xe8>
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	86 e0       	ldi	r24, 0x06	; 6
    1d18:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1d1c:	64 e0       	ldi	r22, 0x04	; 4
    1d1e:	86 e0       	ldi	r24, 0x06	; 6
    1d20:	0e 94 a2 04 	call	0x944	; 0x944 <sysclk_enable_module>
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <tc_enable+0xec>
    1d26:	1f bf       	out	0x3f, r17	; 63
    1d28:	10 c0       	rjmp	.+32     	; 0x1d4a <tc_enable+0x10c>
    1d2a:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <sleepmgr_locks+0x1>
    1d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <tc_enable+0xf6>
    1d32:	ff cf       	rjmp	.-2      	; 0x1d32 <tc_enable+0xf4>
    1d34:	8f b7       	in	r24, 0x3f	; 63
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	f8 94       	cli
    1d3a:	99 81       	ldd	r25, Y+1	; 0x01
    1d3c:	e7 e6       	ldi	r30, 0x67	; 103
    1d3e:	f0 e2       	ldi	r31, 0x20	; 32
    1d40:	81 81       	ldd	r24, Z+1	; 0x01
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	81 83       	std	Z+1, r24	; 0x01
    1d46:	9f bf       	out	0x3f, r25	; 63
    1d48:	1f bf       	out	0x3f, r17	; 63
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	08 95       	ret

00001d56 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1d56:	81 15       	cp	r24, r1
    1d58:	28 e0       	ldi	r18, 0x08	; 8
    1d5a:	92 07       	cpc	r25, r18
    1d5c:	29 f4       	brne	.+10     	; 0x1d68 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1d5e:	60 93 61 20 	sts	0x2061, r22	; 0x802061 <tc_tcc0_ovf_callback>
    1d62:	70 93 62 20 	sts	0x2062, r23	; 0x802062 <tc_tcc0_ovf_callback+0x1>
    1d66:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1d68:	80 34       	cpi	r24, 0x40	; 64
    1d6a:	28 e0       	ldi	r18, 0x08	; 8
    1d6c:	92 07       	cpc	r25, r18
    1d6e:	29 f4       	brne	.+10     	; 0x1d7a <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    1d70:	60 93 55 20 	sts	0x2055, r22	; 0x802055 <tc_tcc1_ovf_callback>
    1d74:	70 93 56 20 	sts	0x2056, r23	; 0x802056 <tc_tcc1_ovf_callback+0x1>
    1d78:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1d7a:	81 15       	cp	r24, r1
    1d7c:	29 e0       	ldi	r18, 0x09	; 9
    1d7e:	92 07       	cpc	r25, r18
    1d80:	29 f4       	brne	.+10     	; 0x1d8c <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    1d82:	60 93 4d 20 	sts	0x204D, r22	; 0x80204d <tc_tcd0_ovf_callback>
    1d86:	70 93 4e 20 	sts	0x204E, r23	; 0x80204e <tc_tcd0_ovf_callback+0x1>
    1d8a:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1d8c:	80 34       	cpi	r24, 0x40	; 64
    1d8e:	29 e0       	ldi	r18, 0x09	; 9
    1d90:	92 07       	cpc	r25, r18
    1d92:	29 f4       	brne	.+10     	; 0x1d9e <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1d94:	60 93 41 20 	sts	0x2041, r22	; 0x802041 <tc_tcd1_ovf_callback>
    1d98:	70 93 42 20 	sts	0x2042, r23	; 0x802042 <tc_tcd1_ovf_callback+0x1>
    1d9c:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1d9e:	81 15       	cp	r24, r1
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	92 07       	cpc	r25, r18
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1da6:	60 93 39 20 	sts	0x2039, r22	; 0x802039 <tc_tce0_ovf_callback>
    1daa:	70 93 3a 20 	sts	0x203A, r23	; 0x80203a <tc_tce0_ovf_callback+0x1>
    1dae:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1db0:	80 34       	cpi	r24, 0x40	; 64
    1db2:	2a e0       	ldi	r18, 0x0A	; 10
    1db4:	92 07       	cpc	r25, r18
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    1db8:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <tc_tce1_ovf_callback>
    1dbc:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <tc_tce1_ovf_callback+0x1>
    1dc0:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1dc2:	81 15       	cp	r24, r1
    1dc4:	2b e0       	ldi	r18, 0x0B	; 11
    1dc6:	92 07       	cpc	r25, r18
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <tc_set_overflow_interrupt_callback+0x7e>
		tc_tcf0_ovf_callback = callback;
    1dca:	60 93 25 20 	sts	0x2025, r22	; 0x802025 <tc_tcf0_ovf_callback>
    1dce:	70 93 26 20 	sts	0x2026, r23	; 0x802026 <tc_tcf0_ovf_callback+0x1>
    1dd2:	08 95       	ret
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    1dd4:	80 34       	cpi	r24, 0x40	; 64
    1dd6:	9b 40       	sbci	r25, 0x0B	; 11
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <tc_set_overflow_interrupt_callback+0x8c>
		tc_tcf1_ovf_callback = callback;
    1dda:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <tc_tcf1_ovf_callback>
    1dde:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <tc_tcf1_ovf_callback+0x1>
    1de2:	08 95       	ret

00001de4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1de4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1de6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1de8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1dea:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1dec:	60 83       	st	Z, r22
	ret                             // Return to caller
    1dee:	08 95       	ret

00001df0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1dfa:	c6 2f       	mov	r28, r22
    1dfc:	d0 e0       	ldi	r29, 0x00	; 0
    1dfe:	de 01       	movw	r26, r28
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <ioport_configure_port_pin+0x18>
    1e04:	b5 95       	asr	r27
    1e06:	a7 95       	ror	r26
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <ioport_configure_port_pin+0x14>
    1e0c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1e0e:	50 8b       	std	Z+16, r21	; 0x10
    1e10:	2f 5f       	subi	r18, 0xFF	; 255
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1e16:	28 30       	cpi	r18, 0x08	; 8
    1e18:	31 05       	cpc	r19, r1
    1e1a:	89 f7       	brne	.-30     	; 0x1dfe <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1e1c:	40 ff       	sbrs	r20, 0
    1e1e:	0a c0       	rjmp	.+20     	; 0x1e34 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1e20:	41 ff       	sbrs	r20, 1
    1e22:	03 c0       	rjmp	.+6      	; 0x1e2a <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1e24:	fc 01       	movw	r30, r24
    1e26:	65 83       	std	Z+5, r22	; 0x05
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1e2e:	fc 01       	movw	r30, r24
    1e30:	61 83       	std	Z+1, r22	; 0x01
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1e34:	fc 01       	movw	r30, r24
    1e36:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1e3e:	43 e0       	ldi	r20, 0x03	; 3
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	68 e0       	ldi	r22, 0x08	; 8
    1e44:	80 ec       	ldi	r24, 0xC0	; 192
    1e46:	97 e0       	ldi	r25, 0x07	; 7
    1e48:	d3 df       	rcall	.-90     	; 0x1df0 <ioport_configure_port_pin>
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	58 e1       	ldi	r21, 0x18	; 24
    1e4e:	64 e0       	ldi	r22, 0x04	; 4
    1e50:	80 ec       	ldi	r24, 0xC0	; 192
    1e52:	97 e0       	ldi	r25, 0x07	; 7
    1e54:	cd cf       	rjmp	.-102    	; 0x1df0 <ioport_configure_port_pin>
    1e56:	08 95       	ret

00001e58 <example_handle>:
	};
	TCInit(examplestruct);
}
void example_handle(void)
{
	PORTQ.OUT^=0x08; //toggles port q on and off pin 3
    1e58:	e0 ec       	ldi	r30, 0xC0	; 192
    1e5a:	f7 e0       	ldi	r31, 0x07	; 7
    1e5c:	94 81       	ldd	r25, Z+4	; 0x04
    1e5e:	88 e0       	ldi	r24, 0x08	; 8
    1e60:	89 27       	eor	r24, r25
    1e62:	84 83       	std	Z+4, r24	; 0x04
    1e64:	08 95       	ret

00001e66 <TCInit>:
#include "drivers/TCLibrary.h"



void TCInit(TCdef settings)
{
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	28 97       	sbiw	r28, 0x08	; 8
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	29 83       	std	Y+1, r18	; 0x01
    1e7a:	3a 83       	std	Y+2, r19	; 0x02
    1e7c:	4b 83       	std	Y+3, r20	; 0x03
    1e7e:	5c 83       	std	Y+4, r21	; 0x04
    1e80:	6d 83       	std	Y+5, r22	; 0x05
    1e82:	7e 83       	std	Y+6, r23	; 0x06
    1e84:	8f 83       	std	Y+7, r24	; 0x07
    1e86:	98 87       	std	Y+8, r25	; 0x08
    1e88:	0b 81       	ldd	r16, Y+3	; 0x03
    1e8a:	1c 81       	ldd	r17, Y+4	; 0x04
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1e8c:	87 e0       	ldi	r24, 0x07	; 7
    1e8e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	tc_enable(settings.TC);
    1e92:	c8 01       	movw	r24, r16
    1e94:	d4 de       	rcall	.-600    	; 0x1c3e <tc_enable>
	tc_set_overflow_interrupt_callback(settings.TC, settings.FunHandle);
    1e96:	6f 81       	ldd	r22, Y+7	; 0x07
    1e98:	78 85       	ldd	r23, Y+8	; 0x08
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	5c df       	rcall	.-328    	; 0x1d56 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	88 7f       	andi	r24, 0xF8	; 248
    1ea4:	81 83       	std	Z+1, r24	; 0x01
	tc_set_wgm(settings.TC, TC_WG_NORMAL);
	tc_write_period(settings.TC, settings.period);
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1eaa:	86 a3       	std	Z+38, r24	; 0x26
    1eac:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    1eae:	86 81       	ldd	r24, Z+6	; 0x06
    1eb0:	8c 7f       	andi	r24, 0xFC	; 252
    1eb2:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    1eb4:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    1eb6:	81 60       	ori	r24, 0x01	; 1
    1eb8:	86 83       	std	Z+6, r24	; 0x06
	tc_set_overflow_interrupt_level(settings.TC, TC_INT_LVL_LO);
	cpu_irq_enable();
    1eba:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1ebc:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1ebe:	80 7f       	andi	r24, 0xF0	; 240
    1ec0:	87 60       	ori	r24, 0x07	; 7
    1ec2:	80 83       	st	Z, r24
	tc_write_clock_source(settings.TC, TC_CLKSEL_DIV1024_gc);
}
    1ec4:	28 96       	adiw	r28, 0x08	; 8
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret

00001ed4 <exampleTC>:
void exampleTC(void)//testing the timer counter code by blinking led on microchip at 1Hz
{
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	28 97       	sbiw	r28, 0x08	; 8
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	de bf       	out	0x3e, r29	; 62
	PORTQ.DIR|=0x08;
    1ee2:	e0 ec       	ldi	r30, 0xC0	; 192
    1ee4:	f7 e0       	ldi	r31, 0x07	; 7
    1ee6:	80 81       	ld	r24, Z
    1ee8:	88 60       	ori	r24, 0x08	; 8
    1eea:	80 83       	st	Z, r24
	TCdef examplestruct={
    1eec:	88 e0       	ldi	r24, 0x08	; 8
    1eee:	e0 e0       	ldi	r30, 0x00	; 0
    1ef0:	f0 e2       	ldi	r31, 0x20	; 32
    1ef2:	de 01       	movw	r26, r28
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	01 90       	ld	r0, Z+
    1ef8:	0d 92       	st	X+, r0
    1efa:	8a 95       	dec	r24
    1efc:	e1 f7       	brne	.-8      	; 0x1ef6 <exampleTC+0x22>
		.port=&PORTE,
		.TC=&TCE0,
		.period=31250,
		.FunHandle=example_handle
	};
	TCInit(examplestruct);
    1efe:	29 81       	ldd	r18, Y+1	; 0x01
    1f00:	3a 81       	ldd	r19, Y+2	; 0x02
    1f02:	4b 81       	ldd	r20, Y+3	; 0x03
    1f04:	5c 81       	ldd	r21, Y+4	; 0x04
    1f06:	6d 81       	ldd	r22, Y+5	; 0x05
    1f08:	7e 81       	ldd	r23, Y+6	; 0x06
    1f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0c:	98 85       	ldd	r25, Y+8	; 0x08
    1f0e:	ab df       	rcall	.-170    	; 0x1e66 <TCInit>
}
    1f10:	28 96       	adiw	r28, 0x08	; 8
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	08 95       	ret

00001f1c <main>:
 */
#include <asf.h>
#include "drivers/TCLibrary.h"
int main (void)
{
	board_init();
    1f1c:	90 df       	rcall	.-224    	; 0x1e3e <board_init>
	sysclk_init();
    1f1e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <sysclk_init>
	
	exampleTC();
    1f22:	d8 df       	rcall	.-80     	; 0x1ed4 <exampleTC>
    1f24:	ff cf       	rjmp	.-2      	; 0x1f24 <main+0x8>

00001f26 <_exit>:
    1f26:	f8 94       	cli

00001f28 <__stop_program>:
    1f28:	ff cf       	rjmp	.-2      	; 0x1f28 <__stop_program>
