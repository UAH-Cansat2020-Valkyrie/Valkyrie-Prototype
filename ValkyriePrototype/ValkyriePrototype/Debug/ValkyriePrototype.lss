
ValkyriePrototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00802000  00003284  00003318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  00802056  00802056  0000336e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000336e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00003410  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f94f  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005918  00000000  00000000  0001322f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007494  00000000  00000000  00018b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a98  00000000  00000000  0001ffdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036491  00000000  00000000  00021a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005362  00000000  00000000  00057f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000490  00000000  00000000  0005d267  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8ae  00000000  00000000  0005d6f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	d1 c7       	rjmp	.+4002   	; 0xfcc <__vector_10>
      2a:	00 00       	nop
      2c:	f2 c7       	rjmp	.+4068   	; 0x1012 <__vector_11>
      2e:	00 00       	nop
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	3b c2       	rjmp	.+1142   	; 0x4ac <__vector_13>
      36:	00 00       	nop
      38:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_14>
      3c:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_15>
      40:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__vector_16>
      44:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_17>
      48:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_18>
      4c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__vector_19>
      50:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_20>
      54:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_21>
      58:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__vector_22>
      5c:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_23>
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	45 c6       	rjmp	.+3210   	; 0xd28 <__vector_39>
      9e:	00 00       	nop
      a0:	80 c6       	rjmp	.+3328   	; 0xda2 <__vector_40>
      a2:	00 00       	nop
      a4:	bb c6       	rjmp	.+3446   	; 0xe1c <__vector_41>
      a6:	00 00       	nop
      a8:	f6 c6       	rjmp	.+3564   	; 0xe96 <__vector_42>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c2       	rjmp	.+1210   	; 0x574 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_47>
      c0:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_48>
      c4:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_49>
      c8:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__vector_50>
      cc:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__vector_51>
      d0:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__vector_52>
      d4:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__vector_53>
      d8:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__vector_54>
      dc:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_55>
      e0:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__vector_56>
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__vector_61>
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	11 c5       	rjmp	.+2594   	; 0xb40 <__vector_71>
     11e:	00 00       	nop
     120:	4c c5       	rjmp	.+2712   	; 0xbba <__vector_72>
     122:	00 00       	nop
     124:	87 c5       	rjmp	.+2830   	; 0xc34 <__vector_73>
     126:	00 00       	nop
     128:	c2 c5       	rjmp	.+2948   	; 0xcae <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	ef c1       	rjmp	.+990    	; 0x510 <__vector_76>
     132:	00 00       	nop
     134:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_77>
     138:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_78>
     13c:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__vector_79>
     140:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_80>
     144:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_81>
     148:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_82>
     14c:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_83>
     150:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_84>
     154:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__vector_85>
     158:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__vector_86>
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	15 c2       	rjmp	.+1066   	; 0x5d8 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__vector_108>
     1b4:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__vector_109>
     1b8:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__vector_110>
     1bc:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_111>
     1c0:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__vector_112>
     1c4:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_113>
     1c8:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__vector_114>
     1cc:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__vector_115>
     1d0:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__vector_116>
     1d4:	0c 94 15 11 	jmp	0x222a	; 0x222a <__vector_117>
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b6 c0       	rjmp	.+364    	; 0x34a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b0 c0       	rjmp	.+352    	; 0x34a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ac c0       	rjmp	.+344    	; 0x34a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e3       	ldi	r29, 0x3F	; 63
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e4 e8       	ldi	r30, 0x84	; 132
     31e:	f2 e3       	ldi	r31, 0x32	; 50
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a6 35       	cpi	r26, 0x56	; 86
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	20 e2       	ldi	r18, 0x20	; 32
     334:	a6 e5       	ldi	r26, 0x56	; 86
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	ad 3c       	cpi	r26, 0xCD	; 205
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 24 12 	call	0x2448	; 0x2448 <main>
     346:	0c 94 40 19 	jmp	0x3280	; 0x3280 <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     356:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <stdio_base>
     35a:	90 91 ba 20 	lds	r25, 0x20BA	; 0x8020ba <stdio_base+0x1>
     35e:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <ptr_get>
     362:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <ptr_get+0x1>
     366:	be 01       	movw	r22, r28
     368:	6f 5f       	subi	r22, 0xFF	; 255
     36a:	7f 4f       	sbci	r23, 0xFF	; 255
     36c:	19 95       	eicall
	return c;
     36e:	89 81       	ldd	r24, Y+1	; 0x01
}
     370:	08 2e       	mov	r0, r24
     372:	00 0c       	add	r0, r0
     374:	99 0b       	sbc	r25, r25
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     382:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <__data_end>
     386:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <__data_end+0x1>
     38a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     38c:	83 ff       	sbrs	r24, 3
     38e:	08 c0       	rjmp	.+16     	; 0x3a0 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     390:	88 60       	ori	r24, 0x08	; 8
     392:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     398:	86 ef       	ldi	r24, 0xF6	; 246
     39a:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <__data_end+0xa>
     39e:	83 c0       	rjmp	.+262    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     3a0:	98 2f       	mov	r25, r24
     3a2:	94 71       	andi	r25, 0x14	; 20
     3a4:	31 f0       	breq	.+12     	; 0x3b2 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <__data_end+0xa>
     3b0:	7a c0       	rjmp	.+244    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     3b2:	86 ff       	sbrs	r24, 6
     3b4:	43 c0       	rjmp	.+134    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     3b6:	c6 e5       	ldi	r28, 0x56	; 86
     3b8:	d0 e2       	ldi	r29, 0x20	; 32
     3ba:	aa 81       	ldd	r26, Y+2	; 0x02
     3bc:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     3be:	8c 81       	ldd	r24, Y+4	; 0x04
     3c0:	9d 81       	ldd	r25, Y+5	; 0x05
     3c2:	14 96       	adiw	r26, 0x04	; 4
     3c4:	2d 91       	ld	r18, X+
     3c6:	3c 91       	ld	r19, X
     3c8:	15 97       	sbiw	r26, 0x05	; 5
     3ca:	82 17       	cp	r24, r18
     3cc:	93 07       	cpc	r25, r19
     3ce:	6c f4       	brge	.+26     	; 0x3ea <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     3d0:	9c 01       	movw	r18, r24
     3d2:	2f 5f       	subi	r18, 0xFF	; 255
     3d4:	3f 4f       	sbci	r19, 0xFF	; 255
     3d6:	20 93 5a 20 	sts	0x205A, r18	; 0x80205a <__data_end+0x4>
     3da:	30 93 5b 20 	sts	0x205B, r19	; 0x80205b <__data_end+0x5>
     3de:	a8 0f       	add	r26, r24
     3e0:	b9 1f       	adc	r27, r25
     3e2:	11 96       	adiw	r26, 0x01	; 1
     3e4:	8c 91       	ld	r24, X
     3e6:	87 83       	std	Z+7, r24	; 0x07
     3e8:	5e c0       	rjmp	.+188    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

	} else if (transfer.data_count < pkg->length) {
     3ea:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <__data_end+0x6>
     3ee:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <__data_end+0x7>
     3f2:	18 96       	adiw	r26, 0x08	; 8
     3f4:	2d 91       	ld	r18, X+
     3f6:	3c 91       	ld	r19, X
     3f8:	19 97       	sbiw	r26, 0x09	; 9
     3fa:	82 17       	cp	r24, r18
     3fc:	93 07       	cpc	r25, r19
     3fe:	c8 f4       	brcc	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

		if (transfer.read) {
     400:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <__data_end+0x8>
     404:	22 23       	and	r18, r18
     406:	21 f0       	breq	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     408:	86 81       	ldd	r24, Z+6	; 0x06
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	86 83       	std	Z+6, r24	; 0x06
     40e:	4b c0       	rjmp	.+150    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

		} else {
			const uint8_t * const data = pkg->buffer;
     410:	16 96       	adiw	r26, 0x06	; 6
     412:	2d 91       	ld	r18, X+
     414:	3c 91       	ld	r19, X
     416:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     418:	ac 01       	movw	r20, r24
     41a:	4f 5f       	subi	r20, 0xFF	; 255
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	40 93 5c 20 	sts	0x205C, r20	; 0x80205c <__data_end+0x6>
     422:	50 93 5d 20 	sts	0x205D, r21	; 0x80205d <__data_end+0x7>
     426:	d9 01       	movw	r26, r18
     428:	a8 0f       	add	r26, r24
     42a:	b9 1f       	adc	r27, r25
     42c:	8c 91       	ld	r24, X
     42e:	87 83       	std	Z+7, r24	; 0x07
     430:	3a c0       	rjmp	.+116    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     436:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <__data_end+0xa>
     43a:	35 c0       	rjmp	.+106    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     43c:	88 23       	and	r24, r24
     43e:	84 f5       	brge	.+96     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     440:	a6 e5       	ldi	r26, 0x56	; 86
     442:	b0 e2       	ldi	r27, 0x20	; 32
     444:	12 96       	adiw	r26, 0x02	; 2
     446:	cd 91       	ld	r28, X+
     448:	dc 91       	ld	r29, X
     44a:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     44c:	16 96       	adiw	r26, 0x06	; 6
     44e:	8d 91       	ld	r24, X+
     450:	9c 91       	ld	r25, X
     452:	17 97       	sbiw	r26, 0x07	; 7
     454:	28 85       	ldd	r18, Y+8	; 0x08
     456:	39 85       	ldd	r19, Y+9	; 0x09
     458:	82 17       	cp	r24, r18
     45a:	93 07       	cpc	r25, r19
     45c:	d8 f4       	brcc	.+54     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>

		uint8_t * const data = pkg->buffer;
     45e:	6e 81       	ldd	r22, Y+6	; 0x06
     460:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     462:	9c 01       	movw	r18, r24
     464:	2f 5f       	subi	r18, 0xFF	; 255
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	20 93 5c 20 	sts	0x205C, r18	; 0x80205c <__data_end+0x6>
     46c:	30 93 5d 20 	sts	0x205D, r19	; 0x80205d <__data_end+0x7>
     470:	47 81       	ldd	r20, Z+7	; 0x07
     472:	db 01       	movw	r26, r22
     474:	a8 0f       	add	r26, r24
     476:	b9 1f       	adc	r27, r25
     478:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     47a:	88 85       	ldd	r24, Y+8	; 0x08
     47c:	99 85       	ldd	r25, Y+9	; 0x09
     47e:	28 17       	cp	r18, r24
     480:	39 07       	cpc	r19, r25
     482:	18 f4       	brcc	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	83 83       	std	Z+3, r24	; 0x03
     488:	0e c0       	rjmp	.+28     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     48a:	87 e0       	ldi	r24, 0x07	; 7
     48c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     48e:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <__data_end+0xa>
     492:	09 c0       	rjmp	.+18     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     498:	89 ef       	ldi	r24, 0xF9	; 249
     49a:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <__data_end+0xa>
     49e:	03 c0       	rjmp	.+6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     4a0:	8b ef       	ldi	r24, 0xFB	; 251
     4a2:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <__data_end+0xa>
	}
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	08 b6       	in	r0, 0x38	; 56
     4b8:	0f 92       	push	r0
     4ba:	18 be       	out	0x38, r1	; 56
     4bc:	09 b6       	in	r0, 0x39	; 57
     4be:	0f 92       	push	r0
     4c0:	19 be       	out	0x39, r1	; 57
     4c2:	0b b6       	in	r0, 0x3b	; 59
     4c4:	0f 92       	push	r0
     4c6:	1b be       	out	0x3b, r1	; 59
     4c8:	2f 93       	push	r18
     4ca:	3f 93       	push	r19
     4cc:	4f 93       	push	r20
     4ce:	5f 93       	push	r21
     4d0:	6f 93       	push	r22
     4d2:	7f 93       	push	r23
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	af 93       	push	r26
     4da:	bf 93       	push	r27
     4dc:	ef 93       	push	r30
     4de:	ff 93       	push	r31
     4e0:	4e df       	rcall	.-356    	; 0x37e <twim_interrupt_handler>
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	bf 91       	pop	r27
     4e8:	af 91       	pop	r26
     4ea:	9f 91       	pop	r25
     4ec:	8f 91       	pop	r24
     4ee:	7f 91       	pop	r23
     4f0:	6f 91       	pop	r22
     4f2:	5f 91       	pop	r21
     4f4:	4f 91       	pop	r20
     4f6:	3f 91       	pop	r19
     4f8:	2f 91       	pop	r18
     4fa:	0f 90       	pop	r0
     4fc:	0b be       	out	0x3b, r0	; 59
     4fe:	0f 90       	pop	r0
     500:	09 be       	out	0x39, r0	; 57
     502:	0f 90       	pop	r0
     504:	08 be       	out	0x38, r0	; 56
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	08 b6       	in	r0, 0x38	; 56
     51c:	0f 92       	push	r0
     51e:	18 be       	out	0x38, r1	; 56
     520:	09 b6       	in	r0, 0x39	; 57
     522:	0f 92       	push	r0
     524:	19 be       	out	0x39, r1	; 57
     526:	0b b6       	in	r0, 0x3b	; 59
     528:	0f 92       	push	r0
     52a:	1b be       	out	0x3b, r1	; 59
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
     544:	1c df       	rcall	.-456    	; 0x37e <twim_interrupt_handler>
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	09 be       	out	0x39, r0	; 57
     566:	0f 90       	pop	r0
     568:	08 be       	out	0x38, r0	; 56
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	08 b6       	in	r0, 0x38	; 56
     580:	0f 92       	push	r0
     582:	18 be       	out	0x38, r1	; 56
     584:	09 b6       	in	r0, 0x39	; 57
     586:	0f 92       	push	r0
     588:	19 be       	out	0x39, r1	; 57
     58a:	0b b6       	in	r0, 0x3b	; 59
     58c:	0f 92       	push	r0
     58e:	1b be       	out	0x3b, r1	; 59
     590:	2f 93       	push	r18
     592:	3f 93       	push	r19
     594:	4f 93       	push	r20
     596:	5f 93       	push	r21
     598:	6f 93       	push	r22
     59a:	7f 93       	push	r23
     59c:	8f 93       	push	r24
     59e:	9f 93       	push	r25
     5a0:	af 93       	push	r26
     5a2:	bf 93       	push	r27
     5a4:	ef 93       	push	r30
     5a6:	ff 93       	push	r31
     5a8:	ea de       	rcall	.-556    	; 0x37e <twim_interrupt_handler>
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0b be       	out	0x3b, r0	; 59
     5c6:	0f 90       	pop	r0
     5c8:	09 be       	out	0x39, r0	; 57
     5ca:	0f 90       	pop	r0
     5cc:	08 be       	out	0x38, r0	; 56
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	08 b6       	in	r0, 0x38	; 56
     5e4:	0f 92       	push	r0
     5e6:	18 be       	out	0x38, r1	; 56
     5e8:	09 b6       	in	r0, 0x39	; 57
     5ea:	0f 92       	push	r0
     5ec:	19 be       	out	0x39, r1	; 57
     5ee:	0b b6       	in	r0, 0x3b	; 59
     5f0:	0f 92       	push	r0
     5f2:	1b be       	out	0x3b, r1	; 59
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
     60c:	b8 de       	rcall	.-656    	; 0x37e <twim_interrupt_handler>
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	bf 91       	pop	r27
     614:	af 91       	pop	r26
     616:	9f 91       	pop	r25
     618:	8f 91       	pop	r24
     61a:	7f 91       	pop	r23
     61c:	6f 91       	pop	r22
     61e:	5f 91       	pop	r21
     620:	4f 91       	pop	r20
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	09 be       	out	0x39, r0	; 57
     62e:	0f 90       	pop	r0
     630:	08 be       	out	0x38, r0	; 56
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     63c:	fc 01       	movw	r30, r24
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	95 ff       	sbrs	r25, 5
     642:	fd cf       	rjmp	.-6      	; 0x63e <usart_putchar+0x2>
     644:	60 83       	st	Z, r22
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	08 95       	ret

0000064c <usart_getchar>:
     64c:	fc 01       	movw	r30, r24
     64e:	91 81       	ldd	r25, Z+1	; 0x01
     650:	99 23       	and	r25, r25
     652:	ec f7       	brge	.-6      	; 0x64e <usart_getchar+0x2>
     654:	80 81       	ld	r24, Z
     656:	08 95       	ret

00000658 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     658:	4f 92       	push	r4
     65a:	5f 92       	push	r5
     65c:	6f 92       	push	r6
     65e:	7f 92       	push	r7
     660:	8f 92       	push	r8
     662:	9f 92       	push	r9
     664:	af 92       	push	r10
     666:	bf 92       	push	r11
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	7c 01       	movw	r14, r24
     674:	4a 01       	movw	r8, r20
     676:	5b 01       	movw	r10, r22
     678:	28 01       	movw	r4, r16
     67a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     67c:	fc 01       	movw	r30, r24
     67e:	84 81       	ldd	r24, Z+4	; 0x04
     680:	82 ff       	sbrs	r24, 2
     682:	16 c0       	rjmp	.+44     	; 0x6b0 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     684:	d9 01       	movw	r26, r18
     686:	c8 01       	movw	r24, r16
     688:	68 94       	set
     68a:	12 f8       	bld	r1, 2
     68c:	b6 95       	lsr	r27
     68e:	a7 95       	ror	r26
     690:	97 95       	ror	r25
     692:	87 95       	ror	r24
     694:	16 94       	lsr	r1
     696:	d1 f7       	brne	.-12     	; 0x68c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     698:	b9 01       	movw	r22, r18
     69a:	a8 01       	movw	r20, r16
     69c:	03 2e       	mov	r0, r19
     69e:	36 e1       	ldi	r19, 0x16	; 22
     6a0:	76 95       	lsr	r23
     6a2:	67 95       	ror	r22
     6a4:	57 95       	ror	r21
     6a6:	47 95       	ror	r20
     6a8:	3a 95       	dec	r19
     6aa:	d1 f7       	brne	.-12     	; 0x6a0 <usart_set_baudrate+0x48>
     6ac:	30 2d       	mov	r19, r0
     6ae:	15 c0       	rjmp	.+42     	; 0x6da <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     6b0:	d9 01       	movw	r26, r18
     6b2:	c8 01       	movw	r24, r16
     6b4:	68 94       	set
     6b6:	13 f8       	bld	r1, 3
     6b8:	b6 95       	lsr	r27
     6ba:	a7 95       	ror	r26
     6bc:	97 95       	ror	r25
     6be:	87 95       	ror	r24
     6c0:	16 94       	lsr	r1
     6c2:	d1 f7       	brne	.-12     	; 0x6b8 <usart_set_baudrate+0x60>
		min_rate /= 2;
     6c4:	b9 01       	movw	r22, r18
     6c6:	a8 01       	movw	r20, r16
     6c8:	03 2e       	mov	r0, r19
     6ca:	37 e1       	ldi	r19, 0x17	; 23
     6cc:	76 95       	lsr	r23
     6ce:	67 95       	ror	r22
     6d0:	57 95       	ror	r21
     6d2:	47 95       	ror	r20
     6d4:	3a 95       	dec	r19
     6d6:	d1 f7       	brne	.-12     	; 0x6cc <usart_set_baudrate+0x74>
     6d8:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     6da:	88 15       	cp	r24, r8
     6dc:	99 05       	cpc	r25, r9
     6de:	aa 05       	cpc	r26, r10
     6e0:	bb 05       	cpc	r27, r11
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <usart_set_baudrate+0x8e>
     6e4:	a6 c0       	rjmp	.+332    	; 0x832 <usart_set_baudrate+0x1da>
     6e6:	84 16       	cp	r8, r20
     6e8:	95 06       	cpc	r9, r21
     6ea:	a6 06       	cpc	r10, r22
     6ec:	b7 06       	cpc	r11, r23
     6ee:	08 f4       	brcc	.+2      	; 0x6f2 <usart_set_baudrate+0x9a>
     6f0:	a2 c0       	rjmp	.+324    	; 0x836 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     6f2:	f7 01       	movw	r30, r14
     6f4:	84 81       	ldd	r24, Z+4	; 0x04
     6f6:	82 fd       	sbrc	r24, 2
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <usart_set_baudrate+0xaa>
		baud *= 2;
     6fa:	88 0c       	add	r8, r8
     6fc:	99 1c       	adc	r9, r9
     6fe:	aa 1c       	adc	r10, r10
     700:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     702:	c3 01       	movw	r24, r6
     704:	b2 01       	movw	r22, r4
     706:	a5 01       	movw	r20, r10
     708:	94 01       	movw	r18, r8
     70a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     70e:	2f 3f       	cpi	r18, 0xFF	; 255
     710:	31 05       	cpc	r19, r1
     712:	41 05       	cpc	r20, r1
     714:	51 05       	cpc	r21, r1
     716:	08 f4       	brcc	.+2      	; 0x71a <usart_set_baudrate+0xc2>
     718:	90 c0       	rjmp	.+288    	; 0x83a <usart_set_baudrate+0x1e2>
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	c9 ef       	ldi	r28, 0xF9	; 249
     724:	05 c0       	rjmp	.+10     	; 0x730 <usart_set_baudrate+0xd8>
     726:	28 17       	cp	r18, r24
     728:	39 07       	cpc	r19, r25
     72a:	4a 07       	cpc	r20, r26
     72c:	5b 07       	cpc	r21, r27
     72e:	58 f0       	brcs	.+22     	; 0x746 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	aa 1f       	adc	r26, r26
     736:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     738:	cd 3f       	cpi	r28, 0xFD	; 253
     73a:	0c f4       	brge	.+2      	; 0x73e <usart_set_baudrate+0xe6>
			limit |= 1;
     73c:	81 60       	ori	r24, 0x01	; 1
     73e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     740:	c7 30       	cpi	r28, 0x07	; 7
     742:	89 f7       	brne	.-30     	; 0x726 <usart_set_baudrate+0xce>
     744:	4f c0       	rjmp	.+158    	; 0x7e4 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     746:	cc 23       	and	r28, r28
     748:	0c f0       	brlt	.+2      	; 0x74c <usart_set_baudrate+0xf4>
     74a:	4c c0       	rjmp	.+152    	; 0x7e4 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     74c:	d5 01       	movw	r26, r10
     74e:	c4 01       	movw	r24, r8
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	aa 1f       	adc	r26, r26
     756:	bb 1f       	adc	r27, r27
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	aa 1f       	adc	r26, r26
     75e:	bb 1f       	adc	r27, r27
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	aa 1f       	adc	r26, r26
     766:	bb 1f       	adc	r27, r27
     768:	48 1a       	sub	r4, r24
     76a:	59 0a       	sbc	r5, r25
     76c:	6a 0a       	sbc	r6, r26
     76e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     770:	ce 3f       	cpi	r28, 0xFE	; 254
     772:	f4 f4       	brge	.+60     	; 0x7b0 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     774:	8d ef       	ldi	r24, 0xFD	; 253
     776:	9f ef       	ldi	r25, 0xFF	; 255
     778:	8c 1b       	sub	r24, r28
     77a:	91 09       	sbc	r25, r1
     77c:	c7 fd       	sbrc	r28, 7
     77e:	93 95       	inc	r25
     780:	04 c0       	rjmp	.+8      	; 0x78a <usart_set_baudrate+0x132>
     782:	44 0c       	add	r4, r4
     784:	55 1c       	adc	r5, r5
     786:	66 1c       	adc	r6, r6
     788:	77 1c       	adc	r7, r7
     78a:	8a 95       	dec	r24
     78c:	d2 f7       	brpl	.-12     	; 0x782 <usart_set_baudrate+0x12a>
     78e:	d5 01       	movw	r26, r10
     790:	c4 01       	movw	r24, r8
     792:	b6 95       	lsr	r27
     794:	a7 95       	ror	r26
     796:	97 95       	ror	r25
     798:	87 95       	ror	r24
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	64 0d       	add	r22, r4
     7a0:	75 1d       	adc	r23, r5
     7a2:	86 1d       	adc	r24, r6
     7a4:	97 1d       	adc	r25, r7
     7a6:	a5 01       	movw	r20, r10
     7a8:	94 01       	movw	r18, r8
     7aa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodsi4>
     7ae:	37 c0       	rjmp	.+110    	; 0x81e <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	8c 0f       	add	r24, r28
     7b4:	a5 01       	movw	r20, r10
     7b6:	94 01       	movw	r18, r8
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <usart_set_baudrate+0x16a>
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	44 1f       	adc	r20, r20
     7c0:	55 1f       	adc	r21, r21
     7c2:	8a 95       	dec	r24
     7c4:	d2 f7       	brpl	.-12     	; 0x7ba <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	b6 95       	lsr	r27
     7cc:	a7 95       	ror	r26
     7ce:	97 95       	ror	r25
     7d0:	87 95       	ror	r24
     7d2:	bc 01       	movw	r22, r24
     7d4:	cd 01       	movw	r24, r26
     7d6:	64 0d       	add	r22, r4
     7d8:	75 1d       	adc	r23, r5
     7da:	86 1d       	adc	r24, r6
     7dc:	97 1d       	adc	r25, r7
     7de:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodsi4>
     7e2:	1d c0       	rjmp	.+58     	; 0x81e <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	8c 0f       	add	r24, r28
     7e8:	a5 01       	movw	r20, r10
     7ea:	94 01       	movw	r18, r8
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <usart_set_baudrate+0x19e>
     7ee:	22 0f       	add	r18, r18
     7f0:	33 1f       	adc	r19, r19
     7f2:	44 1f       	adc	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	8a 95       	dec	r24
     7f8:	d2 f7       	brpl	.-12     	; 0x7ee <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     7fa:	da 01       	movw	r26, r20
     7fc:	c9 01       	movw	r24, r18
     7fe:	b6 95       	lsr	r27
     800:	a7 95       	ror	r26
     802:	97 95       	ror	r25
     804:	87 95       	ror	r24
     806:	bc 01       	movw	r22, r24
     808:	cd 01       	movw	r24, r26
     80a:	64 0d       	add	r22, r4
     80c:	75 1d       	adc	r23, r5
     80e:	86 1d       	adc	r24, r6
     810:	97 1d       	adc	r25, r7
     812:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodsi4>
     816:	21 50       	subi	r18, 0x01	; 1
     818:	31 09       	sbc	r19, r1
     81a:	41 09       	sbc	r20, r1
     81c:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     81e:	83 2f       	mov	r24, r19
     820:	8f 70       	andi	r24, 0x0F	; 15
     822:	c2 95       	swap	r28
     824:	c0 7f       	andi	r28, 0xF0	; 240
     826:	c8 2b       	or	r28, r24
     828:	f7 01       	movw	r30, r14
     82a:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     82c:	26 83       	std	Z+6, r18	; 0x06

	return true;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	18 c0       	rjmp	.+48     	; 0x862 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	16 c0       	rjmp	.+44     	; 0x862 <usart_set_baudrate+0x20a>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	14 c0       	rjmp	.+40     	; 0x862 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     83a:	d5 01       	movw	r26, r10
     83c:	c4 01       	movw	r24, r8
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	aa 1f       	adc	r26, r26
     844:	bb 1f       	adc	r27, r27
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	aa 1f       	adc	r26, r26
     84c:	bb 1f       	adc	r27, r27
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	aa 1f       	adc	r26, r26
     854:	bb 1f       	adc	r27, r27
     856:	48 1a       	sub	r4, r24
     858:	59 0a       	sbc	r5, r25
     85a:	6a 0a       	sbc	r6, r26
     85c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     85e:	c9 ef       	ldi	r28, 0xF9	; 249
     860:	89 cf       	rjmp	.-238    	; 0x774 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	bf 90       	pop	r11
     86e:	af 90       	pop	r10
     870:	9f 90       	pop	r9
     872:	8f 90       	pop	r8
     874:	7f 90       	pop	r7
     876:	6f 90       	pop	r6
     878:	5f 90       	pop	r5
     87a:	4f 90       	pop	r4
     87c:	08 95       	ret

0000087e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
     888:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	09 f4       	brne	.+2      	; 0x890 <usart_init_rs232+0x12>
     88e:	36 c1       	rjmp	.+620    	; 0xafc <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     890:	80 3c       	cpi	r24, 0xC0	; 192
     892:	91 05       	cpc	r25, r1
     894:	21 f4       	brne	.+8      	; 0x89e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     896:	60 e1       	ldi	r22, 0x10	; 16
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	82 d3       	rcall	.+1796   	; 0xfa0 <sysclk_enable_module>
     89c:	2f c1       	rjmp	.+606    	; 0xafc <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     89e:	c0 34       	cpi	r28, 0x40	; 64
     8a0:	84 e0       	ldi	r24, 0x04	; 4
     8a2:	d8 07       	cpc	r29, r24
     8a4:	21 f4       	brne	.+8      	; 0x8ae <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     8a6:	68 e0       	ldi	r22, 0x08	; 8
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	7a d3       	rcall	.+1780   	; 0xfa0 <sysclk_enable_module>
     8ac:	27 c1       	rjmp	.+590    	; 0xafc <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     8ae:	c1 15       	cp	r28, r1
     8b0:	e4 e0       	ldi	r30, 0x04	; 4
     8b2:	de 07       	cpc	r29, r30
     8b4:	21 f4       	brne	.+8      	; 0x8be <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     8b6:	64 e0       	ldi	r22, 0x04	; 4
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	72 d3       	rcall	.+1764   	; 0xfa0 <sysclk_enable_module>
     8bc:	1f c1       	rjmp	.+574    	; 0xafc <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     8be:	c0 38       	cpi	r28, 0x80	; 128
     8c0:	f1 e0       	ldi	r31, 0x01	; 1
     8c2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     8c4:	21 f4       	brne	.+8      	; 0x8ce <usart_init_rs232+0x50>
     8c6:	62 e0       	ldi	r22, 0x02	; 2
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	6a d3       	rcall	.+1748   	; 0xfa0 <sysclk_enable_module>
     8cc:	17 c1       	rjmp	.+558    	; 0xafc <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     8ce:	c1 15       	cp	r28, r1
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     8d4:	21 f4       	brne	.+8      	; 0x8de <usart_init_rs232+0x60>
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	62 d3       	rcall	.+1732   	; 0xfa0 <sysclk_enable_module>
     8dc:	0f c1       	rjmp	.+542    	; 0xafc <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     8de:	c0 38       	cpi	r28, 0x80	; 128
     8e0:	e3 e0       	ldi	r30, 0x03	; 3
     8e2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     8e4:	21 f4       	brne	.+8      	; 0x8ee <usart_init_rs232+0x70>
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	5a d3       	rcall	.+1716   	; 0xfa0 <sysclk_enable_module>
     8ec:	07 c1       	rjmp	.+526    	; 0xafc <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     8ee:	c0 39       	cpi	r28, 0x90	; 144
     8f0:	f3 e0       	ldi	r31, 0x03	; 3
     8f2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     8f4:	21 f4       	brne	.+8      	; 0x8fe <usart_init_rs232+0x80>
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	52 d3       	rcall	.+1700   	; 0xfa0 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     8fc:	ff c0       	rjmp	.+510    	; 0xafc <usart_init_rs232+0x27e>
     8fe:	c1 15       	cp	r28, r1
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     904:	21 f4       	brne	.+8      	; 0x90e <usart_init_rs232+0x90>
     906:	62 e0       	ldi	r22, 0x02	; 2
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	4a d3       	rcall	.+1684   	; 0xfa0 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     90c:	f7 c0       	rjmp	.+494    	; 0xafc <usart_init_rs232+0x27e>
     90e:	c0 34       	cpi	r28, 0x40	; 64
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     914:	21 f4       	brne	.+8      	; 0x91e <usart_init_rs232+0xa0>
     916:	62 e0       	ldi	r22, 0x02	; 2
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	42 d3       	rcall	.+1668   	; 0xfa0 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     91c:	ef c0       	rjmp	.+478    	; 0xafc <usart_init_rs232+0x27e>
     91e:	c1 15       	cp	r28, r1
     920:	f3 e0       	ldi	r31, 0x03	; 3
     922:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     924:	21 f4       	brne	.+8      	; 0x92e <usart_init_rs232+0xb0>
     926:	64 e0       	ldi	r22, 0x04	; 4
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	3a d3       	rcall	.+1652   	; 0xfa0 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     92c:	e7 c0       	rjmp	.+462    	; 0xafc <usart_init_rs232+0x27e>
     92e:	c0 32       	cpi	r28, 0x20	; 32
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     934:	21 f4       	brne	.+8      	; 0x93e <usart_init_rs232+0xc0>
     936:	64 e0       	ldi	r22, 0x04	; 4
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	32 d3       	rcall	.+1636   	; 0xfa0 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     93c:	df c0       	rjmp	.+446    	; 0xafc <usart_init_rs232+0x27e>
     93e:	c1 15       	cp	r28, r1
     940:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     942:	de 07       	cpc	r29, r30
     944:	21 f4       	brne	.+8      	; 0x94e <usart_init_rs232+0xd0>
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	2a d3       	rcall	.+1620   	; 0xfa0 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     94c:	d7 c0       	rjmp	.+430    	; 0xafc <usart_init_rs232+0x27e>
     94e:	c1 15       	cp	r28, r1
     950:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     952:	df 07       	cpc	r29, r31
     954:	21 f4       	brne	.+8      	; 0x95e <usart_init_rs232+0xe0>
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	22 d3       	rcall	.+1604   	; 0xfa0 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     95c:	cf c0       	rjmp	.+414    	; 0xafc <usart_init_rs232+0x27e>
     95e:	c1 15       	cp	r28, r1
     960:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     962:	d8 07       	cpc	r29, r24
     964:	21 f4       	brne	.+8      	; 0x96e <usart_init_rs232+0xf0>
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	1a d3       	rcall	.+1588   	; 0xfa0 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     96c:	c7 c0       	rjmp	.+398    	; 0xafc <usart_init_rs232+0x27e>
     96e:	c1 15       	cp	r28, r1
     970:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     972:	de 07       	cpc	r29, r30
     974:	21 f4       	brne	.+8      	; 0x97e <usart_init_rs232+0x100>
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     97a:	12 d3       	rcall	.+1572   	; 0xfa0 <sysclk_enable_module>
     97c:	bf c0       	rjmp	.+382    	; 0xafc <usart_init_rs232+0x27e>
     97e:	c0 34       	cpi	r28, 0x40	; 64
     980:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     982:	df 07       	cpc	r29, r31
     984:	21 f4       	brne	.+8      	; 0x98e <usart_init_rs232+0x110>
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     98a:	0a d3       	rcall	.+1556   	; 0xfa0 <sysclk_enable_module>
     98c:	b7 c0       	rjmp	.+366    	; 0xafc <usart_init_rs232+0x27e>
     98e:	c0 34       	cpi	r28, 0x40	; 64
     990:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     992:	d8 07       	cpc	r29, r24
     994:	21 f4       	brne	.+8      	; 0x99e <usart_init_rs232+0x120>
     996:	62 e0       	ldi	r22, 0x02	; 2
     998:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     99a:	02 d3       	rcall	.+1540   	; 0xfa0 <sysclk_enable_module>
     99c:	af c0       	rjmp	.+350    	; 0xafc <usart_init_rs232+0x27e>
     99e:	c0 34       	cpi	r28, 0x40	; 64
     9a0:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     9a2:	de 07       	cpc	r29, r30
     9a4:	21 f4       	brne	.+8      	; 0x9ae <usart_init_rs232+0x130>
     9a6:	62 e0       	ldi	r22, 0x02	; 2
     9a8:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     9aa:	fa d2       	rcall	.+1524   	; 0xfa0 <sysclk_enable_module>
     9ac:	a7 c0       	rjmp	.+334    	; 0xafc <usart_init_rs232+0x27e>
     9ae:	c0 34       	cpi	r28, 0x40	; 64
     9b0:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     9b2:	df 07       	cpc	r29, r31
     9b4:	21 f4       	brne	.+8      	; 0x9be <usart_init_rs232+0x140>
     9b6:	62 e0       	ldi	r22, 0x02	; 2
     9b8:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     9ba:	f2 d2       	rcall	.+1508   	; 0xfa0 <sysclk_enable_module>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <usart_init_rs232+0x27e>
     9be:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     9c0:	88 e0       	ldi	r24, 0x08	; 8
     9c2:	d8 07       	cpc	r29, r24
     9c4:	21 f4       	brne	.+8      	; 0x9ce <usart_init_rs232+0x150>
     9c6:	64 e0       	ldi	r22, 0x04	; 4
     9c8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     9ca:	ea d2       	rcall	.+1492   	; 0xfa0 <sysclk_enable_module>
     9cc:	97 c0       	rjmp	.+302    	; 0xafc <usart_init_rs232+0x27e>
     9ce:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     9d0:	e9 e0       	ldi	r30, 0x09	; 9
     9d2:	de 07       	cpc	r29, r30
     9d4:	21 f4       	brne	.+8      	; 0x9de <usart_init_rs232+0x160>
     9d6:	64 e0       	ldi	r22, 0x04	; 4
     9d8:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     9da:	e2 d2       	rcall	.+1476   	; 0xfa0 <sysclk_enable_module>
     9dc:	8f c0       	rjmp	.+286    	; 0xafc <usart_init_rs232+0x27e>
     9de:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     9e0:	fa e0       	ldi	r31, 0x0A	; 10
     9e2:	df 07       	cpc	r29, r31
     9e4:	21 f4       	brne	.+8      	; 0x9ee <usart_init_rs232+0x170>
     9e6:	64 e0       	ldi	r22, 0x04	; 4
     9e8:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     9ea:	da d2       	rcall	.+1460   	; 0xfa0 <sysclk_enable_module>
     9ec:	87 c0       	rjmp	.+270    	; 0xafc <usart_init_rs232+0x27e>
     9ee:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     9f0:	8b e0       	ldi	r24, 0x0B	; 11
     9f2:	d8 07       	cpc	r29, r24
     9f4:	21 f4       	brne	.+8      	; 0x9fe <usart_init_rs232+0x180>
     9f6:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     9f8:	86 e0       	ldi	r24, 0x06	; 6
     9fa:	d2 d2       	rcall	.+1444   	; 0xfa0 <sysclk_enable_module>
     9fc:	7f c0       	rjmp	.+254    	; 0xafc <usart_init_rs232+0x27e>
     9fe:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     a00:	e8 e0       	ldi	r30, 0x08	; 8
     a02:	de 07       	cpc	r29, r30
     a04:	21 f4       	brne	.+8      	; 0xa0e <usart_init_rs232+0x190>
     a06:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	ca d2       	rcall	.+1428   	; 0xfa0 <sysclk_enable_module>
     a0c:	77 c0       	rjmp	.+238    	; 0xafc <usart_init_rs232+0x27e>
     a0e:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     a10:	f9 e0       	ldi	r31, 0x09	; 9
     a12:	df 07       	cpc	r29, r31
     a14:	21 f4       	brne	.+8      	; 0xa1e <usart_init_rs232+0x1a0>
     a16:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	c2 d2       	rcall	.+1412   	; 0xfa0 <sysclk_enable_module>
     a1c:	6f c0       	rjmp	.+222    	; 0xafc <usart_init_rs232+0x27e>
     a1e:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     a20:	8a e0       	ldi	r24, 0x0A	; 10
     a22:	d8 07       	cpc	r29, r24
     a24:	21 f4       	brne	.+8      	; 0xa2e <usart_init_rs232+0x1b0>
     a26:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	ba d2       	rcall	.+1396   	; 0xfa0 <sysclk_enable_module>
     a2c:	67 c0       	rjmp	.+206    	; 0xafc <usart_init_rs232+0x27e>
     a2e:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     a30:	eb e0       	ldi	r30, 0x0B	; 11
     a32:	de 07       	cpc	r29, r30
     a34:	21 f4       	brne	.+8      	; 0xa3e <usart_init_rs232+0x1c0>
     a36:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	b2 d2       	rcall	.+1380   	; 0xfa0 <sysclk_enable_module>
     a3c:	5f c0       	rjmp	.+190    	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     a3e:	c0 3a       	cpi	r28, 0xA0	; 160
     a40:	f8 e0       	ldi	r31, 0x08	; 8
     a42:	df 07       	cpc	r29, r31
     a44:	21 f4       	brne	.+8      	; 0xa4e <usart_init_rs232+0x1d0>
     a46:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	aa d2       	rcall	.+1364   	; 0xfa0 <sysclk_enable_module>
     a4c:	57 c0       	rjmp	.+174    	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     a4e:	c0 3a       	cpi	r28, 0xA0	; 160
     a50:	89 e0       	ldi	r24, 0x09	; 9
     a52:	d8 07       	cpc	r29, r24
     a54:	21 f4       	brne	.+8      	; 0xa5e <usart_init_rs232+0x1e0>
     a56:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     a58:	84 e0       	ldi	r24, 0x04	; 4
     a5a:	a2 d2       	rcall	.+1348   	; 0xfa0 <sysclk_enable_module>
     a5c:	4f c0       	rjmp	.+158    	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     a5e:	c0 3a       	cpi	r28, 0xA0	; 160
     a60:	ea e0       	ldi	r30, 0x0A	; 10
     a62:	de 07       	cpc	r29, r30
     a64:	21 f4       	brne	.+8      	; 0xa6e <usart_init_rs232+0x1f0>
     a66:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     a68:	85 e0       	ldi	r24, 0x05	; 5
     a6a:	9a d2       	rcall	.+1332   	; 0xfa0 <sysclk_enable_module>
     a6c:	47 c0       	rjmp	.+142    	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     a6e:	c0 3a       	cpi	r28, 0xA0	; 160
     a70:	fb e0       	ldi	r31, 0x0B	; 11
     a72:	df 07       	cpc	r29, r31
     a74:	21 f4       	brne	.+8      	; 0xa7e <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     a76:	60 e1       	ldi	r22, 0x10	; 16
     a78:	86 e0       	ldi	r24, 0x06	; 6
     a7a:	92 d2       	rcall	.+1316   	; 0xfa0 <sysclk_enable_module>
     a7c:	3f c0       	rjmp	.+126    	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     a7e:	c0 3b       	cpi	r28, 0xB0	; 176
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	d8 07       	cpc	r29, r24
     a84:	21 f4       	brne	.+8      	; 0xa8e <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     a86:	60 e2       	ldi	r22, 0x20	; 32
     a88:	83 e0       	ldi	r24, 0x03	; 3
     a8a:	8a d2       	rcall	.+1300   	; 0xfa0 <sysclk_enable_module>
     a8c:	37 c0       	rjmp	.+110    	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     a8e:	c0 3b       	cpi	r28, 0xB0	; 176
     a90:	e9 e0       	ldi	r30, 0x09	; 9
     a92:	de 07       	cpc	r29, r30
     a94:	21 f4       	brne	.+8      	; 0xa9e <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     a96:	60 e2       	ldi	r22, 0x20	; 32
     a98:	84 e0       	ldi	r24, 0x04	; 4
     a9a:	82 d2       	rcall	.+1284   	; 0xfa0 <sysclk_enable_module>
     a9c:	2f c0       	rjmp	.+94     	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     a9e:	c0 3b       	cpi	r28, 0xB0	; 176
     aa0:	fa e0       	ldi	r31, 0x0A	; 10
     aa2:	df 07       	cpc	r29, r31
     aa4:	21 f4       	brne	.+8      	; 0xaae <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     aa6:	60 e2       	ldi	r22, 0x20	; 32
     aa8:	85 e0       	ldi	r24, 0x05	; 5
     aaa:	7a d2       	rcall	.+1268   	; 0xfa0 <sysclk_enable_module>
     aac:	27 c0       	rjmp	.+78     	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     aae:	c0 3b       	cpi	r28, 0xB0	; 176
     ab0:	8b e0       	ldi	r24, 0x0B	; 11
     ab2:	d8 07       	cpc	r29, r24
     ab4:	21 f4       	brne	.+8      	; 0xabe <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     ab6:	60 e2       	ldi	r22, 0x20	; 32
     ab8:	86 e0       	ldi	r24, 0x06	; 6
     aba:	72 d2       	rcall	.+1252   	; 0xfa0 <sysclk_enable_module>
     abc:	1f c0       	rjmp	.+62     	; 0xafc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     abe:	c0 38       	cpi	r28, 0x80	; 128
     ac0:	e4 e0       	ldi	r30, 0x04	; 4
     ac2:	de 07       	cpc	r29, r30
     ac4:	21 f4       	brne	.+8      	; 0xace <usart_init_rs232+0x250>
     ac6:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	6a d2       	rcall	.+1236   	; 0xfa0 <sysclk_enable_module>
     acc:	17 c0       	rjmp	.+46     	; 0xafc <usart_init_rs232+0x27e>
     ace:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     ad0:	f4 e0       	ldi	r31, 0x04	; 4
     ad2:	df 07       	cpc	r29, r31
     ad4:	21 f4       	brne	.+8      	; 0xade <usart_init_rs232+0x260>
     ad6:	60 e4       	ldi	r22, 0x40	; 64
     ad8:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     ada:	62 d2       	rcall	.+1220   	; 0xfa0 <sysclk_enable_module>
     adc:	0f c0       	rjmp	.+30     	; 0xafc <usart_init_rs232+0x27e>
     ade:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ae0:	84 e0       	ldi	r24, 0x04	; 4
     ae2:	d8 07       	cpc	r29, r24
     ae4:	21 f4       	brne	.+8      	; 0xaee <usart_init_rs232+0x270>
     ae6:	60 e4       	ldi	r22, 0x40	; 64
     ae8:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     aea:	5a d2       	rcall	.+1204   	; 0xfa0 <sysclk_enable_module>
     aec:	07 c0       	rjmp	.+14     	; 0xafc <usart_init_rs232+0x27e>
     aee:	c0 3b       	cpi	r28, 0xB0	; 176
     af0:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     af2:	de 07       	cpc	r29, r30
     af4:	19 f4       	brne	.+6      	; 0xafc <usart_init_rs232+0x27e>
     af6:	60 e4       	ldi	r22, 0x40	; 64
     af8:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     afa:	52 d2       	rcall	.+1188   	; 0xfa0 <sysclk_enable_module>
     afc:	8d 81       	ldd	r24, Y+5	; 0x05
     afe:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     b00:	8d 83       	std	Y+5, r24	; 0x05
     b02:	f8 01       	movw	r30, r16
     b04:	95 81       	ldd	r25, Z+5	; 0x05
     b06:	84 81       	ldd	r24, Z+4	; 0x04
     b08:	89 2b       	or	r24, r25
     b0a:	96 81       	ldd	r25, Z+6	; 0x06
     b0c:	91 11       	cpse	r25, r1
     b0e:	98 e0       	ldi	r25, 0x08	; 8
     b10:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     b12:	8d 83       	std	Y+5, r24	; 0x05
     b14:	f8 01       	movw	r30, r16
     b16:	40 81       	ld	r20, Z
     b18:	51 81       	ldd	r21, Z+1	; 0x01
     b1a:	62 81       	ldd	r22, Z+2	; 0x02
     b1c:	73 81       	ldd	r23, Z+3	; 0x03
     b1e:	00 e0       	ldi	r16, 0x00	; 0
     b20:	18 e4       	ldi	r17, 0x48	; 72
     b22:	28 ee       	ldi	r18, 0xE8	; 232
     b24:	31 e0       	ldi	r19, 0x01	; 1
     b26:	ce 01       	movw	r24, r28
     b28:	97 dd       	rcall	.-1234   	; 0x658 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	98 60       	ori	r25, 0x08	; 8
     b2e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	90 61       	ori	r25, 0x10	; 16
     b34:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	08 95       	ret

00000b40 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	08 b6       	in	r0, 0x38	; 56
     b4c:	0f 92       	push	r0
     b4e:	18 be       	out	0x38, r1	; 56
     b50:	09 b6       	in	r0, 0x39	; 57
     b52:	0f 92       	push	r0
     b54:	19 be       	out	0x39, r1	; 57
     b56:	0b b6       	in	r0, 0x3b	; 59
     b58:	0f 92       	push	r0
     b5a:	1b be       	out	0x3b, r1	; 59
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	4f 93       	push	r20
     b62:	5f 93       	push	r21
     b64:	6f 93       	push	r22
     b66:	7f 93       	push	r23
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     b74:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     b78:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     b7c:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <adca_callback>
     b80:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <adca_callback+0x1>
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	19 95       	eicall
}
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0b be       	out	0x3b, r0	; 59
     ba8:	0f 90       	pop	r0
     baa:	09 be       	out	0x39, r0	; 57
     bac:	0f 90       	pop	r0
     bae:	08 be       	out	0x38, r0	; 56
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	08 b6       	in	r0, 0x38	; 56
     bc6:	0f 92       	push	r0
     bc8:	18 be       	out	0x38, r1	; 56
     bca:	09 b6       	in	r0, 0x39	; 57
     bcc:	0f 92       	push	r0
     bce:	19 be       	out	0x39, r1	; 57
     bd0:	0b b6       	in	r0, 0x3b	; 59
     bd2:	0f 92       	push	r0
     bd4:	1b be       	out	0x3b, r1	; 59
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	5f 93       	push	r21
     bde:	6f 93       	push	r22
     be0:	7f 93       	push	r23
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     bee:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     bf2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     bf6:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <adca_callback>
     bfa:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <adca_callback+0x1>
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	19 95       	eicall
}
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	0f 90       	pop	r0
     c20:	0b be       	out	0x3b, r0	; 59
     c22:	0f 90       	pop	r0
     c24:	09 be       	out	0x39, r0	; 57
     c26:	0f 90       	pop	r0
     c28:	08 be       	out	0x38, r0	; 56
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	08 b6       	in	r0, 0x38	; 56
     c40:	0f 92       	push	r0
     c42:	18 be       	out	0x38, r1	; 56
     c44:	09 b6       	in	r0, 0x39	; 57
     c46:	0f 92       	push	r0
     c48:	19 be       	out	0x39, r1	; 57
     c4a:	0b b6       	in	r0, 0x3b	; 59
     c4c:	0f 92       	push	r0
     c4e:	1b be       	out	0x3b, r1	; 59
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     c68:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     c6c:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     c70:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <adca_callback>
     c74:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <adca_callback+0x1>
     c78:	64 e0       	ldi	r22, 0x04	; 4
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	19 95       	eicall
}
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0b be       	out	0x3b, r0	; 59
     c9c:	0f 90       	pop	r0
     c9e:	09 be       	out	0x39, r0	; 57
     ca0:	0f 90       	pop	r0
     ca2:	08 be       	out	0x38, r0	; 56
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	0f 92       	push	r0
     cb6:	11 24       	eor	r1, r1
     cb8:	08 b6       	in	r0, 0x38	; 56
     cba:	0f 92       	push	r0
     cbc:	18 be       	out	0x38, r1	; 56
     cbe:	09 b6       	in	r0, 0x39	; 57
     cc0:	0f 92       	push	r0
     cc2:	19 be       	out	0x39, r1	; 57
     cc4:	0b b6       	in	r0, 0x3b	; 59
     cc6:	0f 92       	push	r0
     cc8:	1b be       	out	0x3b, r1	; 59
     cca:	2f 93       	push	r18
     ccc:	3f 93       	push	r19
     cce:	4f 93       	push	r20
     cd0:	5f 93       	push	r21
     cd2:	6f 93       	push	r22
     cd4:	7f 93       	push	r23
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     ce2:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     ce6:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     cea:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <adca_callback>
     cee:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <adca_callback+0x1>
     cf2:	68 e0       	ldi	r22, 0x08	; 8
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	19 95       	eicall
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0b be       	out	0x3b, r0	; 59
     d16:	0f 90       	pop	r0
     d18:	09 be       	out	0x39, r0	; 57
     d1a:	0f 90       	pop	r0
     d1c:	08 be       	out	0x38, r0	; 56
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	08 b6       	in	r0, 0x38	; 56
     d34:	0f 92       	push	r0
     d36:	18 be       	out	0x38, r1	; 56
     d38:	09 b6       	in	r0, 0x39	; 57
     d3a:	0f 92       	push	r0
     d3c:	19 be       	out	0x39, r1	; 57
     d3e:	0b b6       	in	r0, 0x3b	; 59
     d40:	0f 92       	push	r0
     d42:	1b be       	out	0x3b, r1	; 59
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	5f 93       	push	r21
     d4c:	6f 93       	push	r22
     d4e:	7f 93       	push	r23
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     d5c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     d60:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     d64:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <adcb_callback>
     d68:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <adcb_callback+0x1>
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	80 e4       	ldi	r24, 0x40	; 64
     d70:	92 e0       	ldi	r25, 0x02	; 2
     d72:	19 95       	eicall
}
     d74:	ff 91       	pop	r31
     d76:	ef 91       	pop	r30
     d78:	bf 91       	pop	r27
     d7a:	af 91       	pop	r26
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	7f 91       	pop	r23
     d82:	6f 91       	pop	r22
     d84:	5f 91       	pop	r21
     d86:	4f 91       	pop	r20
     d88:	3f 91       	pop	r19
     d8a:	2f 91       	pop	r18
     d8c:	0f 90       	pop	r0
     d8e:	0b be       	out	0x3b, r0	; 59
     d90:	0f 90       	pop	r0
     d92:	09 be       	out	0x39, r0	; 57
     d94:	0f 90       	pop	r0
     d96:	08 be       	out	0x38, r0	; 56
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	08 b6       	in	r0, 0x38	; 56
     dae:	0f 92       	push	r0
     db0:	18 be       	out	0x38, r1	; 56
     db2:	09 b6       	in	r0, 0x39	; 57
     db4:	0f 92       	push	r0
     db6:	19 be       	out	0x39, r1	; 57
     db8:	0b b6       	in	r0, 0x3b	; 59
     dba:	0f 92       	push	r0
     dbc:	1b be       	out	0x3b, r1	; 59
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     dd6:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     dda:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     dde:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <adcb_callback>
     de2:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <adcb_callback+0x1>
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	80 e4       	ldi	r24, 0x40	; 64
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	19 95       	eicall
}
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	09 be       	out	0x39, r0	; 57
     e0e:	0f 90       	pop	r0
     e10:	08 be       	out	0x38, r0	; 56
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	08 b6       	in	r0, 0x38	; 56
     e28:	0f 92       	push	r0
     e2a:	18 be       	out	0x38, r1	; 56
     e2c:	09 b6       	in	r0, 0x39	; 57
     e2e:	0f 92       	push	r0
     e30:	19 be       	out	0x39, r1	; 57
     e32:	0b b6       	in	r0, 0x3b	; 59
     e34:	0f 92       	push	r0
     e36:	1b be       	out	0x3b, r1	; 59
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     e50:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     e54:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     e58:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <adcb_callback>
     e5c:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <adcb_callback+0x1>
     e60:	64 e0       	ldi	r22, 0x04	; 4
     e62:	80 e4       	ldi	r24, 0x40	; 64
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	19 95       	eicall
}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0b be       	out	0x3b, r0	; 59
     e84:	0f 90       	pop	r0
     e86:	09 be       	out	0x39, r0	; 57
     e88:	0f 90       	pop	r0
     e8a:	08 be       	out	0x38, r0	; 56
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	08 b6       	in	r0, 0x38	; 56
     ea2:	0f 92       	push	r0
     ea4:	18 be       	out	0x38, r1	; 56
     ea6:	09 b6       	in	r0, 0x39	; 57
     ea8:	0f 92       	push	r0
     eaa:	19 be       	out	0x39, r1	; 57
     eac:	0b b6       	in	r0, 0x3b	; 59
     eae:	0f 92       	push	r0
     eb0:	1b be       	out	0x3b, r1	; 59
     eb2:	2f 93       	push	r18
     eb4:	3f 93       	push	r19
     eb6:	4f 93       	push	r20
     eb8:	5f 93       	push	r21
     eba:	6f 93       	push	r22
     ebc:	7f 93       	push	r23
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     eca:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     ece:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     ed2:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <adcb_callback>
     ed6:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <adcb_callback+0x1>
     eda:	68 e0       	ldi	r22, 0x08	; 8
     edc:	80 e4       	ldi	r24, 0x40	; 64
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	19 95       	eicall
}
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0b be       	out	0x3b, r0	; 59
     efe:	0f 90       	pop	r0
     f00:	09 be       	out	0x39, r0	; 57
     f02:	0f 90       	pop	r0
     f04:	08 be       	out	0x38, r0	; 56
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     f10:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     f12:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <stdio_base>
     f16:	90 91 ba 20 	lds	r25, 0x20BA	; 0x8020ba <stdio_base+0x1>
     f1a:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <ptr_put>
     f1e:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <ptr_put+0x1>
     f22:	19 95       	eicall
     f24:	99 23       	and	r25, r25
     f26:	1c f0       	brlt	.+6      	; 0xf2e <_write+0x1e>
		return -1;
	}
	return 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     f32:	08 95       	ret

00000f34 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	1f 92       	push	r1
     f3a:	1f 92       	push	r1
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f46:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f4a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f4e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f52:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f56:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f5a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f5e:	8f b7       	in	r24, 0x3f	; 63
     f60:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f62:	f8 94       	cli
	return flags;
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f66:	e0 e5       	ldi	r30, 0x50	; 80
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f70:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f72:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f74:	81 ff       	sbrs	r24, 1
     f76:	fd cf       	rjmp	.-6      	; 0xf72 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	80 e4       	ldi	r24, 0x40	; 64
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 4d 11 	call	0x229a	; 0x229a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f82:	8f b7       	in	r24, 0x3f	; 63
     f84:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f86:	f8 94       	cli
	return flags;
     f88:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     f8a:	e0 e5       	ldi	r30, 0x50	; 80
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8e 7f       	andi	r24, 0xFE	; 254
     f92:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f94:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	1f 92       	push	r1
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     faa:	9f b7       	in	r25, 0x3f	; 63
     fac:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     fae:	f8 94       	cli
	return flags;
     fb0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     fb2:	e8 2f       	mov	r30, r24
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	e0 59       	subi	r30, 0x90	; 144
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	60 95       	com	r22
     fbc:	80 81       	ld	r24, Z
     fbe:	68 23       	and	r22, r24
     fc0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fc2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     fc4:	0f 90       	pop	r0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	08 b6       	in	r0, 0x38	; 56
     fd8:	0f 92       	push	r0
     fda:	18 be       	out	0x38, r1	; 56
     fdc:	0b b6       	in	r0, 0x3b	; 59
     fde:	0f 92       	push	r0
     fe0:	1b be       	out	0x3b, r1	; 59
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
	rtc_data.counter_high++;
     fea:	eb eb       	ldi	r30, 0xBB	; 187
     fec:	f0 e2       	ldi	r31, 0x20	; 32
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	80 83       	st	Z, r24
     ff6:	91 83       	std	Z+1, r25	; 0x01
}
     ff8:	ff 91       	pop	r31
     ffa:	ef 91       	pop	r30
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	0f 90       	pop	r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	0f 90       	pop	r0
    1006:	08 be       	out	0x38, r0	; 56
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	08 b6       	in	r0, 0x38	; 56
    101e:	0f 92       	push	r0
    1020:	18 be       	out	0x38, r1	; 56
    1022:	09 b6       	in	r0, 0x39	; 57
    1024:	0f 92       	push	r0
    1026:	19 be       	out	0x39, r1	; 57
    1028:	0b b6       	in	r0, 0x3b	; 59
    102a:	0f 92       	push	r0
    102c:	1b be       	out	0x3b, r1	; 59
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    1052:	eb eb       	ldi	r30, 0xBB	; 187
    1054:	f0 e2       	ldi	r31, 0x20	; 32
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	22 81       	ldd	r18, Z+2	; 0x02
    105c:	33 81       	ldd	r19, Z+3	; 0x03
    105e:	82 17       	cp	r24, r18
    1060:	93 07       	cpc	r25, r19
    1062:	f0 f1       	brcs	.+124    	; 0x10e0 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    1064:	21 e0       	ldi	r18, 0x01	; 1
    1066:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
    106a:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <rtc_data+0x6>
    106e:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <rtc_data+0x7>
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	a9 f1       	breq	.+106    	; 0x10e0 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    1076:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    107a:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    107e:	a0 e0       	ldi	r26, 0x00	; 0
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	dc 01       	movw	r26, r24
    1084:	99 27       	eor	r25, r25
    1086:	88 27       	eor	r24, r24
    1088:	ab 01       	movw	r20, r22
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	8c 01       	movw	r16, r24
    1090:	9d 01       	movw	r18, r26
    1092:	04 2b       	or	r16, r20
    1094:	15 2b       	or	r17, r21
    1096:	26 2b       	or	r18, r22
    1098:	37 2b       	or	r19, r23
    109a:	c9 01       	movw	r24, r18
    109c:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    109e:	ab eb       	ldi	r26, 0xBB	; 187
    10a0:	b0 e2       	ldi	r27, 0x20	; 32
    10a2:	12 96       	adiw	r26, 0x02	; 2
    10a4:	0d 91       	ld	r16, X+
    10a6:	1c 91       	ld	r17, X
    10a8:	13 97       	sbiw	r26, 0x03	; 3
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	98 01       	movw	r18, r16
    10b0:	11 27       	eor	r17, r17
    10b2:	00 27       	eor	r16, r16
    10b4:	14 96       	adiw	r26, 0x04	; 4
    10b6:	cd 90       	ld	r12, X+
    10b8:	dc 90       	ld	r13, X
    10ba:	15 97       	sbiw	r26, 0x05	; 5
    10bc:	e1 2c       	mov	r14, r1
    10be:	f1 2c       	mov	r15, r1
    10c0:	0c 29       	or	r16, r12
    10c2:	1d 29       	or	r17, r13
    10c4:	2e 29       	or	r18, r14
    10c6:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    10c8:	06 17       	cp	r16, r22
    10ca:	17 07       	cpc	r17, r23
    10cc:	28 07       	cpc	r18, r24
    10ce:	39 07       	cpc	r19, r25
    10d0:	30 f0       	brcs	.+12     	; 0x10de <__vector_11+0xcc>
				count = alarm + 1;
    10d2:	c9 01       	movw	r24, r18
    10d4:	b8 01       	movw	r22, r16
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    10de:	19 95       	eicall
		}
	}
}
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	0f 90       	pop	r0
    1106:	0b be       	out	0x3b, r0	; 59
    1108:	0f 90       	pop	r0
    110a:	09 be       	out	0x39, r0	; 57
    110c:	0f 90       	pop	r0
    110e:	08 be       	out	0x38, r0	; 56
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	08 b6       	in	r0, 0x38	; 56
    1126:	0f 92       	push	r0
    1128:	18 be       	out	0x38, r1	; 56
    112a:	09 b6       	in	r0, 0x39	; 57
    112c:	0f 92       	push	r0
    112e:	19 be       	out	0x39, r1	; 57
    1130:	0b b6       	in	r0, 0x3b	; 59
    1132:	0f 92       	push	r0
    1134:	1b be       	out	0x3b, r1	; 59
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    114e:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tcc0_ovf_callback>
    1152:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tcc0_ovf_callback+0x1>
    1156:	30 97       	sbiw	r30, 0x00	; 0
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_14+0x42>
		tc_tcc0_ovf_callback();
    115a:	19 95       	eicall
	}
}
    115c:	ff 91       	pop	r31
    115e:	ef 91       	pop	r30
    1160:	bf 91       	pop	r27
    1162:	af 91       	pop	r26
    1164:	9f 91       	pop	r25
    1166:	8f 91       	pop	r24
    1168:	7f 91       	pop	r23
    116a:	6f 91       	pop	r22
    116c:	5f 91       	pop	r21
    116e:	4f 91       	pop	r20
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	09 be       	out	0x39, r0	; 57
    117c:	0f 90       	pop	r0
    117e:	08 be       	out	0x38, r0	; 56
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	08 b6       	in	r0, 0x38	; 56
    1196:	0f 92       	push	r0
    1198:	18 be       	out	0x38, r1	; 56
    119a:	09 b6       	in	r0, 0x39	; 57
    119c:	0f 92       	push	r0
    119e:	19 be       	out	0x39, r1	; 57
    11a0:	0b b6       	in	r0, 0x3b	; 59
    11a2:	0f 92       	push	r0
    11a4:	1b be       	out	0x3b, r1	; 59
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    11be:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tcc0_err_callback>
    11c2:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tcc0_err_callback+0x1>
    11c6:	30 97       	sbiw	r30, 0x00	; 0
    11c8:	09 f0       	breq	.+2      	; 0x11cc <__vector_15+0x42>
		tc_tcc0_err_callback();
    11ca:	19 95       	eicall
	}
}
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0b be       	out	0x3b, r0	; 59
    11e8:	0f 90       	pop	r0
    11ea:	09 be       	out	0x39, r0	; 57
    11ec:	0f 90       	pop	r0
    11ee:	08 be       	out	0x38, r0	; 56
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti

000011fa <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    11fa:	1f 92       	push	r1
    11fc:	0f 92       	push	r0
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	0f 92       	push	r0
    1202:	11 24       	eor	r1, r1
    1204:	08 b6       	in	r0, 0x38	; 56
    1206:	0f 92       	push	r0
    1208:	18 be       	out	0x38, r1	; 56
    120a:	09 b6       	in	r0, 0x39	; 57
    120c:	0f 92       	push	r0
    120e:	19 be       	out	0x39, r1	; 57
    1210:	0b b6       	in	r0, 0x3b	; 59
    1212:	0f 92       	push	r0
    1214:	1b be       	out	0x3b, r1	; 59
    1216:	2f 93       	push	r18
    1218:	3f 93       	push	r19
    121a:	4f 93       	push	r20
    121c:	5f 93       	push	r21
    121e:	6f 93       	push	r22
    1220:	7f 93       	push	r23
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	af 93       	push	r26
    1228:	bf 93       	push	r27
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    122e:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tcc0_cca_callback>
    1232:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tcc0_cca_callback+0x1>
    1236:	30 97       	sbiw	r30, 0x00	; 0
    1238:	09 f0       	breq	.+2      	; 0x123c <__vector_16+0x42>
		tc_tcc0_cca_callback();
    123a:	19 95       	eicall
	}
}
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0b be       	out	0x3b, r0	; 59
    1258:	0f 90       	pop	r0
    125a:	09 be       	out	0x39, r0	; 57
    125c:	0f 90       	pop	r0
    125e:	08 be       	out	0x38, r0	; 56
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	08 b6       	in	r0, 0x38	; 56
    1276:	0f 92       	push	r0
    1278:	18 be       	out	0x38, r1	; 56
    127a:	09 b6       	in	r0, 0x39	; 57
    127c:	0f 92       	push	r0
    127e:	19 be       	out	0x39, r1	; 57
    1280:	0b b6       	in	r0, 0x3b	; 59
    1282:	0f 92       	push	r0
    1284:	1b be       	out	0x3b, r1	; 59
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    129e:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tcc0_ccb_callback>
    12a2:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tcc0_ccb_callback+0x1>
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__vector_17+0x42>
		tc_tcc0_ccb_callback();
    12aa:	19 95       	eicall
	}
}
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0b be       	out	0x3b, r0	; 59
    12c8:	0f 90       	pop	r0
    12ca:	09 be       	out	0x39, r0	; 57
    12cc:	0f 90       	pop	r0
    12ce:	08 be       	out	0x38, r0	; 56
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	08 b6       	in	r0, 0x38	; 56
    12e6:	0f 92       	push	r0
    12e8:	18 be       	out	0x38, r1	; 56
    12ea:	09 b6       	in	r0, 0x39	; 57
    12ec:	0f 92       	push	r0
    12ee:	19 be       	out	0x39, r1	; 57
    12f0:	0b b6       	in	r0, 0x3b	; 59
    12f2:	0f 92       	push	r0
    12f4:	1b be       	out	0x3b, r1	; 59
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    130e:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tcc0_ccc_callback>
    1312:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tcc0_ccc_callback+0x1>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	09 f0       	breq	.+2      	; 0x131c <__vector_18+0x42>
		tc_tcc0_ccc_callback();
    131a:	19 95       	eicall
	}
}
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0b be       	out	0x3b, r0	; 59
    1338:	0f 90       	pop	r0
    133a:	09 be       	out	0x39, r0	; 57
    133c:	0f 90       	pop	r0
    133e:	08 be       	out	0x38, r0	; 56
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    134a:	1f 92       	push	r1
    134c:	0f 92       	push	r0
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	0f 92       	push	r0
    1352:	11 24       	eor	r1, r1
    1354:	08 b6       	in	r0, 0x38	; 56
    1356:	0f 92       	push	r0
    1358:	18 be       	out	0x38, r1	; 56
    135a:	09 b6       	in	r0, 0x39	; 57
    135c:	0f 92       	push	r0
    135e:	19 be       	out	0x39, r1	; 57
    1360:	0b b6       	in	r0, 0x3b	; 59
    1362:	0f 92       	push	r0
    1364:	1b be       	out	0x3b, r1	; 59
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    137e:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tcc0_ccd_callback>
    1382:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tcc0_ccd_callback+0x1>
    1386:	30 97       	sbiw	r30, 0x00	; 0
    1388:	09 f0       	breq	.+2      	; 0x138c <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    138a:	19 95       	eicall
	}
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	0f 90       	pop	r0
    13aa:	09 be       	out	0x39, r0	; 57
    13ac:	0f 90       	pop	r0
    13ae:	08 be       	out	0x38, r0	; 56
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	08 b6       	in	r0, 0x38	; 56
    13c6:	0f 92       	push	r0
    13c8:	18 be       	out	0x38, r1	; 56
    13ca:	09 b6       	in	r0, 0x39	; 57
    13cc:	0f 92       	push	r0
    13ce:	19 be       	out	0x39, r1	; 57
    13d0:	0b b6       	in	r0, 0x3b	; 59
    13d2:	0f 92       	push	r0
    13d4:	1b be       	out	0x3b, r1	; 59
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    13ee:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tcc1_ovf_callback>
    13f2:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tcc1_ovf_callback+0x1>
    13f6:	30 97       	sbiw	r30, 0x00	; 0
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    13fa:	19 95       	eicall
	}
}
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	09 be       	out	0x39, r0	; 57
    141c:	0f 90       	pop	r0
    141e:	08 be       	out	0x38, r0	; 56
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	08 b6       	in	r0, 0x38	; 56
    1436:	0f 92       	push	r0
    1438:	18 be       	out	0x38, r1	; 56
    143a:	09 b6       	in	r0, 0x39	; 57
    143c:	0f 92       	push	r0
    143e:	19 be       	out	0x39, r1	; 57
    1440:	0b b6       	in	r0, 0x3b	; 59
    1442:	0f 92       	push	r0
    1444:	1b be       	out	0x3b, r1	; 59
    1446:	2f 93       	push	r18
    1448:	3f 93       	push	r19
    144a:	4f 93       	push	r20
    144c:	5f 93       	push	r21
    144e:	6f 93       	push	r22
    1450:	7f 93       	push	r23
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	af 93       	push	r26
    1458:	bf 93       	push	r27
    145a:	ef 93       	push	r30
    145c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    145e:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tcc1_err_callback>
    1462:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tcc1_err_callback+0x1>
    1466:	30 97       	sbiw	r30, 0x00	; 0
    1468:	09 f0       	breq	.+2      	; 0x146c <__vector_21+0x42>
		tc_tcc1_err_callback();
    146a:	19 95       	eicall
	}
}
    146c:	ff 91       	pop	r31
    146e:	ef 91       	pop	r30
    1470:	bf 91       	pop	r27
    1472:	af 91       	pop	r26
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	7f 91       	pop	r23
    147a:	6f 91       	pop	r22
    147c:	5f 91       	pop	r21
    147e:	4f 91       	pop	r20
    1480:	3f 91       	pop	r19
    1482:	2f 91       	pop	r18
    1484:	0f 90       	pop	r0
    1486:	0b be       	out	0x3b, r0	; 59
    1488:	0f 90       	pop	r0
    148a:	09 be       	out	0x39, r0	; 57
    148c:	0f 90       	pop	r0
    148e:	08 be       	out	0x38, r0	; 56
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 90       	pop	r0
    1496:	1f 90       	pop	r1
    1498:	18 95       	reti

0000149a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    149a:	1f 92       	push	r1
    149c:	0f 92       	push	r0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	0f 92       	push	r0
    14a2:	11 24       	eor	r1, r1
    14a4:	08 b6       	in	r0, 0x38	; 56
    14a6:	0f 92       	push	r0
    14a8:	18 be       	out	0x38, r1	; 56
    14aa:	09 b6       	in	r0, 0x39	; 57
    14ac:	0f 92       	push	r0
    14ae:	19 be       	out	0x39, r1	; 57
    14b0:	0b b6       	in	r0, 0x3b	; 59
    14b2:	0f 92       	push	r0
    14b4:	1b be       	out	0x3b, r1	; 59
    14b6:	2f 93       	push	r18
    14b8:	3f 93       	push	r19
    14ba:	4f 93       	push	r20
    14bc:	5f 93       	push	r21
    14be:	6f 93       	push	r22
    14c0:	7f 93       	push	r23
    14c2:	8f 93       	push	r24
    14c4:	9f 93       	push	r25
    14c6:	af 93       	push	r26
    14c8:	bf 93       	push	r27
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    14ce:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tcc1_cca_callback>
    14d2:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tcc1_cca_callback+0x1>
    14d6:	30 97       	sbiw	r30, 0x00	; 0
    14d8:	09 f0       	breq	.+2      	; 0x14dc <__vector_22+0x42>
		tc_tcc1_cca_callback();
    14da:	19 95       	eicall
	}
}
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	bf 91       	pop	r27
    14e2:	af 91       	pop	r26
    14e4:	9f 91       	pop	r25
    14e6:	8f 91       	pop	r24
    14e8:	7f 91       	pop	r23
    14ea:	6f 91       	pop	r22
    14ec:	5f 91       	pop	r21
    14ee:	4f 91       	pop	r20
    14f0:	3f 91       	pop	r19
    14f2:	2f 91       	pop	r18
    14f4:	0f 90       	pop	r0
    14f6:	0b be       	out	0x3b, r0	; 59
    14f8:	0f 90       	pop	r0
    14fa:	09 be       	out	0x39, r0	; 57
    14fc:	0f 90       	pop	r0
    14fe:	08 be       	out	0x38, r0	; 56
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	08 b6       	in	r0, 0x38	; 56
    1516:	0f 92       	push	r0
    1518:	18 be       	out	0x38, r1	; 56
    151a:	09 b6       	in	r0, 0x39	; 57
    151c:	0f 92       	push	r0
    151e:	19 be       	out	0x39, r1	; 57
    1520:	0b b6       	in	r0, 0x3b	; 59
    1522:	0f 92       	push	r0
    1524:	1b be       	out	0x3b, r1	; 59
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    153e:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tcc1_ccb_callback>
    1542:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tcc1_ccb_callback+0x1>
    1546:	30 97       	sbiw	r30, 0x00	; 0
    1548:	09 f0       	breq	.+2      	; 0x154c <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    154a:	19 95       	eicall
	}
}
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0b be       	out	0x3b, r0	; 59
    1568:	0f 90       	pop	r0
    156a:	09 be       	out	0x39, r0	; 57
    156c:	0f 90       	pop	r0
    156e:	08 be       	out	0x38, r0	; 56
    1570:	0f 90       	pop	r0
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	0f 90       	pop	r0
    1576:	1f 90       	pop	r1
    1578:	18 95       	reti

0000157a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	08 b6       	in	r0, 0x38	; 56
    1586:	0f 92       	push	r0
    1588:	18 be       	out	0x38, r1	; 56
    158a:	09 b6       	in	r0, 0x39	; 57
    158c:	0f 92       	push	r0
    158e:	19 be       	out	0x39, r1	; 57
    1590:	0b b6       	in	r0, 0x3b	; 59
    1592:	0f 92       	push	r0
    1594:	1b be       	out	0x3b, r1	; 59
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	5f 93       	push	r21
    159e:	6f 93       	push	r22
    15a0:	7f 93       	push	r23
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	af 93       	push	r26
    15a8:	bf 93       	push	r27
    15aa:	ef 93       	push	r30
    15ac:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    15ae:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tcd0_ovf_callback>
    15b2:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tcd0_ovf_callback+0x1>
    15b6:	30 97       	sbiw	r30, 0x00	; 0
    15b8:	09 f0       	breq	.+2      	; 0x15bc <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    15ba:	19 95       	eicall
	}
}
    15bc:	ff 91       	pop	r31
    15be:	ef 91       	pop	r30
    15c0:	bf 91       	pop	r27
    15c2:	af 91       	pop	r26
    15c4:	9f 91       	pop	r25
    15c6:	8f 91       	pop	r24
    15c8:	7f 91       	pop	r23
    15ca:	6f 91       	pop	r22
    15cc:	5f 91       	pop	r21
    15ce:	4f 91       	pop	r20
    15d0:	3f 91       	pop	r19
    15d2:	2f 91       	pop	r18
    15d4:	0f 90       	pop	r0
    15d6:	0b be       	out	0x3b, r0	; 59
    15d8:	0f 90       	pop	r0
    15da:	09 be       	out	0x39, r0	; 57
    15dc:	0f 90       	pop	r0
    15de:	08 be       	out	0x38, r0	; 56
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    15ea:	1f 92       	push	r1
    15ec:	0f 92       	push	r0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	0f 92       	push	r0
    15f2:	11 24       	eor	r1, r1
    15f4:	08 b6       	in	r0, 0x38	; 56
    15f6:	0f 92       	push	r0
    15f8:	18 be       	out	0x38, r1	; 56
    15fa:	09 b6       	in	r0, 0x39	; 57
    15fc:	0f 92       	push	r0
    15fe:	19 be       	out	0x39, r1	; 57
    1600:	0b b6       	in	r0, 0x3b	; 59
    1602:	0f 92       	push	r0
    1604:	1b be       	out	0x3b, r1	; 59
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    161e:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tcd0_err_callback>
    1622:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tcd0_err_callback+0x1>
    1626:	30 97       	sbiw	r30, 0x00	; 0
    1628:	09 f0       	breq	.+2      	; 0x162c <__vector_78+0x42>
		tc_tcd0_err_callback();
    162a:	19 95       	eicall
	}
}
    162c:	ff 91       	pop	r31
    162e:	ef 91       	pop	r30
    1630:	bf 91       	pop	r27
    1632:	af 91       	pop	r26
    1634:	9f 91       	pop	r25
    1636:	8f 91       	pop	r24
    1638:	7f 91       	pop	r23
    163a:	6f 91       	pop	r22
    163c:	5f 91       	pop	r21
    163e:	4f 91       	pop	r20
    1640:	3f 91       	pop	r19
    1642:	2f 91       	pop	r18
    1644:	0f 90       	pop	r0
    1646:	0b be       	out	0x3b, r0	; 59
    1648:	0f 90       	pop	r0
    164a:	09 be       	out	0x39, r0	; 57
    164c:	0f 90       	pop	r0
    164e:	08 be       	out	0x38, r0	; 56
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	0f 90       	pop	r0
    1656:	1f 90       	pop	r1
    1658:	18 95       	reti

0000165a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    165a:	1f 92       	push	r1
    165c:	0f 92       	push	r0
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	0f 92       	push	r0
    1662:	11 24       	eor	r1, r1
    1664:	08 b6       	in	r0, 0x38	; 56
    1666:	0f 92       	push	r0
    1668:	18 be       	out	0x38, r1	; 56
    166a:	09 b6       	in	r0, 0x39	; 57
    166c:	0f 92       	push	r0
    166e:	19 be       	out	0x39, r1	; 57
    1670:	0b b6       	in	r0, 0x3b	; 59
    1672:	0f 92       	push	r0
    1674:	1b be       	out	0x3b, r1	; 59
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    168e:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tcd0_cca_callback>
    1692:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tcd0_cca_callback+0x1>
    1696:	30 97       	sbiw	r30, 0x00	; 0
    1698:	09 f0       	breq	.+2      	; 0x169c <__vector_79+0x42>
		tc_tcd0_cca_callback();
    169a:	19 95       	eicall
	}
}
    169c:	ff 91       	pop	r31
    169e:	ef 91       	pop	r30
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0b be       	out	0x3b, r0	; 59
    16b8:	0f 90       	pop	r0
    16ba:	09 be       	out	0x39, r0	; 57
    16bc:	0f 90       	pop	r0
    16be:	08 be       	out	0x38, r0	; 56
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	08 b6       	in	r0, 0x38	; 56
    16d6:	0f 92       	push	r0
    16d8:	18 be       	out	0x38, r1	; 56
    16da:	09 b6       	in	r0, 0x39	; 57
    16dc:	0f 92       	push	r0
    16de:	19 be       	out	0x39, r1	; 57
    16e0:	0b b6       	in	r0, 0x3b	; 59
    16e2:	0f 92       	push	r0
    16e4:	1b be       	out	0x3b, r1	; 59
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    16fe:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tcd0_ccb_callback>
    1702:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tcd0_ccb_callback+0x1>
    1706:	30 97       	sbiw	r30, 0x00	; 0
    1708:	09 f0       	breq	.+2      	; 0x170c <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    170a:	19 95       	eicall
	}
}
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0b be       	out	0x3b, r0	; 59
    1728:	0f 90       	pop	r0
    172a:	09 be       	out	0x39, r0	; 57
    172c:	0f 90       	pop	r0
    172e:	08 be       	out	0x38, r0	; 56
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	08 b6       	in	r0, 0x38	; 56
    1746:	0f 92       	push	r0
    1748:	18 be       	out	0x38, r1	; 56
    174a:	09 b6       	in	r0, 0x39	; 57
    174c:	0f 92       	push	r0
    174e:	19 be       	out	0x39, r1	; 57
    1750:	0b b6       	in	r0, 0x3b	; 59
    1752:	0f 92       	push	r0
    1754:	1b be       	out	0x3b, r1	; 59
    1756:	2f 93       	push	r18
    1758:	3f 93       	push	r19
    175a:	4f 93       	push	r20
    175c:	5f 93       	push	r21
    175e:	6f 93       	push	r22
    1760:	7f 93       	push	r23
    1762:	8f 93       	push	r24
    1764:	9f 93       	push	r25
    1766:	af 93       	push	r26
    1768:	bf 93       	push	r27
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    176e:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tcd0_ccc_callback>
    1772:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tcd0_ccc_callback+0x1>
    1776:	30 97       	sbiw	r30, 0x00	; 0
    1778:	09 f0       	breq	.+2      	; 0x177c <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    177a:	19 95       	eicall
	}
}
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0b be       	out	0x3b, r0	; 59
    1798:	0f 90       	pop	r0
    179a:	09 be       	out	0x39, r0	; 57
    179c:	0f 90       	pop	r0
    179e:	08 be       	out	0x38, r0	; 56
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	0f 90       	pop	r0
    17a6:	1f 90       	pop	r1
    17a8:	18 95       	reti

000017aa <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	08 b6       	in	r0, 0x38	; 56
    17b6:	0f 92       	push	r0
    17b8:	18 be       	out	0x38, r1	; 56
    17ba:	09 b6       	in	r0, 0x39	; 57
    17bc:	0f 92       	push	r0
    17be:	19 be       	out	0x39, r1	; 57
    17c0:	0b b6       	in	r0, 0x3b	; 59
    17c2:	0f 92       	push	r0
    17c4:	1b be       	out	0x3b, r1	; 59
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	ef 93       	push	r30
    17dc:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    17de:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tcd0_ccd_callback>
    17e2:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tcd0_ccd_callback+0x1>
    17e6:	30 97       	sbiw	r30, 0x00	; 0
    17e8:	09 f0       	breq	.+2      	; 0x17ec <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    17ea:	19 95       	eicall
	}
}
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0b be       	out	0x3b, r0	; 59
    1808:	0f 90       	pop	r0
    180a:	09 be       	out	0x39, r0	; 57
    180c:	0f 90       	pop	r0
    180e:	08 be       	out	0x38, r0	; 56
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	08 b6       	in	r0, 0x38	; 56
    1826:	0f 92       	push	r0
    1828:	18 be       	out	0x38, r1	; 56
    182a:	09 b6       	in	r0, 0x39	; 57
    182c:	0f 92       	push	r0
    182e:	19 be       	out	0x39, r1	; 57
    1830:	0b b6       	in	r0, 0x3b	; 59
    1832:	0f 92       	push	r0
    1834:	1b be       	out	0x3b, r1	; 59
    1836:	2f 93       	push	r18
    1838:	3f 93       	push	r19
    183a:	4f 93       	push	r20
    183c:	5f 93       	push	r21
    183e:	6f 93       	push	r22
    1840:	7f 93       	push	r23
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	ef 93       	push	r30
    184c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    184e:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tcd1_ovf_callback>
    1852:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tcd1_ovf_callback+0x1>
    1856:	30 97       	sbiw	r30, 0x00	; 0
    1858:	09 f0       	breq	.+2      	; 0x185c <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    185a:	19 95       	eicall
	}
}
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0b be       	out	0x3b, r0	; 59
    1878:	0f 90       	pop	r0
    187a:	09 be       	out	0x39, r0	; 57
    187c:	0f 90       	pop	r0
    187e:	08 be       	out	0x38, r0	; 56
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	08 b6       	in	r0, 0x38	; 56
    1896:	0f 92       	push	r0
    1898:	18 be       	out	0x38, r1	; 56
    189a:	09 b6       	in	r0, 0x39	; 57
    189c:	0f 92       	push	r0
    189e:	19 be       	out	0x39, r1	; 57
    18a0:	0b b6       	in	r0, 0x3b	; 59
    18a2:	0f 92       	push	r0
    18a4:	1b be       	out	0x3b, r1	; 59
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    18be:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <tc_tcd1_err_callback>
    18c2:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <tc_tcd1_err_callback+0x1>
    18c6:	30 97       	sbiw	r30, 0x00	; 0
    18c8:	09 f0       	breq	.+2      	; 0x18cc <__vector_84+0x42>
		tc_tcd1_err_callback();
    18ca:	19 95       	eicall
	}
}
    18cc:	ff 91       	pop	r31
    18ce:	ef 91       	pop	r30
    18d0:	bf 91       	pop	r27
    18d2:	af 91       	pop	r26
    18d4:	9f 91       	pop	r25
    18d6:	8f 91       	pop	r24
    18d8:	7f 91       	pop	r23
    18da:	6f 91       	pop	r22
    18dc:	5f 91       	pop	r21
    18de:	4f 91       	pop	r20
    18e0:	3f 91       	pop	r19
    18e2:	2f 91       	pop	r18
    18e4:	0f 90       	pop	r0
    18e6:	0b be       	out	0x3b, r0	; 59
    18e8:	0f 90       	pop	r0
    18ea:	09 be       	out	0x39, r0	; 57
    18ec:	0f 90       	pop	r0
    18ee:	08 be       	out	0x38, r0	; 56
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    18fa:	1f 92       	push	r1
    18fc:	0f 92       	push	r0
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	0f 92       	push	r0
    1902:	11 24       	eor	r1, r1
    1904:	08 b6       	in	r0, 0x38	; 56
    1906:	0f 92       	push	r0
    1908:	18 be       	out	0x38, r1	; 56
    190a:	09 b6       	in	r0, 0x39	; 57
    190c:	0f 92       	push	r0
    190e:	19 be       	out	0x39, r1	; 57
    1910:	0b b6       	in	r0, 0x3b	; 59
    1912:	0f 92       	push	r0
    1914:	1b be       	out	0x3b, r1	; 59
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    192e:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <tc_tcd1_cca_callback>
    1932:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <tc_tcd1_cca_callback+0x1>
    1936:	30 97       	sbiw	r30, 0x00	; 0
    1938:	09 f0       	breq	.+2      	; 0x193c <__vector_85+0x42>
		tc_tcd1_cca_callback();
    193a:	19 95       	eicall
	}
}
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0b be       	out	0x3b, r0	; 59
    1958:	0f 90       	pop	r0
    195a:	09 be       	out	0x39, r0	; 57
    195c:	0f 90       	pop	r0
    195e:	08 be       	out	0x38, r0	; 56
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	0f 90       	pop	r0
    1966:	1f 90       	pop	r1
    1968:	18 95       	reti

0000196a <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    196a:	1f 92       	push	r1
    196c:	0f 92       	push	r0
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	0f 92       	push	r0
    1972:	11 24       	eor	r1, r1
    1974:	08 b6       	in	r0, 0x38	; 56
    1976:	0f 92       	push	r0
    1978:	18 be       	out	0x38, r1	; 56
    197a:	09 b6       	in	r0, 0x39	; 57
    197c:	0f 92       	push	r0
    197e:	19 be       	out	0x39, r1	; 57
    1980:	0b b6       	in	r0, 0x3b	; 59
    1982:	0f 92       	push	r0
    1984:	1b be       	out	0x3b, r1	; 59
    1986:	2f 93       	push	r18
    1988:	3f 93       	push	r19
    198a:	4f 93       	push	r20
    198c:	5f 93       	push	r21
    198e:	6f 93       	push	r22
    1990:	7f 93       	push	r23
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    199e:	e0 91 89 20 	lds	r30, 0x2089	; 0x802089 <tc_tcd1_ccb_callback>
    19a2:	f0 91 8a 20 	lds	r31, 0x208A	; 0x80208a <tc_tcd1_ccb_callback+0x1>
    19a6:	30 97       	sbiw	r30, 0x00	; 0
    19a8:	09 f0       	breq	.+2      	; 0x19ac <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    19aa:	19 95       	eicall
	}
}
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0b be       	out	0x3b, r0	; 59
    19c8:	0f 90       	pop	r0
    19ca:	09 be       	out	0x39, r0	; 57
    19cc:	0f 90       	pop	r0
    19ce:	08 be       	out	0x38, r0	; 56
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	08 b6       	in	r0, 0x38	; 56
    19e6:	0f 92       	push	r0
    19e8:	18 be       	out	0x38, r1	; 56
    19ea:	09 b6       	in	r0, 0x39	; 57
    19ec:	0f 92       	push	r0
    19ee:	19 be       	out	0x39, r1	; 57
    19f0:	0b b6       	in	r0, 0x3b	; 59
    19f2:	0f 92       	push	r0
    19f4:	1b be       	out	0x3b, r1	; 59
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1a0e:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <tc_tce0_ovf_callback>
    1a12:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <tc_tce0_ovf_callback+0x1>
    1a16:	30 97       	sbiw	r30, 0x00	; 0
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <__vector_47+0x42>
		tc_tce0_ovf_callback();
    1a1a:	19 95       	eicall
	}
}
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0b be       	out	0x3b, r0	; 59
    1a38:	0f 90       	pop	r0
    1a3a:	09 be       	out	0x39, r0	; 57
    1a3c:	0f 90       	pop	r0
    1a3e:	08 be       	out	0x38, r0	; 56
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	08 b6       	in	r0, 0x38	; 56
    1a56:	0f 92       	push	r0
    1a58:	18 be       	out	0x38, r1	; 56
    1a5a:	09 b6       	in	r0, 0x39	; 57
    1a5c:	0f 92       	push	r0
    1a5e:	19 be       	out	0x39, r1	; 57
    1a60:	0b b6       	in	r0, 0x3b	; 59
    1a62:	0f 92       	push	r0
    1a64:	1b be       	out	0x3b, r1	; 59
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	4f 93       	push	r20
    1a6c:	5f 93       	push	r21
    1a6e:	6f 93       	push	r22
    1a70:	7f 93       	push	r23
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
    1a7a:	ef 93       	push	r30
    1a7c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1a7e:	e0 91 85 20 	lds	r30, 0x2085	; 0x802085 <tc_tce0_err_callback>
    1a82:	f0 91 86 20 	lds	r31, 0x2086	; 0x802086 <tc_tce0_err_callback+0x1>
    1a86:	30 97       	sbiw	r30, 0x00	; 0
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <__vector_48+0x42>
		tc_tce0_err_callback();
    1a8a:	19 95       	eicall
	}
}
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	0f 90       	pop	r0
    1aa6:	0b be       	out	0x3b, r0	; 59
    1aa8:	0f 90       	pop	r0
    1aaa:	09 be       	out	0x39, r0	; 57
    1aac:	0f 90       	pop	r0
    1aae:	08 be       	out	0x38, r0	; 56
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	08 b6       	in	r0, 0x38	; 56
    1ac6:	0f 92       	push	r0
    1ac8:	18 be       	out	0x38, r1	; 56
    1aca:	09 b6       	in	r0, 0x39	; 57
    1acc:	0f 92       	push	r0
    1ace:	19 be       	out	0x39, r1	; 57
    1ad0:	0b b6       	in	r0, 0x3b	; 59
    1ad2:	0f 92       	push	r0
    1ad4:	1b be       	out	0x3b, r1	; 59
    1ad6:	2f 93       	push	r18
    1ad8:	3f 93       	push	r19
    1ada:	4f 93       	push	r20
    1adc:	5f 93       	push	r21
    1ade:	6f 93       	push	r22
    1ae0:	7f 93       	push	r23
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	af 93       	push	r26
    1ae8:	bf 93       	push	r27
    1aea:	ef 93       	push	r30
    1aec:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1aee:	e0 91 83 20 	lds	r30, 0x2083	; 0x802083 <tc_tce0_cca_callback>
    1af2:	f0 91 84 20 	lds	r31, 0x2084	; 0x802084 <tc_tce0_cca_callback+0x1>
    1af6:	30 97       	sbiw	r30, 0x00	; 0
    1af8:	09 f0       	breq	.+2      	; 0x1afc <__vector_49+0x42>
		tc_tce0_cca_callback();
    1afa:	19 95       	eicall
	}
}
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	0f 90       	pop	r0
    1b16:	0b be       	out	0x3b, r0	; 59
    1b18:	0f 90       	pop	r0
    1b1a:	09 be       	out	0x39, r0	; 57
    1b1c:	0f 90       	pop	r0
    1b1e:	08 be       	out	0x38, r0	; 56
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1b2a:	1f 92       	push	r1
    1b2c:	0f 92       	push	r0
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	0f 92       	push	r0
    1b32:	11 24       	eor	r1, r1
    1b34:	08 b6       	in	r0, 0x38	; 56
    1b36:	0f 92       	push	r0
    1b38:	18 be       	out	0x38, r1	; 56
    1b3a:	09 b6       	in	r0, 0x39	; 57
    1b3c:	0f 92       	push	r0
    1b3e:	19 be       	out	0x39, r1	; 57
    1b40:	0b b6       	in	r0, 0x3b	; 59
    1b42:	0f 92       	push	r0
    1b44:	1b be       	out	0x3b, r1	; 59
    1b46:	2f 93       	push	r18
    1b48:	3f 93       	push	r19
    1b4a:	4f 93       	push	r20
    1b4c:	5f 93       	push	r21
    1b4e:	6f 93       	push	r22
    1b50:	7f 93       	push	r23
    1b52:	8f 93       	push	r24
    1b54:	9f 93       	push	r25
    1b56:	af 93       	push	r26
    1b58:	bf 93       	push	r27
    1b5a:	ef 93       	push	r30
    1b5c:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1b5e:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <tc_tce0_ccb_callback>
    1b62:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <tc_tce0_ccb_callback+0x1>
    1b66:	30 97       	sbiw	r30, 0x00	; 0
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <__vector_50+0x42>
		tc_tce0_ccb_callback();
    1b6a:	19 95       	eicall
	}
}
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0b be       	out	0x3b, r0	; 59
    1b88:	0f 90       	pop	r0
    1b8a:	09 be       	out	0x39, r0	; 57
    1b8c:	0f 90       	pop	r0
    1b8e:	08 be       	out	0x38, r0	; 56
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	0f 90       	pop	r0
    1b96:	1f 90       	pop	r1
    1b98:	18 95       	reti

00001b9a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1b9a:	1f 92       	push	r1
    1b9c:	0f 92       	push	r0
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	0f 92       	push	r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	08 b6       	in	r0, 0x38	; 56
    1ba6:	0f 92       	push	r0
    1ba8:	18 be       	out	0x38, r1	; 56
    1baa:	09 b6       	in	r0, 0x39	; 57
    1bac:	0f 92       	push	r0
    1bae:	19 be       	out	0x39, r1	; 57
    1bb0:	0b b6       	in	r0, 0x3b	; 59
    1bb2:	0f 92       	push	r0
    1bb4:	1b be       	out	0x3b, r1	; 59
    1bb6:	2f 93       	push	r18
    1bb8:	3f 93       	push	r19
    1bba:	4f 93       	push	r20
    1bbc:	5f 93       	push	r21
    1bbe:	6f 93       	push	r22
    1bc0:	7f 93       	push	r23
    1bc2:	8f 93       	push	r24
    1bc4:	9f 93       	push	r25
    1bc6:	af 93       	push	r26
    1bc8:	bf 93       	push	r27
    1bca:	ef 93       	push	r30
    1bcc:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1bce:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <tc_tce0_ccc_callback>
    1bd2:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <tc_tce0_ccc_callback+0x1>
    1bd6:	30 97       	sbiw	r30, 0x00	; 0
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <__vector_51+0x42>
		tc_tce0_ccc_callback();
    1bda:	19 95       	eicall
	}
}
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0b be       	out	0x3b, r0	; 59
    1bf8:	0f 90       	pop	r0
    1bfa:	09 be       	out	0x39, r0	; 57
    1bfc:	0f 90       	pop	r0
    1bfe:	08 be       	out	0x38, r0	; 56
    1c00:	0f 90       	pop	r0
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	0f 90       	pop	r0
    1c06:	1f 90       	pop	r1
    1c08:	18 95       	reti

00001c0a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1c0a:	1f 92       	push	r1
    1c0c:	0f 92       	push	r0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	0f 92       	push	r0
    1c12:	11 24       	eor	r1, r1
    1c14:	08 b6       	in	r0, 0x38	; 56
    1c16:	0f 92       	push	r0
    1c18:	18 be       	out	0x38, r1	; 56
    1c1a:	09 b6       	in	r0, 0x39	; 57
    1c1c:	0f 92       	push	r0
    1c1e:	19 be       	out	0x39, r1	; 57
    1c20:	0b b6       	in	r0, 0x3b	; 59
    1c22:	0f 92       	push	r0
    1c24:	1b be       	out	0x3b, r1	; 59
    1c26:	2f 93       	push	r18
    1c28:	3f 93       	push	r19
    1c2a:	4f 93       	push	r20
    1c2c:	5f 93       	push	r21
    1c2e:	6f 93       	push	r22
    1c30:	7f 93       	push	r23
    1c32:	8f 93       	push	r24
    1c34:	9f 93       	push	r25
    1c36:	af 93       	push	r26
    1c38:	bf 93       	push	r27
    1c3a:	ef 93       	push	r30
    1c3c:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1c3e:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <tc_tce0_ccd_callback>
    1c42:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <tc_tce0_ccd_callback+0x1>
    1c46:	30 97       	sbiw	r30, 0x00	; 0
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <__vector_52+0x42>
		tc_tce0_ccd_callback();
    1c4a:	19 95       	eicall
	}
}
    1c4c:	ff 91       	pop	r31
    1c4e:	ef 91       	pop	r30
    1c50:	bf 91       	pop	r27
    1c52:	af 91       	pop	r26
    1c54:	9f 91       	pop	r25
    1c56:	8f 91       	pop	r24
    1c58:	7f 91       	pop	r23
    1c5a:	6f 91       	pop	r22
    1c5c:	5f 91       	pop	r21
    1c5e:	4f 91       	pop	r20
    1c60:	3f 91       	pop	r19
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	0b be       	out	0x3b, r0	; 59
    1c68:	0f 90       	pop	r0
    1c6a:	09 be       	out	0x39, r0	; 57
    1c6c:	0f 90       	pop	r0
    1c6e:	08 be       	out	0x38, r0	; 56
    1c70:	0f 90       	pop	r0
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	0f 90       	pop	r0
    1c76:	1f 90       	pop	r1
    1c78:	18 95       	reti

00001c7a <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1c7a:	1f 92       	push	r1
    1c7c:	0f 92       	push	r0
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	0f 92       	push	r0
    1c82:	11 24       	eor	r1, r1
    1c84:	08 b6       	in	r0, 0x38	; 56
    1c86:	0f 92       	push	r0
    1c88:	18 be       	out	0x38, r1	; 56
    1c8a:	09 b6       	in	r0, 0x39	; 57
    1c8c:	0f 92       	push	r0
    1c8e:	19 be       	out	0x39, r1	; 57
    1c90:	0b b6       	in	r0, 0x3b	; 59
    1c92:	0f 92       	push	r0
    1c94:	1b be       	out	0x3b, r1	; 59
    1c96:	2f 93       	push	r18
    1c98:	3f 93       	push	r19
    1c9a:	4f 93       	push	r20
    1c9c:	5f 93       	push	r21
    1c9e:	6f 93       	push	r22
    1ca0:	7f 93       	push	r23
    1ca2:	8f 93       	push	r24
    1ca4:	9f 93       	push	r25
    1ca6:	af 93       	push	r26
    1ca8:	bf 93       	push	r27
    1caa:	ef 93       	push	r30
    1cac:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1cae:	e0 91 7b 20 	lds	r30, 0x207B	; 0x80207b <tc_tce1_ovf_callback>
    1cb2:	f0 91 7c 20 	lds	r31, 0x207C	; 0x80207c <tc_tce1_ovf_callback+0x1>
    1cb6:	30 97       	sbiw	r30, 0x00	; 0
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1cba:	19 95       	eicall
	}
}
    1cbc:	ff 91       	pop	r31
    1cbe:	ef 91       	pop	r30
    1cc0:	bf 91       	pop	r27
    1cc2:	af 91       	pop	r26
    1cc4:	9f 91       	pop	r25
    1cc6:	8f 91       	pop	r24
    1cc8:	7f 91       	pop	r23
    1cca:	6f 91       	pop	r22
    1ccc:	5f 91       	pop	r21
    1cce:	4f 91       	pop	r20
    1cd0:	3f 91       	pop	r19
    1cd2:	2f 91       	pop	r18
    1cd4:	0f 90       	pop	r0
    1cd6:	0b be       	out	0x3b, r0	; 59
    1cd8:	0f 90       	pop	r0
    1cda:	09 be       	out	0x39, r0	; 57
    1cdc:	0f 90       	pop	r0
    1cde:	08 be       	out	0x38, r0	; 56
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	0f 90       	pop	r0
    1ce6:	1f 90       	pop	r1
    1ce8:	18 95       	reti

00001cea <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1cea:	1f 92       	push	r1
    1cec:	0f 92       	push	r0
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	0f 92       	push	r0
    1cf2:	11 24       	eor	r1, r1
    1cf4:	08 b6       	in	r0, 0x38	; 56
    1cf6:	0f 92       	push	r0
    1cf8:	18 be       	out	0x38, r1	; 56
    1cfa:	09 b6       	in	r0, 0x39	; 57
    1cfc:	0f 92       	push	r0
    1cfe:	19 be       	out	0x39, r1	; 57
    1d00:	0b b6       	in	r0, 0x3b	; 59
    1d02:	0f 92       	push	r0
    1d04:	1b be       	out	0x3b, r1	; 59
    1d06:	2f 93       	push	r18
    1d08:	3f 93       	push	r19
    1d0a:	4f 93       	push	r20
    1d0c:	5f 93       	push	r21
    1d0e:	6f 93       	push	r22
    1d10:	7f 93       	push	r23
    1d12:	8f 93       	push	r24
    1d14:	9f 93       	push	r25
    1d16:	af 93       	push	r26
    1d18:	bf 93       	push	r27
    1d1a:	ef 93       	push	r30
    1d1c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1d1e:	e0 91 79 20 	lds	r30, 0x2079	; 0x802079 <tc_tce1_err_callback>
    1d22:	f0 91 7a 20 	lds	r31, 0x207A	; 0x80207a <tc_tce1_err_callback+0x1>
    1d26:	30 97       	sbiw	r30, 0x00	; 0
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <__vector_54+0x42>
		tc_tce1_err_callback();
    1d2a:	19 95       	eicall
	}
}
    1d2c:	ff 91       	pop	r31
    1d2e:	ef 91       	pop	r30
    1d30:	bf 91       	pop	r27
    1d32:	af 91       	pop	r26
    1d34:	9f 91       	pop	r25
    1d36:	8f 91       	pop	r24
    1d38:	7f 91       	pop	r23
    1d3a:	6f 91       	pop	r22
    1d3c:	5f 91       	pop	r21
    1d3e:	4f 91       	pop	r20
    1d40:	3f 91       	pop	r19
    1d42:	2f 91       	pop	r18
    1d44:	0f 90       	pop	r0
    1d46:	0b be       	out	0x3b, r0	; 59
    1d48:	0f 90       	pop	r0
    1d4a:	09 be       	out	0x39, r0	; 57
    1d4c:	0f 90       	pop	r0
    1d4e:	08 be       	out	0x38, r0	; 56
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	08 b6       	in	r0, 0x38	; 56
    1d66:	0f 92       	push	r0
    1d68:	18 be       	out	0x38, r1	; 56
    1d6a:	09 b6       	in	r0, 0x39	; 57
    1d6c:	0f 92       	push	r0
    1d6e:	19 be       	out	0x39, r1	; 57
    1d70:	0b b6       	in	r0, 0x3b	; 59
    1d72:	0f 92       	push	r0
    1d74:	1b be       	out	0x3b, r1	; 59
    1d76:	2f 93       	push	r18
    1d78:	3f 93       	push	r19
    1d7a:	4f 93       	push	r20
    1d7c:	5f 93       	push	r21
    1d7e:	6f 93       	push	r22
    1d80:	7f 93       	push	r23
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1d8e:	e0 91 77 20 	lds	r30, 0x2077	; 0x802077 <tc_tce1_cca_callback>
    1d92:	f0 91 78 20 	lds	r31, 0x2078	; 0x802078 <tc_tce1_cca_callback+0x1>
    1d96:	30 97       	sbiw	r30, 0x00	; 0
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <__vector_55+0x42>
		tc_tce1_cca_callback();
    1d9a:	19 95       	eicall
	}
}
    1d9c:	ff 91       	pop	r31
    1d9e:	ef 91       	pop	r30
    1da0:	bf 91       	pop	r27
    1da2:	af 91       	pop	r26
    1da4:	9f 91       	pop	r25
    1da6:	8f 91       	pop	r24
    1da8:	7f 91       	pop	r23
    1daa:	6f 91       	pop	r22
    1dac:	5f 91       	pop	r21
    1dae:	4f 91       	pop	r20
    1db0:	3f 91       	pop	r19
    1db2:	2f 91       	pop	r18
    1db4:	0f 90       	pop	r0
    1db6:	0b be       	out	0x3b, r0	; 59
    1db8:	0f 90       	pop	r0
    1dba:	09 be       	out	0x39, r0	; 57
    1dbc:	0f 90       	pop	r0
    1dbe:	08 be       	out	0x38, r0	; 56
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1dca:	1f 92       	push	r1
    1dcc:	0f 92       	push	r0
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	0f 92       	push	r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	08 b6       	in	r0, 0x38	; 56
    1dd6:	0f 92       	push	r0
    1dd8:	18 be       	out	0x38, r1	; 56
    1dda:	09 b6       	in	r0, 0x39	; 57
    1ddc:	0f 92       	push	r0
    1dde:	19 be       	out	0x39, r1	; 57
    1de0:	0b b6       	in	r0, 0x3b	; 59
    1de2:	0f 92       	push	r0
    1de4:	1b be       	out	0x3b, r1	; 59
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1dfe:	e0 91 75 20 	lds	r30, 0x2075	; 0x802075 <tc_tce1_ccb_callback>
    1e02:	f0 91 76 20 	lds	r31, 0x2076	; 0x802076 <tc_tce1_ccb_callback+0x1>
    1e06:	30 97       	sbiw	r30, 0x00	; 0
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1e0a:	19 95       	eicall
	}
}
    1e0c:	ff 91       	pop	r31
    1e0e:	ef 91       	pop	r30
    1e10:	bf 91       	pop	r27
    1e12:	af 91       	pop	r26
    1e14:	9f 91       	pop	r25
    1e16:	8f 91       	pop	r24
    1e18:	7f 91       	pop	r23
    1e1a:	6f 91       	pop	r22
    1e1c:	5f 91       	pop	r21
    1e1e:	4f 91       	pop	r20
    1e20:	3f 91       	pop	r19
    1e22:	2f 91       	pop	r18
    1e24:	0f 90       	pop	r0
    1e26:	0b be       	out	0x3b, r0	; 59
    1e28:	0f 90       	pop	r0
    1e2a:	09 be       	out	0x39, r0	; 57
    1e2c:	0f 90       	pop	r0
    1e2e:	08 be       	out	0x38, r0	; 56
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti

00001e3a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1e3a:	1f 92       	push	r1
    1e3c:	0f 92       	push	r0
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	0f 92       	push	r0
    1e42:	11 24       	eor	r1, r1
    1e44:	08 b6       	in	r0, 0x38	; 56
    1e46:	0f 92       	push	r0
    1e48:	18 be       	out	0x38, r1	; 56
    1e4a:	09 b6       	in	r0, 0x39	; 57
    1e4c:	0f 92       	push	r0
    1e4e:	19 be       	out	0x39, r1	; 57
    1e50:	0b b6       	in	r0, 0x3b	; 59
    1e52:	0f 92       	push	r0
    1e54:	1b be       	out	0x3b, r1	; 59
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	4f 93       	push	r20
    1e5c:	5f 93       	push	r21
    1e5e:	6f 93       	push	r22
    1e60:	7f 93       	push	r23
    1e62:	8f 93       	push	r24
    1e64:	9f 93       	push	r25
    1e66:	af 93       	push	r26
    1e68:	bf 93       	push	r27
    1e6a:	ef 93       	push	r30
    1e6c:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1e6e:	e0 91 73 20 	lds	r30, 0x2073	; 0x802073 <tc_tcf0_ovf_callback>
    1e72:	f0 91 74 20 	lds	r31, 0x2074	; 0x802074 <tc_tcf0_ovf_callback+0x1>
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    1e7a:	19 95       	eicall
	}
}
    1e7c:	ff 91       	pop	r31
    1e7e:	ef 91       	pop	r30
    1e80:	bf 91       	pop	r27
    1e82:	af 91       	pop	r26
    1e84:	9f 91       	pop	r25
    1e86:	8f 91       	pop	r24
    1e88:	7f 91       	pop	r23
    1e8a:	6f 91       	pop	r22
    1e8c:	5f 91       	pop	r21
    1e8e:	4f 91       	pop	r20
    1e90:	3f 91       	pop	r19
    1e92:	2f 91       	pop	r18
    1e94:	0f 90       	pop	r0
    1e96:	0b be       	out	0x3b, r0	; 59
    1e98:	0f 90       	pop	r0
    1e9a:	09 be       	out	0x39, r0	; 57
    1e9c:	0f 90       	pop	r0
    1e9e:	08 be       	out	0x38, r0	; 56
    1ea0:	0f 90       	pop	r0
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	0f 90       	pop	r0
    1ea6:	1f 90       	pop	r1
    1ea8:	18 95       	reti

00001eaa <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1eaa:	1f 92       	push	r1
    1eac:	0f 92       	push	r0
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	0f 92       	push	r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	08 b6       	in	r0, 0x38	; 56
    1eb6:	0f 92       	push	r0
    1eb8:	18 be       	out	0x38, r1	; 56
    1eba:	09 b6       	in	r0, 0x39	; 57
    1ebc:	0f 92       	push	r0
    1ebe:	19 be       	out	0x39, r1	; 57
    1ec0:	0b b6       	in	r0, 0x3b	; 59
    1ec2:	0f 92       	push	r0
    1ec4:	1b be       	out	0x3b, r1	; 59
    1ec6:	2f 93       	push	r18
    1ec8:	3f 93       	push	r19
    1eca:	4f 93       	push	r20
    1ecc:	5f 93       	push	r21
    1ece:	6f 93       	push	r22
    1ed0:	7f 93       	push	r23
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	af 93       	push	r26
    1ed8:	bf 93       	push	r27
    1eda:	ef 93       	push	r30
    1edc:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1ede:	e0 91 71 20 	lds	r30, 0x2071	; 0x802071 <tc_tcf0_err_callback>
    1ee2:	f0 91 72 20 	lds	r31, 0x2072	; 0x802072 <tc_tcf0_err_callback+0x1>
    1ee6:	30 97       	sbiw	r30, 0x00	; 0
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <__vector_109+0x42>
		tc_tcf0_err_callback();
    1eea:	19 95       	eicall
	}
}
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0b be       	out	0x3b, r0	; 59
    1f08:	0f 90       	pop	r0
    1f0a:	09 be       	out	0x39, r0	; 57
    1f0c:	0f 90       	pop	r0
    1f0e:	08 be       	out	0x38, r0	; 56
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	0f 90       	pop	r0
    1f16:	1f 90       	pop	r1
    1f18:	18 95       	reti

00001f1a <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1f1a:	1f 92       	push	r1
    1f1c:	0f 92       	push	r0
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	0f 92       	push	r0
    1f22:	11 24       	eor	r1, r1
    1f24:	08 b6       	in	r0, 0x38	; 56
    1f26:	0f 92       	push	r0
    1f28:	18 be       	out	0x38, r1	; 56
    1f2a:	09 b6       	in	r0, 0x39	; 57
    1f2c:	0f 92       	push	r0
    1f2e:	19 be       	out	0x39, r1	; 57
    1f30:	0b b6       	in	r0, 0x3b	; 59
    1f32:	0f 92       	push	r0
    1f34:	1b be       	out	0x3b, r1	; 59
    1f36:	2f 93       	push	r18
    1f38:	3f 93       	push	r19
    1f3a:	4f 93       	push	r20
    1f3c:	5f 93       	push	r21
    1f3e:	6f 93       	push	r22
    1f40:	7f 93       	push	r23
    1f42:	8f 93       	push	r24
    1f44:	9f 93       	push	r25
    1f46:	af 93       	push	r26
    1f48:	bf 93       	push	r27
    1f4a:	ef 93       	push	r30
    1f4c:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1f4e:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <tc_tcf0_cca_callback>
    1f52:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <tc_tcf0_cca_callback+0x1>
    1f56:	30 97       	sbiw	r30, 0x00	; 0
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1f5a:	19 95       	eicall
	}
}
    1f5c:	ff 91       	pop	r31
    1f5e:	ef 91       	pop	r30
    1f60:	bf 91       	pop	r27
    1f62:	af 91       	pop	r26
    1f64:	9f 91       	pop	r25
    1f66:	8f 91       	pop	r24
    1f68:	7f 91       	pop	r23
    1f6a:	6f 91       	pop	r22
    1f6c:	5f 91       	pop	r21
    1f6e:	4f 91       	pop	r20
    1f70:	3f 91       	pop	r19
    1f72:	2f 91       	pop	r18
    1f74:	0f 90       	pop	r0
    1f76:	0b be       	out	0x3b, r0	; 59
    1f78:	0f 90       	pop	r0
    1f7a:	09 be       	out	0x39, r0	; 57
    1f7c:	0f 90       	pop	r0
    1f7e:	08 be       	out	0x38, r0	; 56
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	08 b6       	in	r0, 0x38	; 56
    1f96:	0f 92       	push	r0
    1f98:	18 be       	out	0x38, r1	; 56
    1f9a:	09 b6       	in	r0, 0x39	; 57
    1f9c:	0f 92       	push	r0
    1f9e:	19 be       	out	0x39, r1	; 57
    1fa0:	0b b6       	in	r0, 0x3b	; 59
    1fa2:	0f 92       	push	r0
    1fa4:	1b be       	out	0x3b, r1	; 59
    1fa6:	2f 93       	push	r18
    1fa8:	3f 93       	push	r19
    1faa:	4f 93       	push	r20
    1fac:	5f 93       	push	r21
    1fae:	6f 93       	push	r22
    1fb0:	7f 93       	push	r23
    1fb2:	8f 93       	push	r24
    1fb4:	9f 93       	push	r25
    1fb6:	af 93       	push	r26
    1fb8:	bf 93       	push	r27
    1fba:	ef 93       	push	r30
    1fbc:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1fbe:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <tc_tcf0_ccb_callback>
    1fc2:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <tc_tcf0_ccb_callback+0x1>
    1fc6:	30 97       	sbiw	r30, 0x00	; 0
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1fca:	19 95       	eicall
	}
}
    1fcc:	ff 91       	pop	r31
    1fce:	ef 91       	pop	r30
    1fd0:	bf 91       	pop	r27
    1fd2:	af 91       	pop	r26
    1fd4:	9f 91       	pop	r25
    1fd6:	8f 91       	pop	r24
    1fd8:	7f 91       	pop	r23
    1fda:	6f 91       	pop	r22
    1fdc:	5f 91       	pop	r21
    1fde:	4f 91       	pop	r20
    1fe0:	3f 91       	pop	r19
    1fe2:	2f 91       	pop	r18
    1fe4:	0f 90       	pop	r0
    1fe6:	0b be       	out	0x3b, r0	; 59
    1fe8:	0f 90       	pop	r0
    1fea:	09 be       	out	0x39, r0	; 57
    1fec:	0f 90       	pop	r0
    1fee:	08 be       	out	0x38, r0	; 56
    1ff0:	0f 90       	pop	r0
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	0f 90       	pop	r0
    1ff6:	1f 90       	pop	r1
    1ff8:	18 95       	reti

00001ffa <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1ffa:	1f 92       	push	r1
    1ffc:	0f 92       	push	r0
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	0f 92       	push	r0
    2002:	11 24       	eor	r1, r1
    2004:	08 b6       	in	r0, 0x38	; 56
    2006:	0f 92       	push	r0
    2008:	18 be       	out	0x38, r1	; 56
    200a:	09 b6       	in	r0, 0x39	; 57
    200c:	0f 92       	push	r0
    200e:	19 be       	out	0x39, r1	; 57
    2010:	0b b6       	in	r0, 0x3b	; 59
    2012:	0f 92       	push	r0
    2014:	1b be       	out	0x3b, r1	; 59
    2016:	2f 93       	push	r18
    2018:	3f 93       	push	r19
    201a:	4f 93       	push	r20
    201c:	5f 93       	push	r21
    201e:	6f 93       	push	r22
    2020:	7f 93       	push	r23
    2022:	8f 93       	push	r24
    2024:	9f 93       	push	r25
    2026:	af 93       	push	r26
    2028:	bf 93       	push	r27
    202a:	ef 93       	push	r30
    202c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    202e:	e0 91 6b 20 	lds	r30, 0x206B	; 0x80206b <tc_tcf0_ccc_callback>
    2032:	f0 91 6c 20 	lds	r31, 0x206C	; 0x80206c <tc_tcf0_ccc_callback+0x1>
    2036:	30 97       	sbiw	r30, 0x00	; 0
    2038:	09 f0       	breq	.+2      	; 0x203c <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    203a:	19 95       	eicall
	}
}
    203c:	ff 91       	pop	r31
    203e:	ef 91       	pop	r30
    2040:	bf 91       	pop	r27
    2042:	af 91       	pop	r26
    2044:	9f 91       	pop	r25
    2046:	8f 91       	pop	r24
    2048:	7f 91       	pop	r23
    204a:	6f 91       	pop	r22
    204c:	5f 91       	pop	r21
    204e:	4f 91       	pop	r20
    2050:	3f 91       	pop	r19
    2052:	2f 91       	pop	r18
    2054:	0f 90       	pop	r0
    2056:	0b be       	out	0x3b, r0	; 59
    2058:	0f 90       	pop	r0
    205a:	09 be       	out	0x39, r0	; 57
    205c:	0f 90       	pop	r0
    205e:	08 be       	out	0x38, r0	; 56
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0
    2066:	1f 90       	pop	r1
    2068:	18 95       	reti

0000206a <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	08 b6       	in	r0, 0x38	; 56
    2076:	0f 92       	push	r0
    2078:	18 be       	out	0x38, r1	; 56
    207a:	09 b6       	in	r0, 0x39	; 57
    207c:	0f 92       	push	r0
    207e:	19 be       	out	0x39, r1	; 57
    2080:	0b b6       	in	r0, 0x3b	; 59
    2082:	0f 92       	push	r0
    2084:	1b be       	out	0x3b, r1	; 59
    2086:	2f 93       	push	r18
    2088:	3f 93       	push	r19
    208a:	4f 93       	push	r20
    208c:	5f 93       	push	r21
    208e:	6f 93       	push	r22
    2090:	7f 93       	push	r23
    2092:	8f 93       	push	r24
    2094:	9f 93       	push	r25
    2096:	af 93       	push	r26
    2098:	bf 93       	push	r27
    209a:	ef 93       	push	r30
    209c:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    209e:	e0 91 69 20 	lds	r30, 0x2069	; 0x802069 <tc_tcf0_ccd_callback>
    20a2:	f0 91 6a 20 	lds	r31, 0x206A	; 0x80206a <tc_tcf0_ccd_callback+0x1>
    20a6:	30 97       	sbiw	r30, 0x00	; 0
    20a8:	09 f0       	breq	.+2      	; 0x20ac <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    20aa:	19 95       	eicall
	}
}
    20ac:	ff 91       	pop	r31
    20ae:	ef 91       	pop	r30
    20b0:	bf 91       	pop	r27
    20b2:	af 91       	pop	r26
    20b4:	9f 91       	pop	r25
    20b6:	8f 91       	pop	r24
    20b8:	7f 91       	pop	r23
    20ba:	6f 91       	pop	r22
    20bc:	5f 91       	pop	r21
    20be:	4f 91       	pop	r20
    20c0:	3f 91       	pop	r19
    20c2:	2f 91       	pop	r18
    20c4:	0f 90       	pop	r0
    20c6:	0b be       	out	0x3b, r0	; 59
    20c8:	0f 90       	pop	r0
    20ca:	09 be       	out	0x39, r0	; 57
    20cc:	0f 90       	pop	r0
    20ce:	08 be       	out	0x38, r0	; 56
    20d0:	0f 90       	pop	r0
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	0f 90       	pop	r0
    20d6:	1f 90       	pop	r1
    20d8:	18 95       	reti

000020da <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    20da:	1f 92       	push	r1
    20dc:	0f 92       	push	r0
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	0f 92       	push	r0
    20e2:	11 24       	eor	r1, r1
    20e4:	08 b6       	in	r0, 0x38	; 56
    20e6:	0f 92       	push	r0
    20e8:	18 be       	out	0x38, r1	; 56
    20ea:	09 b6       	in	r0, 0x39	; 57
    20ec:	0f 92       	push	r0
    20ee:	19 be       	out	0x39, r1	; 57
    20f0:	0b b6       	in	r0, 0x3b	; 59
    20f2:	0f 92       	push	r0
    20f4:	1b be       	out	0x3b, r1	; 59
    20f6:	2f 93       	push	r18
    20f8:	3f 93       	push	r19
    20fa:	4f 93       	push	r20
    20fc:	5f 93       	push	r21
    20fe:	6f 93       	push	r22
    2100:	7f 93       	push	r23
    2102:	8f 93       	push	r24
    2104:	9f 93       	push	r25
    2106:	af 93       	push	r26
    2108:	bf 93       	push	r27
    210a:	ef 93       	push	r30
    210c:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    210e:	e0 91 67 20 	lds	r30, 0x2067	; 0x802067 <tc_tcf1_ovf_callback>
    2112:	f0 91 68 20 	lds	r31, 0x2068	; 0x802068 <tc_tcf1_ovf_callback+0x1>
    2116:	30 97       	sbiw	r30, 0x00	; 0
    2118:	09 f0       	breq	.+2      	; 0x211c <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    211a:	19 95       	eicall
	}
}
    211c:	ff 91       	pop	r31
    211e:	ef 91       	pop	r30
    2120:	bf 91       	pop	r27
    2122:	af 91       	pop	r26
    2124:	9f 91       	pop	r25
    2126:	8f 91       	pop	r24
    2128:	7f 91       	pop	r23
    212a:	6f 91       	pop	r22
    212c:	5f 91       	pop	r21
    212e:	4f 91       	pop	r20
    2130:	3f 91       	pop	r19
    2132:	2f 91       	pop	r18
    2134:	0f 90       	pop	r0
    2136:	0b be       	out	0x3b, r0	; 59
    2138:	0f 90       	pop	r0
    213a:	09 be       	out	0x39, r0	; 57
    213c:	0f 90       	pop	r0
    213e:	08 be       	out	0x38, r0	; 56
    2140:	0f 90       	pop	r0
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	0f 90       	pop	r0
    2146:	1f 90       	pop	r1
    2148:	18 95       	reti

0000214a <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    214a:	1f 92       	push	r1
    214c:	0f 92       	push	r0
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	0f 92       	push	r0
    2152:	11 24       	eor	r1, r1
    2154:	08 b6       	in	r0, 0x38	; 56
    2156:	0f 92       	push	r0
    2158:	18 be       	out	0x38, r1	; 56
    215a:	09 b6       	in	r0, 0x39	; 57
    215c:	0f 92       	push	r0
    215e:	19 be       	out	0x39, r1	; 57
    2160:	0b b6       	in	r0, 0x3b	; 59
    2162:	0f 92       	push	r0
    2164:	1b be       	out	0x3b, r1	; 59
    2166:	2f 93       	push	r18
    2168:	3f 93       	push	r19
    216a:	4f 93       	push	r20
    216c:	5f 93       	push	r21
    216e:	6f 93       	push	r22
    2170:	7f 93       	push	r23
    2172:	8f 93       	push	r24
    2174:	9f 93       	push	r25
    2176:	af 93       	push	r26
    2178:	bf 93       	push	r27
    217a:	ef 93       	push	r30
    217c:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    217e:	e0 91 65 20 	lds	r30, 0x2065	; 0x802065 <tc_tcf1_err_callback>
    2182:	f0 91 66 20 	lds	r31, 0x2066	; 0x802066 <tc_tcf1_err_callback+0x1>
    2186:	30 97       	sbiw	r30, 0x00	; 0
    2188:	09 f0       	breq	.+2      	; 0x218c <__vector_115+0x42>
		tc_tcf1_err_callback();
    218a:	19 95       	eicall
	}
}
    218c:	ff 91       	pop	r31
    218e:	ef 91       	pop	r30
    2190:	bf 91       	pop	r27
    2192:	af 91       	pop	r26
    2194:	9f 91       	pop	r25
    2196:	8f 91       	pop	r24
    2198:	7f 91       	pop	r23
    219a:	6f 91       	pop	r22
    219c:	5f 91       	pop	r21
    219e:	4f 91       	pop	r20
    21a0:	3f 91       	pop	r19
    21a2:	2f 91       	pop	r18
    21a4:	0f 90       	pop	r0
    21a6:	0b be       	out	0x3b, r0	; 59
    21a8:	0f 90       	pop	r0
    21aa:	09 be       	out	0x39, r0	; 57
    21ac:	0f 90       	pop	r0
    21ae:	08 be       	out	0x38, r0	; 56
    21b0:	0f 90       	pop	r0
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	0f 90       	pop	r0
    21b6:	1f 90       	pop	r1
    21b8:	18 95       	reti

000021ba <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    21ba:	1f 92       	push	r1
    21bc:	0f 92       	push	r0
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	0f 92       	push	r0
    21c2:	11 24       	eor	r1, r1
    21c4:	08 b6       	in	r0, 0x38	; 56
    21c6:	0f 92       	push	r0
    21c8:	18 be       	out	0x38, r1	; 56
    21ca:	09 b6       	in	r0, 0x39	; 57
    21cc:	0f 92       	push	r0
    21ce:	19 be       	out	0x39, r1	; 57
    21d0:	0b b6       	in	r0, 0x3b	; 59
    21d2:	0f 92       	push	r0
    21d4:	1b be       	out	0x3b, r1	; 59
    21d6:	2f 93       	push	r18
    21d8:	3f 93       	push	r19
    21da:	4f 93       	push	r20
    21dc:	5f 93       	push	r21
    21de:	6f 93       	push	r22
    21e0:	7f 93       	push	r23
    21e2:	8f 93       	push	r24
    21e4:	9f 93       	push	r25
    21e6:	af 93       	push	r26
    21e8:	bf 93       	push	r27
    21ea:	ef 93       	push	r30
    21ec:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    21ee:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <tc_tcf1_cca_callback>
    21f2:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <tc_tcf1_cca_callback+0x1>
    21f6:	30 97       	sbiw	r30, 0x00	; 0
    21f8:	09 f0       	breq	.+2      	; 0x21fc <__vector_116+0x42>
		tc_tcf1_cca_callback();
    21fa:	19 95       	eicall
	}
}
    21fc:	ff 91       	pop	r31
    21fe:	ef 91       	pop	r30
    2200:	bf 91       	pop	r27
    2202:	af 91       	pop	r26
    2204:	9f 91       	pop	r25
    2206:	8f 91       	pop	r24
    2208:	7f 91       	pop	r23
    220a:	6f 91       	pop	r22
    220c:	5f 91       	pop	r21
    220e:	4f 91       	pop	r20
    2210:	3f 91       	pop	r19
    2212:	2f 91       	pop	r18
    2214:	0f 90       	pop	r0
    2216:	0b be       	out	0x3b, r0	; 59
    2218:	0f 90       	pop	r0
    221a:	09 be       	out	0x39, r0	; 57
    221c:	0f 90       	pop	r0
    221e:	08 be       	out	0x38, r0	; 56
    2220:	0f 90       	pop	r0
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	0f 90       	pop	r0
    2226:	1f 90       	pop	r1
    2228:	18 95       	reti

0000222a <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    222a:	1f 92       	push	r1
    222c:	0f 92       	push	r0
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	0f 92       	push	r0
    2232:	11 24       	eor	r1, r1
    2234:	08 b6       	in	r0, 0x38	; 56
    2236:	0f 92       	push	r0
    2238:	18 be       	out	0x38, r1	; 56
    223a:	09 b6       	in	r0, 0x39	; 57
    223c:	0f 92       	push	r0
    223e:	19 be       	out	0x39, r1	; 57
    2240:	0b b6       	in	r0, 0x3b	; 59
    2242:	0f 92       	push	r0
    2244:	1b be       	out	0x3b, r1	; 59
    2246:	2f 93       	push	r18
    2248:	3f 93       	push	r19
    224a:	4f 93       	push	r20
    224c:	5f 93       	push	r21
    224e:	6f 93       	push	r22
    2250:	7f 93       	push	r23
    2252:	8f 93       	push	r24
    2254:	9f 93       	push	r25
    2256:	af 93       	push	r26
    2258:	bf 93       	push	r27
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    225e:	e0 91 61 20 	lds	r30, 0x2061	; 0x802061 <tc_tcf1_ccb_callback>
    2262:	f0 91 62 20 	lds	r31, 0x2062	; 0x802062 <tc_tcf1_ccb_callback+0x1>
    2266:	30 97       	sbiw	r30, 0x00	; 0
    2268:	09 f0       	breq	.+2      	; 0x226c <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    226a:	19 95       	eicall
	}
}
    226c:	ff 91       	pop	r31
    226e:	ef 91       	pop	r30
    2270:	bf 91       	pop	r27
    2272:	af 91       	pop	r26
    2274:	9f 91       	pop	r25
    2276:	8f 91       	pop	r24
    2278:	7f 91       	pop	r23
    227a:	6f 91       	pop	r22
    227c:	5f 91       	pop	r21
    227e:	4f 91       	pop	r20
    2280:	3f 91       	pop	r19
    2282:	2f 91       	pop	r18
    2284:	0f 90       	pop	r0
    2286:	0b be       	out	0x3b, r0	; 59
    2288:	0f 90       	pop	r0
    228a:	09 be       	out	0x39, r0	; 57
    228c:	0f 90       	pop	r0
    228e:	08 be       	out	0x38, r0	; 56
    2290:	0f 90       	pop	r0
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	0f 90       	pop	r0
    2296:	1f 90       	pop	r1
    2298:	18 95       	reti

0000229a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    229a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    229c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    229e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    22a0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    22a2:	60 83       	st	Z, r22
	ret                             // Return to caller
    22a4:	08 95       	ret

000022a6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    22b0:	c6 2f       	mov	r28, r22
    22b2:	d0 e0       	ldi	r29, 0x00	; 0
    22b4:	de 01       	movw	r26, r28
    22b6:	02 2e       	mov	r0, r18
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <ioport_configure_port_pin+0x18>
    22ba:	b5 95       	asr	r27
    22bc:	a7 95       	ror	r26
    22be:	0a 94       	dec	r0
    22c0:	e2 f7       	brpl	.-8      	; 0x22ba <ioport_configure_port_pin+0x14>
    22c2:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    22c4:	50 8b       	std	Z+16, r21	; 0x10
    22c6:	2f 5f       	subi	r18, 0xFF	; 255
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    22cc:	28 30       	cpi	r18, 0x08	; 8
    22ce:	31 05       	cpc	r19, r1
    22d0:	89 f7       	brne	.-30     	; 0x22b4 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    22d2:	40 ff       	sbrs	r20, 0
    22d4:	0a c0       	rjmp	.+20     	; 0x22ea <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    22d6:	41 ff       	sbrs	r20, 1
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    22da:	fc 01       	movw	r30, r24
    22dc:	65 83       	std	Z+5, r22	; 0x05
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    22e0:	fc 01       	movw	r30, r24
    22e2:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    22e4:	fc 01       	movw	r30, r24
    22e6:	61 83       	std	Z+1, r22	; 0x01
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    22ea:	fc 01       	movw	r30, r24
    22ec:	62 83       	std	Z+2, r22	; 0x02
	}
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    22f4:	43 e0       	ldi	r20, 0x03	; 3
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	68 e0       	ldi	r22, 0x08	; 8
    22fa:	80 ec       	ldi	r24, 0xC0	; 192
    22fc:	97 e0       	ldi	r25, 0x07	; 7
    22fe:	d3 df       	rcall	.-90     	; 0x22a6 <ioport_configure_port_pin>
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	58 e1       	ldi	r21, 0x18	; 24
    2304:	64 e0       	ldi	r22, 0x04	; 4
    2306:	80 ec       	ldi	r24, 0xC0	; 192
    2308:	97 e0       	ldi	r25, 0x07	; 7
    230a:	cd cf       	rjmp	.-102    	; 0x22a6 <ioport_configure_port_pin>
    230c:	08 95       	ret

0000230e <usart_serial_getchar>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	eb 01       	movw	r28, r22
    2314:	0e 94 26 03 	call	0x64c	; 0x64c <usart_getchar>
    2318:	88 83       	st	Y, r24
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <usart_serial_putchar>:
    2320:	0c 94 1e 03 	jmp	0x63c	; 0x63c <usart_putchar>
    2324:	08 95       	ret

00002326 <uart_terminal_init>:

void uart_terminal_init()
{
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	27 97       	sbiw	r28, 0x07	; 7
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2334:	60 e1       	ldi	r22, 0x10	; 16
    2336:	85 e0       	ldi	r24, 0x05	; 5
    2338:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    233c:	e0 e8       	ldi	r30, 0x80	; 128
    233e:	f6 e0       	ldi	r31, 0x06	; 6
    2340:	80 81       	ld	r24, Z
    2342:	88 60       	ori	r24, 0x08	; 8
    2344:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2346:	80 ea       	ldi	r24, 0xA0	; 160
    2348:	9a e0       	ldi	r25, 0x0A	; 10
    234a:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <stdio_base>
    234e:	90 93 ba 20 	sts	0x20BA, r25	; 0x8020ba <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2352:	80 e9       	ldi	r24, 0x90	; 144
    2354:	91 e1       	ldi	r25, 0x11	; 17
    2356:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <ptr_put>
    235a:	90 93 b8 20 	sts	0x20B8, r25	; 0x8020b8 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    235e:	87 e8       	ldi	r24, 0x87	; 135
    2360:	91 e1       	ldi	r25, 0x11	; 17
    2362:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <ptr_get>
    2366:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    236a:	e6 e0       	ldi	r30, 0x06	; 6
    236c:	f0 e2       	ldi	r31, 0x20	; 32
    236e:	84 81       	ldd	r24, Z+4	; 0x04
    2370:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2372:	85 81       	ldd	r24, Z+5	; 0x05
    2374:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2376:	86 81       	ldd	r24, Z+6	; 0x06
    2378:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	a2 81       	ldd	r26, Z+2	; 0x02
    2380:	b3 81       	ldd	r27, Z+3	; 0x03
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	ab 83       	std	Y+3, r26	; 0x03
    2388:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    238a:	60 e1       	ldi	r22, 0x10	; 16
    238c:	85 e0       	ldi	r24, 0x05	; 5
    238e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2392:	be 01       	movw	r22, r28
    2394:	6f 5f       	subi	r22, 0xFF	; 255
    2396:	7f 4f       	sbci	r23, 0xFF	; 255
    2398:	80 ea       	ldi	r24, 0xA0	; 160
    239a:	9a e0       	ldi	r25, 0x0A	; 10
    239c:	0e 94 3f 04 	call	0x87e	; 0x87e <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    23a0:	66 ea       	ldi	r22, 0xA6	; 166
    23a2:	71 e0       	ldi	r23, 0x01	; 1
    23a4:	88 e8       	ldi	r24, 0x88	; 136
    23a6:	97 e0       	ldi	r25, 0x07	; 7
    23a8:	02 d5       	rcall	.+2564   	; 0x2dae <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat Valkyrie Initializing...\n");
    23aa:	8d e0       	ldi	r24, 0x0D	; 13
    23ac:	90 e2       	ldi	r25, 0x20	; 32
    23ae:	98 d5       	rcall	.+2864   	; 0x2ee0 <puts>
		printf("UART Initialized\n");
    23b0:	82 e3       	ldi	r24, 0x32	; 50
    23b2:	90 e2       	ldi	r25, 0x20	; 32
    23b4:	95 d5       	rcall	.+2858   	; 0x2ee0 <puts>
	}
	}
    23b6:	27 96       	adiw	r28, 0x07	; 7
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	08 95       	ret

000023c2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    23c2:	04 c0       	rjmp	.+8      	; 0x23cc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    23c4:	61 50       	subi	r22, 0x01	; 1
    23c6:	71 09       	sbc	r23, r1
    23c8:	81 09       	sbc	r24, r1
    23ca:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    23cc:	61 15       	cp	r22, r1
    23ce:	71 05       	cpc	r23, r1
    23d0:	81 05       	cpc	r24, r1
    23d2:	91 05       	cpc	r25, r1
    23d4:	b9 f7       	brne	.-18     	; 0x23c4 <__portable_avr_delay_cycles+0x2>
    23d6:	08 95       	ret

000023d8 <__vector_61>:


#include "def.h"

ISR(GPS_RECEIVE_INTERRUPT_VECTOR)
{
    23d8:	1f 92       	push	r1
    23da:	0f 92       	push	r0
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	0f 92       	push	r0
    23e0:	11 24       	eor	r1, r1
    23e2:	08 b6       	in	r0, 0x38	; 56
    23e4:	0f 92       	push	r0
    23e6:	18 be       	out	0x38, r1	; 56
    23e8:	09 b6       	in	r0, 0x39	; 57
    23ea:	0f 92       	push	r0
    23ec:	19 be       	out	0x39, r1	; 57
    23ee:	0b b6       	in	r0, 0x3b	; 59
    23f0:	0f 92       	push	r0
    23f2:	1b be       	out	0x3b, r1	; 59
    23f4:	2f 93       	push	r18
    23f6:	3f 93       	push	r19
    23f8:	4f 93       	push	r20
    23fa:	5f 93       	push	r21
    23fc:	6f 93       	push	r22
    23fe:	7f 93       	push	r23
    2400:	8f 93       	push	r24
    2402:	9f 93       	push	r25
    2404:	af 93       	push	r26
    2406:	bf 93       	push	r27
    2408:	ef 93       	push	r30
    240a:	ff 93       	push	r31
	//uint8_t c = GPS_USART.DATA;
	
	//printf("%i", c);
	printf("Hell");
    240c:	83 e4       	ldi	r24, 0x43	; 67
    240e:	90 e2       	ldi	r25, 0x20	; 32
    2410:	9f 93       	push	r25
    2412:	8f 93       	push	r24
    2414:	52 d5       	rcall	.+2724   	; 0x2eba <printf>
		//gpgga_buff[gpgga_index] = c;
		
	}
	
	
}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	0f 90       	pop	r0
    2434:	0b be       	out	0x3b, r0	; 59
    2436:	0f 90       	pop	r0
    2438:	09 be       	out	0x39, r0	; 57
    243a:	0f 90       	pop	r0
    243c:	08 be       	out	0x38, r0	; 56
    243e:	0f 90       	pop	r0
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	0f 90       	pop	r0
    2444:	1f 90       	pop	r1
    2446:	18 95       	reti

00002448 <main>:

int main (void)
{
	
	//uart_device*gps = NULL;
	board_init();
    2448:	55 df       	rcall	.-342    	; 0x22f4 <board_init>
	sysclk_init();
    244a:	0e 94 9a 07 	call	0xf34	; 0xf34 <sysclk_init>
	uart_terminal_init();
    244e:	6b df       	rcall	.-298    	; 0x2326 <uart_terminal_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2450:	e0 ea       	ldi	r30, 0xA0	; 160
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	87 e0       	ldi	r24, 0x07	; 7
    2456:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	80 68       	ori	r24, 0x80	; 128
    245c:	82 83       	std	Z+2, r24	; 0x02
	
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	cpu_irq_enable();
    245e:	78 94       	sei
	
	printf("y are u Gay?\n");
    2460:	88 e4       	ldi	r24, 0x48	; 72
    2462:	90 e2       	ldi	r25, 0x20	; 32
    2464:	3d d5       	rcall	.+2682   	; 0x2ee0 <puts>
	//printf(buff);
	/* Insert application code here, after the board has been initialized. */
	/* This skeleton code simply sets the LED to the state of the button. */
	//cont_serv1_init();
	//set_speed(continueous_servo1,0);
	PORTA.DIR|=0x08;
    2466:	e0 e0       	ldi	r30, 0x00	; 0
    2468:	f6 e0       	ldi	r31, 0x06	; 6
    246a:	80 81       	ld	r24, Z
    246c:	88 60       	ori	r24, 0x08	; 8
    246e:	80 83       	st	Z, r24
	while (1) {
		PORTA.OUT^=0x08;
    2470:	c0 e0       	ldi	r28, 0x00	; 0
    2472:	d6 e0       	ldi	r29, 0x06	; 6
    2474:	18 e0       	ldi	r17, 0x08	; 8
    2476:	8c 81       	ldd	r24, Y+4	; 0x04
    2478:	81 27       	eor	r24, r17
    247a:	8c 83       	std	Y+4, r24	; 0x04
		delay_ms(1);
    247c:	66 ed       	ldi	r22, 0xD6	; 214
    247e:	74 e1       	ldi	r23, 0x14	; 20
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e df       	rcall	.-196    	; 0x23c2 <__portable_avr_delay_cycles>
    2486:	f7 cf       	rjmp	.-18     	; 0x2476 <main+0x2e>

00002488 <vfprintf>:
    2488:	2f 92       	push	r2
    248a:	3f 92       	push	r3
    248c:	4f 92       	push	r4
    248e:	5f 92       	push	r5
    2490:	6f 92       	push	r6
    2492:	7f 92       	push	r7
    2494:	8f 92       	push	r8
    2496:	9f 92       	push	r9
    2498:	af 92       	push	r10
    249a:	bf 92       	push	r11
    249c:	cf 92       	push	r12
    249e:	df 92       	push	r13
    24a0:	ef 92       	push	r14
    24a2:	ff 92       	push	r15
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	60 97       	sbiw	r28, 0x10	; 16
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	7c 01       	movw	r14, r24
    24b8:	1b 01       	movw	r2, r22
    24ba:	6a 01       	movw	r12, r20
    24bc:	fc 01       	movw	r30, r24
    24be:	16 82       	std	Z+6, r1	; 0x06
    24c0:	17 82       	std	Z+7, r1	; 0x07
    24c2:	83 81       	ldd	r24, Z+3	; 0x03
    24c4:	81 ff       	sbrs	r24, 1
    24c6:	2a c3       	rjmp	.+1620   	; 0x2b1c <vfprintf+0x694>
    24c8:	9e 01       	movw	r18, r28
    24ca:	2f 5f       	subi	r18, 0xFF	; 255
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	39 01       	movw	r6, r18
    24d0:	f7 01       	movw	r30, r14
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	f1 01       	movw	r30, r2
    24d6:	93 fd       	sbrc	r25, 3
    24d8:	85 91       	lpm	r24, Z+
    24da:	93 ff       	sbrs	r25, 3
    24dc:	81 91       	ld	r24, Z+
    24de:	1f 01       	movw	r2, r30
    24e0:	88 23       	and	r24, r24
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <vfprintf+0x5e>
    24e4:	17 c3       	rjmp	.+1582   	; 0x2b14 <vfprintf+0x68c>
    24e6:	85 32       	cpi	r24, 0x25	; 37
    24e8:	39 f4       	brne	.+14     	; 0x24f8 <vfprintf+0x70>
    24ea:	93 fd       	sbrc	r25, 3
    24ec:	85 91       	lpm	r24, Z+
    24ee:	93 ff       	sbrs	r25, 3
    24f0:	81 91       	ld	r24, Z+
    24f2:	1f 01       	movw	r2, r30
    24f4:	85 32       	cpi	r24, 0x25	; 37
    24f6:	31 f4       	brne	.+12     	; 0x2504 <vfprintf+0x7c>
    24f8:	b7 01       	movw	r22, r14
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a2 d4       	rcall	.+2372   	; 0x2e42 <fputc>
    24fe:	56 01       	movw	r10, r12
    2500:	65 01       	movw	r12, r10
    2502:	e6 cf       	rjmp	.-52     	; 0x24d0 <vfprintf+0x48>
    2504:	10 e0       	ldi	r17, 0x00	; 0
    2506:	51 2c       	mov	r5, r1
    2508:	91 2c       	mov	r9, r1
    250a:	ff e1       	ldi	r31, 0x1F	; 31
    250c:	f9 15       	cp	r31, r9
    250e:	d8 f0       	brcs	.+54     	; 0x2546 <vfprintf+0xbe>
    2510:	8b 32       	cpi	r24, 0x2B	; 43
    2512:	79 f0       	breq	.+30     	; 0x2532 <vfprintf+0xaa>
    2514:	38 f4       	brcc	.+14     	; 0x2524 <vfprintf+0x9c>
    2516:	80 32       	cpi	r24, 0x20	; 32
    2518:	79 f0       	breq	.+30     	; 0x2538 <vfprintf+0xb0>
    251a:	83 32       	cpi	r24, 0x23	; 35
    251c:	a1 f4       	brne	.+40     	; 0x2546 <vfprintf+0xbe>
    251e:	f9 2d       	mov	r31, r9
    2520:	f0 61       	ori	r31, 0x10	; 16
    2522:	2e c0       	rjmp	.+92     	; 0x2580 <vfprintf+0xf8>
    2524:	8d 32       	cpi	r24, 0x2D	; 45
    2526:	61 f0       	breq	.+24     	; 0x2540 <vfprintf+0xb8>
    2528:	80 33       	cpi	r24, 0x30	; 48
    252a:	69 f4       	brne	.+26     	; 0x2546 <vfprintf+0xbe>
    252c:	29 2d       	mov	r18, r9
    252e:	21 60       	ori	r18, 0x01	; 1
    2530:	2d c0       	rjmp	.+90     	; 0x258c <vfprintf+0x104>
    2532:	39 2d       	mov	r19, r9
    2534:	32 60       	ori	r19, 0x02	; 2
    2536:	93 2e       	mov	r9, r19
    2538:	89 2d       	mov	r24, r9
    253a:	84 60       	ori	r24, 0x04	; 4
    253c:	98 2e       	mov	r9, r24
    253e:	2a c0       	rjmp	.+84     	; 0x2594 <vfprintf+0x10c>
    2540:	e9 2d       	mov	r30, r9
    2542:	e8 60       	ori	r30, 0x08	; 8
    2544:	15 c0       	rjmp	.+42     	; 0x2570 <vfprintf+0xe8>
    2546:	97 fc       	sbrc	r9, 7
    2548:	2d c0       	rjmp	.+90     	; 0x25a4 <vfprintf+0x11c>
    254a:	20 ed       	ldi	r18, 0xD0	; 208
    254c:	28 0f       	add	r18, r24
    254e:	2a 30       	cpi	r18, 0x0A	; 10
    2550:	88 f4       	brcc	.+34     	; 0x2574 <vfprintf+0xec>
    2552:	96 fe       	sbrs	r9, 6
    2554:	06 c0       	rjmp	.+12     	; 0x2562 <vfprintf+0xda>
    2556:	3a e0       	ldi	r19, 0x0A	; 10
    2558:	13 9f       	mul	r17, r19
    255a:	20 0d       	add	r18, r0
    255c:	11 24       	eor	r1, r1
    255e:	12 2f       	mov	r17, r18
    2560:	19 c0       	rjmp	.+50     	; 0x2594 <vfprintf+0x10c>
    2562:	8a e0       	ldi	r24, 0x0A	; 10
    2564:	58 9e       	mul	r5, r24
    2566:	20 0d       	add	r18, r0
    2568:	11 24       	eor	r1, r1
    256a:	52 2e       	mov	r5, r18
    256c:	e9 2d       	mov	r30, r9
    256e:	e0 62       	ori	r30, 0x20	; 32
    2570:	9e 2e       	mov	r9, r30
    2572:	10 c0       	rjmp	.+32     	; 0x2594 <vfprintf+0x10c>
    2574:	8e 32       	cpi	r24, 0x2E	; 46
    2576:	31 f4       	brne	.+12     	; 0x2584 <vfprintf+0xfc>
    2578:	96 fc       	sbrc	r9, 6
    257a:	cc c2       	rjmp	.+1432   	; 0x2b14 <vfprintf+0x68c>
    257c:	f9 2d       	mov	r31, r9
    257e:	f0 64       	ori	r31, 0x40	; 64
    2580:	9f 2e       	mov	r9, r31
    2582:	08 c0       	rjmp	.+16     	; 0x2594 <vfprintf+0x10c>
    2584:	8c 36       	cpi	r24, 0x6C	; 108
    2586:	21 f4       	brne	.+8      	; 0x2590 <vfprintf+0x108>
    2588:	29 2d       	mov	r18, r9
    258a:	20 68       	ori	r18, 0x80	; 128
    258c:	92 2e       	mov	r9, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <vfprintf+0x10c>
    2590:	88 36       	cpi	r24, 0x68	; 104
    2592:	41 f4       	brne	.+16     	; 0x25a4 <vfprintf+0x11c>
    2594:	f1 01       	movw	r30, r2
    2596:	93 fd       	sbrc	r25, 3
    2598:	85 91       	lpm	r24, Z+
    259a:	93 ff       	sbrs	r25, 3
    259c:	81 91       	ld	r24, Z+
    259e:	1f 01       	movw	r2, r30
    25a0:	81 11       	cpse	r24, r1
    25a2:	b3 cf       	rjmp	.-154    	; 0x250a <vfprintf+0x82>
    25a4:	9b eb       	ldi	r25, 0xBB	; 187
    25a6:	98 0f       	add	r25, r24
    25a8:	93 30       	cpi	r25, 0x03	; 3
    25aa:	20 f4       	brcc	.+8      	; 0x25b4 <vfprintf+0x12c>
    25ac:	99 2d       	mov	r25, r9
    25ae:	90 61       	ori	r25, 0x10	; 16
    25b0:	80 5e       	subi	r24, 0xE0	; 224
    25b2:	07 c0       	rjmp	.+14     	; 0x25c2 <vfprintf+0x13a>
    25b4:	9b e9       	ldi	r25, 0x9B	; 155
    25b6:	98 0f       	add	r25, r24
    25b8:	93 30       	cpi	r25, 0x03	; 3
    25ba:	08 f0       	brcs	.+2      	; 0x25be <vfprintf+0x136>
    25bc:	59 c1       	rjmp	.+690    	; 0x2870 <vfprintf+0x3e8>
    25be:	99 2d       	mov	r25, r9
    25c0:	9f 7e       	andi	r25, 0xEF	; 239
    25c2:	96 ff       	sbrs	r25, 6
    25c4:	16 e0       	ldi	r17, 0x06	; 6
    25c6:	9f 73       	andi	r25, 0x3F	; 63
    25c8:	99 2e       	mov	r9, r25
    25ca:	85 36       	cpi	r24, 0x65	; 101
    25cc:	19 f4       	brne	.+6      	; 0x25d4 <vfprintf+0x14c>
    25ce:	90 64       	ori	r25, 0x40	; 64
    25d0:	99 2e       	mov	r9, r25
    25d2:	08 c0       	rjmp	.+16     	; 0x25e4 <vfprintf+0x15c>
    25d4:	86 36       	cpi	r24, 0x66	; 102
    25d6:	21 f4       	brne	.+8      	; 0x25e0 <vfprintf+0x158>
    25d8:	39 2f       	mov	r19, r25
    25da:	30 68       	ori	r19, 0x80	; 128
    25dc:	93 2e       	mov	r9, r19
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <vfprintf+0x15c>
    25e0:	11 11       	cpse	r17, r1
    25e2:	11 50       	subi	r17, 0x01	; 1
    25e4:	97 fe       	sbrs	r9, 7
    25e6:	07 c0       	rjmp	.+14     	; 0x25f6 <vfprintf+0x16e>
    25e8:	1c 33       	cpi	r17, 0x3C	; 60
    25ea:	50 f4       	brcc	.+20     	; 0x2600 <vfprintf+0x178>
    25ec:	44 24       	eor	r4, r4
    25ee:	43 94       	inc	r4
    25f0:	41 0e       	add	r4, r17
    25f2:	27 e0       	ldi	r18, 0x07	; 7
    25f4:	0b c0       	rjmp	.+22     	; 0x260c <vfprintf+0x184>
    25f6:	18 30       	cpi	r17, 0x08	; 8
    25f8:	38 f0       	brcs	.+14     	; 0x2608 <vfprintf+0x180>
    25fa:	27 e0       	ldi	r18, 0x07	; 7
    25fc:	17 e0       	ldi	r17, 0x07	; 7
    25fe:	05 c0       	rjmp	.+10     	; 0x260a <vfprintf+0x182>
    2600:	27 e0       	ldi	r18, 0x07	; 7
    2602:	9c e3       	ldi	r25, 0x3C	; 60
    2604:	49 2e       	mov	r4, r25
    2606:	02 c0       	rjmp	.+4      	; 0x260c <vfprintf+0x184>
    2608:	21 2f       	mov	r18, r17
    260a:	41 2c       	mov	r4, r1
    260c:	56 01       	movw	r10, r12
    260e:	84 e0       	ldi	r24, 0x04	; 4
    2610:	a8 0e       	add	r10, r24
    2612:	b1 1c       	adc	r11, r1
    2614:	f6 01       	movw	r30, r12
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	04 2d       	mov	r16, r4
    2620:	a3 01       	movw	r20, r6
    2622:	d7 d2       	rcall	.+1454   	; 0x2bd2 <__ftoa_engine>
    2624:	6c 01       	movw	r12, r24
    2626:	f9 81       	ldd	r31, Y+1	; 0x01
    2628:	fc 87       	std	Y+12, r31	; 0x0c
    262a:	f0 ff       	sbrs	r31, 0
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <vfprintf+0x1aa>
    262e:	f3 ff       	sbrs	r31, 3
    2630:	06 c0       	rjmp	.+12     	; 0x263e <vfprintf+0x1b6>
    2632:	91 fc       	sbrc	r9, 1
    2634:	06 c0       	rjmp	.+12     	; 0x2642 <vfprintf+0x1ba>
    2636:	92 fe       	sbrs	r9, 2
    2638:	06 c0       	rjmp	.+12     	; 0x2646 <vfprintf+0x1be>
    263a:	00 e2       	ldi	r16, 0x20	; 32
    263c:	05 c0       	rjmp	.+10     	; 0x2648 <vfprintf+0x1c0>
    263e:	0d e2       	ldi	r16, 0x2D	; 45
    2640:	03 c0       	rjmp	.+6      	; 0x2648 <vfprintf+0x1c0>
    2642:	0b e2       	ldi	r16, 0x2B	; 43
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <vfprintf+0x1c0>
    2646:	00 e0       	ldi	r16, 0x00	; 0
    2648:	8c 85       	ldd	r24, Y+12	; 0x0c
    264a:	8c 70       	andi	r24, 0x0C	; 12
    264c:	19 f0       	breq	.+6      	; 0x2654 <vfprintf+0x1cc>
    264e:	01 11       	cpse	r16, r1
    2650:	43 c2       	rjmp	.+1158   	; 0x2ad8 <vfprintf+0x650>
    2652:	80 c2       	rjmp	.+1280   	; 0x2b54 <vfprintf+0x6cc>
    2654:	97 fe       	sbrs	r9, 7
    2656:	10 c0       	rjmp	.+32     	; 0x2678 <vfprintf+0x1f0>
    2658:	4c 0c       	add	r4, r12
    265a:	fc 85       	ldd	r31, Y+12	; 0x0c
    265c:	f4 ff       	sbrs	r31, 4
    265e:	04 c0       	rjmp	.+8      	; 0x2668 <vfprintf+0x1e0>
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	81 33       	cpi	r24, 0x31	; 49
    2664:	09 f4       	brne	.+2      	; 0x2668 <vfprintf+0x1e0>
    2666:	4a 94       	dec	r4
    2668:	14 14       	cp	r1, r4
    266a:	74 f5       	brge	.+92     	; 0x26c8 <vfprintf+0x240>
    266c:	28 e0       	ldi	r18, 0x08	; 8
    266e:	24 15       	cp	r18, r4
    2670:	78 f5       	brcc	.+94     	; 0x26d0 <vfprintf+0x248>
    2672:	88 e0       	ldi	r24, 0x08	; 8
    2674:	48 2e       	mov	r4, r24
    2676:	2c c0       	rjmp	.+88     	; 0x26d0 <vfprintf+0x248>
    2678:	96 fc       	sbrc	r9, 6
    267a:	2a c0       	rjmp	.+84     	; 0x26d0 <vfprintf+0x248>
    267c:	81 2f       	mov	r24, r17
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	8c 15       	cp	r24, r12
    2682:	9d 05       	cpc	r25, r13
    2684:	9c f0       	brlt	.+38     	; 0x26ac <vfprintf+0x224>
    2686:	3c ef       	ldi	r19, 0xFC	; 252
    2688:	c3 16       	cp	r12, r19
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	d3 06       	cpc	r13, r19
    268e:	74 f0       	brlt	.+28     	; 0x26ac <vfprintf+0x224>
    2690:	89 2d       	mov	r24, r9
    2692:	80 68       	ori	r24, 0x80	; 128
    2694:	98 2e       	mov	r9, r24
    2696:	0a c0       	rjmp	.+20     	; 0x26ac <vfprintf+0x224>
    2698:	e2 e0       	ldi	r30, 0x02	; 2
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	ec 0f       	add	r30, r28
    269e:	fd 1f       	adc	r31, r29
    26a0:	e1 0f       	add	r30, r17
    26a2:	f1 1d       	adc	r31, r1
    26a4:	80 81       	ld	r24, Z
    26a6:	80 33       	cpi	r24, 0x30	; 48
    26a8:	19 f4       	brne	.+6      	; 0x26b0 <vfprintf+0x228>
    26aa:	11 50       	subi	r17, 0x01	; 1
    26ac:	11 11       	cpse	r17, r1
    26ae:	f4 cf       	rjmp	.-24     	; 0x2698 <vfprintf+0x210>
    26b0:	97 fe       	sbrs	r9, 7
    26b2:	0e c0       	rjmp	.+28     	; 0x26d0 <vfprintf+0x248>
    26b4:	44 24       	eor	r4, r4
    26b6:	43 94       	inc	r4
    26b8:	41 0e       	add	r4, r17
    26ba:	81 2f       	mov	r24, r17
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	c8 16       	cp	r12, r24
    26c0:	d9 06       	cpc	r13, r25
    26c2:	2c f4       	brge	.+10     	; 0x26ce <vfprintf+0x246>
    26c4:	1c 19       	sub	r17, r12
    26c6:	04 c0       	rjmp	.+8      	; 0x26d0 <vfprintf+0x248>
    26c8:	44 24       	eor	r4, r4
    26ca:	43 94       	inc	r4
    26cc:	01 c0       	rjmp	.+2      	; 0x26d0 <vfprintf+0x248>
    26ce:	10 e0       	ldi	r17, 0x00	; 0
    26d0:	97 fe       	sbrs	r9, 7
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <vfprintf+0x258>
    26d4:	1c 14       	cp	r1, r12
    26d6:	1d 04       	cpc	r1, r13
    26d8:	34 f4       	brge	.+12     	; 0x26e6 <vfprintf+0x25e>
    26da:	c6 01       	movw	r24, r12
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	05 c0       	rjmp	.+10     	; 0x26ea <vfprintf+0x262>
    26e0:	85 e0       	ldi	r24, 0x05	; 5
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <vfprintf+0x262>
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	01 11       	cpse	r16, r1
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	11 23       	and	r17, r17
    26f0:	31 f0       	breq	.+12     	; 0x26fe <vfprintf+0x276>
    26f2:	21 2f       	mov	r18, r17
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	2f 5f       	subi	r18, 0xFF	; 255
    26f8:	3f 4f       	sbci	r19, 0xFF	; 255
    26fa:	82 0f       	add	r24, r18
    26fc:	93 1f       	adc	r25, r19
    26fe:	25 2d       	mov	r18, r5
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	82 17       	cp	r24, r18
    2704:	93 07       	cpc	r25, r19
    2706:	14 f4       	brge	.+4      	; 0x270c <vfprintf+0x284>
    2708:	58 1a       	sub	r5, r24
    270a:	01 c0       	rjmp	.+2      	; 0x270e <vfprintf+0x286>
    270c:	51 2c       	mov	r5, r1
    270e:	89 2d       	mov	r24, r9
    2710:	89 70       	andi	r24, 0x09	; 9
    2712:	41 f4       	brne	.+16     	; 0x2724 <vfprintf+0x29c>
    2714:	55 20       	and	r5, r5
    2716:	31 f0       	breq	.+12     	; 0x2724 <vfprintf+0x29c>
    2718:	b7 01       	movw	r22, r14
    271a:	80 e2       	ldi	r24, 0x20	; 32
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	91 d3       	rcall	.+1826   	; 0x2e42 <fputc>
    2720:	5a 94       	dec	r5
    2722:	f8 cf       	rjmp	.-16     	; 0x2714 <vfprintf+0x28c>
    2724:	00 23       	and	r16, r16
    2726:	21 f0       	breq	.+8      	; 0x2730 <vfprintf+0x2a8>
    2728:	b7 01       	movw	r22, r14
    272a:	80 2f       	mov	r24, r16
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	89 d3       	rcall	.+1810   	; 0x2e42 <fputc>
    2730:	93 fc       	sbrc	r9, 3
    2732:	08 c0       	rjmp	.+16     	; 0x2744 <vfprintf+0x2bc>
    2734:	55 20       	and	r5, r5
    2736:	31 f0       	breq	.+12     	; 0x2744 <vfprintf+0x2bc>
    2738:	b7 01       	movw	r22, r14
    273a:	80 e3       	ldi	r24, 0x30	; 48
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	81 d3       	rcall	.+1794   	; 0x2e42 <fputc>
    2740:	5a 94       	dec	r5
    2742:	f8 cf       	rjmp	.-16     	; 0x2734 <vfprintf+0x2ac>
    2744:	97 fe       	sbrs	r9, 7
    2746:	4a c0       	rjmp	.+148    	; 0x27dc <vfprintf+0x354>
    2748:	46 01       	movw	r8, r12
    274a:	d7 fe       	sbrs	r13, 7
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <vfprintf+0x2ca>
    274e:	81 2c       	mov	r8, r1
    2750:	91 2c       	mov	r9, r1
    2752:	c6 01       	movw	r24, r12
    2754:	88 19       	sub	r24, r8
    2756:	99 09       	sbc	r25, r9
    2758:	f3 01       	movw	r30, r6
    275a:	e8 0f       	add	r30, r24
    275c:	f9 1f       	adc	r31, r25
    275e:	ed 87       	std	Y+13, r30	; 0x0d
    2760:	fe 87       	std	Y+14, r31	; 0x0e
    2762:	96 01       	movw	r18, r12
    2764:	24 19       	sub	r18, r4
    2766:	31 09       	sbc	r19, r1
    2768:	2f 87       	std	Y+15, r18	; 0x0f
    276a:	38 8b       	std	Y+16, r19	; 0x10
    276c:	01 2f       	mov	r16, r17
    276e:	10 e0       	ldi	r17, 0x00	; 0
    2770:	11 95       	neg	r17
    2772:	01 95       	neg	r16
    2774:	11 09       	sbc	r17, r1
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	83 16       	cp	r8, r19
    277a:	93 06       	cpc	r9, r19
    277c:	21 f4       	brne	.+8      	; 0x2786 <vfprintf+0x2fe>
    277e:	b7 01       	movw	r22, r14
    2780:	8e e2       	ldi	r24, 0x2E	; 46
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	5e d3       	rcall	.+1724   	; 0x2e42 <fputc>
    2786:	c8 14       	cp	r12, r8
    2788:	d9 04       	cpc	r13, r9
    278a:	4c f0       	brlt	.+18     	; 0x279e <vfprintf+0x316>
    278c:	8f 85       	ldd	r24, Y+15	; 0x0f
    278e:	98 89       	ldd	r25, Y+16	; 0x10
    2790:	88 15       	cp	r24, r8
    2792:	99 05       	cpc	r25, r9
    2794:	24 f4       	brge	.+8      	; 0x279e <vfprintf+0x316>
    2796:	ed 85       	ldd	r30, Y+13	; 0x0d
    2798:	fe 85       	ldd	r31, Y+14	; 0x0e
    279a:	81 81       	ldd	r24, Z+1	; 0x01
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <vfprintf+0x318>
    279e:	80 e3       	ldi	r24, 0x30	; 48
    27a0:	f1 e0       	ldi	r31, 0x01	; 1
    27a2:	8f 1a       	sub	r8, r31
    27a4:	91 08       	sbc	r9, r1
    27a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    27a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    27aa:	2f 5f       	subi	r18, 0xFF	; 255
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	2d 87       	std	Y+13, r18	; 0x0d
    27b0:	3e 87       	std	Y+14, r19	; 0x0e
    27b2:	80 16       	cp	r8, r16
    27b4:	91 06       	cpc	r9, r17
    27b6:	24 f0       	brlt	.+8      	; 0x27c0 <vfprintf+0x338>
    27b8:	b7 01       	movw	r22, r14
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	42 d3       	rcall	.+1668   	; 0x2e42 <fputc>
    27be:	db cf       	rjmp	.-74     	; 0x2776 <vfprintf+0x2ee>
    27c0:	c8 14       	cp	r12, r8
    27c2:	d9 04       	cpc	r13, r9
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <vfprintf+0x34e>
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	96 33       	cpi	r25, 0x36	; 54
    27ca:	20 f4       	brcc	.+8      	; 0x27d4 <vfprintf+0x34c>
    27cc:	95 33       	cpi	r25, 0x35	; 53
    27ce:	19 f4       	brne	.+6      	; 0x27d6 <vfprintf+0x34e>
    27d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    27d2:	34 ff       	sbrs	r19, 4
    27d4:	81 e3       	ldi	r24, 0x31	; 49
    27d6:	b7 01       	movw	r22, r14
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	48 c0       	rjmp	.+144    	; 0x286c <vfprintf+0x3e4>
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	81 33       	cpi	r24, 0x31	; 49
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <vfprintf+0x360>
    27e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    27e4:	9f 7e       	andi	r25, 0xEF	; 239
    27e6:	9c 87       	std	Y+12, r25	; 0x0c
    27e8:	b7 01       	movw	r22, r14
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	2a d3       	rcall	.+1620   	; 0x2e42 <fputc>
    27ee:	11 11       	cpse	r17, r1
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <vfprintf+0x374>
    27f2:	94 fc       	sbrc	r9, 4
    27f4:	16 c0       	rjmp	.+44     	; 0x2822 <vfprintf+0x39a>
    27f6:	85 e6       	ldi	r24, 0x65	; 101
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	15 c0       	rjmp	.+42     	; 0x2826 <vfprintf+0x39e>
    27fc:	b7 01       	movw	r22, r14
    27fe:	8e e2       	ldi	r24, 0x2E	; 46
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	1f d3       	rcall	.+1598   	; 0x2e42 <fputc>
    2804:	1e 5f       	subi	r17, 0xFE	; 254
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	01 e0       	ldi	r16, 0x01	; 1
    280a:	08 0f       	add	r16, r24
    280c:	f3 01       	movw	r30, r6
    280e:	e8 0f       	add	r30, r24
    2810:	f1 1d       	adc	r31, r1
    2812:	80 81       	ld	r24, Z
    2814:	b7 01       	movw	r22, r14
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	14 d3       	rcall	.+1576   	; 0x2e42 <fputc>
    281a:	80 2f       	mov	r24, r16
    281c:	01 13       	cpse	r16, r17
    281e:	f4 cf       	rjmp	.-24     	; 0x2808 <vfprintf+0x380>
    2820:	e8 cf       	rjmp	.-48     	; 0x27f2 <vfprintf+0x36a>
    2822:	85 e4       	ldi	r24, 0x45	; 69
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	b7 01       	movw	r22, r14
    2828:	0c d3       	rcall	.+1560   	; 0x2e42 <fputc>
    282a:	d7 fc       	sbrc	r13, 7
    282c:	06 c0       	rjmp	.+12     	; 0x283a <vfprintf+0x3b2>
    282e:	c1 14       	cp	r12, r1
    2830:	d1 04       	cpc	r13, r1
    2832:	41 f4       	brne	.+16     	; 0x2844 <vfprintf+0x3bc>
    2834:	ec 85       	ldd	r30, Y+12	; 0x0c
    2836:	e4 ff       	sbrs	r30, 4
    2838:	05 c0       	rjmp	.+10     	; 0x2844 <vfprintf+0x3bc>
    283a:	d1 94       	neg	r13
    283c:	c1 94       	neg	r12
    283e:	d1 08       	sbc	r13, r1
    2840:	8d e2       	ldi	r24, 0x2D	; 45
    2842:	01 c0       	rjmp	.+2      	; 0x2846 <vfprintf+0x3be>
    2844:	8b e2       	ldi	r24, 0x2B	; 43
    2846:	b7 01       	movw	r22, r14
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	fb d2       	rcall	.+1526   	; 0x2e42 <fputc>
    284c:	80 e3       	ldi	r24, 0x30	; 48
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	c2 16       	cp	r12, r18
    2852:	d1 04       	cpc	r13, r1
    2854:	2c f0       	brlt	.+10     	; 0x2860 <vfprintf+0x3d8>
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	fa e0       	ldi	r31, 0x0A	; 10
    285a:	cf 1a       	sub	r12, r31
    285c:	d1 08       	sbc	r13, r1
    285e:	f7 cf       	rjmp	.-18     	; 0x284e <vfprintf+0x3c6>
    2860:	b7 01       	movw	r22, r14
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	ee d2       	rcall	.+1500   	; 0x2e42 <fputc>
    2866:	b7 01       	movw	r22, r14
    2868:	c6 01       	movw	r24, r12
    286a:	c0 96       	adiw	r24, 0x30	; 48
    286c:	ea d2       	rcall	.+1492   	; 0x2e42 <fputc>
    286e:	49 c1       	rjmp	.+658    	; 0x2b02 <vfprintf+0x67a>
    2870:	83 36       	cpi	r24, 0x63	; 99
    2872:	31 f0       	breq	.+12     	; 0x2880 <vfprintf+0x3f8>
    2874:	83 37       	cpi	r24, 0x73	; 115
    2876:	79 f0       	breq	.+30     	; 0x2896 <vfprintf+0x40e>
    2878:	83 35       	cpi	r24, 0x53	; 83
    287a:	09 f0       	breq	.+2      	; 0x287e <vfprintf+0x3f6>
    287c:	52 c0       	rjmp	.+164    	; 0x2922 <vfprintf+0x49a>
    287e:	1f c0       	rjmp	.+62     	; 0x28be <vfprintf+0x436>
    2880:	56 01       	movw	r10, r12
    2882:	32 e0       	ldi	r19, 0x02	; 2
    2884:	a3 0e       	add	r10, r19
    2886:	b1 1c       	adc	r11, r1
    2888:	f6 01       	movw	r30, r12
    288a:	80 81       	ld	r24, Z
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	01 e0       	ldi	r16, 0x01	; 1
    2890:	10 e0       	ldi	r17, 0x00	; 0
    2892:	63 01       	movw	r12, r6
    2894:	11 c0       	rjmp	.+34     	; 0x28b8 <vfprintf+0x430>
    2896:	56 01       	movw	r10, r12
    2898:	f2 e0       	ldi	r31, 0x02	; 2
    289a:	af 0e       	add	r10, r31
    289c:	b1 1c       	adc	r11, r1
    289e:	f6 01       	movw	r30, r12
    28a0:	c0 80       	ld	r12, Z
    28a2:	d1 80       	ldd	r13, Z+1	; 0x01
    28a4:	96 fe       	sbrs	r9, 6
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <vfprintf+0x426>
    28a8:	61 2f       	mov	r22, r17
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <vfprintf+0x42a>
    28ae:	6f ef       	ldi	r22, 0xFF	; 255
    28b0:	7f ef       	ldi	r23, 0xFF	; 255
    28b2:	c6 01       	movw	r24, r12
    28b4:	71 d2       	rcall	.+1250   	; 0x2d98 <strnlen>
    28b6:	8c 01       	movw	r16, r24
    28b8:	f9 2d       	mov	r31, r9
    28ba:	ff 77       	andi	r31, 0x7F	; 127
    28bc:	13 c0       	rjmp	.+38     	; 0x28e4 <vfprintf+0x45c>
    28be:	56 01       	movw	r10, r12
    28c0:	22 e0       	ldi	r18, 0x02	; 2
    28c2:	a2 0e       	add	r10, r18
    28c4:	b1 1c       	adc	r11, r1
    28c6:	f6 01       	movw	r30, r12
    28c8:	c0 80       	ld	r12, Z
    28ca:	d1 80       	ldd	r13, Z+1	; 0x01
    28cc:	96 fe       	sbrs	r9, 6
    28ce:	03 c0       	rjmp	.+6      	; 0x28d6 <vfprintf+0x44e>
    28d0:	61 2f       	mov	r22, r17
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <vfprintf+0x452>
    28d6:	6f ef       	ldi	r22, 0xFF	; 255
    28d8:	7f ef       	ldi	r23, 0xFF	; 255
    28da:	c6 01       	movw	r24, r12
    28dc:	52 d2       	rcall	.+1188   	; 0x2d82 <strnlen_P>
    28de:	8c 01       	movw	r16, r24
    28e0:	f9 2d       	mov	r31, r9
    28e2:	f0 68       	ori	r31, 0x80	; 128
    28e4:	9f 2e       	mov	r9, r31
    28e6:	f3 fd       	sbrc	r31, 3
    28e8:	18 c0       	rjmp	.+48     	; 0x291a <vfprintf+0x492>
    28ea:	85 2d       	mov	r24, r5
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	08 17       	cp	r16, r24
    28f0:	19 07       	cpc	r17, r25
    28f2:	98 f4       	brcc	.+38     	; 0x291a <vfprintf+0x492>
    28f4:	b7 01       	movw	r22, r14
    28f6:	80 e2       	ldi	r24, 0x20	; 32
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a3 d2       	rcall	.+1350   	; 0x2e42 <fputc>
    28fc:	5a 94       	dec	r5
    28fe:	f5 cf       	rjmp	.-22     	; 0x28ea <vfprintf+0x462>
    2900:	f6 01       	movw	r30, r12
    2902:	97 fc       	sbrc	r9, 7
    2904:	85 91       	lpm	r24, Z+
    2906:	97 fe       	sbrs	r9, 7
    2908:	81 91       	ld	r24, Z+
    290a:	6f 01       	movw	r12, r30
    290c:	b7 01       	movw	r22, r14
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	98 d2       	rcall	.+1328   	; 0x2e42 <fputc>
    2912:	51 10       	cpse	r5, r1
    2914:	5a 94       	dec	r5
    2916:	01 50       	subi	r16, 0x01	; 1
    2918:	11 09       	sbc	r17, r1
    291a:	01 15       	cp	r16, r1
    291c:	11 05       	cpc	r17, r1
    291e:	81 f7       	brne	.-32     	; 0x2900 <vfprintf+0x478>
    2920:	f0 c0       	rjmp	.+480    	; 0x2b02 <vfprintf+0x67a>
    2922:	84 36       	cpi	r24, 0x64	; 100
    2924:	11 f0       	breq	.+4      	; 0x292a <vfprintf+0x4a2>
    2926:	89 36       	cpi	r24, 0x69	; 105
    2928:	59 f5       	brne	.+86     	; 0x2980 <vfprintf+0x4f8>
    292a:	56 01       	movw	r10, r12
    292c:	97 fe       	sbrs	r9, 7
    292e:	09 c0       	rjmp	.+18     	; 0x2942 <vfprintf+0x4ba>
    2930:	24 e0       	ldi	r18, 0x04	; 4
    2932:	a2 0e       	add	r10, r18
    2934:	b1 1c       	adc	r11, r1
    2936:	f6 01       	movw	r30, r12
    2938:	60 81       	ld	r22, Z
    293a:	71 81       	ldd	r23, Z+1	; 0x01
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	93 81       	ldd	r25, Z+3	; 0x03
    2940:	0a c0       	rjmp	.+20     	; 0x2956 <vfprintf+0x4ce>
    2942:	f2 e0       	ldi	r31, 0x02	; 2
    2944:	af 0e       	add	r10, r31
    2946:	b1 1c       	adc	r11, r1
    2948:	f6 01       	movw	r30, r12
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	07 2e       	mov	r0, r23
    2950:	00 0c       	add	r0, r0
    2952:	88 0b       	sbc	r24, r24
    2954:	99 0b       	sbc	r25, r25
    2956:	f9 2d       	mov	r31, r9
    2958:	ff 76       	andi	r31, 0x6F	; 111
    295a:	9f 2e       	mov	r9, r31
    295c:	97 ff       	sbrs	r25, 7
    295e:	09 c0       	rjmp	.+18     	; 0x2972 <vfprintf+0x4ea>
    2960:	90 95       	com	r25
    2962:	80 95       	com	r24
    2964:	70 95       	com	r23
    2966:	61 95       	neg	r22
    2968:	7f 4f       	sbci	r23, 0xFF	; 255
    296a:	8f 4f       	sbci	r24, 0xFF	; 255
    296c:	9f 4f       	sbci	r25, 0xFF	; 255
    296e:	f0 68       	ori	r31, 0x80	; 128
    2970:	9f 2e       	mov	r9, r31
    2972:	2a e0       	ldi	r18, 0x0A	; 10
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	a3 01       	movw	r20, r6
    2978:	e3 d2       	rcall	.+1478   	; 0x2f40 <__ultoa_invert>
    297a:	c8 2e       	mov	r12, r24
    297c:	c6 18       	sub	r12, r6
    297e:	3e c0       	rjmp	.+124    	; 0x29fc <vfprintf+0x574>
    2980:	09 2d       	mov	r16, r9
    2982:	85 37       	cpi	r24, 0x75	; 117
    2984:	21 f4       	brne	.+8      	; 0x298e <vfprintf+0x506>
    2986:	0f 7e       	andi	r16, 0xEF	; 239
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	1d c0       	rjmp	.+58     	; 0x29c8 <vfprintf+0x540>
    298e:	09 7f       	andi	r16, 0xF9	; 249
    2990:	8f 36       	cpi	r24, 0x6F	; 111
    2992:	91 f0       	breq	.+36     	; 0x29b8 <vfprintf+0x530>
    2994:	18 f4       	brcc	.+6      	; 0x299c <vfprintf+0x514>
    2996:	88 35       	cpi	r24, 0x58	; 88
    2998:	59 f0       	breq	.+22     	; 0x29b0 <vfprintf+0x528>
    299a:	bc c0       	rjmp	.+376    	; 0x2b14 <vfprintf+0x68c>
    299c:	80 37       	cpi	r24, 0x70	; 112
    299e:	19 f0       	breq	.+6      	; 0x29a6 <vfprintf+0x51e>
    29a0:	88 37       	cpi	r24, 0x78	; 120
    29a2:	11 f0       	breq	.+4      	; 0x29a8 <vfprintf+0x520>
    29a4:	b7 c0       	rjmp	.+366    	; 0x2b14 <vfprintf+0x68c>
    29a6:	00 61       	ori	r16, 0x10	; 16
    29a8:	04 ff       	sbrs	r16, 4
    29aa:	09 c0       	rjmp	.+18     	; 0x29be <vfprintf+0x536>
    29ac:	04 60       	ori	r16, 0x04	; 4
    29ae:	07 c0       	rjmp	.+14     	; 0x29be <vfprintf+0x536>
    29b0:	94 fe       	sbrs	r9, 4
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <vfprintf+0x53c>
    29b4:	06 60       	ori	r16, 0x06	; 6
    29b6:	06 c0       	rjmp	.+12     	; 0x29c4 <vfprintf+0x53c>
    29b8:	28 e0       	ldi	r18, 0x08	; 8
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	05 c0       	rjmp	.+10     	; 0x29c8 <vfprintf+0x540>
    29be:	20 e1       	ldi	r18, 0x10	; 16
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <vfprintf+0x540>
    29c4:	20 e1       	ldi	r18, 0x10	; 16
    29c6:	32 e0       	ldi	r19, 0x02	; 2
    29c8:	56 01       	movw	r10, r12
    29ca:	07 ff       	sbrs	r16, 7
    29cc:	09 c0       	rjmp	.+18     	; 0x29e0 <vfprintf+0x558>
    29ce:	84 e0       	ldi	r24, 0x04	; 4
    29d0:	a8 0e       	add	r10, r24
    29d2:	b1 1c       	adc	r11, r1
    29d4:	f6 01       	movw	r30, r12
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <vfprintf+0x568>
    29e0:	f2 e0       	ldi	r31, 0x02	; 2
    29e2:	af 0e       	add	r10, r31
    29e4:	b1 1c       	adc	r11, r1
    29e6:	f6 01       	movw	r30, r12
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a3 01       	movw	r20, r6
    29f2:	a6 d2       	rcall	.+1356   	; 0x2f40 <__ultoa_invert>
    29f4:	c8 2e       	mov	r12, r24
    29f6:	c6 18       	sub	r12, r6
    29f8:	0f 77       	andi	r16, 0x7F	; 127
    29fa:	90 2e       	mov	r9, r16
    29fc:	96 fe       	sbrs	r9, 6
    29fe:	0b c0       	rjmp	.+22     	; 0x2a16 <vfprintf+0x58e>
    2a00:	09 2d       	mov	r16, r9
    2a02:	0e 7f       	andi	r16, 0xFE	; 254
    2a04:	c1 16       	cp	r12, r17
    2a06:	50 f4       	brcc	.+20     	; 0x2a1c <vfprintf+0x594>
    2a08:	94 fe       	sbrs	r9, 4
    2a0a:	0a c0       	rjmp	.+20     	; 0x2a20 <vfprintf+0x598>
    2a0c:	92 fc       	sbrc	r9, 2
    2a0e:	08 c0       	rjmp	.+16     	; 0x2a20 <vfprintf+0x598>
    2a10:	09 2d       	mov	r16, r9
    2a12:	0e 7e       	andi	r16, 0xEE	; 238
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <vfprintf+0x598>
    2a16:	dc 2c       	mov	r13, r12
    2a18:	09 2d       	mov	r16, r9
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <vfprintf+0x59a>
    2a1c:	dc 2c       	mov	r13, r12
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <vfprintf+0x59a>
    2a20:	d1 2e       	mov	r13, r17
    2a22:	04 ff       	sbrs	r16, 4
    2a24:	0d c0       	rjmp	.+26     	; 0x2a40 <vfprintf+0x5b8>
    2a26:	fe 01       	movw	r30, r28
    2a28:	ec 0d       	add	r30, r12
    2a2a:	f1 1d       	adc	r31, r1
    2a2c:	80 81       	ld	r24, Z
    2a2e:	80 33       	cpi	r24, 0x30	; 48
    2a30:	11 f4       	brne	.+4      	; 0x2a36 <vfprintf+0x5ae>
    2a32:	09 7e       	andi	r16, 0xE9	; 233
    2a34:	09 c0       	rjmp	.+18     	; 0x2a48 <vfprintf+0x5c0>
    2a36:	02 ff       	sbrs	r16, 2
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <vfprintf+0x5be>
    2a3a:	d3 94       	inc	r13
    2a3c:	d3 94       	inc	r13
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <vfprintf+0x5c0>
    2a40:	80 2f       	mov	r24, r16
    2a42:	86 78       	andi	r24, 0x86	; 134
    2a44:	09 f0       	breq	.+2      	; 0x2a48 <vfprintf+0x5c0>
    2a46:	d3 94       	inc	r13
    2a48:	03 fd       	sbrc	r16, 3
    2a4a:	10 c0       	rjmp	.+32     	; 0x2a6c <vfprintf+0x5e4>
    2a4c:	00 ff       	sbrs	r16, 0
    2a4e:	06 c0       	rjmp	.+12     	; 0x2a5c <vfprintf+0x5d4>
    2a50:	1c 2d       	mov	r17, r12
    2a52:	d5 14       	cp	r13, r5
    2a54:	78 f4       	brcc	.+30     	; 0x2a74 <vfprintf+0x5ec>
    2a56:	15 0d       	add	r17, r5
    2a58:	1d 19       	sub	r17, r13
    2a5a:	0c c0       	rjmp	.+24     	; 0x2a74 <vfprintf+0x5ec>
    2a5c:	d5 14       	cp	r13, r5
    2a5e:	50 f4       	brcc	.+20     	; 0x2a74 <vfprintf+0x5ec>
    2a60:	b7 01       	movw	r22, r14
    2a62:	80 e2       	ldi	r24, 0x20	; 32
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	ed d1       	rcall	.+986    	; 0x2e42 <fputc>
    2a68:	d3 94       	inc	r13
    2a6a:	f8 cf       	rjmp	.-16     	; 0x2a5c <vfprintf+0x5d4>
    2a6c:	d5 14       	cp	r13, r5
    2a6e:	10 f4       	brcc	.+4      	; 0x2a74 <vfprintf+0x5ec>
    2a70:	5d 18       	sub	r5, r13
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <vfprintf+0x5ee>
    2a74:	51 2c       	mov	r5, r1
    2a76:	04 ff       	sbrs	r16, 4
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <vfprintf+0x610>
    2a7a:	b7 01       	movw	r22, r14
    2a7c:	80 e3       	ldi	r24, 0x30	; 48
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	e0 d1       	rcall	.+960    	; 0x2e42 <fputc>
    2a82:	02 ff       	sbrs	r16, 2
    2a84:	16 c0       	rjmp	.+44     	; 0x2ab2 <vfprintf+0x62a>
    2a86:	01 fd       	sbrc	r16, 1
    2a88:	03 c0       	rjmp	.+6      	; 0x2a90 <vfprintf+0x608>
    2a8a:	88 e7       	ldi	r24, 0x78	; 120
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <vfprintf+0x60c>
    2a90:	88 e5       	ldi	r24, 0x58	; 88
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	b7 01       	movw	r22, r14
    2a96:	0c c0       	rjmp	.+24     	; 0x2ab0 <vfprintf+0x628>
    2a98:	80 2f       	mov	r24, r16
    2a9a:	86 78       	andi	r24, 0x86	; 134
    2a9c:	51 f0       	breq	.+20     	; 0x2ab2 <vfprintf+0x62a>
    2a9e:	01 ff       	sbrs	r16, 1
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <vfprintf+0x61e>
    2aa2:	8b e2       	ldi	r24, 0x2B	; 43
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <vfprintf+0x620>
    2aa6:	80 e2       	ldi	r24, 0x20	; 32
    2aa8:	07 fd       	sbrc	r16, 7
    2aaa:	8d e2       	ldi	r24, 0x2D	; 45
    2aac:	b7 01       	movw	r22, r14
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	c8 d1       	rcall	.+912    	; 0x2e42 <fputc>
    2ab2:	c1 16       	cp	r12, r17
    2ab4:	30 f4       	brcc	.+12     	; 0x2ac2 <vfprintf+0x63a>
    2ab6:	b7 01       	movw	r22, r14
    2ab8:	80 e3       	ldi	r24, 0x30	; 48
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	c2 d1       	rcall	.+900    	; 0x2e42 <fputc>
    2abe:	11 50       	subi	r17, 0x01	; 1
    2ac0:	f8 cf       	rjmp	.-16     	; 0x2ab2 <vfprintf+0x62a>
    2ac2:	ca 94       	dec	r12
    2ac4:	f3 01       	movw	r30, r6
    2ac6:	ec 0d       	add	r30, r12
    2ac8:	f1 1d       	adc	r31, r1
    2aca:	80 81       	ld	r24, Z
    2acc:	b7 01       	movw	r22, r14
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	b8 d1       	rcall	.+880    	; 0x2e42 <fputc>
    2ad2:	c1 10       	cpse	r12, r1
    2ad4:	f6 cf       	rjmp	.-20     	; 0x2ac2 <vfprintf+0x63a>
    2ad6:	15 c0       	rjmp	.+42     	; 0x2b02 <vfprintf+0x67a>
    2ad8:	f4 e0       	ldi	r31, 0x04	; 4
    2ada:	f5 15       	cp	r31, r5
    2adc:	50 f5       	brcc	.+84     	; 0x2b32 <vfprintf+0x6aa>
    2ade:	84 e0       	ldi	r24, 0x04	; 4
    2ae0:	58 1a       	sub	r5, r24
    2ae2:	93 fe       	sbrs	r9, 3
    2ae4:	1e c0       	rjmp	.+60     	; 0x2b22 <vfprintf+0x69a>
    2ae6:	01 11       	cpse	r16, r1
    2ae8:	25 c0       	rjmp	.+74     	; 0x2b34 <vfprintf+0x6ac>
    2aea:	2c 85       	ldd	r18, Y+12	; 0x0c
    2aec:	23 ff       	sbrs	r18, 3
    2aee:	27 c0       	rjmp	.+78     	; 0x2b3e <vfprintf+0x6b6>
    2af0:	0c ef       	ldi	r16, 0xFC	; 252
    2af2:	11 e0       	ldi	r17, 0x01	; 1
    2af4:	39 2d       	mov	r19, r9
    2af6:	30 71       	andi	r19, 0x10	; 16
    2af8:	93 2e       	mov	r9, r19
    2afa:	f8 01       	movw	r30, r16
    2afc:	84 91       	lpm	r24, Z
    2afe:	81 11       	cpse	r24, r1
    2b00:	21 c0       	rjmp	.+66     	; 0x2b44 <vfprintf+0x6bc>
    2b02:	55 20       	and	r5, r5
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <vfprintf+0x680>
    2b06:	fc cc       	rjmp	.-1544   	; 0x2500 <vfprintf+0x78>
    2b08:	b7 01       	movw	r22, r14
    2b0a:	80 e2       	ldi	r24, 0x20	; 32
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	99 d1       	rcall	.+818    	; 0x2e42 <fputc>
    2b10:	5a 94       	dec	r5
    2b12:	f7 cf       	rjmp	.-18     	; 0x2b02 <vfprintf+0x67a>
    2b14:	f7 01       	movw	r30, r14
    2b16:	86 81       	ldd	r24, Z+6	; 0x06
    2b18:	97 81       	ldd	r25, Z+7	; 0x07
    2b1a:	23 c0       	rjmp	.+70     	; 0x2b62 <vfprintf+0x6da>
    2b1c:	8f ef       	ldi	r24, 0xFF	; 255
    2b1e:	9f ef       	ldi	r25, 0xFF	; 255
    2b20:	20 c0       	rjmp	.+64     	; 0x2b62 <vfprintf+0x6da>
    2b22:	b7 01       	movw	r22, r14
    2b24:	80 e2       	ldi	r24, 0x20	; 32
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	8c d1       	rcall	.+792    	; 0x2e42 <fputc>
    2b2a:	5a 94       	dec	r5
    2b2c:	51 10       	cpse	r5, r1
    2b2e:	f9 cf       	rjmp	.-14     	; 0x2b22 <vfprintf+0x69a>
    2b30:	da cf       	rjmp	.-76     	; 0x2ae6 <vfprintf+0x65e>
    2b32:	51 2c       	mov	r5, r1
    2b34:	b7 01       	movw	r22, r14
    2b36:	80 2f       	mov	r24, r16
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	83 d1       	rcall	.+774    	; 0x2e42 <fputc>
    2b3c:	d6 cf       	rjmp	.-84     	; 0x2aea <vfprintf+0x662>
    2b3e:	00 e0       	ldi	r16, 0x00	; 0
    2b40:	12 e0       	ldi	r17, 0x02	; 2
    2b42:	d8 cf       	rjmp	.-80     	; 0x2af4 <vfprintf+0x66c>
    2b44:	91 10       	cpse	r9, r1
    2b46:	80 52       	subi	r24, 0x20	; 32
    2b48:	b7 01       	movw	r22, r14
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	7a d1       	rcall	.+756    	; 0x2e42 <fputc>
    2b4e:	0f 5f       	subi	r16, 0xFF	; 255
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	d3 cf       	rjmp	.-90     	; 0x2afa <vfprintf+0x672>
    2b54:	23 e0       	ldi	r18, 0x03	; 3
    2b56:	25 15       	cp	r18, r5
    2b58:	10 f4       	brcc	.+4      	; 0x2b5e <vfprintf+0x6d6>
    2b5a:	83 e0       	ldi	r24, 0x03	; 3
    2b5c:	c1 cf       	rjmp	.-126    	; 0x2ae0 <vfprintf+0x658>
    2b5e:	51 2c       	mov	r5, r1
    2b60:	c4 cf       	rjmp	.-120    	; 0x2aea <vfprintf+0x662>
    2b62:	60 96       	adiw	r28, 0x10	; 16
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	0f 91       	pop	r16
    2b70:	ff 90       	pop	r15
    2b72:	ef 90       	pop	r14
    2b74:	df 90       	pop	r13
    2b76:	cf 90       	pop	r12
    2b78:	bf 90       	pop	r11
    2b7a:	af 90       	pop	r10
    2b7c:	9f 90       	pop	r9
    2b7e:	8f 90       	pop	r8
    2b80:	7f 90       	pop	r7
    2b82:	6f 90       	pop	r6
    2b84:	5f 90       	pop	r5
    2b86:	4f 90       	pop	r4
    2b88:	3f 90       	pop	r3
    2b8a:	2f 90       	pop	r2
    2b8c:	08 95       	ret

00002b8e <__udivmodsi4>:
    2b8e:	a1 e2       	ldi	r26, 0x21	; 33
    2b90:	1a 2e       	mov	r1, r26
    2b92:	aa 1b       	sub	r26, r26
    2b94:	bb 1b       	sub	r27, r27
    2b96:	fd 01       	movw	r30, r26
    2b98:	0d c0       	rjmp	.+26     	; 0x2bb4 <__udivmodsi4_ep>

00002b9a <__udivmodsi4_loop>:
    2b9a:	aa 1f       	adc	r26, r26
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	ee 1f       	adc	r30, r30
    2ba0:	ff 1f       	adc	r31, r31
    2ba2:	a2 17       	cp	r26, r18
    2ba4:	b3 07       	cpc	r27, r19
    2ba6:	e4 07       	cpc	r30, r20
    2ba8:	f5 07       	cpc	r31, r21
    2baa:	20 f0       	brcs	.+8      	; 0x2bb4 <__udivmodsi4_ep>
    2bac:	a2 1b       	sub	r26, r18
    2bae:	b3 0b       	sbc	r27, r19
    2bb0:	e4 0b       	sbc	r30, r20
    2bb2:	f5 0b       	sbc	r31, r21

00002bb4 <__udivmodsi4_ep>:
    2bb4:	66 1f       	adc	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 1f       	adc	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	1a 94       	dec	r1
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <__udivmodsi4_loop>
    2bc0:	60 95       	com	r22
    2bc2:	70 95       	com	r23
    2bc4:	80 95       	com	r24
    2bc6:	90 95       	com	r25
    2bc8:	9b 01       	movw	r18, r22
    2bca:	ac 01       	movw	r20, r24
    2bcc:	bd 01       	movw	r22, r26
    2bce:	cf 01       	movw	r24, r30
    2bd0:	08 95       	ret

00002bd2 <__ftoa_engine>:
    2bd2:	28 30       	cpi	r18, 0x08	; 8
    2bd4:	08 f0       	brcs	.+2      	; 0x2bd8 <__ftoa_engine+0x6>
    2bd6:	27 e0       	ldi	r18, 0x07	; 7
    2bd8:	33 27       	eor	r19, r19
    2bda:	da 01       	movw	r26, r20
    2bdc:	99 0f       	add	r25, r25
    2bde:	31 1d       	adc	r19, r1
    2be0:	87 fd       	sbrc	r24, 7
    2be2:	91 60       	ori	r25, 0x01	; 1
    2be4:	00 96       	adiw	r24, 0x00	; 0
    2be6:	61 05       	cpc	r22, r1
    2be8:	71 05       	cpc	r23, r1
    2bea:	39 f4       	brne	.+14     	; 0x2bfa <__ftoa_engine+0x28>
    2bec:	32 60       	ori	r19, 0x02	; 2
    2bee:	2e 5f       	subi	r18, 0xFE	; 254
    2bf0:	3d 93       	st	X+, r19
    2bf2:	30 e3       	ldi	r19, 0x30	; 48
    2bf4:	2a 95       	dec	r18
    2bf6:	e1 f7       	brne	.-8      	; 0x2bf0 <__ftoa_engine+0x1e>
    2bf8:	08 95       	ret
    2bfa:	9f 3f       	cpi	r25, 0xFF	; 255
    2bfc:	30 f0       	brcs	.+12     	; 0x2c0a <__ftoa_engine+0x38>
    2bfe:	80 38       	cpi	r24, 0x80	; 128
    2c00:	71 05       	cpc	r23, r1
    2c02:	61 05       	cpc	r22, r1
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <__ftoa_engine+0x36>
    2c06:	3c 5f       	subi	r19, 0xFC	; 252
    2c08:	3c 5f       	subi	r19, 0xFC	; 252
    2c0a:	3d 93       	st	X+, r19
    2c0c:	91 30       	cpi	r25, 0x01	; 1
    2c0e:	08 f0       	brcs	.+2      	; 0x2c12 <__ftoa_engine+0x40>
    2c10:	80 68       	ori	r24, 0x80	; 128
    2c12:	91 1d       	adc	r25, r1
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	1f 93       	push	r17
    2c1a:	0f 93       	push	r16
    2c1c:	ff 92       	push	r15
    2c1e:	ef 92       	push	r14
    2c20:	19 2f       	mov	r17, r25
    2c22:	98 7f       	andi	r25, 0xF8	; 248
    2c24:	96 95       	lsr	r25
    2c26:	e9 2f       	mov	r30, r25
    2c28:	96 95       	lsr	r25
    2c2a:	96 95       	lsr	r25
    2c2c:	e9 0f       	add	r30, r25
    2c2e:	ff 27       	eor	r31, r31
    2c30:	e2 5a       	subi	r30, 0xA2	; 162
    2c32:	fd 4f       	sbci	r31, 0xFD	; 253
    2c34:	99 27       	eor	r25, r25
    2c36:	33 27       	eor	r19, r19
    2c38:	ee 24       	eor	r14, r14
    2c3a:	ff 24       	eor	r15, r15
    2c3c:	a7 01       	movw	r20, r14
    2c3e:	e7 01       	movw	r28, r14
    2c40:	05 90       	lpm	r0, Z+
    2c42:	08 94       	sec
    2c44:	07 94       	ror	r0
    2c46:	28 f4       	brcc	.+10     	; 0x2c52 <__ftoa_engine+0x80>
    2c48:	36 0f       	add	r19, r22
    2c4a:	e7 1e       	adc	r14, r23
    2c4c:	f8 1e       	adc	r15, r24
    2c4e:	49 1f       	adc	r20, r25
    2c50:	51 1d       	adc	r21, r1
    2c52:	66 0f       	add	r22, r22
    2c54:	77 1f       	adc	r23, r23
    2c56:	88 1f       	adc	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	06 94       	lsr	r0
    2c5c:	a1 f7       	brne	.-24     	; 0x2c46 <__ftoa_engine+0x74>
    2c5e:	05 90       	lpm	r0, Z+
    2c60:	07 94       	ror	r0
    2c62:	28 f4       	brcc	.+10     	; 0x2c6e <__ftoa_engine+0x9c>
    2c64:	e7 0e       	add	r14, r23
    2c66:	f8 1e       	adc	r15, r24
    2c68:	49 1f       	adc	r20, r25
    2c6a:	56 1f       	adc	r21, r22
    2c6c:	c1 1d       	adc	r28, r1
    2c6e:	77 0f       	add	r23, r23
    2c70:	88 1f       	adc	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	66 1f       	adc	r22, r22
    2c76:	06 94       	lsr	r0
    2c78:	a1 f7       	brne	.-24     	; 0x2c62 <__ftoa_engine+0x90>
    2c7a:	05 90       	lpm	r0, Z+
    2c7c:	07 94       	ror	r0
    2c7e:	28 f4       	brcc	.+10     	; 0x2c8a <__ftoa_engine+0xb8>
    2c80:	f8 0e       	add	r15, r24
    2c82:	49 1f       	adc	r20, r25
    2c84:	56 1f       	adc	r21, r22
    2c86:	c7 1f       	adc	r28, r23
    2c88:	d1 1d       	adc	r29, r1
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	66 1f       	adc	r22, r22
    2c90:	77 1f       	adc	r23, r23
    2c92:	06 94       	lsr	r0
    2c94:	a1 f7       	brne	.-24     	; 0x2c7e <__ftoa_engine+0xac>
    2c96:	05 90       	lpm	r0, Z+
    2c98:	07 94       	ror	r0
    2c9a:	20 f4       	brcc	.+8      	; 0x2ca4 <__ftoa_engine+0xd2>
    2c9c:	49 0f       	add	r20, r25
    2c9e:	56 1f       	adc	r21, r22
    2ca0:	c7 1f       	adc	r28, r23
    2ca2:	d8 1f       	adc	r29, r24
    2ca4:	99 0f       	add	r25, r25
    2ca6:	66 1f       	adc	r22, r22
    2ca8:	77 1f       	adc	r23, r23
    2caa:	88 1f       	adc	r24, r24
    2cac:	06 94       	lsr	r0
    2cae:	a9 f7       	brne	.-22     	; 0x2c9a <__ftoa_engine+0xc8>
    2cb0:	84 91       	lpm	r24, Z
    2cb2:	10 95       	com	r17
    2cb4:	17 70       	andi	r17, 0x07	; 7
    2cb6:	41 f0       	breq	.+16     	; 0x2cc8 <__ftoa_engine+0xf6>
    2cb8:	d6 95       	lsr	r29
    2cba:	c7 95       	ror	r28
    2cbc:	57 95       	ror	r21
    2cbe:	47 95       	ror	r20
    2cc0:	f7 94       	ror	r15
    2cc2:	e7 94       	ror	r14
    2cc4:	1a 95       	dec	r17
    2cc6:	c1 f7       	brne	.-16     	; 0x2cb8 <__ftoa_engine+0xe6>
    2cc8:	e4 e0       	ldi	r30, 0x04	; 4
    2cca:	f2 e0       	ldi	r31, 0x02	; 2
    2ccc:	68 94       	set
    2cce:	15 90       	lpm	r1, Z+
    2cd0:	15 91       	lpm	r17, Z+
    2cd2:	35 91       	lpm	r19, Z+
    2cd4:	65 91       	lpm	r22, Z+
    2cd6:	95 91       	lpm	r25, Z+
    2cd8:	05 90       	lpm	r0, Z+
    2cda:	7f e2       	ldi	r23, 0x2F	; 47
    2cdc:	73 95       	inc	r23
    2cde:	e1 18       	sub	r14, r1
    2ce0:	f1 0a       	sbc	r15, r17
    2ce2:	43 0b       	sbc	r20, r19
    2ce4:	56 0b       	sbc	r21, r22
    2ce6:	c9 0b       	sbc	r28, r25
    2ce8:	d0 09       	sbc	r29, r0
    2cea:	c0 f7       	brcc	.-16     	; 0x2cdc <__ftoa_engine+0x10a>
    2cec:	e1 0c       	add	r14, r1
    2cee:	f1 1e       	adc	r15, r17
    2cf0:	43 1f       	adc	r20, r19
    2cf2:	56 1f       	adc	r21, r22
    2cf4:	c9 1f       	adc	r28, r25
    2cf6:	d0 1d       	adc	r29, r0
    2cf8:	7e f4       	brtc	.+30     	; 0x2d18 <__ftoa_engine+0x146>
    2cfa:	70 33       	cpi	r23, 0x30	; 48
    2cfc:	11 f4       	brne	.+4      	; 0x2d02 <__ftoa_engine+0x130>
    2cfe:	8a 95       	dec	r24
    2d00:	e6 cf       	rjmp	.-52     	; 0x2cce <__ftoa_engine+0xfc>
    2d02:	e8 94       	clt
    2d04:	01 50       	subi	r16, 0x01	; 1
    2d06:	30 f0       	brcs	.+12     	; 0x2d14 <__ftoa_engine+0x142>
    2d08:	08 0f       	add	r16, r24
    2d0a:	0a f4       	brpl	.+2      	; 0x2d0e <__ftoa_engine+0x13c>
    2d0c:	00 27       	eor	r16, r16
    2d0e:	02 17       	cp	r16, r18
    2d10:	08 f4       	brcc	.+2      	; 0x2d14 <__ftoa_engine+0x142>
    2d12:	20 2f       	mov	r18, r16
    2d14:	23 95       	inc	r18
    2d16:	02 2f       	mov	r16, r18
    2d18:	7a 33       	cpi	r23, 0x3A	; 58
    2d1a:	28 f0       	brcs	.+10     	; 0x2d26 <__ftoa_engine+0x154>
    2d1c:	79 e3       	ldi	r23, 0x39	; 57
    2d1e:	7d 93       	st	X+, r23
    2d20:	2a 95       	dec	r18
    2d22:	e9 f7       	brne	.-6      	; 0x2d1e <__ftoa_engine+0x14c>
    2d24:	10 c0       	rjmp	.+32     	; 0x2d46 <__ftoa_engine+0x174>
    2d26:	7d 93       	st	X+, r23
    2d28:	2a 95       	dec	r18
    2d2a:	89 f6       	brne	.-94     	; 0x2cce <__ftoa_engine+0xfc>
    2d2c:	06 94       	lsr	r0
    2d2e:	97 95       	ror	r25
    2d30:	67 95       	ror	r22
    2d32:	37 95       	ror	r19
    2d34:	17 95       	ror	r17
    2d36:	17 94       	ror	r1
    2d38:	e1 18       	sub	r14, r1
    2d3a:	f1 0a       	sbc	r15, r17
    2d3c:	43 0b       	sbc	r20, r19
    2d3e:	56 0b       	sbc	r21, r22
    2d40:	c9 0b       	sbc	r28, r25
    2d42:	d0 09       	sbc	r29, r0
    2d44:	98 f0       	brcs	.+38     	; 0x2d6c <__ftoa_engine+0x19a>
    2d46:	23 95       	inc	r18
    2d48:	7e 91       	ld	r23, -X
    2d4a:	73 95       	inc	r23
    2d4c:	7a 33       	cpi	r23, 0x3A	; 58
    2d4e:	08 f0       	brcs	.+2      	; 0x2d52 <__ftoa_engine+0x180>
    2d50:	70 e3       	ldi	r23, 0x30	; 48
    2d52:	7c 93       	st	X, r23
    2d54:	20 13       	cpse	r18, r16
    2d56:	b8 f7       	brcc	.-18     	; 0x2d46 <__ftoa_engine+0x174>
    2d58:	7e 91       	ld	r23, -X
    2d5a:	70 61       	ori	r23, 0x10	; 16
    2d5c:	7d 93       	st	X+, r23
    2d5e:	30 f0       	brcs	.+12     	; 0x2d6c <__ftoa_engine+0x19a>
    2d60:	83 95       	inc	r24
    2d62:	71 e3       	ldi	r23, 0x31	; 49
    2d64:	7d 93       	st	X+, r23
    2d66:	70 e3       	ldi	r23, 0x30	; 48
    2d68:	2a 95       	dec	r18
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <__ftoa_engine+0x192>
    2d6c:	11 24       	eor	r1, r1
    2d6e:	ef 90       	pop	r14
    2d70:	ff 90       	pop	r15
    2d72:	0f 91       	pop	r16
    2d74:	1f 91       	pop	r17
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	99 27       	eor	r25, r25
    2d7c:	87 fd       	sbrc	r24, 7
    2d7e:	90 95       	com	r25
    2d80:	08 95       	ret

00002d82 <strnlen_P>:
    2d82:	fc 01       	movw	r30, r24
    2d84:	05 90       	lpm	r0, Z+
    2d86:	61 50       	subi	r22, 0x01	; 1
    2d88:	70 40       	sbci	r23, 0x00	; 0
    2d8a:	01 10       	cpse	r0, r1
    2d8c:	d8 f7       	brcc	.-10     	; 0x2d84 <strnlen_P+0x2>
    2d8e:	80 95       	com	r24
    2d90:	90 95       	com	r25
    2d92:	8e 0f       	add	r24, r30
    2d94:	9f 1f       	adc	r25, r31
    2d96:	08 95       	ret

00002d98 <strnlen>:
    2d98:	fc 01       	movw	r30, r24
    2d9a:	61 50       	subi	r22, 0x01	; 1
    2d9c:	70 40       	sbci	r23, 0x00	; 0
    2d9e:	01 90       	ld	r0, Z+
    2da0:	01 10       	cpse	r0, r1
    2da2:	d8 f7       	brcc	.-10     	; 0x2d9a <strnlen+0x2>
    2da4:	80 95       	com	r24
    2da6:	90 95       	com	r25
    2da8:	8e 0f       	add	r24, r30
    2daa:	9f 1f       	adc	r25, r31
    2dac:	08 95       	ret

00002dae <fdevopen>:
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	31 f4       	brne	.+12     	; 0x2dc6 <fdevopen+0x18>
    2dba:	61 15       	cp	r22, r1
    2dbc:	71 05       	cpc	r23, r1
    2dbe:	19 f4       	brne	.+6      	; 0x2dc6 <fdevopen+0x18>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	39 c0       	rjmp	.+114    	; 0x2e38 <fdevopen+0x8a>
    2dc6:	8b 01       	movw	r16, r22
    2dc8:	ec 01       	movw	r28, r24
    2dca:	6e e0       	ldi	r22, 0x0E	; 14
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	14 d1       	rcall	.+552    	; 0x2ffc <calloc>
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	89 2b       	or	r24, r25
    2dd8:	99 f3       	breq	.-26     	; 0x2dc0 <fdevopen+0x12>
    2dda:	80 e8       	ldi	r24, 0x80	; 128
    2ddc:	83 83       	std	Z+3, r24	; 0x03
    2dde:	01 15       	cp	r16, r1
    2de0:	11 05       	cpc	r17, r1
    2de2:	71 f0       	breq	.+28     	; 0x2e00 <fdevopen+0x52>
    2de4:	02 87       	std	Z+10, r16	; 0x0a
    2de6:	13 87       	std	Z+11, r17	; 0x0b
    2de8:	81 e8       	ldi	r24, 0x81	; 129
    2dea:	83 83       	std	Z+3, r24	; 0x03
    2dec:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <__iob>
    2df0:	90 91 c4 20 	lds	r25, 0x20C4	; 0x8020c4 <__iob+0x1>
    2df4:	89 2b       	or	r24, r25
    2df6:	21 f4       	brne	.+8      	; 0x2e00 <fdevopen+0x52>
    2df8:	e0 93 c3 20 	sts	0x20C3, r30	; 0x8020c3 <__iob>
    2dfc:	f0 93 c4 20 	sts	0x20C4, r31	; 0x8020c4 <__iob+0x1>
    2e00:	20 97       	sbiw	r28, 0x00	; 0
    2e02:	c9 f0       	breq	.+50     	; 0x2e36 <fdevopen+0x88>
    2e04:	c0 87       	std	Z+8, r28	; 0x08
    2e06:	d1 87       	std	Z+9, r29	; 0x09
    2e08:	83 81       	ldd	r24, Z+3	; 0x03
    2e0a:	82 60       	ori	r24, 0x02	; 2
    2e0c:	83 83       	std	Z+3, r24	; 0x03
    2e0e:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <__iob+0x2>
    2e12:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <__iob+0x3>
    2e16:	89 2b       	or	r24, r25
    2e18:	71 f4       	brne	.+28     	; 0x2e36 <fdevopen+0x88>
    2e1a:	e0 93 c5 20 	sts	0x20C5, r30	; 0x8020c5 <__iob+0x2>
    2e1e:	f0 93 c6 20 	sts	0x20C6, r31	; 0x8020c6 <__iob+0x3>
    2e22:	80 91 c7 20 	lds	r24, 0x20C7	; 0x8020c7 <__iob+0x4>
    2e26:	90 91 c8 20 	lds	r25, 0x20C8	; 0x8020c8 <__iob+0x5>
    2e2a:	89 2b       	or	r24, r25
    2e2c:	21 f4       	brne	.+8      	; 0x2e36 <fdevopen+0x88>
    2e2e:	e0 93 c7 20 	sts	0x20C7, r30	; 0x8020c7 <__iob+0x4>
    2e32:	f0 93 c8 20 	sts	0x20C8, r31	; 0x8020c8 <__iob+0x5>
    2e36:	cf 01       	movw	r24, r30
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <fputc>:
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	fb 01       	movw	r30, r22
    2e4c:	23 81       	ldd	r18, Z+3	; 0x03
    2e4e:	21 fd       	sbrc	r18, 1
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <fputc+0x16>
    2e52:	8f ef       	ldi	r24, 0xFF	; 255
    2e54:	9f ef       	ldi	r25, 0xFF	; 255
    2e56:	2c c0       	rjmp	.+88     	; 0x2eb0 <fputc+0x6e>
    2e58:	22 ff       	sbrs	r18, 2
    2e5a:	16 c0       	rjmp	.+44     	; 0x2e88 <fputc+0x46>
    2e5c:	46 81       	ldd	r20, Z+6	; 0x06
    2e5e:	57 81       	ldd	r21, Z+7	; 0x07
    2e60:	24 81       	ldd	r18, Z+4	; 0x04
    2e62:	35 81       	ldd	r19, Z+5	; 0x05
    2e64:	42 17       	cp	r20, r18
    2e66:	53 07       	cpc	r21, r19
    2e68:	44 f4       	brge	.+16     	; 0x2e7a <fputc+0x38>
    2e6a:	a0 81       	ld	r26, Z
    2e6c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e6e:	9d 01       	movw	r18, r26
    2e70:	2f 5f       	subi	r18, 0xFF	; 255
    2e72:	3f 4f       	sbci	r19, 0xFF	; 255
    2e74:	20 83       	st	Z, r18
    2e76:	31 83       	std	Z+1, r19	; 0x01
    2e78:	8c 93       	st	X, r24
    2e7a:	26 81       	ldd	r18, Z+6	; 0x06
    2e7c:	37 81       	ldd	r19, Z+7	; 0x07
    2e7e:	2f 5f       	subi	r18, 0xFF	; 255
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	26 83       	std	Z+6, r18	; 0x06
    2e84:	37 83       	std	Z+7, r19	; 0x07
    2e86:	14 c0       	rjmp	.+40     	; 0x2eb0 <fputc+0x6e>
    2e88:	8b 01       	movw	r16, r22
    2e8a:	ec 01       	movw	r28, r24
    2e8c:	fb 01       	movw	r30, r22
    2e8e:	00 84       	ldd	r0, Z+8	; 0x08
    2e90:	f1 85       	ldd	r31, Z+9	; 0x09
    2e92:	e0 2d       	mov	r30, r0
    2e94:	19 95       	eicall
    2e96:	89 2b       	or	r24, r25
    2e98:	e1 f6       	brne	.-72     	; 0x2e52 <fputc+0x10>
    2e9a:	d8 01       	movw	r26, r16
    2e9c:	16 96       	adiw	r26, 0x06	; 6
    2e9e:	8d 91       	ld	r24, X+
    2ea0:	9c 91       	ld	r25, X
    2ea2:	17 97       	sbiw	r26, 0x07	; 7
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	16 96       	adiw	r26, 0x06	; 6
    2ea8:	8d 93       	st	X+, r24
    2eaa:	9c 93       	st	X, r25
    2eac:	17 97       	sbiw	r26, 0x07	; 7
    2eae:	ce 01       	movw	r24, r28
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	08 95       	ret

00002eba <printf>:
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	ae 01       	movw	r20, r28
    2ec4:	4a 5f       	subi	r20, 0xFA	; 250
    2ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec8:	fa 01       	movw	r30, r20
    2eca:	61 91       	ld	r22, Z+
    2ecc:	71 91       	ld	r23, Z+
    2ece:	af 01       	movw	r20, r30
    2ed0:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <__iob+0x2>
    2ed4:	90 91 c6 20 	lds	r25, 0x20C6	; 0x8020c6 <__iob+0x3>
    2ed8:	d7 da       	rcall	.-2642   	; 0x2488 <vfprintf>
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	08 95       	ret

00002ee0 <puts>:
    2ee0:	0f 93       	push	r16
    2ee2:	1f 93       	push	r17
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <__iob+0x2>
    2eec:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <__iob+0x3>
    2ef0:	23 81       	ldd	r18, Z+3	; 0x03
    2ef2:	21 ff       	sbrs	r18, 1
    2ef4:	1b c0       	rjmp	.+54     	; 0x2f2c <puts+0x4c>
    2ef6:	8c 01       	movw	r16, r24
    2ef8:	d0 e0       	ldi	r29, 0x00	; 0
    2efa:	c0 e0       	ldi	r28, 0x00	; 0
    2efc:	f8 01       	movw	r30, r16
    2efe:	81 91       	ld	r24, Z+
    2f00:	8f 01       	movw	r16, r30
    2f02:	60 91 c5 20 	lds	r22, 0x20C5	; 0x8020c5 <__iob+0x2>
    2f06:	70 91 c6 20 	lds	r23, 0x20C6	; 0x8020c6 <__iob+0x3>
    2f0a:	db 01       	movw	r26, r22
    2f0c:	18 96       	adiw	r26, 0x08	; 8
    2f0e:	ed 91       	ld	r30, X+
    2f10:	fc 91       	ld	r31, X
    2f12:	19 97       	sbiw	r26, 0x09	; 9
    2f14:	88 23       	and	r24, r24
    2f16:	31 f0       	breq	.+12     	; 0x2f24 <puts+0x44>
    2f18:	19 95       	eicall
    2f1a:	89 2b       	or	r24, r25
    2f1c:	79 f3       	breq	.-34     	; 0x2efc <puts+0x1c>
    2f1e:	df ef       	ldi	r29, 0xFF	; 255
    2f20:	cf ef       	ldi	r28, 0xFF	; 255
    2f22:	ec cf       	rjmp	.-40     	; 0x2efc <puts+0x1c>
    2f24:	8a e0       	ldi	r24, 0x0A	; 10
    2f26:	19 95       	eicall
    2f28:	89 2b       	or	r24, r25
    2f2a:	19 f0       	breq	.+6      	; 0x2f32 <puts+0x52>
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	9f ef       	ldi	r25, 0xFF	; 255
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <puts+0x56>
    2f32:	8d 2f       	mov	r24, r29
    2f34:	9c 2f       	mov	r25, r28
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <__ultoa_invert>:
    2f40:	fa 01       	movw	r30, r20
    2f42:	aa 27       	eor	r26, r26
    2f44:	28 30       	cpi	r18, 0x08	; 8
    2f46:	51 f1       	breq	.+84     	; 0x2f9c <__ultoa_invert+0x5c>
    2f48:	20 31       	cpi	r18, 0x10	; 16
    2f4a:	81 f1       	breq	.+96     	; 0x2fac <__ultoa_invert+0x6c>
    2f4c:	e8 94       	clt
    2f4e:	6f 93       	push	r22
    2f50:	6e 7f       	andi	r22, 0xFE	; 254
    2f52:	6e 5f       	subi	r22, 0xFE	; 254
    2f54:	7f 4f       	sbci	r23, 0xFF	; 255
    2f56:	8f 4f       	sbci	r24, 0xFF	; 255
    2f58:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5a:	af 4f       	sbci	r26, 0xFF	; 255
    2f5c:	b1 e0       	ldi	r27, 0x01	; 1
    2f5e:	3e d0       	rcall	.+124    	; 0x2fdc <__ultoa_invert+0x9c>
    2f60:	b4 e0       	ldi	r27, 0x04	; 4
    2f62:	3c d0       	rcall	.+120    	; 0x2fdc <__ultoa_invert+0x9c>
    2f64:	67 0f       	add	r22, r23
    2f66:	78 1f       	adc	r23, r24
    2f68:	89 1f       	adc	r24, r25
    2f6a:	9a 1f       	adc	r25, r26
    2f6c:	a1 1d       	adc	r26, r1
    2f6e:	68 0f       	add	r22, r24
    2f70:	79 1f       	adc	r23, r25
    2f72:	8a 1f       	adc	r24, r26
    2f74:	91 1d       	adc	r25, r1
    2f76:	a1 1d       	adc	r26, r1
    2f78:	6a 0f       	add	r22, r26
    2f7a:	71 1d       	adc	r23, r1
    2f7c:	81 1d       	adc	r24, r1
    2f7e:	91 1d       	adc	r25, r1
    2f80:	a1 1d       	adc	r26, r1
    2f82:	20 d0       	rcall	.+64     	; 0x2fc4 <__ultoa_invert+0x84>
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__ultoa_invert+0x48>
    2f86:	68 94       	set
    2f88:	3f 91       	pop	r19
    2f8a:	2a e0       	ldi	r18, 0x0A	; 10
    2f8c:	26 9f       	mul	r18, r22
    2f8e:	11 24       	eor	r1, r1
    2f90:	30 19       	sub	r19, r0
    2f92:	30 5d       	subi	r19, 0xD0	; 208
    2f94:	31 93       	st	Z+, r19
    2f96:	de f6       	brtc	.-74     	; 0x2f4e <__ultoa_invert+0xe>
    2f98:	cf 01       	movw	r24, r30
    2f9a:	08 95       	ret
    2f9c:	46 2f       	mov	r20, r22
    2f9e:	47 70       	andi	r20, 0x07	; 7
    2fa0:	40 5d       	subi	r20, 0xD0	; 208
    2fa2:	41 93       	st	Z+, r20
    2fa4:	b3 e0       	ldi	r27, 0x03	; 3
    2fa6:	0f d0       	rcall	.+30     	; 0x2fc6 <__ultoa_invert+0x86>
    2fa8:	c9 f7       	brne	.-14     	; 0x2f9c <__ultoa_invert+0x5c>
    2faa:	f6 cf       	rjmp	.-20     	; 0x2f98 <__ultoa_invert+0x58>
    2fac:	46 2f       	mov	r20, r22
    2fae:	4f 70       	andi	r20, 0x0F	; 15
    2fb0:	40 5d       	subi	r20, 0xD0	; 208
    2fb2:	4a 33       	cpi	r20, 0x3A	; 58
    2fb4:	18 f0       	brcs	.+6      	; 0x2fbc <__ultoa_invert+0x7c>
    2fb6:	49 5d       	subi	r20, 0xD9	; 217
    2fb8:	31 fd       	sbrc	r19, 1
    2fba:	40 52       	subi	r20, 0x20	; 32
    2fbc:	41 93       	st	Z+, r20
    2fbe:	02 d0       	rcall	.+4      	; 0x2fc4 <__ultoa_invert+0x84>
    2fc0:	a9 f7       	brne	.-22     	; 0x2fac <__ultoa_invert+0x6c>
    2fc2:	ea cf       	rjmp	.-44     	; 0x2f98 <__ultoa_invert+0x58>
    2fc4:	b4 e0       	ldi	r27, 0x04	; 4
    2fc6:	a6 95       	lsr	r26
    2fc8:	97 95       	ror	r25
    2fca:	87 95       	ror	r24
    2fcc:	77 95       	ror	r23
    2fce:	67 95       	ror	r22
    2fd0:	ba 95       	dec	r27
    2fd2:	c9 f7       	brne	.-14     	; 0x2fc6 <__ultoa_invert+0x86>
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	61 05       	cpc	r22, r1
    2fd8:	71 05       	cpc	r23, r1
    2fda:	08 95       	ret
    2fdc:	9b 01       	movw	r18, r22
    2fde:	ac 01       	movw	r20, r24
    2fe0:	0a 2e       	mov	r0, r26
    2fe2:	06 94       	lsr	r0
    2fe4:	57 95       	ror	r21
    2fe6:	47 95       	ror	r20
    2fe8:	37 95       	ror	r19
    2fea:	27 95       	ror	r18
    2fec:	ba 95       	dec	r27
    2fee:	c9 f7       	brne	.-14     	; 0x2fe2 <__ultoa_invert+0xa2>
    2ff0:	62 0f       	add	r22, r18
    2ff2:	73 1f       	adc	r23, r19
    2ff4:	84 1f       	adc	r24, r20
    2ff6:	95 1f       	adc	r25, r21
    2ff8:	a0 1d       	adc	r26, r0
    2ffa:	08 95       	ret

00002ffc <calloc>:
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	86 9f       	mul	r24, r22
    3006:	80 01       	movw	r16, r0
    3008:	87 9f       	mul	r24, r23
    300a:	10 0d       	add	r17, r0
    300c:	96 9f       	mul	r25, r22
    300e:	10 0d       	add	r17, r0
    3010:	11 24       	eor	r1, r1
    3012:	c8 01       	movw	r24, r16
    3014:	0d d0       	rcall	.+26     	; 0x3030 <malloc>
    3016:	ec 01       	movw	r28, r24
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	21 f0       	breq	.+8      	; 0x3024 <calloc+0x28>
    301c:	a8 01       	movw	r20, r16
    301e:	60 e0       	ldi	r22, 0x00	; 0
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	27 d1       	rcall	.+590    	; 0x3272 <memset>
    3024:	ce 01       	movw	r24, r28
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	08 95       	ret

00003030 <malloc>:
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	91 05       	cpc	r25, r1
    303c:	10 f4       	brcc	.+4      	; 0x3042 <malloc+0x12>
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <__flp>
    3046:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <__flp+0x1>
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	a0 e0       	ldi	r26, 0x00	; 0
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	30 97       	sbiw	r30, 0x00	; 0
    3054:	19 f1       	breq	.+70     	; 0x309c <malloc+0x6c>
    3056:	40 81       	ld	r20, Z
    3058:	51 81       	ldd	r21, Z+1	; 0x01
    305a:	02 81       	ldd	r16, Z+2	; 0x02
    305c:	13 81       	ldd	r17, Z+3	; 0x03
    305e:	48 17       	cp	r20, r24
    3060:	59 07       	cpc	r21, r25
    3062:	c8 f0       	brcs	.+50     	; 0x3096 <malloc+0x66>
    3064:	84 17       	cp	r24, r20
    3066:	95 07       	cpc	r25, r21
    3068:	69 f4       	brne	.+26     	; 0x3084 <malloc+0x54>
    306a:	10 97       	sbiw	r26, 0x00	; 0
    306c:	31 f0       	breq	.+12     	; 0x307a <malloc+0x4a>
    306e:	12 96       	adiw	r26, 0x02	; 2
    3070:	0c 93       	st	X, r16
    3072:	12 97       	sbiw	r26, 0x02	; 2
    3074:	13 96       	adiw	r26, 0x03	; 3
    3076:	1c 93       	st	X, r17
    3078:	27 c0       	rjmp	.+78     	; 0x30c8 <malloc+0x98>
    307a:	00 93 cb 20 	sts	0x20CB, r16	; 0x8020cb <__flp>
    307e:	10 93 cc 20 	sts	0x20CC, r17	; 0x8020cc <__flp+0x1>
    3082:	22 c0       	rjmp	.+68     	; 0x30c8 <malloc+0x98>
    3084:	21 15       	cp	r18, r1
    3086:	31 05       	cpc	r19, r1
    3088:	19 f0       	breq	.+6      	; 0x3090 <malloc+0x60>
    308a:	42 17       	cp	r20, r18
    308c:	53 07       	cpc	r21, r19
    308e:	18 f4       	brcc	.+6      	; 0x3096 <malloc+0x66>
    3090:	9a 01       	movw	r18, r20
    3092:	bd 01       	movw	r22, r26
    3094:	ef 01       	movw	r28, r30
    3096:	df 01       	movw	r26, r30
    3098:	f8 01       	movw	r30, r16
    309a:	db cf       	rjmp	.-74     	; 0x3052 <malloc+0x22>
    309c:	21 15       	cp	r18, r1
    309e:	31 05       	cpc	r19, r1
    30a0:	f9 f0       	breq	.+62     	; 0x30e0 <malloc+0xb0>
    30a2:	28 1b       	sub	r18, r24
    30a4:	39 0b       	sbc	r19, r25
    30a6:	24 30       	cpi	r18, 0x04	; 4
    30a8:	31 05       	cpc	r19, r1
    30aa:	80 f4       	brcc	.+32     	; 0x30cc <malloc+0x9c>
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	9b 81       	ldd	r25, Y+3	; 0x03
    30b0:	61 15       	cp	r22, r1
    30b2:	71 05       	cpc	r23, r1
    30b4:	21 f0       	breq	.+8      	; 0x30be <malloc+0x8e>
    30b6:	fb 01       	movw	r30, r22
    30b8:	82 83       	std	Z+2, r24	; 0x02
    30ba:	93 83       	std	Z+3, r25	; 0x03
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <malloc+0x96>
    30be:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <__flp>
    30c2:	90 93 cc 20 	sts	0x20CC, r25	; 0x8020cc <__flp+0x1>
    30c6:	fe 01       	movw	r30, r28
    30c8:	32 96       	adiw	r30, 0x02	; 2
    30ca:	44 c0       	rjmp	.+136    	; 0x3154 <malloc+0x124>
    30cc:	fe 01       	movw	r30, r28
    30ce:	e2 0f       	add	r30, r18
    30d0:	f3 1f       	adc	r31, r19
    30d2:	81 93       	st	Z+, r24
    30d4:	91 93       	st	Z+, r25
    30d6:	22 50       	subi	r18, 0x02	; 2
    30d8:	31 09       	sbc	r19, r1
    30da:	28 83       	st	Y, r18
    30dc:	39 83       	std	Y+1, r19	; 0x01
    30de:	3a c0       	rjmp	.+116    	; 0x3154 <malloc+0x124>
    30e0:	20 91 c9 20 	lds	r18, 0x20C9	; 0x8020c9 <__brkval>
    30e4:	30 91 ca 20 	lds	r19, 0x20CA	; 0x8020ca <__brkval+0x1>
    30e8:	23 2b       	or	r18, r19
    30ea:	41 f4       	brne	.+16     	; 0x30fc <malloc+0xcc>
    30ec:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    30f0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    30f4:	20 93 c9 20 	sts	0x20C9, r18	; 0x8020c9 <__brkval>
    30f8:	30 93 ca 20 	sts	0x20CA, r19	; 0x8020ca <__brkval+0x1>
    30fc:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3100:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3104:	21 15       	cp	r18, r1
    3106:	31 05       	cpc	r19, r1
    3108:	41 f4       	brne	.+16     	; 0x311a <malloc+0xea>
    310a:	2d b7       	in	r18, 0x3d	; 61
    310c:	3e b7       	in	r19, 0x3e	; 62
    310e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3112:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3116:	24 1b       	sub	r18, r20
    3118:	35 0b       	sbc	r19, r21
    311a:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <__brkval>
    311e:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <__brkval+0x1>
    3122:	e2 17       	cp	r30, r18
    3124:	f3 07       	cpc	r31, r19
    3126:	a0 f4       	brcc	.+40     	; 0x3150 <malloc+0x120>
    3128:	2e 1b       	sub	r18, r30
    312a:	3f 0b       	sbc	r19, r31
    312c:	28 17       	cp	r18, r24
    312e:	39 07       	cpc	r19, r25
    3130:	78 f0       	brcs	.+30     	; 0x3150 <malloc+0x120>
    3132:	ac 01       	movw	r20, r24
    3134:	4e 5f       	subi	r20, 0xFE	; 254
    3136:	5f 4f       	sbci	r21, 0xFF	; 255
    3138:	24 17       	cp	r18, r20
    313a:	35 07       	cpc	r19, r21
    313c:	48 f0       	brcs	.+18     	; 0x3150 <malloc+0x120>
    313e:	4e 0f       	add	r20, r30
    3140:	5f 1f       	adc	r21, r31
    3142:	40 93 c9 20 	sts	0x20C9, r20	; 0x8020c9 <__brkval>
    3146:	50 93 ca 20 	sts	0x20CA, r21	; 0x8020ca <__brkval+0x1>
    314a:	81 93       	st	Z+, r24
    314c:	91 93       	st	Z+, r25
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <malloc+0x124>
    3150:	e0 e0       	ldi	r30, 0x00	; 0
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	cf 01       	movw	r24, r30
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	08 95       	ret

00003160 <free>:
    3160:	cf 93       	push	r28
    3162:	df 93       	push	r29
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	09 f4       	brne	.+2      	; 0x316a <free+0xa>
    3168:	81 c0       	rjmp	.+258    	; 0x326c <free+0x10c>
    316a:	fc 01       	movw	r30, r24
    316c:	32 97       	sbiw	r30, 0x02	; 2
    316e:	12 82       	std	Z+2, r1	; 0x02
    3170:	13 82       	std	Z+3, r1	; 0x03
    3172:	a0 91 cb 20 	lds	r26, 0x20CB	; 0x8020cb <__flp>
    3176:	b0 91 cc 20 	lds	r27, 0x20CC	; 0x8020cc <__flp+0x1>
    317a:	10 97       	sbiw	r26, 0x00	; 0
    317c:	81 f4       	brne	.+32     	; 0x319e <free+0x3e>
    317e:	20 81       	ld	r18, Z
    3180:	31 81       	ldd	r19, Z+1	; 0x01
    3182:	82 0f       	add	r24, r18
    3184:	93 1f       	adc	r25, r19
    3186:	20 91 c9 20 	lds	r18, 0x20C9	; 0x8020c9 <__brkval>
    318a:	30 91 ca 20 	lds	r19, 0x20CA	; 0x8020ca <__brkval+0x1>
    318e:	28 17       	cp	r18, r24
    3190:	39 07       	cpc	r19, r25
    3192:	51 f5       	brne	.+84     	; 0x31e8 <free+0x88>
    3194:	e0 93 c9 20 	sts	0x20C9, r30	; 0x8020c9 <__brkval>
    3198:	f0 93 ca 20 	sts	0x20CA, r31	; 0x8020ca <__brkval+0x1>
    319c:	67 c0       	rjmp	.+206    	; 0x326c <free+0x10c>
    319e:	ed 01       	movw	r28, r26
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	ce 17       	cp	r28, r30
    31a6:	df 07       	cpc	r29, r31
    31a8:	40 f4       	brcc	.+16     	; 0x31ba <free+0x5a>
    31aa:	4a 81       	ldd	r20, Y+2	; 0x02
    31ac:	5b 81       	ldd	r21, Y+3	; 0x03
    31ae:	9e 01       	movw	r18, r28
    31b0:	41 15       	cp	r20, r1
    31b2:	51 05       	cpc	r21, r1
    31b4:	f1 f0       	breq	.+60     	; 0x31f2 <free+0x92>
    31b6:	ea 01       	movw	r28, r20
    31b8:	f5 cf       	rjmp	.-22     	; 0x31a4 <free+0x44>
    31ba:	c2 83       	std	Z+2, r28	; 0x02
    31bc:	d3 83       	std	Z+3, r29	; 0x03
    31be:	40 81       	ld	r20, Z
    31c0:	51 81       	ldd	r21, Z+1	; 0x01
    31c2:	84 0f       	add	r24, r20
    31c4:	95 1f       	adc	r25, r21
    31c6:	c8 17       	cp	r28, r24
    31c8:	d9 07       	cpc	r29, r25
    31ca:	59 f4       	brne	.+22     	; 0x31e2 <free+0x82>
    31cc:	88 81       	ld	r24, Y
    31ce:	99 81       	ldd	r25, Y+1	; 0x01
    31d0:	84 0f       	add	r24, r20
    31d2:	95 1f       	adc	r25, r21
    31d4:	02 96       	adiw	r24, 0x02	; 2
    31d6:	80 83       	st	Z, r24
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	82 83       	std	Z+2, r24	; 0x02
    31e0:	93 83       	std	Z+3, r25	; 0x03
    31e2:	21 15       	cp	r18, r1
    31e4:	31 05       	cpc	r19, r1
    31e6:	29 f4       	brne	.+10     	; 0x31f2 <free+0x92>
    31e8:	e0 93 cb 20 	sts	0x20CB, r30	; 0x8020cb <__flp>
    31ec:	f0 93 cc 20 	sts	0x20CC, r31	; 0x8020cc <__flp+0x1>
    31f0:	3d c0       	rjmp	.+122    	; 0x326c <free+0x10c>
    31f2:	e9 01       	movw	r28, r18
    31f4:	ea 83       	std	Y+2, r30	; 0x02
    31f6:	fb 83       	std	Y+3, r31	; 0x03
    31f8:	49 91       	ld	r20, Y+
    31fa:	59 91       	ld	r21, Y+
    31fc:	c4 0f       	add	r28, r20
    31fe:	d5 1f       	adc	r29, r21
    3200:	ec 17       	cp	r30, r28
    3202:	fd 07       	cpc	r31, r29
    3204:	61 f4       	brne	.+24     	; 0x321e <free+0xbe>
    3206:	80 81       	ld	r24, Z
    3208:	91 81       	ldd	r25, Z+1	; 0x01
    320a:	84 0f       	add	r24, r20
    320c:	95 1f       	adc	r25, r21
    320e:	02 96       	adiw	r24, 0x02	; 2
    3210:	e9 01       	movw	r28, r18
    3212:	88 83       	st	Y, r24
    3214:	99 83       	std	Y+1, r25	; 0x01
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	8a 83       	std	Y+2, r24	; 0x02
    321c:	9b 83       	std	Y+3, r25	; 0x03
    321e:	e0 e0       	ldi	r30, 0x00	; 0
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	12 96       	adiw	r26, 0x02	; 2
    3224:	8d 91       	ld	r24, X+
    3226:	9c 91       	ld	r25, X
    3228:	13 97       	sbiw	r26, 0x03	; 3
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	19 f0       	breq	.+6      	; 0x3234 <free+0xd4>
    322e:	fd 01       	movw	r30, r26
    3230:	dc 01       	movw	r26, r24
    3232:	f7 cf       	rjmp	.-18     	; 0x3222 <free+0xc2>
    3234:	8d 91       	ld	r24, X+
    3236:	9c 91       	ld	r25, X
    3238:	11 97       	sbiw	r26, 0x01	; 1
    323a:	9d 01       	movw	r18, r26
    323c:	2e 5f       	subi	r18, 0xFE	; 254
    323e:	3f 4f       	sbci	r19, 0xFF	; 255
    3240:	82 0f       	add	r24, r18
    3242:	93 1f       	adc	r25, r19
    3244:	20 91 c9 20 	lds	r18, 0x20C9	; 0x8020c9 <__brkval>
    3248:	30 91 ca 20 	lds	r19, 0x20CA	; 0x8020ca <__brkval+0x1>
    324c:	28 17       	cp	r18, r24
    324e:	39 07       	cpc	r19, r25
    3250:	69 f4       	brne	.+26     	; 0x326c <free+0x10c>
    3252:	30 97       	sbiw	r30, 0x00	; 0
    3254:	29 f4       	brne	.+10     	; 0x3260 <free+0x100>
    3256:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <__flp>
    325a:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <__flp+0x1>
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <free+0x104>
    3260:	12 82       	std	Z+2, r1	; 0x02
    3262:	13 82       	std	Z+3, r1	; 0x03
    3264:	a0 93 c9 20 	sts	0x20C9, r26	; 0x8020c9 <__brkval>
    3268:	b0 93 ca 20 	sts	0x20CA, r27	; 0x8020ca <__brkval+0x1>
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	08 95       	ret

00003272 <memset>:
    3272:	dc 01       	movw	r26, r24
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <memset+0x6>
    3276:	6d 93       	st	X+, r22
    3278:	41 50       	subi	r20, 0x01	; 1
    327a:	50 40       	sbci	r21, 0x00	; 0
    327c:	e0 f7       	brcc	.-8      	; 0x3276 <memset+0x4>
    327e:	08 95       	ret

00003280 <_exit>:
    3280:	f8 94       	cli

00003282 <__stop_program>:
    3282:	ff cf       	rjmp	.-2      	; 0x3282 <__stop_program>
