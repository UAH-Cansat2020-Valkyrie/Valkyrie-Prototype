
ValkyriePrototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00802000  00802000  00001c9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008ce1  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d4e  00000000  00000000  0000ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000469c  00000000  00000000  0000fa9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016a0  00000000  00000000  00014138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034bff  00000000  00000000  000157d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003be4  00000000  00000000  0004a3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0004dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000205e  00000000  00000000  0004e32b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c4       	rjmp	.+2222   	; 0x8d8 <__vector_10>
      2a:	00 00       	nop
      2c:	78 c4       	rjmp	.+2288   	; 0x91e <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	a1 c1       	rjmp	.+834    	; 0x378 <__vector_13>
      36:	00 00       	nop
      38:	f6 c4       	rjmp	.+2540   	; 0xa26 <__vector_14>
      3a:	00 00       	nop
      3c:	2c c5       	rjmp	.+2648   	; 0xa96 <__vector_15>
      3e:	00 00       	nop
      40:	62 c5       	rjmp	.+2756   	; 0xb06 <__vector_16>
      42:	00 00       	nop
      44:	98 c5       	rjmp	.+2864   	; 0xb76 <__vector_17>
      46:	00 00       	nop
      48:	ce c5       	rjmp	.+2972   	; 0xbe6 <__vector_18>
      4a:	00 00       	nop
      4c:	04 c6       	rjmp	.+3080   	; 0xc56 <__vector_19>
      4e:	00 00       	nop
      50:	3a c6       	rjmp	.+3188   	; 0xcc6 <__vector_20>
      52:	00 00       	nop
      54:	70 c6       	rjmp	.+3296   	; 0xd36 <__vector_21>
      56:	00 00       	nop
      58:	a6 c6       	rjmp	.+3404   	; 0xda6 <__vector_22>
      5a:	00 00       	nop
      5c:	dc c6       	rjmp	.+3512   	; 0xe16 <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	29 c3       	rjmp	.+1618   	; 0x6f0 <__vector_39>
      9e:	00 00       	nop
      a0:	64 c3       	rjmp	.+1736   	; 0x76a <__vector_40>
      a2:	00 00       	nop
      a4:	9f c3       	rjmp	.+1854   	; 0x7e4 <__vector_41>
      a6:	00 00       	nop
      a8:	da c3       	rjmp	.+1972   	; 0x85e <__vector_42>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c3 c1       	rjmp	.+902    	; 0x440 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_47>
      c0:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_48>
      c4:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_49>
      c8:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_50>
      cc:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_51>
      d0:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_52>
      d4:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_53>
      d8:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_54>
      dc:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_55>
      e0:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f5 c1       	rjmp	.+1002   	; 0x508 <__vector_71>
     11e:	00 00       	nop
     120:	30 c2       	rjmp	.+1120   	; 0x582 <__vector_72>
     122:	00 00       	nop
     124:	6b c2       	rjmp	.+1238   	; 0x5fc <__vector_73>
     126:	00 00       	nop
     128:	a6 c2       	rjmp	.+1356   	; 0x676 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	55 c1       	rjmp	.+682    	; 0x3dc <__vector_76>
     132:	00 00       	nop
     134:	a8 c6       	rjmp	.+3408   	; 0xe86 <__vector_77>
     136:	00 00       	nop
     138:	de c6       	rjmp	.+3516   	; 0xef6 <__vector_78>
     13a:	00 00       	nop
     13c:	14 c7       	rjmp	.+3624   	; 0xf66 <__vector_79>
     13e:	00 00       	nop
     140:	4a c7       	rjmp	.+3732   	; 0xfd6 <__vector_80>
     142:	00 00       	nop
     144:	80 c7       	rjmp	.+3840   	; 0x1046 <__vector_81>
     146:	00 00       	nop
     148:	b6 c7       	rjmp	.+3948   	; 0x10b6 <__vector_82>
     14a:	00 00       	nop
     14c:	ec c7       	rjmp	.+4056   	; 0x1126 <__vector_83>
     14e:	00 00       	nop
     150:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_84>
     154:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_85>
     158:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_86>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7b c1       	rjmp	.+758    	; 0x4a4 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_108>
     1b4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__vector_109>
     1b8:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_110>
     1bc:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__vector_111>
     1c0:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__vector_112>
     1c4:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__vector_113>
     1c8:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__vector_114>
     1cc:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_115>
     1d0:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__vector_116>
     1d4:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e2       	ldi	r30, 0x28	; 40
     21c:	fc e1       	ldi	r31, 0x1C	; 28
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 30       	cpi	r26, 0x00	; 0
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a0 e0       	ldi	r26, 0x00	; 0
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a7 36       	cpi	r26, 0x67	; 103
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <main>
     244:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     24e:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
     252:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
     256:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     258:	83 ff       	sbrs	r24, 3
     25a:	08 c0       	rjmp	.+16     	; 0x26c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     25c:	88 60       	ori	r24, 0x08	; 8
     25e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     264:	86 ef       	ldi	r24, 0xF6	; 246
     266:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
     26a:	83 c0       	rjmp	.+262    	; 0x372 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     26c:	98 2f       	mov	r25, r24
     26e:	94 71       	andi	r25, 0x14	; 20
     270:	31 f0       	breq	.+12     	; 0x27e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     276:	8f ef       	ldi	r24, 0xFF	; 255
     278:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
     27c:	7a c0       	rjmp	.+244    	; 0x372 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     27e:	86 ff       	sbrs	r24, 6
     280:	43 c0       	rjmp	.+134    	; 0x308 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e2       	ldi	r29, 0x20	; 32
     286:	aa 81       	ldd	r26, Y+2	; 0x02
     288:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     28a:	8c 81       	ldd	r24, Y+4	; 0x04
     28c:	9d 81       	ldd	r25, Y+5	; 0x05
     28e:	14 96       	adiw	r26, 0x04	; 4
     290:	2d 91       	ld	r18, X+
     292:	3c 91       	ld	r19, X
     294:	15 97       	sbiw	r26, 0x05	; 5
     296:	82 17       	cp	r24, r18
     298:	93 07       	cpc	r25, r19
     29a:	6c f4       	brge	.+26     	; 0x2b6 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     29c:	9c 01       	movw	r18, r24
     29e:	2f 5f       	subi	r18, 0xFF	; 255
     2a0:	3f 4f       	sbci	r19, 0xFF	; 255
     2a2:	20 93 04 20 	sts	0x2004, r18	; 0x802004 <__data_end+0x4>
     2a6:	30 93 05 20 	sts	0x2005, r19	; 0x802005 <__data_end+0x5>
     2aa:	a8 0f       	add	r26, r24
     2ac:	b9 1f       	adc	r27, r25
     2ae:	11 96       	adiw	r26, 0x01	; 1
     2b0:	8c 91       	ld	r24, X
     2b2:	87 83       	std	Z+7, r24	; 0x07
     2b4:	5e c0       	rjmp	.+188    	; 0x372 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     2b6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end+0x6>
     2ba:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x7>
     2be:	18 96       	adiw	r26, 0x08	; 8
     2c0:	2d 91       	ld	r18, X+
     2c2:	3c 91       	ld	r19, X
     2c4:	19 97       	sbiw	r26, 0x09	; 9
     2c6:	82 17       	cp	r24, r18
     2c8:	93 07       	cpc	r25, r19
     2ca:	c8 f4       	brcc	.+50     	; 0x2fe <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     2cc:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <__data_end+0x8>
     2d0:	22 23       	and	r18, r18
     2d2:	21 f0       	breq	.+8      	; 0x2dc <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     2d4:	86 81       	ldd	r24, Z+6	; 0x06
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	86 83       	std	Z+6, r24	; 0x06
     2da:	4b c0       	rjmp	.+150    	; 0x372 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     2dc:	16 96       	adiw	r26, 0x06	; 6
     2de:	2d 91       	ld	r18, X+
     2e0:	3c 91       	ld	r19, X
     2e2:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     2e4:	ac 01       	movw	r20, r24
     2e6:	4f 5f       	subi	r20, 0xFF	; 255
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	40 93 06 20 	sts	0x2006, r20	; 0x802006 <__data_end+0x6>
     2ee:	50 93 07 20 	sts	0x2007, r21	; 0x802007 <__data_end+0x7>
     2f2:	d9 01       	movw	r26, r18
     2f4:	a8 0f       	add	r26, r24
     2f6:	b9 1f       	adc	r27, r25
     2f8:	8c 91       	ld	r24, X
     2fa:	87 83       	std	Z+7, r24	; 0x07
     2fc:	3a c0       	rjmp	.+116    	; 0x372 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     302:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
     306:	35 c0       	rjmp	.+106    	; 0x372 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     308:	88 23       	and	r24, r24
     30a:	84 f5       	brge	.+96     	; 0x36c <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     30c:	a0 e0       	ldi	r26, 0x00	; 0
     30e:	b0 e2       	ldi	r27, 0x20	; 32
     310:	12 96       	adiw	r26, 0x02	; 2
     312:	cd 91       	ld	r28, X+
     314:	dc 91       	ld	r29, X
     316:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     318:	16 96       	adiw	r26, 0x06	; 6
     31a:	8d 91       	ld	r24, X+
     31c:	9c 91       	ld	r25, X
     31e:	17 97       	sbiw	r26, 0x07	; 7
     320:	28 85       	ldd	r18, Y+8	; 0x08
     322:	39 85       	ldd	r19, Y+9	; 0x09
     324:	82 17       	cp	r24, r18
     326:	93 07       	cpc	r25, r19
     328:	d8 f4       	brcc	.+54     	; 0x360 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     32a:	6e 81       	ldd	r22, Y+6	; 0x06
     32c:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     32e:	9c 01       	movw	r18, r24
     330:	2f 5f       	subi	r18, 0xFF	; 255
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <__data_end+0x6>
     338:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <__data_end+0x7>
     33c:	47 81       	ldd	r20, Z+7	; 0x07
     33e:	db 01       	movw	r26, r22
     340:	a8 0f       	add	r26, r24
     342:	b9 1f       	adc	r27, r25
     344:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     346:	88 85       	ldd	r24, Y+8	; 0x08
     348:	99 85       	ldd	r25, Y+9	; 0x09
     34a:	28 17       	cp	r18, r24
     34c:	39 07       	cpc	r19, r25
     34e:	18 f4       	brcc	.+6      	; 0x356 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	83 83       	std	Z+3, r24	; 0x03
     354:	0e c0       	rjmp	.+28     	; 0x372 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     35a:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
     35e:	09 c0       	rjmp	.+18     	; 0x372 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     364:	89 ef       	ldi	r24, 0xF9	; 249
     366:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
     36a:	03 c0       	rjmp	.+6      	; 0x372 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     36c:	8b ef       	ldi	r24, 0xFB	; 251
     36e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
	}
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	08 b6       	in	r0, 0x38	; 56
     384:	0f 92       	push	r0
     386:	18 be       	out	0x38, r1	; 56
     388:	09 b6       	in	r0, 0x39	; 57
     38a:	0f 92       	push	r0
     38c:	19 be       	out	0x39, r1	; 57
     38e:	0b b6       	in	r0, 0x3b	; 59
     390:	0f 92       	push	r0
     392:	1b be       	out	0x3b, r1	; 59
     394:	2f 93       	push	r18
     396:	3f 93       	push	r19
     398:	4f 93       	push	r20
     39a:	5f 93       	push	r21
     39c:	6f 93       	push	r22
     39e:	7f 93       	push	r23
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	af 93       	push	r26
     3a6:	bf 93       	push	r27
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
     3ac:	4e df       	rcall	.-356    	; 0x24a <twim_interrupt_handler>
     3ae:	ff 91       	pop	r31
     3b0:	ef 91       	pop	r30
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	0f 90       	pop	r0
     3c8:	0b be       	out	0x3b, r0	; 59
     3ca:	0f 90       	pop	r0
     3cc:	09 be       	out	0x39, r0	; 57
     3ce:	0f 90       	pop	r0
     3d0:	08 be       	out	0x38, r0	; 56
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	08 b6       	in	r0, 0x38	; 56
     3e8:	0f 92       	push	r0
     3ea:	18 be       	out	0x38, r1	; 56
     3ec:	09 b6       	in	r0, 0x39	; 57
     3ee:	0f 92       	push	r0
     3f0:	19 be       	out	0x39, r1	; 57
     3f2:	0b b6       	in	r0, 0x3b	; 59
     3f4:	0f 92       	push	r0
     3f6:	1b be       	out	0x3b, r1	; 59
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
     410:	1c df       	rcall	.-456    	; 0x24a <twim_interrupt_handler>
     412:	ff 91       	pop	r31
     414:	ef 91       	pop	r30
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	7f 91       	pop	r23
     420:	6f 91       	pop	r22
     422:	5f 91       	pop	r21
     424:	4f 91       	pop	r20
     426:	3f 91       	pop	r19
     428:	2f 91       	pop	r18
     42a:	0f 90       	pop	r0
     42c:	0b be       	out	0x3b, r0	; 59
     42e:	0f 90       	pop	r0
     430:	09 be       	out	0x39, r0	; 57
     432:	0f 90       	pop	r0
     434:	08 be       	out	0x38, r0	; 56
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	08 b6       	in	r0, 0x38	; 56
     44c:	0f 92       	push	r0
     44e:	18 be       	out	0x38, r1	; 56
     450:	09 b6       	in	r0, 0x39	; 57
     452:	0f 92       	push	r0
     454:	19 be       	out	0x39, r1	; 57
     456:	0b b6       	in	r0, 0x3b	; 59
     458:	0f 92       	push	r0
     45a:	1b be       	out	0x3b, r1	; 59
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
     474:	ea de       	rcall	.-556    	; 0x24a <twim_interrupt_handler>
     476:	ff 91       	pop	r31
     478:	ef 91       	pop	r30
     47a:	bf 91       	pop	r27
     47c:	af 91       	pop	r26
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	7f 91       	pop	r23
     484:	6f 91       	pop	r22
     486:	5f 91       	pop	r21
     488:	4f 91       	pop	r20
     48a:	3f 91       	pop	r19
     48c:	2f 91       	pop	r18
     48e:	0f 90       	pop	r0
     490:	0b be       	out	0x3b, r0	; 59
     492:	0f 90       	pop	r0
     494:	09 be       	out	0x39, r0	; 57
     496:	0f 90       	pop	r0
     498:	08 be       	out	0x38, r0	; 56
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	08 b6       	in	r0, 0x38	; 56
     4b0:	0f 92       	push	r0
     4b2:	18 be       	out	0x38, r1	; 56
     4b4:	09 b6       	in	r0, 0x39	; 57
     4b6:	0f 92       	push	r0
     4b8:	19 be       	out	0x39, r1	; 57
     4ba:	0b b6       	in	r0, 0x3b	; 59
     4bc:	0f 92       	push	r0
     4be:	1b be       	out	0x3b, r1	; 59
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
     4d8:	b8 de       	rcall	.-656    	; 0x24a <twim_interrupt_handler>
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0b be       	out	0x3b, r0	; 59
     4f6:	0f 90       	pop	r0
     4f8:	09 be       	out	0x39, r0	; 57
     4fa:	0f 90       	pop	r0
     4fc:	08 be       	out	0x38, r0	; 56
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	08 b6       	in	r0, 0x38	; 56
     514:	0f 92       	push	r0
     516:	18 be       	out	0x38, r1	; 56
     518:	09 b6       	in	r0, 0x39	; 57
     51a:	0f 92       	push	r0
     51c:	19 be       	out	0x39, r1	; 57
     51e:	0b b6       	in	r0, 0x3b	; 59
     520:	0f 92       	push	r0
     522:	1b be       	out	0x3b, r1	; 59
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     53c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     540:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     544:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <adca_callback>
     548:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <adca_callback+0x1>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	19 95       	eicall
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0b be       	out	0x3b, r0	; 59
     570:	0f 90       	pop	r0
     572:	09 be       	out	0x39, r0	; 57
     574:	0f 90       	pop	r0
     576:	08 be       	out	0x38, r0	; 56
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	08 b6       	in	r0, 0x38	; 56
     58e:	0f 92       	push	r0
     590:	18 be       	out	0x38, r1	; 56
     592:	09 b6       	in	r0, 0x39	; 57
     594:	0f 92       	push	r0
     596:	19 be       	out	0x39, r1	; 57
     598:	0b b6       	in	r0, 0x3b	; 59
     59a:	0f 92       	push	r0
     59c:	1b be       	out	0x3b, r1	; 59
     59e:	2f 93       	push	r18
     5a0:	3f 93       	push	r19
     5a2:	4f 93       	push	r20
     5a4:	5f 93       	push	r21
     5a6:	6f 93       	push	r22
     5a8:	7f 93       	push	r23
     5aa:	8f 93       	push	r24
     5ac:	9f 93       	push	r25
     5ae:	af 93       	push	r26
     5b0:	bf 93       	push	r27
     5b2:	ef 93       	push	r30
     5b4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     5b6:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     5ba:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     5be:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <adca_callback>
     5c2:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <adca_callback+0x1>
     5c6:	62 e0       	ldi	r22, 0x02	; 2
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	19 95       	eicall
}
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	7f 91       	pop	r23
     5dc:	6f 91       	pop	r22
     5de:	5f 91       	pop	r21
     5e0:	4f 91       	pop	r20
     5e2:	3f 91       	pop	r19
     5e4:	2f 91       	pop	r18
     5e6:	0f 90       	pop	r0
     5e8:	0b be       	out	0x3b, r0	; 59
     5ea:	0f 90       	pop	r0
     5ec:	09 be       	out	0x39, r0	; 57
     5ee:	0f 90       	pop	r0
     5f0:	08 be       	out	0x38, r0	; 56
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

000005fc <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	08 b6       	in	r0, 0x38	; 56
     608:	0f 92       	push	r0
     60a:	18 be       	out	0x38, r1	; 56
     60c:	09 b6       	in	r0, 0x39	; 57
     60e:	0f 92       	push	r0
     610:	19 be       	out	0x39, r1	; 57
     612:	0b b6       	in	r0, 0x3b	; 59
     614:	0f 92       	push	r0
     616:	1b be       	out	0x3b, r1	; 59
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     630:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     634:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     638:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <adca_callback>
     63c:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <adca_callback+0x1>
     640:	64 e0       	ldi	r22, 0x04	; 4
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	19 95       	eicall
}
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	09 be       	out	0x39, r0	; 57
     668:	0f 90       	pop	r0
     66a:	08 be       	out	0x38, r0	; 56
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	08 b6       	in	r0, 0x38	; 56
     682:	0f 92       	push	r0
     684:	18 be       	out	0x38, r1	; 56
     686:	09 b6       	in	r0, 0x39	; 57
     688:	0f 92       	push	r0
     68a:	19 be       	out	0x39, r1	; 57
     68c:	0b b6       	in	r0, 0x3b	; 59
     68e:	0f 92       	push	r0
     690:	1b be       	out	0x3b, r1	; 59
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     6aa:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     6ae:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     6b2:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <adca_callback>
     6b6:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <adca_callback+0x1>
     6ba:	68 e0       	ldi	r22, 0x08	; 8
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	19 95       	eicall
}
     6c2:	ff 91       	pop	r31
     6c4:	ef 91       	pop	r30
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	0f 90       	pop	r0
     6dc:	0b be       	out	0x3b, r0	; 59
     6de:	0f 90       	pop	r0
     6e0:	09 be       	out	0x39, r0	; 57
     6e2:	0f 90       	pop	r0
     6e4:	08 be       	out	0x38, r0	; 56
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	08 b6       	in	r0, 0x38	; 56
     6fc:	0f 92       	push	r0
     6fe:	18 be       	out	0x38, r1	; 56
     700:	09 b6       	in	r0, 0x39	; 57
     702:	0f 92       	push	r0
     704:	19 be       	out	0x39, r1	; 57
     706:	0b b6       	in	r0, 0x3b	; 59
     708:	0f 92       	push	r0
     70a:	1b be       	out	0x3b, r1	; 59
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     724:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     728:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     72c:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <adcb_callback>
     730:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <adcb_callback+0x1>
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	80 e4       	ldi	r24, 0x40	; 64
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	19 95       	eicall
}
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	bf 91       	pop	r27
     742:	af 91       	pop	r26
     744:	9f 91       	pop	r25
     746:	8f 91       	pop	r24
     748:	7f 91       	pop	r23
     74a:	6f 91       	pop	r22
     74c:	5f 91       	pop	r21
     74e:	4f 91       	pop	r20
     750:	3f 91       	pop	r19
     752:	2f 91       	pop	r18
     754:	0f 90       	pop	r0
     756:	0b be       	out	0x3b, r0	; 59
     758:	0f 90       	pop	r0
     75a:	09 be       	out	0x39, r0	; 57
     75c:	0f 90       	pop	r0
     75e:	08 be       	out	0x38, r0	; 56
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     76a:	1f 92       	push	r1
     76c:	0f 92       	push	r0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	0f 92       	push	r0
     772:	11 24       	eor	r1, r1
     774:	08 b6       	in	r0, 0x38	; 56
     776:	0f 92       	push	r0
     778:	18 be       	out	0x38, r1	; 56
     77a:	09 b6       	in	r0, 0x39	; 57
     77c:	0f 92       	push	r0
     77e:	19 be       	out	0x39, r1	; 57
     780:	0b b6       	in	r0, 0x3b	; 59
     782:	0f 92       	push	r0
     784:	1b be       	out	0x3b, r1	; 59
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     79e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     7a2:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     7a6:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <adcb_callback>
     7aa:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <adcb_callback+0x1>
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	80 e4       	ldi	r24, 0x40	; 64
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	19 95       	eicall
}
     7b6:	ff 91       	pop	r31
     7b8:	ef 91       	pop	r30
     7ba:	bf 91       	pop	r27
     7bc:	af 91       	pop	r26
     7be:	9f 91       	pop	r25
     7c0:	8f 91       	pop	r24
     7c2:	7f 91       	pop	r23
     7c4:	6f 91       	pop	r22
     7c6:	5f 91       	pop	r21
     7c8:	4f 91       	pop	r20
     7ca:	3f 91       	pop	r19
     7cc:	2f 91       	pop	r18
     7ce:	0f 90       	pop	r0
     7d0:	0b be       	out	0x3b, r0	; 59
     7d2:	0f 90       	pop	r0
     7d4:	09 be       	out	0x39, r0	; 57
     7d6:	0f 90       	pop	r0
     7d8:	08 be       	out	0x38, r0	; 56
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	08 b6       	in	r0, 0x38	; 56
     7f0:	0f 92       	push	r0
     7f2:	18 be       	out	0x38, r1	; 56
     7f4:	09 b6       	in	r0, 0x39	; 57
     7f6:	0f 92       	push	r0
     7f8:	19 be       	out	0x39, r1	; 57
     7fa:	0b b6       	in	r0, 0x3b	; 59
     7fc:	0f 92       	push	r0
     7fe:	1b be       	out	0x3b, r1	; 59
     800:	2f 93       	push	r18
     802:	3f 93       	push	r19
     804:	4f 93       	push	r20
     806:	5f 93       	push	r21
     808:	6f 93       	push	r22
     80a:	7f 93       	push	r23
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	af 93       	push	r26
     812:	bf 93       	push	r27
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     818:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     81c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     820:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <adcb_callback>
     824:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <adcb_callback+0x1>
     828:	64 e0       	ldi	r22, 0x04	; 4
     82a:	80 e4       	ldi	r24, 0x40	; 64
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	19 95       	eicall
}
     830:	ff 91       	pop	r31
     832:	ef 91       	pop	r30
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0b be       	out	0x3b, r0	; 59
     84c:	0f 90       	pop	r0
     84e:	09 be       	out	0x39, r0	; 57
     850:	0f 90       	pop	r0
     852:	08 be       	out	0x38, r0	; 56
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	08 b6       	in	r0, 0x38	; 56
     86a:	0f 92       	push	r0
     86c:	18 be       	out	0x38, r1	; 56
     86e:	09 b6       	in	r0, 0x39	; 57
     870:	0f 92       	push	r0
     872:	19 be       	out	0x39, r1	; 57
     874:	0b b6       	in	r0, 0x3b	; 59
     876:	0f 92       	push	r0
     878:	1b be       	out	0x3b, r1	; 59
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     892:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     896:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     89a:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <adcb_callback>
     89e:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <adcb_callback+0x1>
     8a2:	68 e0       	ldi	r22, 0x08	; 8
     8a4:	80 e4       	ldi	r24, 0x40	; 64
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	19 95       	eicall
}
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	09 be       	out	0x39, r0	; 57
     8ca:	0f 90       	pop	r0
     8cc:	08 be       	out	0x38, r0	; 56
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	08 b6       	in	r0, 0x38	; 56
     8e4:	0f 92       	push	r0
     8e6:	18 be       	out	0x38, r1	; 56
     8e8:	0b b6       	in	r0, 0x3b	; 59
     8ea:	0f 92       	push	r0
     8ec:	1b be       	out	0x3b, r1	; 59
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
	rtc_data.counter_high++;
     8f6:	ef e5       	ldi	r30, 0x5F	; 95
     8f8:	f0 e2       	ldi	r31, 0x20	; 32
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	80 83       	st	Z, r24
     902:	91 83       	std	Z+1, r25	; 0x01
}
     904:	ff 91       	pop	r31
     906:	ef 91       	pop	r30
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	0f 90       	pop	r0
     90e:	0b be       	out	0x3b, r0	; 59
     910:	0f 90       	pop	r0
     912:	08 be       	out	0x38, r0	; 56
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	08 b6       	in	r0, 0x38	; 56
     92a:	0f 92       	push	r0
     92c:	18 be       	out	0x38, r1	; 56
     92e:	09 b6       	in	r0, 0x39	; 57
     930:	0f 92       	push	r0
     932:	19 be       	out	0x39, r1	; 57
     934:	0b b6       	in	r0, 0x3b	; 59
     936:	0f 92       	push	r0
     938:	1b be       	out	0x3b, r1	; 59
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	4f 93       	push	r20
     94c:	5f 93       	push	r21
     94e:	6f 93       	push	r22
     950:	7f 93       	push	r23
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     95e:	ef e5       	ldi	r30, 0x5F	; 95
     960:	f0 e2       	ldi	r31, 0x20	; 32
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	22 81       	ldd	r18, Z+2	; 0x02
     968:	33 81       	ldd	r19, Z+3	; 0x03
     96a:	82 17       	cp	r24, r18
     96c:	93 07       	cpc	r25, r19
     96e:	f0 f1       	brcs	.+124    	; 0x9ec <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     976:	e0 91 65 20 	lds	r30, 0x2065	; 0x802065 <rtc_data+0x6>
     97a:	f0 91 66 20 	lds	r31, 0x2066	; 0x802066 <rtc_data+0x7>
     97e:	30 97       	sbiw	r30, 0x00	; 0
     980:	a9 f1       	breq	.+106    	; 0x9ec <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     982:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     986:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     98a:	a0 e0       	ldi	r26, 0x00	; 0
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	dc 01       	movw	r26, r24
     990:	99 27       	eor	r25, r25
     992:	88 27       	eor	r24, r24
     994:	ab 01       	movw	r20, r22
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	8c 01       	movw	r16, r24
     99c:	9d 01       	movw	r18, r26
     99e:	04 2b       	or	r16, r20
     9a0:	15 2b       	or	r17, r21
     9a2:	26 2b       	or	r18, r22
     9a4:	37 2b       	or	r19, r23
     9a6:	c9 01       	movw	r24, r18
     9a8:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     9aa:	af e5       	ldi	r26, 0x5F	; 95
     9ac:	b0 e2       	ldi	r27, 0x20	; 32
     9ae:	12 96       	adiw	r26, 0x02	; 2
     9b0:	0d 91       	ld	r16, X+
     9b2:	1c 91       	ld	r17, X
     9b4:	13 97       	sbiw	r26, 0x03	; 3
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	98 01       	movw	r18, r16
     9bc:	11 27       	eor	r17, r17
     9be:	00 27       	eor	r16, r16
     9c0:	14 96       	adiw	r26, 0x04	; 4
     9c2:	cd 90       	ld	r12, X+
     9c4:	dc 90       	ld	r13, X
     9c6:	15 97       	sbiw	r26, 0x05	; 5
     9c8:	e1 2c       	mov	r14, r1
     9ca:	f1 2c       	mov	r15, r1
     9cc:	0c 29       	or	r16, r12
     9ce:	1d 29       	or	r17, r13
     9d0:	2e 29       	or	r18, r14
     9d2:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     9d4:	06 17       	cp	r16, r22
     9d6:	17 07       	cpc	r17, r23
     9d8:	28 07       	cpc	r18, r24
     9da:	39 07       	cpc	r19, r25
     9dc:	30 f0       	brcs	.+12     	; 0x9ea <__vector_11+0xcc>
				count = alarm + 1;
     9de:	c9 01       	movw	r24, r18
     9e0:	b8 01       	movw	r22, r16
     9e2:	6f 5f       	subi	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	8f 4f       	sbci	r24, 0xFF	; 255
     9e8:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     9ea:	19 95       	eicall
		}
	}
}
     9ec:	ff 91       	pop	r31
     9ee:	ef 91       	pop	r30
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	0f 90       	pop	r0
     a12:	0b be       	out	0x3b, r0	; 59
     a14:	0f 90       	pop	r0
     a16:	09 be       	out	0x39, r0	; 57
     a18:	0f 90       	pop	r0
     a1a:	08 be       	out	0x38, r0	; 56
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	08 b6       	in	r0, 0x38	; 56
     a32:	0f 92       	push	r0
     a34:	18 be       	out	0x38, r1	; 56
     a36:	09 b6       	in	r0, 0x39	; 57
     a38:	0f 92       	push	r0
     a3a:	19 be       	out	0x39, r1	; 57
     a3c:	0b b6       	in	r0, 0x3b	; 59
     a3e:	0f 92       	push	r0
     a40:	1b be       	out	0x3b, r1	; 59
     a42:	2f 93       	push	r18
     a44:	3f 93       	push	r19
     a46:	4f 93       	push	r20
     a48:	5f 93       	push	r21
     a4a:	6f 93       	push	r22
     a4c:	7f 93       	push	r23
     a4e:	8f 93       	push	r24
     a50:	9f 93       	push	r25
     a52:	af 93       	push	r26
     a54:	bf 93       	push	r27
     a56:	ef 93       	push	r30
     a58:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     a5a:	e0 91 59 20 	lds	r30, 0x2059	; 0x802059 <tc_tcc0_ovf_callback>
     a5e:	f0 91 5a 20 	lds	r31, 0x205A	; 0x80205a <tc_tcc0_ovf_callback+0x1>
     a62:	30 97       	sbiw	r30, 0x00	; 0
     a64:	09 f0       	breq	.+2      	; 0xa68 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     a66:	19 95       	eicall
	}
}
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0b be       	out	0x3b, r0	; 59
     a84:	0f 90       	pop	r0
     a86:	09 be       	out	0x39, r0	; 57
     a88:	0f 90       	pop	r0
     a8a:	08 be       	out	0x38, r0	; 56
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     a96:	1f 92       	push	r1
     a98:	0f 92       	push	r0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	0f 92       	push	r0
     a9e:	11 24       	eor	r1, r1
     aa0:	08 b6       	in	r0, 0x38	; 56
     aa2:	0f 92       	push	r0
     aa4:	18 be       	out	0x38, r1	; 56
     aa6:	09 b6       	in	r0, 0x39	; 57
     aa8:	0f 92       	push	r0
     aaa:	19 be       	out	0x39, r1	; 57
     aac:	0b b6       	in	r0, 0x3b	; 59
     aae:	0f 92       	push	r0
     ab0:	1b be       	out	0x3b, r1	; 59
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     aca:	e0 91 57 20 	lds	r30, 0x2057	; 0x802057 <tc_tcc0_err_callback>
     ace:	f0 91 58 20 	lds	r31, 0x2058	; 0x802058 <tc_tcc0_err_callback+0x1>
     ad2:	30 97       	sbiw	r30, 0x00	; 0
     ad4:	09 f0       	breq	.+2      	; 0xad8 <__vector_15+0x42>
		tc_tcc0_err_callback();
     ad6:	19 95       	eicall
	}
}
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0b be       	out	0x3b, r0	; 59
     af4:	0f 90       	pop	r0
     af6:	09 be       	out	0x39, r0	; 57
     af8:	0f 90       	pop	r0
     afa:	08 be       	out	0x38, r0	; 56
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	08 b6       	in	r0, 0x38	; 56
     b12:	0f 92       	push	r0
     b14:	18 be       	out	0x38, r1	; 56
     b16:	09 b6       	in	r0, 0x39	; 57
     b18:	0f 92       	push	r0
     b1a:	19 be       	out	0x39, r1	; 57
     b1c:	0b b6       	in	r0, 0x3b	; 59
     b1e:	0f 92       	push	r0
     b20:	1b be       	out	0x3b, r1	; 59
     b22:	2f 93       	push	r18
     b24:	3f 93       	push	r19
     b26:	4f 93       	push	r20
     b28:	5f 93       	push	r21
     b2a:	6f 93       	push	r22
     b2c:	7f 93       	push	r23
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	af 93       	push	r26
     b34:	bf 93       	push	r27
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     b3a:	e0 91 55 20 	lds	r30, 0x2055	; 0x802055 <tc_tcc0_cca_callback>
     b3e:	f0 91 56 20 	lds	r31, 0x2056	; 0x802056 <tc_tcc0_cca_callback+0x1>
     b42:	30 97       	sbiw	r30, 0x00	; 0
     b44:	09 f0       	breq	.+2      	; 0xb48 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     b46:	19 95       	eicall
	}
}
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0b be       	out	0x3b, r0	; 59
     b64:	0f 90       	pop	r0
     b66:	09 be       	out	0x39, r0	; 57
     b68:	0f 90       	pop	r0
     b6a:	08 be       	out	0x38, r0	; 56
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	08 b6       	in	r0, 0x38	; 56
     b82:	0f 92       	push	r0
     b84:	18 be       	out	0x38, r1	; 56
     b86:	09 b6       	in	r0, 0x39	; 57
     b88:	0f 92       	push	r0
     b8a:	19 be       	out	0x39, r1	; 57
     b8c:	0b b6       	in	r0, 0x3b	; 59
     b8e:	0f 92       	push	r0
     b90:	1b be       	out	0x3b, r1	; 59
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     baa:	e0 91 53 20 	lds	r30, 0x2053	; 0x802053 <tc_tcc0_ccb_callback>
     bae:	f0 91 54 20 	lds	r31, 0x2054	; 0x802054 <tc_tcc0_ccb_callback+0x1>
     bb2:	30 97       	sbiw	r30, 0x00	; 0
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     bb6:	19 95       	eicall
	}
}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	bf 91       	pop	r27
     bbe:	af 91       	pop	r26
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	7f 91       	pop	r23
     bc6:	6f 91       	pop	r22
     bc8:	5f 91       	pop	r21
     bca:	4f 91       	pop	r20
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	0b be       	out	0x3b, r0	; 59
     bd4:	0f 90       	pop	r0
     bd6:	09 be       	out	0x39, r0	; 57
     bd8:	0f 90       	pop	r0
     bda:	08 be       	out	0x38, r0	; 56
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	08 b6       	in	r0, 0x38	; 56
     bf2:	0f 92       	push	r0
     bf4:	18 be       	out	0x38, r1	; 56
     bf6:	09 b6       	in	r0, 0x39	; 57
     bf8:	0f 92       	push	r0
     bfa:	19 be       	out	0x39, r1	; 57
     bfc:	0b b6       	in	r0, 0x3b	; 59
     bfe:	0f 92       	push	r0
     c00:	1b be       	out	0x3b, r1	; 59
     c02:	2f 93       	push	r18
     c04:	3f 93       	push	r19
     c06:	4f 93       	push	r20
     c08:	5f 93       	push	r21
     c0a:	6f 93       	push	r22
     c0c:	7f 93       	push	r23
     c0e:	8f 93       	push	r24
     c10:	9f 93       	push	r25
     c12:	af 93       	push	r26
     c14:	bf 93       	push	r27
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     c1a:	e0 91 51 20 	lds	r30, 0x2051	; 0x802051 <tc_tcc0_ccc_callback>
     c1e:	f0 91 52 20 	lds	r31, 0x2052	; 0x802052 <tc_tcc0_ccc_callback+0x1>
     c22:	30 97       	sbiw	r30, 0x00	; 0
     c24:	09 f0       	breq	.+2      	; 0xc28 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     c26:	19 95       	eicall
	}
}
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	0f 90       	pop	r0
     c42:	0b be       	out	0x3b, r0	; 59
     c44:	0f 90       	pop	r0
     c46:	09 be       	out	0x39, r0	; 57
     c48:	0f 90       	pop	r0
     c4a:	08 be       	out	0x38, r0	; 56
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	0f 90       	pop	r0
     c52:	1f 90       	pop	r1
     c54:	18 95       	reti

00000c56 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	08 b6       	in	r0, 0x38	; 56
     c62:	0f 92       	push	r0
     c64:	18 be       	out	0x38, r1	; 56
     c66:	09 b6       	in	r0, 0x39	; 57
     c68:	0f 92       	push	r0
     c6a:	19 be       	out	0x39, r1	; 57
     c6c:	0b b6       	in	r0, 0x3b	; 59
     c6e:	0f 92       	push	r0
     c70:	1b be       	out	0x3b, r1	; 59
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     c8a:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <tc_tcc0_ccd_callback>
     c8e:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <tc_tcc0_ccd_callback+0x1>
     c92:	30 97       	sbiw	r30, 0x00	; 0
     c94:	09 f0       	breq	.+2      	; 0xc98 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     c96:	19 95       	eicall
	}
}
     c98:	ff 91       	pop	r31
     c9a:	ef 91       	pop	r30
     c9c:	bf 91       	pop	r27
     c9e:	af 91       	pop	r26
     ca0:	9f 91       	pop	r25
     ca2:	8f 91       	pop	r24
     ca4:	7f 91       	pop	r23
     ca6:	6f 91       	pop	r22
     ca8:	5f 91       	pop	r21
     caa:	4f 91       	pop	r20
     cac:	3f 91       	pop	r19
     cae:	2f 91       	pop	r18
     cb0:	0f 90       	pop	r0
     cb2:	0b be       	out	0x3b, r0	; 59
     cb4:	0f 90       	pop	r0
     cb6:	09 be       	out	0x39, r0	; 57
     cb8:	0f 90       	pop	r0
     cba:	08 be       	out	0x38, r0	; 56
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	08 b6       	in	r0, 0x38	; 56
     cd2:	0f 92       	push	r0
     cd4:	18 be       	out	0x38, r1	; 56
     cd6:	09 b6       	in	r0, 0x39	; 57
     cd8:	0f 92       	push	r0
     cda:	19 be       	out	0x39, r1	; 57
     cdc:	0b b6       	in	r0, 0x3b	; 59
     cde:	0f 92       	push	r0
     ce0:	1b be       	out	0x3b, r1	; 59
     ce2:	2f 93       	push	r18
     ce4:	3f 93       	push	r19
     ce6:	4f 93       	push	r20
     ce8:	5f 93       	push	r21
     cea:	6f 93       	push	r22
     cec:	7f 93       	push	r23
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	af 93       	push	r26
     cf4:	bf 93       	push	r27
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     cfa:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <tc_tcc1_ovf_callback>
     cfe:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <tc_tcc1_ovf_callback+0x1>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	09 f0       	breq	.+2      	; 0xd08 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     d06:	19 95       	eicall
	}
}
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0b be       	out	0x3b, r0	; 59
     d24:	0f 90       	pop	r0
     d26:	09 be       	out	0x39, r0	; 57
     d28:	0f 90       	pop	r0
     d2a:	08 be       	out	0x38, r0	; 56
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	0f 90       	pop	r0
     d32:	1f 90       	pop	r1
     d34:	18 95       	reti

00000d36 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	08 b6       	in	r0, 0x38	; 56
     d42:	0f 92       	push	r0
     d44:	18 be       	out	0x38, r1	; 56
     d46:	09 b6       	in	r0, 0x39	; 57
     d48:	0f 92       	push	r0
     d4a:	19 be       	out	0x39, r1	; 57
     d4c:	0b b6       	in	r0, 0x3b	; 59
     d4e:	0f 92       	push	r0
     d50:	1b be       	out	0x3b, r1	; 59
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     d6a:	e0 91 4b 20 	lds	r30, 0x204B	; 0x80204b <tc_tcc1_err_callback>
     d6e:	f0 91 4c 20 	lds	r31, 0x204C	; 0x80204c <tc_tcc1_err_callback+0x1>
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	09 f0       	breq	.+2      	; 0xd78 <__vector_21+0x42>
		tc_tcc1_err_callback();
     d76:	19 95       	eicall
	}
}
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0b be       	out	0x3b, r0	; 59
     d94:	0f 90       	pop	r0
     d96:	09 be       	out	0x39, r0	; 57
     d98:	0f 90       	pop	r0
     d9a:	08 be       	out	0x38, r0	; 56
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	08 b6       	in	r0, 0x38	; 56
     db2:	0f 92       	push	r0
     db4:	18 be       	out	0x38, r1	; 56
     db6:	09 b6       	in	r0, 0x39	; 57
     db8:	0f 92       	push	r0
     dba:	19 be       	out	0x39, r1	; 57
     dbc:	0b b6       	in	r0, 0x3b	; 59
     dbe:	0f 92       	push	r0
     dc0:	1b be       	out	0x3b, r1	; 59
     dc2:	2f 93       	push	r18
     dc4:	3f 93       	push	r19
     dc6:	4f 93       	push	r20
     dc8:	5f 93       	push	r21
     dca:	6f 93       	push	r22
     dcc:	7f 93       	push	r23
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     dda:	e0 91 49 20 	lds	r30, 0x2049	; 0x802049 <tc_tcc1_cca_callback>
     dde:	f0 91 4a 20 	lds	r31, 0x204A	; 0x80204a <tc_tcc1_cca_callback+0x1>
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	09 f0       	breq	.+2      	; 0xde8 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     de6:	19 95       	eicall
	}
}
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0b be       	out	0x3b, r0	; 59
     e04:	0f 90       	pop	r0
     e06:	09 be       	out	0x39, r0	; 57
     e08:	0f 90       	pop	r0
     e0a:	08 be       	out	0x38, r0	; 56
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	08 b6       	in	r0, 0x38	; 56
     e22:	0f 92       	push	r0
     e24:	18 be       	out	0x38, r1	; 56
     e26:	09 b6       	in	r0, 0x39	; 57
     e28:	0f 92       	push	r0
     e2a:	19 be       	out	0x39, r1	; 57
     e2c:	0b b6       	in	r0, 0x3b	; 59
     e2e:	0f 92       	push	r0
     e30:	1b be       	out	0x3b, r1	; 59
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     e4a:	e0 91 47 20 	lds	r30, 0x2047	; 0x802047 <tc_tcc1_ccb_callback>
     e4e:	f0 91 48 20 	lds	r31, 0x2048	; 0x802048 <tc_tcc1_ccb_callback+0x1>
     e52:	30 97       	sbiw	r30, 0x00	; 0
     e54:	09 f0       	breq	.+2      	; 0xe58 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     e56:	19 95       	eicall
	}
}
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0b be       	out	0x3b, r0	; 59
     e74:	0f 90       	pop	r0
     e76:	09 be       	out	0x39, r0	; 57
     e78:	0f 90       	pop	r0
     e7a:	08 be       	out	0x38, r0	; 56
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	08 b6       	in	r0, 0x38	; 56
     e92:	0f 92       	push	r0
     e94:	18 be       	out	0x38, r1	; 56
     e96:	09 b6       	in	r0, 0x39	; 57
     e98:	0f 92       	push	r0
     e9a:	19 be       	out	0x39, r1	; 57
     e9c:	0b b6       	in	r0, 0x3b	; 59
     e9e:	0f 92       	push	r0
     ea0:	1b be       	out	0x3b, r1	; 59
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     eba:	e0 91 45 20 	lds	r30, 0x2045	; 0x802045 <tc_tcd0_ovf_callback>
     ebe:	f0 91 46 20 	lds	r31, 0x2046	; 0x802046 <tc_tcd0_ovf_callback+0x1>
     ec2:	30 97       	sbiw	r30, 0x00	; 0
     ec4:	09 f0       	breq	.+2      	; 0xec8 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     ec6:	19 95       	eicall
	}
}
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0b be       	out	0x3b, r0	; 59
     ee4:	0f 90       	pop	r0
     ee6:	09 be       	out	0x39, r0	; 57
     ee8:	0f 90       	pop	r0
     eea:	08 be       	out	0x38, r0	; 56
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     ef6:	1f 92       	push	r1
     ef8:	0f 92       	push	r0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	0f 92       	push	r0
     efe:	11 24       	eor	r1, r1
     f00:	08 b6       	in	r0, 0x38	; 56
     f02:	0f 92       	push	r0
     f04:	18 be       	out	0x38, r1	; 56
     f06:	09 b6       	in	r0, 0x39	; 57
     f08:	0f 92       	push	r0
     f0a:	19 be       	out	0x39, r1	; 57
     f0c:	0b b6       	in	r0, 0x3b	; 59
     f0e:	0f 92       	push	r0
     f10:	1b be       	out	0x3b, r1	; 59
     f12:	2f 93       	push	r18
     f14:	3f 93       	push	r19
     f16:	4f 93       	push	r20
     f18:	5f 93       	push	r21
     f1a:	6f 93       	push	r22
     f1c:	7f 93       	push	r23
     f1e:	8f 93       	push	r24
     f20:	9f 93       	push	r25
     f22:	af 93       	push	r26
     f24:	bf 93       	push	r27
     f26:	ef 93       	push	r30
     f28:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     f2a:	e0 91 43 20 	lds	r30, 0x2043	; 0x802043 <tc_tcd0_err_callback>
     f2e:	f0 91 44 20 	lds	r31, 0x2044	; 0x802044 <tc_tcd0_err_callback+0x1>
     f32:	30 97       	sbiw	r30, 0x00	; 0
     f34:	09 f0       	breq	.+2      	; 0xf38 <__vector_78+0x42>
		tc_tcd0_err_callback();
     f36:	19 95       	eicall
	}
}
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0b be       	out	0x3b, r0	; 59
     f54:	0f 90       	pop	r0
     f56:	09 be       	out	0x39, r0	; 57
     f58:	0f 90       	pop	r0
     f5a:	08 be       	out	0x38, r0	; 56
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     f66:	1f 92       	push	r1
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	08 b6       	in	r0, 0x38	; 56
     f72:	0f 92       	push	r0
     f74:	18 be       	out	0x38, r1	; 56
     f76:	09 b6       	in	r0, 0x39	; 57
     f78:	0f 92       	push	r0
     f7a:	19 be       	out	0x39, r1	; 57
     f7c:	0b b6       	in	r0, 0x3b	; 59
     f7e:	0f 92       	push	r0
     f80:	1b be       	out	0x3b, r1	; 59
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     f9a:	e0 91 41 20 	lds	r30, 0x2041	; 0x802041 <tc_tcd0_cca_callback>
     f9e:	f0 91 42 20 	lds	r31, 0x2042	; 0x802042 <tc_tcd0_cca_callback+0x1>
     fa2:	30 97       	sbiw	r30, 0x00	; 0
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     fa6:	19 95       	eicall
	}
}
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	0f 90       	pop	r0
     fc2:	0b be       	out	0x3b, r0	; 59
     fc4:	0f 90       	pop	r0
     fc6:	09 be       	out	0x39, r0	; 57
     fc8:	0f 90       	pop	r0
     fca:	08 be       	out	0x38, r0	; 56
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	08 b6       	in	r0, 0x38	; 56
     fe2:	0f 92       	push	r0
     fe4:	18 be       	out	0x38, r1	; 56
     fe6:	09 b6       	in	r0, 0x39	; 57
     fe8:	0f 92       	push	r0
     fea:	19 be       	out	0x39, r1	; 57
     fec:	0b b6       	in	r0, 0x3b	; 59
     fee:	0f 92       	push	r0
     ff0:	1b be       	out	0x3b, r1	; 59
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    100a:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <tc_tcd0_ccb_callback>
    100e:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <tc_tcd0_ccb_callback+0x1>
    1012:	30 97       	sbiw	r30, 0x00	; 0
    1014:	09 f0       	breq	.+2      	; 0x1018 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    1016:	19 95       	eicall
	}
}
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	0f 90       	pop	r0
    1032:	0b be       	out	0x3b, r0	; 59
    1034:	0f 90       	pop	r0
    1036:	09 be       	out	0x39, r0	; 57
    1038:	0f 90       	pop	r0
    103a:	08 be       	out	0x38, r0	; 56
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	08 b6       	in	r0, 0x38	; 56
    1052:	0f 92       	push	r0
    1054:	18 be       	out	0x38, r1	; 56
    1056:	09 b6       	in	r0, 0x39	; 57
    1058:	0f 92       	push	r0
    105a:	19 be       	out	0x39, r1	; 57
    105c:	0b b6       	in	r0, 0x3b	; 59
    105e:	0f 92       	push	r0
    1060:	1b be       	out	0x3b, r1	; 59
    1062:	2f 93       	push	r18
    1064:	3f 93       	push	r19
    1066:	4f 93       	push	r20
    1068:	5f 93       	push	r21
    106a:	6f 93       	push	r22
    106c:	7f 93       	push	r23
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	ef 93       	push	r30
    1078:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    107a:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <tc_tcd0_ccc_callback>
    107e:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <tc_tcd0_ccc_callback+0x1>
    1082:	30 97       	sbiw	r30, 0x00	; 0
    1084:	09 f0       	breq	.+2      	; 0x1088 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    1086:	19 95       	eicall
	}
}
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0b be       	out	0x3b, r0	; 59
    10a4:	0f 90       	pop	r0
    10a6:	09 be       	out	0x39, r0	; 57
    10a8:	0f 90       	pop	r0
    10aa:	08 be       	out	0x38, r0	; 56
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	08 b6       	in	r0, 0x38	; 56
    10c2:	0f 92       	push	r0
    10c4:	18 be       	out	0x38, r1	; 56
    10c6:	09 b6       	in	r0, 0x39	; 57
    10c8:	0f 92       	push	r0
    10ca:	19 be       	out	0x39, r1	; 57
    10cc:	0b b6       	in	r0, 0x3b	; 59
    10ce:	0f 92       	push	r0
    10d0:	1b be       	out	0x3b, r1	; 59
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    10ea:	e0 91 3b 20 	lds	r30, 0x203B	; 0x80203b <tc_tcd0_ccd_callback>
    10ee:	f0 91 3c 20 	lds	r31, 0x203C	; 0x80203c <tc_tcd0_ccd_callback+0x1>
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    10f6:	19 95       	eicall
	}
}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0b be       	out	0x3b, r0	; 59
    1114:	0f 90       	pop	r0
    1116:	09 be       	out	0x39, r0	; 57
    1118:	0f 90       	pop	r0
    111a:	08 be       	out	0x38, r0	; 56
    111c:	0f 90       	pop	r0
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	0f 90       	pop	r0
    1122:	1f 90       	pop	r1
    1124:	18 95       	reti

00001126 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	08 b6       	in	r0, 0x38	; 56
    1132:	0f 92       	push	r0
    1134:	18 be       	out	0x38, r1	; 56
    1136:	09 b6       	in	r0, 0x39	; 57
    1138:	0f 92       	push	r0
    113a:	19 be       	out	0x39, r1	; 57
    113c:	0b b6       	in	r0, 0x3b	; 59
    113e:	0f 92       	push	r0
    1140:	1b be       	out	0x3b, r1	; 59
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    115a:	e0 91 39 20 	lds	r30, 0x2039	; 0x802039 <tc_tcd1_ovf_callback>
    115e:	f0 91 3a 20 	lds	r31, 0x203A	; 0x80203a <tc_tcd1_ovf_callback+0x1>
    1162:	30 97       	sbiw	r30, 0x00	; 0
    1164:	09 f0       	breq	.+2      	; 0x1168 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    1166:	19 95       	eicall
	}
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0b be       	out	0x3b, r0	; 59
    1184:	0f 90       	pop	r0
    1186:	09 be       	out	0x39, r0	; 57
    1188:	0f 90       	pop	r0
    118a:	08 be       	out	0x38, r0	; 56
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	08 b6       	in	r0, 0x38	; 56
    11a2:	0f 92       	push	r0
    11a4:	18 be       	out	0x38, r1	; 56
    11a6:	09 b6       	in	r0, 0x39	; 57
    11a8:	0f 92       	push	r0
    11aa:	19 be       	out	0x39, r1	; 57
    11ac:	0b b6       	in	r0, 0x3b	; 59
    11ae:	0f 92       	push	r0
    11b0:	1b be       	out	0x3b, r1	; 59
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    11ca:	e0 91 37 20 	lds	r30, 0x2037	; 0x802037 <tc_tcd1_err_callback>
    11ce:	f0 91 38 20 	lds	r31, 0x2038	; 0x802038 <tc_tcd1_err_callback+0x1>
    11d2:	30 97       	sbiw	r30, 0x00	; 0
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <__vector_84+0x42>
		tc_tcd1_err_callback();
    11d6:	19 95       	eicall
	}
}
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	0f 90       	pop	r0
    11f2:	0b be       	out	0x3b, r0	; 59
    11f4:	0f 90       	pop	r0
    11f6:	09 be       	out	0x39, r0	; 57
    11f8:	0f 90       	pop	r0
    11fa:	08 be       	out	0x38, r0	; 56
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	08 b6       	in	r0, 0x38	; 56
    1212:	0f 92       	push	r0
    1214:	18 be       	out	0x38, r1	; 56
    1216:	09 b6       	in	r0, 0x39	; 57
    1218:	0f 92       	push	r0
    121a:	19 be       	out	0x39, r1	; 57
    121c:	0b b6       	in	r0, 0x3b	; 59
    121e:	0f 92       	push	r0
    1220:	1b be       	out	0x3b, r1	; 59
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    123a:	e0 91 35 20 	lds	r30, 0x2035	; 0x802035 <tc_tcd1_cca_callback>
    123e:	f0 91 36 20 	lds	r31, 0x2036	; 0x802036 <tc_tcd1_cca_callback+0x1>
    1242:	30 97       	sbiw	r30, 0x00	; 0
    1244:	09 f0       	breq	.+2      	; 0x1248 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    1246:	19 95       	eicall
	}
}
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	7f 91       	pop	r23
    1256:	6f 91       	pop	r22
    1258:	5f 91       	pop	r21
    125a:	4f 91       	pop	r20
    125c:	3f 91       	pop	r19
    125e:	2f 91       	pop	r18
    1260:	0f 90       	pop	r0
    1262:	0b be       	out	0x3b, r0	; 59
    1264:	0f 90       	pop	r0
    1266:	09 be       	out	0x39, r0	; 57
    1268:	0f 90       	pop	r0
    126a:	08 be       	out	0x38, r0	; 56
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	08 b6       	in	r0, 0x38	; 56
    1282:	0f 92       	push	r0
    1284:	18 be       	out	0x38, r1	; 56
    1286:	09 b6       	in	r0, 0x39	; 57
    1288:	0f 92       	push	r0
    128a:	19 be       	out	0x39, r1	; 57
    128c:	0b b6       	in	r0, 0x3b	; 59
    128e:	0f 92       	push	r0
    1290:	1b be       	out	0x3b, r1	; 59
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    12aa:	e0 91 33 20 	lds	r30, 0x2033	; 0x802033 <tc_tcd1_ccb_callback>
    12ae:	f0 91 34 20 	lds	r31, 0x2034	; 0x802034 <tc_tcd1_ccb_callback+0x1>
    12b2:	30 97       	sbiw	r30, 0x00	; 0
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    12b6:	19 95       	eicall
	}
}
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0b be       	out	0x3b, r0	; 59
    12d4:	0f 90       	pop	r0
    12d6:	09 be       	out	0x39, r0	; 57
    12d8:	0f 90       	pop	r0
    12da:	08 be       	out	0x38, r0	; 56
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	08 b6       	in	r0, 0x38	; 56
    12f2:	0f 92       	push	r0
    12f4:	18 be       	out	0x38, r1	; 56
    12f6:	09 b6       	in	r0, 0x39	; 57
    12f8:	0f 92       	push	r0
    12fa:	19 be       	out	0x39, r1	; 57
    12fc:	0b b6       	in	r0, 0x3b	; 59
    12fe:	0f 92       	push	r0
    1300:	1b be       	out	0x3b, r1	; 59
    1302:	2f 93       	push	r18
    1304:	3f 93       	push	r19
    1306:	4f 93       	push	r20
    1308:	5f 93       	push	r21
    130a:	6f 93       	push	r22
    130c:	7f 93       	push	r23
    130e:	8f 93       	push	r24
    1310:	9f 93       	push	r25
    1312:	af 93       	push	r26
    1314:	bf 93       	push	r27
    1316:	ef 93       	push	r30
    1318:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    131a:	e0 91 31 20 	lds	r30, 0x2031	; 0x802031 <tc_tce0_ovf_callback>
    131e:	f0 91 32 20 	lds	r31, 0x2032	; 0x802032 <tc_tce0_ovf_callback+0x1>
    1322:	30 97       	sbiw	r30, 0x00	; 0
    1324:	09 f0       	breq	.+2      	; 0x1328 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    1326:	19 95       	eicall
	}
}
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	7f 91       	pop	r23
    1336:	6f 91       	pop	r22
    1338:	5f 91       	pop	r21
    133a:	4f 91       	pop	r20
    133c:	3f 91       	pop	r19
    133e:	2f 91       	pop	r18
    1340:	0f 90       	pop	r0
    1342:	0b be       	out	0x3b, r0	; 59
    1344:	0f 90       	pop	r0
    1346:	09 be       	out	0x39, r0	; 57
    1348:	0f 90       	pop	r0
    134a:	08 be       	out	0x38, r0	; 56
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	08 b6       	in	r0, 0x38	; 56
    1362:	0f 92       	push	r0
    1364:	18 be       	out	0x38, r1	; 56
    1366:	09 b6       	in	r0, 0x39	; 57
    1368:	0f 92       	push	r0
    136a:	19 be       	out	0x39, r1	; 57
    136c:	0b b6       	in	r0, 0x3b	; 59
    136e:	0f 92       	push	r0
    1370:	1b be       	out	0x3b, r1	; 59
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    138a:	e0 91 2f 20 	lds	r30, 0x202F	; 0x80202f <tc_tce0_err_callback>
    138e:	f0 91 30 20 	lds	r31, 0x2030	; 0x802030 <tc_tce0_err_callback+0x1>
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	09 f0       	breq	.+2      	; 0x1398 <__vector_48+0x42>
		tc_tce0_err_callback();
    1396:	19 95       	eicall
	}
}
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0b be       	out	0x3b, r0	; 59
    13b4:	0f 90       	pop	r0
    13b6:	09 be       	out	0x39, r0	; 57
    13b8:	0f 90       	pop	r0
    13ba:	08 be       	out	0x38, r0	; 56
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	08 b6       	in	r0, 0x38	; 56
    13d2:	0f 92       	push	r0
    13d4:	18 be       	out	0x38, r1	; 56
    13d6:	09 b6       	in	r0, 0x39	; 57
    13d8:	0f 92       	push	r0
    13da:	19 be       	out	0x39, r1	; 57
    13dc:	0b b6       	in	r0, 0x3b	; 59
    13de:	0f 92       	push	r0
    13e0:	1b be       	out	0x3b, r1	; 59
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    13fa:	e0 91 2d 20 	lds	r30, 0x202D	; 0x80202d <tc_tce0_cca_callback>
    13fe:	f0 91 2e 20 	lds	r31, 0x202E	; 0x80202e <tc_tce0_cca_callback+0x1>
    1402:	30 97       	sbiw	r30, 0x00	; 0
    1404:	09 f0       	breq	.+2      	; 0x1408 <__vector_49+0x42>
		tc_tce0_cca_callback();
    1406:	19 95       	eicall
	}
}
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0b be       	out	0x3b, r0	; 59
    1424:	0f 90       	pop	r0
    1426:	09 be       	out	0x39, r0	; 57
    1428:	0f 90       	pop	r0
    142a:	08 be       	out	0x38, r0	; 56
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	08 b6       	in	r0, 0x38	; 56
    1442:	0f 92       	push	r0
    1444:	18 be       	out	0x38, r1	; 56
    1446:	09 b6       	in	r0, 0x39	; 57
    1448:	0f 92       	push	r0
    144a:	19 be       	out	0x39, r1	; 57
    144c:	0b b6       	in	r0, 0x3b	; 59
    144e:	0f 92       	push	r0
    1450:	1b be       	out	0x3b, r1	; 59
    1452:	2f 93       	push	r18
    1454:	3f 93       	push	r19
    1456:	4f 93       	push	r20
    1458:	5f 93       	push	r21
    145a:	6f 93       	push	r22
    145c:	7f 93       	push	r23
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25
    1462:	af 93       	push	r26
    1464:	bf 93       	push	r27
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    146a:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <tc_tce0_ccb_callback>
    146e:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <tc_tce0_ccb_callback+0x1>
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	09 f0       	breq	.+2      	; 0x1478 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    1476:	19 95       	eicall
	}
}
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	0b be       	out	0x3b, r0	; 59
    1494:	0f 90       	pop	r0
    1496:	09 be       	out	0x39, r0	; 57
    1498:	0f 90       	pop	r0
    149a:	08 be       	out	0x38, r0	; 56
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	08 b6       	in	r0, 0x38	; 56
    14b2:	0f 92       	push	r0
    14b4:	18 be       	out	0x38, r1	; 56
    14b6:	09 b6       	in	r0, 0x39	; 57
    14b8:	0f 92       	push	r0
    14ba:	19 be       	out	0x39, r1	; 57
    14bc:	0b b6       	in	r0, 0x3b	; 59
    14be:	0f 92       	push	r0
    14c0:	1b be       	out	0x3b, r1	; 59
    14c2:	2f 93       	push	r18
    14c4:	3f 93       	push	r19
    14c6:	4f 93       	push	r20
    14c8:	5f 93       	push	r21
    14ca:	6f 93       	push	r22
    14cc:	7f 93       	push	r23
    14ce:	8f 93       	push	r24
    14d0:	9f 93       	push	r25
    14d2:	af 93       	push	r26
    14d4:	bf 93       	push	r27
    14d6:	ef 93       	push	r30
    14d8:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    14da:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <tc_tce0_ccc_callback>
    14de:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <tc_tce0_ccc_callback+0x1>
    14e2:	30 97       	sbiw	r30, 0x00	; 0
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    14e6:	19 95       	eicall
	}
}
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0b be       	out	0x3b, r0	; 59
    1504:	0f 90       	pop	r0
    1506:	09 be       	out	0x39, r0	; 57
    1508:	0f 90       	pop	r0
    150a:	08 be       	out	0x38, r0	; 56
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	08 b6       	in	r0, 0x38	; 56
    1522:	0f 92       	push	r0
    1524:	18 be       	out	0x38, r1	; 56
    1526:	09 b6       	in	r0, 0x39	; 57
    1528:	0f 92       	push	r0
    152a:	19 be       	out	0x39, r1	; 57
    152c:	0b b6       	in	r0, 0x3b	; 59
    152e:	0f 92       	push	r0
    1530:	1b be       	out	0x3b, r1	; 59
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    154a:	e0 91 27 20 	lds	r30, 0x2027	; 0x802027 <tc_tce0_ccd_callback>
    154e:	f0 91 28 20 	lds	r31, 0x2028	; 0x802028 <tc_tce0_ccd_callback+0x1>
    1552:	30 97       	sbiw	r30, 0x00	; 0
    1554:	09 f0       	breq	.+2      	; 0x1558 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    1556:	19 95       	eicall
	}
}
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0
    1572:	0b be       	out	0x3b, r0	; 59
    1574:	0f 90       	pop	r0
    1576:	09 be       	out	0x39, r0	; 57
    1578:	0f 90       	pop	r0
    157a:	08 be       	out	0x38, r0	; 56
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	08 b6       	in	r0, 0x38	; 56
    1592:	0f 92       	push	r0
    1594:	18 be       	out	0x38, r1	; 56
    1596:	09 b6       	in	r0, 0x39	; 57
    1598:	0f 92       	push	r0
    159a:	19 be       	out	0x39, r1	; 57
    159c:	0b b6       	in	r0, 0x3b	; 59
    159e:	0f 92       	push	r0
    15a0:	1b be       	out	0x3b, r1	; 59
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    15ba:	e0 91 25 20 	lds	r30, 0x2025	; 0x802025 <tc_tce1_ovf_callback>
    15be:	f0 91 26 20 	lds	r31, 0x2026	; 0x802026 <tc_tce1_ovf_callback+0x1>
    15c2:	30 97       	sbiw	r30, 0x00	; 0
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    15c6:	19 95       	eicall
	}
}
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	bf 91       	pop	r27
    15ce:	af 91       	pop	r26
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	7f 91       	pop	r23
    15d6:	6f 91       	pop	r22
    15d8:	5f 91       	pop	r21
    15da:	4f 91       	pop	r20
    15dc:	3f 91       	pop	r19
    15de:	2f 91       	pop	r18
    15e0:	0f 90       	pop	r0
    15e2:	0b be       	out	0x3b, r0	; 59
    15e4:	0f 90       	pop	r0
    15e6:	09 be       	out	0x39, r0	; 57
    15e8:	0f 90       	pop	r0
    15ea:	08 be       	out	0x38, r0	; 56
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	08 b6       	in	r0, 0x38	; 56
    1602:	0f 92       	push	r0
    1604:	18 be       	out	0x38, r1	; 56
    1606:	09 b6       	in	r0, 0x39	; 57
    1608:	0f 92       	push	r0
    160a:	19 be       	out	0x39, r1	; 57
    160c:	0b b6       	in	r0, 0x3b	; 59
    160e:	0f 92       	push	r0
    1610:	1b be       	out	0x3b, r1	; 59
    1612:	2f 93       	push	r18
    1614:	3f 93       	push	r19
    1616:	4f 93       	push	r20
    1618:	5f 93       	push	r21
    161a:	6f 93       	push	r22
    161c:	7f 93       	push	r23
    161e:	8f 93       	push	r24
    1620:	9f 93       	push	r25
    1622:	af 93       	push	r26
    1624:	bf 93       	push	r27
    1626:	ef 93       	push	r30
    1628:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    162a:	e0 91 23 20 	lds	r30, 0x2023	; 0x802023 <tc_tce1_err_callback>
    162e:	f0 91 24 20 	lds	r31, 0x2024	; 0x802024 <tc_tce1_err_callback+0x1>
    1632:	30 97       	sbiw	r30, 0x00	; 0
    1634:	09 f0       	breq	.+2      	; 0x1638 <__vector_54+0x42>
		tc_tce1_err_callback();
    1636:	19 95       	eicall
	}
}
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	bf 91       	pop	r27
    163e:	af 91       	pop	r26
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	7f 91       	pop	r23
    1646:	6f 91       	pop	r22
    1648:	5f 91       	pop	r21
    164a:	4f 91       	pop	r20
    164c:	3f 91       	pop	r19
    164e:	2f 91       	pop	r18
    1650:	0f 90       	pop	r0
    1652:	0b be       	out	0x3b, r0	; 59
    1654:	0f 90       	pop	r0
    1656:	09 be       	out	0x39, r0	; 57
    1658:	0f 90       	pop	r0
    165a:	08 be       	out	0x38, r0	; 56
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	08 b6       	in	r0, 0x38	; 56
    1672:	0f 92       	push	r0
    1674:	18 be       	out	0x38, r1	; 56
    1676:	09 b6       	in	r0, 0x39	; 57
    1678:	0f 92       	push	r0
    167a:	19 be       	out	0x39, r1	; 57
    167c:	0b b6       	in	r0, 0x3b	; 59
    167e:	0f 92       	push	r0
    1680:	1b be       	out	0x3b, r1	; 59
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    169a:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <tc_tce1_cca_callback>
    169e:	f0 91 22 20 	lds	r31, 0x2022	; 0x802022 <tc_tce1_cca_callback+0x1>
    16a2:	30 97       	sbiw	r30, 0x00	; 0
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <__vector_55+0x42>
		tc_tce1_cca_callback();
    16a6:	19 95       	eicall
	}
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0b be       	out	0x3b, r0	; 59
    16c4:	0f 90       	pop	r0
    16c6:	09 be       	out	0x39, r0	; 57
    16c8:	0f 90       	pop	r0
    16ca:	08 be       	out	0x38, r0	; 56
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	08 b6       	in	r0, 0x38	; 56
    16e2:	0f 92       	push	r0
    16e4:	18 be       	out	0x38, r1	; 56
    16e6:	09 b6       	in	r0, 0x39	; 57
    16e8:	0f 92       	push	r0
    16ea:	19 be       	out	0x39, r1	; 57
    16ec:	0b b6       	in	r0, 0x3b	; 59
    16ee:	0f 92       	push	r0
    16f0:	1b be       	out	0x3b, r1	; 59
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    170a:	e0 91 1f 20 	lds	r30, 0x201F	; 0x80201f <tc_tce1_ccb_callback>
    170e:	f0 91 20 20 	lds	r31, 0x2020	; 0x802020 <tc_tce1_ccb_callback+0x1>
    1712:	30 97       	sbiw	r30, 0x00	; 0
    1714:	09 f0       	breq	.+2      	; 0x1718 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1716:	19 95       	eicall
	}
}
    1718:	ff 91       	pop	r31
    171a:	ef 91       	pop	r30
    171c:	bf 91       	pop	r27
    171e:	af 91       	pop	r26
    1720:	9f 91       	pop	r25
    1722:	8f 91       	pop	r24
    1724:	7f 91       	pop	r23
    1726:	6f 91       	pop	r22
    1728:	5f 91       	pop	r21
    172a:	4f 91       	pop	r20
    172c:	3f 91       	pop	r19
    172e:	2f 91       	pop	r18
    1730:	0f 90       	pop	r0
    1732:	0b be       	out	0x3b, r0	; 59
    1734:	0f 90       	pop	r0
    1736:	09 be       	out	0x39, r0	; 57
    1738:	0f 90       	pop	r0
    173a:	08 be       	out	0x38, r0	; 56
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	08 b6       	in	r0, 0x38	; 56
    1752:	0f 92       	push	r0
    1754:	18 be       	out	0x38, r1	; 56
    1756:	09 b6       	in	r0, 0x39	; 57
    1758:	0f 92       	push	r0
    175a:	19 be       	out	0x39, r1	; 57
    175c:	0b b6       	in	r0, 0x3b	; 59
    175e:	0f 92       	push	r0
    1760:	1b be       	out	0x3b, r1	; 59
    1762:	2f 93       	push	r18
    1764:	3f 93       	push	r19
    1766:	4f 93       	push	r20
    1768:	5f 93       	push	r21
    176a:	6f 93       	push	r22
    176c:	7f 93       	push	r23
    176e:	8f 93       	push	r24
    1770:	9f 93       	push	r25
    1772:	af 93       	push	r26
    1774:	bf 93       	push	r27
    1776:	ef 93       	push	r30
    1778:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    177a:	e0 91 1d 20 	lds	r30, 0x201D	; 0x80201d <tc_tcf0_ovf_callback>
    177e:	f0 91 1e 20 	lds	r31, 0x201E	; 0x80201e <tc_tcf0_ovf_callback+0x1>
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	09 f0       	breq	.+2      	; 0x1788 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    1786:	19 95       	eicall
	}
}
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0b be       	out	0x3b, r0	; 59
    17a4:	0f 90       	pop	r0
    17a6:	09 be       	out	0x39, r0	; 57
    17a8:	0f 90       	pop	r0
    17aa:	08 be       	out	0x38, r0	; 56
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	0f 90       	pop	r0
    17b2:	1f 90       	pop	r1
    17b4:	18 95       	reti

000017b6 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    17b6:	1f 92       	push	r1
    17b8:	0f 92       	push	r0
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	0f 92       	push	r0
    17be:	11 24       	eor	r1, r1
    17c0:	08 b6       	in	r0, 0x38	; 56
    17c2:	0f 92       	push	r0
    17c4:	18 be       	out	0x38, r1	; 56
    17c6:	09 b6       	in	r0, 0x39	; 57
    17c8:	0f 92       	push	r0
    17ca:	19 be       	out	0x39, r1	; 57
    17cc:	0b b6       	in	r0, 0x3b	; 59
    17ce:	0f 92       	push	r0
    17d0:	1b be       	out	0x3b, r1	; 59
    17d2:	2f 93       	push	r18
    17d4:	3f 93       	push	r19
    17d6:	4f 93       	push	r20
    17d8:	5f 93       	push	r21
    17da:	6f 93       	push	r22
    17dc:	7f 93       	push	r23
    17de:	8f 93       	push	r24
    17e0:	9f 93       	push	r25
    17e2:	af 93       	push	r26
    17e4:	bf 93       	push	r27
    17e6:	ef 93       	push	r30
    17e8:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    17ea:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <tc_tcf0_err_callback>
    17ee:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <tc_tcf0_err_callback+0x1>
    17f2:	30 97       	sbiw	r30, 0x00	; 0
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <__vector_109+0x42>
		tc_tcf0_err_callback();
    17f6:	19 95       	eicall
	}
}
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0b be       	out	0x3b, r0	; 59
    1814:	0f 90       	pop	r0
    1816:	09 be       	out	0x39, r0	; 57
    1818:	0f 90       	pop	r0
    181a:	08 be       	out	0x38, r0	; 56
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	08 b6       	in	r0, 0x38	; 56
    1832:	0f 92       	push	r0
    1834:	18 be       	out	0x38, r1	; 56
    1836:	09 b6       	in	r0, 0x39	; 57
    1838:	0f 92       	push	r0
    183a:	19 be       	out	0x39, r1	; 57
    183c:	0b b6       	in	r0, 0x3b	; 59
    183e:	0f 92       	push	r0
    1840:	1b be       	out	0x3b, r1	; 59
    1842:	2f 93       	push	r18
    1844:	3f 93       	push	r19
    1846:	4f 93       	push	r20
    1848:	5f 93       	push	r21
    184a:	6f 93       	push	r22
    184c:	7f 93       	push	r23
    184e:	8f 93       	push	r24
    1850:	9f 93       	push	r25
    1852:	af 93       	push	r26
    1854:	bf 93       	push	r27
    1856:	ef 93       	push	r30
    1858:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    185a:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <tc_tcf0_cca_callback>
    185e:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <tc_tcf0_cca_callback+0x1>
    1862:	30 97       	sbiw	r30, 0x00	; 0
    1864:	09 f0       	breq	.+2      	; 0x1868 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1866:	19 95       	eicall
	}
}
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0b be       	out	0x3b, r0	; 59
    1884:	0f 90       	pop	r0
    1886:	09 be       	out	0x39, r0	; 57
    1888:	0f 90       	pop	r0
    188a:	08 be       	out	0x38, r0	; 56
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1896:	1f 92       	push	r1
    1898:	0f 92       	push	r0
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	0f 92       	push	r0
    189e:	11 24       	eor	r1, r1
    18a0:	08 b6       	in	r0, 0x38	; 56
    18a2:	0f 92       	push	r0
    18a4:	18 be       	out	0x38, r1	; 56
    18a6:	09 b6       	in	r0, 0x39	; 57
    18a8:	0f 92       	push	r0
    18aa:	19 be       	out	0x39, r1	; 57
    18ac:	0b b6       	in	r0, 0x3b	; 59
    18ae:	0f 92       	push	r0
    18b0:	1b be       	out	0x3b, r1	; 59
    18b2:	2f 93       	push	r18
    18b4:	3f 93       	push	r19
    18b6:	4f 93       	push	r20
    18b8:	5f 93       	push	r21
    18ba:	6f 93       	push	r22
    18bc:	7f 93       	push	r23
    18be:	8f 93       	push	r24
    18c0:	9f 93       	push	r25
    18c2:	af 93       	push	r26
    18c4:	bf 93       	push	r27
    18c6:	ef 93       	push	r30
    18c8:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    18ca:	e0 91 17 20 	lds	r30, 0x2017	; 0x802017 <tc_tcf0_ccb_callback>
    18ce:	f0 91 18 20 	lds	r31, 0x2018	; 0x802018 <tc_tcf0_ccb_callback+0x1>
    18d2:	30 97       	sbiw	r30, 0x00	; 0
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    18d6:	19 95       	eicall
	}
}
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	0b be       	out	0x3b, r0	; 59
    18f4:	0f 90       	pop	r0
    18f6:	09 be       	out	0x39, r0	; 57
    18f8:	0f 90       	pop	r0
    18fa:	08 be       	out	0x38, r0	; 56
    18fc:	0f 90       	pop	r0
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	0f 90       	pop	r0
    1902:	1f 90       	pop	r1
    1904:	18 95       	reti

00001906 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1906:	1f 92       	push	r1
    1908:	0f 92       	push	r0
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	0f 92       	push	r0
    190e:	11 24       	eor	r1, r1
    1910:	08 b6       	in	r0, 0x38	; 56
    1912:	0f 92       	push	r0
    1914:	18 be       	out	0x38, r1	; 56
    1916:	09 b6       	in	r0, 0x39	; 57
    1918:	0f 92       	push	r0
    191a:	19 be       	out	0x39, r1	; 57
    191c:	0b b6       	in	r0, 0x3b	; 59
    191e:	0f 92       	push	r0
    1920:	1b be       	out	0x3b, r1	; 59
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    193a:	e0 91 15 20 	lds	r30, 0x2015	; 0x802015 <tc_tcf0_ccc_callback>
    193e:	f0 91 16 20 	lds	r31, 0x2016	; 0x802016 <tc_tcf0_ccc_callback+0x1>
    1942:	30 97       	sbiw	r30, 0x00	; 0
    1944:	09 f0       	breq	.+2      	; 0x1948 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1946:	19 95       	eicall
	}
}
    1948:	ff 91       	pop	r31
    194a:	ef 91       	pop	r30
    194c:	bf 91       	pop	r27
    194e:	af 91       	pop	r26
    1950:	9f 91       	pop	r25
    1952:	8f 91       	pop	r24
    1954:	7f 91       	pop	r23
    1956:	6f 91       	pop	r22
    1958:	5f 91       	pop	r21
    195a:	4f 91       	pop	r20
    195c:	3f 91       	pop	r19
    195e:	2f 91       	pop	r18
    1960:	0f 90       	pop	r0
    1962:	0b be       	out	0x3b, r0	; 59
    1964:	0f 90       	pop	r0
    1966:	09 be       	out	0x39, r0	; 57
    1968:	0f 90       	pop	r0
    196a:	08 be       	out	0x38, r0	; 56
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f 90       	pop	r0
    1972:	1f 90       	pop	r1
    1974:	18 95       	reti

00001976 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1976:	1f 92       	push	r1
    1978:	0f 92       	push	r0
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	0f 92       	push	r0
    197e:	11 24       	eor	r1, r1
    1980:	08 b6       	in	r0, 0x38	; 56
    1982:	0f 92       	push	r0
    1984:	18 be       	out	0x38, r1	; 56
    1986:	09 b6       	in	r0, 0x39	; 57
    1988:	0f 92       	push	r0
    198a:	19 be       	out	0x39, r1	; 57
    198c:	0b b6       	in	r0, 0x3b	; 59
    198e:	0f 92       	push	r0
    1990:	1b be       	out	0x3b, r1	; 59
    1992:	2f 93       	push	r18
    1994:	3f 93       	push	r19
    1996:	4f 93       	push	r20
    1998:	5f 93       	push	r21
    199a:	6f 93       	push	r22
    199c:	7f 93       	push	r23
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	ef 93       	push	r30
    19a8:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    19aa:	e0 91 13 20 	lds	r30, 0x2013	; 0x802013 <tc_tcf0_ccd_callback>
    19ae:	f0 91 14 20 	lds	r31, 0x2014	; 0x802014 <tc_tcf0_ccd_callback+0x1>
    19b2:	30 97       	sbiw	r30, 0x00	; 0
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    19b6:	19 95       	eicall
	}
}
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	0f 90       	pop	r0
    19d2:	0b be       	out	0x3b, r0	; 59
    19d4:	0f 90       	pop	r0
    19d6:	09 be       	out	0x39, r0	; 57
    19d8:	0f 90       	pop	r0
    19da:	08 be       	out	0x38, r0	; 56
    19dc:	0f 90       	pop	r0
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	0f 90       	pop	r0
    19e2:	1f 90       	pop	r1
    19e4:	18 95       	reti

000019e6 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    19e6:	1f 92       	push	r1
    19e8:	0f 92       	push	r0
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	0f 92       	push	r0
    19ee:	11 24       	eor	r1, r1
    19f0:	08 b6       	in	r0, 0x38	; 56
    19f2:	0f 92       	push	r0
    19f4:	18 be       	out	0x38, r1	; 56
    19f6:	09 b6       	in	r0, 0x39	; 57
    19f8:	0f 92       	push	r0
    19fa:	19 be       	out	0x39, r1	; 57
    19fc:	0b b6       	in	r0, 0x3b	; 59
    19fe:	0f 92       	push	r0
    1a00:	1b be       	out	0x3b, r1	; 59
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
    1a18:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1a1a:	e0 91 11 20 	lds	r30, 0x2011	; 0x802011 <tc_tcf1_ovf_callback>
    1a1e:	f0 91 12 20 	lds	r31, 0x2012	; 0x802012 <tc_tcf1_ovf_callback+0x1>
    1a22:	30 97       	sbiw	r30, 0x00	; 0
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1a26:	19 95       	eicall
	}
}
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0b be       	out	0x3b, r0	; 59
    1a44:	0f 90       	pop	r0
    1a46:	09 be       	out	0x39, r0	; 57
    1a48:	0f 90       	pop	r0
    1a4a:	08 be       	out	0x38, r0	; 56
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	08 b6       	in	r0, 0x38	; 56
    1a62:	0f 92       	push	r0
    1a64:	18 be       	out	0x38, r1	; 56
    1a66:	09 b6       	in	r0, 0x39	; 57
    1a68:	0f 92       	push	r0
    1a6a:	19 be       	out	0x39, r1	; 57
    1a6c:	0b b6       	in	r0, 0x3b	; 59
    1a6e:	0f 92       	push	r0
    1a70:	1b be       	out	0x3b, r1	; 59
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1a8a:	e0 91 0f 20 	lds	r30, 0x200F	; 0x80200f <tc_tcf1_err_callback>
    1a8e:	f0 91 10 20 	lds	r31, 0x2010	; 0x802010 <tc_tcf1_err_callback+0x1>
    1a92:	30 97       	sbiw	r30, 0x00	; 0
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <__vector_115+0x42>
		tc_tcf1_err_callback();
    1a96:	19 95       	eicall
	}
}
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0b be       	out	0x3b, r0	; 59
    1ab4:	0f 90       	pop	r0
    1ab6:	09 be       	out	0x39, r0	; 57
    1ab8:	0f 90       	pop	r0
    1aba:	08 be       	out	0x38, r0	; 56
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	0f 90       	pop	r0
    1ac2:	1f 90       	pop	r1
    1ac4:	18 95       	reti

00001ac6 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1ac6:	1f 92       	push	r1
    1ac8:	0f 92       	push	r0
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	0f 92       	push	r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	08 b6       	in	r0, 0x38	; 56
    1ad2:	0f 92       	push	r0
    1ad4:	18 be       	out	0x38, r1	; 56
    1ad6:	09 b6       	in	r0, 0x39	; 57
    1ad8:	0f 92       	push	r0
    1ada:	19 be       	out	0x39, r1	; 57
    1adc:	0b b6       	in	r0, 0x3b	; 59
    1ade:	0f 92       	push	r0
    1ae0:	1b be       	out	0x3b, r1	; 59
    1ae2:	2f 93       	push	r18
    1ae4:	3f 93       	push	r19
    1ae6:	4f 93       	push	r20
    1ae8:	5f 93       	push	r21
    1aea:	6f 93       	push	r22
    1aec:	7f 93       	push	r23
    1aee:	8f 93       	push	r24
    1af0:	9f 93       	push	r25
    1af2:	af 93       	push	r26
    1af4:	bf 93       	push	r27
    1af6:	ef 93       	push	r30
    1af8:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1afa:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <tc_tcf1_cca_callback>
    1afe:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <tc_tcf1_cca_callback+0x1>
    1b02:	30 97       	sbiw	r30, 0x00	; 0
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1b06:	19 95       	eicall
	}
}
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0b be       	out	0x3b, r0	; 59
    1b24:	0f 90       	pop	r0
    1b26:	09 be       	out	0x39, r0	; 57
    1b28:	0f 90       	pop	r0
    1b2a:	08 be       	out	0x38, r0	; 56
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	08 b6       	in	r0, 0x38	; 56
    1b42:	0f 92       	push	r0
    1b44:	18 be       	out	0x38, r1	; 56
    1b46:	09 b6       	in	r0, 0x39	; 57
    1b48:	0f 92       	push	r0
    1b4a:	19 be       	out	0x39, r1	; 57
    1b4c:	0b b6       	in	r0, 0x3b	; 59
    1b4e:	0f 92       	push	r0
    1b50:	1b be       	out	0x3b, r1	; 59
    1b52:	2f 93       	push	r18
    1b54:	3f 93       	push	r19
    1b56:	4f 93       	push	r20
    1b58:	5f 93       	push	r21
    1b5a:	6f 93       	push	r22
    1b5c:	7f 93       	push	r23
    1b5e:	8f 93       	push	r24
    1b60:	9f 93       	push	r25
    1b62:	af 93       	push	r26
    1b64:	bf 93       	push	r27
    1b66:	ef 93       	push	r30
    1b68:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1b6a:	e0 91 0b 20 	lds	r30, 0x200B	; 0x80200b <tc_tcf1_ccb_callback>
    1b6e:	f0 91 0c 20 	lds	r31, 0x200C	; 0x80200c <tc_tcf1_ccb_callback+0x1>
    1b72:	30 97       	sbiw	r30, 0x00	; 0
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1b76:	19 95       	eicall
	}
}
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	7f 91       	pop	r23
    1b86:	6f 91       	pop	r22
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	0f 90       	pop	r0
    1b92:	0b be       	out	0x3b, r0	; 59
    1b94:	0f 90       	pop	r0
    1b96:	09 be       	out	0x39, r0	; 57
    1b98:	0f 90       	pop	r0
    1b9a:	08 be       	out	0x38, r0	; 56
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1bb0:	c6 2f       	mov	r28, r22
    1bb2:	d0 e0       	ldi	r29, 0x00	; 0
    1bb4:	de 01       	movw	r26, r28
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <ioport_configure_port_pin+0x18>
    1bba:	b5 95       	asr	r27
    1bbc:	a7 95       	ror	r26
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <ioport_configure_port_pin+0x14>
    1bc2:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1bc4:	50 8b       	std	Z+16, r21	; 0x10
    1bc6:	2f 5f       	subi	r18, 0xFF	; 255
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1bcc:	28 30       	cpi	r18, 0x08	; 8
    1bce:	31 05       	cpc	r19, r1
    1bd0:	89 f7       	brne	.-30     	; 0x1bb4 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1bd2:	40 ff       	sbrs	r20, 0
    1bd4:	0a c0       	rjmp	.+20     	; 0x1bea <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1bd6:	41 ff       	sbrs	r20, 1
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1bda:	fc 01       	movw	r30, r24
    1bdc:	65 83       	std	Z+5, r22	; 0x05
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1be0:	fc 01       	movw	r30, r24
    1be2:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1be4:	fc 01       	movw	r30, r24
    1be6:	61 83       	std	Z+1, r22	; 0x01
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1bea:	fc 01       	movw	r30, r24
    1bec:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

00001bf4 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1bf4:	43 e0       	ldi	r20, 0x03	; 3
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	68 e0       	ldi	r22, 0x08	; 8
    1bfa:	80 ec       	ldi	r24, 0xC0	; 192
    1bfc:	97 e0       	ldi	r25, 0x07	; 7
    1bfe:	d3 df       	rcall	.-90     	; 0x1ba6 <ioport_configure_port_pin>
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	58 e1       	ldi	r21, 0x18	; 24
    1c04:	64 e0       	ldi	r22, 0x04	; 4
    1c06:	80 ec       	ldi	r24, 0xC0	; 192
    1c08:	97 e0       	ldi	r25, 0x07	; 7
    1c0a:	cd cf       	rjmp	.-102    	; 0x1ba6 <ioport_configure_port_pin>
    1c0c:	08 95       	ret

00001c0e <main>:
 */
#include <asf.h>

int main (void)
{
	board_init();
    1c0e:	f2 df       	rcall	.-28     	; 0x1bf4 <board_init>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    1c10:	e0 ec       	ldi	r30, 0xC0	; 192
    1c12:	f7 e0       	ldi	r31, 0x07	; 7
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1c14:	98 e0       	ldi	r25, 0x08	; 8

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    1c16:	80 85       	ldd	r24, Z+8	; 0x08
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    1c18:	82 fd       	sbrc	r24, 2
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <main+0x12>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1c1c:	96 83       	std	Z+6, r25	; 0x06
    1c1e:	fb cf       	rjmp	.-10     	; 0x1c16 <main+0x8>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1c20:	95 83       	std	Z+5, r25	; 0x05
    1c22:	f9 cf       	rjmp	.-14     	; 0x1c16 <main+0x8>

00001c24 <_exit>:
    1c24:	f8 94       	cli

00001c26 <__stop_program>:
    1c26:	ff cf       	rjmp	.-2      	; 0x1c26 <__stop_program>
